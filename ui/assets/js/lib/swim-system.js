(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('mapbox-gl')) :
    typeof define === 'function' && define.amd ? define(['exports', 'mapbox-gl'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.mapboxgl));
}(this, function (exports, mapboxgl) { 'use strict';

    function codePointAt(index) {
        var size = this.length;
        index = index ? Number(index) : 0;
        if (index !== index) {
            index = 0;
        }
        if (index >= 0 && index < size) {
            var c1 = this.charCodeAt(index);
            if (c1 <= 0xd7ff || c1 >= 0xe000) {
                return c1;
            }
            else if (c1 <= 0xdbff && index + 1 < size) {
                var c2 = this.charCodeAt(index + 1);
                if (c2 >= 0xdc00 && c2 <= 0xdfff) {
                    return ((c1 & 0x03ff) << 10 + c2 & 0x03ff) + 0x10000;
                }
            }
        }
        return void 0;
    }
    function offsetByCodePoints(index, count) {
        if (count > 0) {
            var size = this.length;
            while (count > 0 && index < size) {
                var c1 = this.charCodeAt(index);
                if (c1 <= 0xd7ff || c1 >= 0xe000) {
                    index += 1;
                }
                else if (c1 <= 0xdbff && index + 1 < size) {
                    var c2 = this.charCodeAt(index + 1);
                    if (c2 >= 0xdc00 && c2 <= 0xdfff) {
                        index += 2;
                    }
                    else {
                        index += 1;
                    }
                }
                else {
                    index += 1;
                }
                count -= 1;
            }
        }
        else if (count < 0) {
            while (count < 0 && index > 0) {
                var c2 = this.charCodeAt(index - 1);
                if (c2 <= 0xd7ff || c2 >= 0xe000) {
                    index -= 1;
                }
                else if (c2 >= 0xdc00 && c2 <= 0xdfff && index - 1 > 0) {
                    var c1 = this.charCodeAt(index - 2);
                    if (c1 >= 0xd800 && c1 <= 0xdfff) {
                        index -= 2;
                    }
                    else {
                        index -= 1;
                    }
                }
                else {
                    index -= 1;
                }
                count -= 1;
            }
        }
        return index;
    }
    if (!String.prototype.codePointAt) {
        Object.defineProperty(String.prototype, "codePointAt", {
            value: codePointAt,
            configurable: true,
            writable: true,
        });
    }
    if (!String.prototype.offsetByCodePoints) {
        Object.defineProperty(String.prototype, "offsetByCodePoints", {
            value: offsetByCodePoints,
            configurable: true,
            writable: true,
        });
    }

    (function (ByteOrder) {
        ByteOrder["BigEndian"] = "BE";
        ByteOrder["LittleEndian"] = "LE";
    })(exports.ByteOrder || (exports.ByteOrder = {}));
    function nativeOrder() {
        var bom = new ArrayBuffer(2);
        new Uint16Array(bom)[0] = 0xfeff;
        var b = new Uint8Array(bom);
        if (b[0] === 0xfe && b[1] === 0xff) {
            return "BE";
        }
        else if (b[0] === 0xff && b[1] === 0xfe) {
            return "LE";
        }
        else {
            throw new Error();
        }
    }
    var NativeOrder = nativeOrder();

    var crypto = (typeof window !== "undefined" &&
        (window.crypto || window.msCrypto));
    function fillBytesCrypto(typedArray) {
        crypto.getRandomValues(typedArray);
    }
    function fillBytesMath(typedArray) {
        if (typedArray instanceof Int8Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = 128 - Math.round(Math.random() * 256);
            }
        }
        else if (typedArray instanceof Uint8Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = Math.round(Math.random() * 256);
            }
        }
        else if (typedArray instanceof Int16Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = 32768 - Math.round(Math.random() * 65536);
            }
        }
        else if (typedArray instanceof Uint16Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = Math.round(Math.random() * 65536);
            }
        }
        else if (typedArray instanceof Int32Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = 2147483648 - Math.round(Math.random() * 4294967296);
            }
        }
        else if (typedArray instanceof Uint32Array) {
            for (var i = 0; i < typedArray.length; i += 1) {
                typedArray[i] = Math.round(Math.random() * 4294967296);
            }
        }
        else {
            throw new TypeError("" + typedArray);
        }
    }
    var Random = (function () {
        function Random() {
        }
        Random.fillBytes = crypto ? fillBytesCrypto : fillBytesMath;
        return Random;
    }());

    var hashArrayBuffer = new ArrayBuffer(8);
    var hashFloat64Array = new Float64Array(hashArrayBuffer);
    var hashInt32Array = new Int32Array(hashArrayBuffer);
    function rotl(value, distance) {
        return (value << distance) | (value >>> (32 - distance));
    }
    var Murmur3 = (function () {
        function Murmur3() {
        }
        Murmur3.seed = function (value) {
            if (typeof value === "object" && value) {
                if (value.constructor && typeof value.constructor.name === "string") {
                    value = value.constructor.name;
                }
                else {
                    value = value.toString();
                }
            }
            return Murmur3.hash(value);
        };
        Murmur3.hash = function (value) {
            if (value instanceof Uint8Array || typeof value === "string") {
                return Murmur3.mash(Murmur3.mix(0, value));
            }
            else if (typeof value === "number") {
                if (~~value === value) {
                    return ~~value;
                }
                hashFloat64Array[0] = value;
                return hashInt32Array[0] ^ hashInt32Array[1];
            }
            else if (typeof value === "boolean") {
                return value ? 3 : 2;
            }
            else if (value === null) {
                return 1;
            }
            else if (value === undefined) {
                return 0;
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Murmur3.mixUint8ArrayBE = function (code, array) {
            var offset = 0;
            var limit = array.length;
            while (offset + 3 < limit) {
                var word = (array[offset] & 0xff) << 24 | (array[offset + 1] & 0xff) << 16
                    | (array[offset + 2] & 0xff) << 8 | array[offset + 3] & 0xff;
                code = Murmur3.mix(code, word);
                offset += 4;
            }
            if (offset < limit) {
                var word = (array[offset] & 0xff) << 24;
                if (offset + 1 < limit) {
                    word |= (array[offset + 1] & 0xff) << 16;
                    if (offset + 2 < limit) {
                        word |= (array[offset + 2] & 0xff) << 8;
                    }
                }
                word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
                word = rotl(word, 15);
                word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
                code ^= word;
            }
            return code ^ limit;
        };
        Murmur3.mixUInt8ArrayLE = function (code, array) {
            var offset = 0;
            var limit = array.length;
            while (offset + 3 < limit) {
                var word = array[offset] & 0xff | (array[offset + 1] & 0xff) << 8
                    | (array[offset + 2] & 0xff) << 16 | (array[offset + 3] & 0xff) << 24;
                code = Murmur3.mix(code, word);
                offset += 4;
            }
            if (offset < limit) {
                var word = array[offset] & 0xff;
                if (offset + 1 < limit) {
                    word |= (array[offset + 1] & 0xff) << 8;
                    if (offset + 2 < limit) {
                        word |= (array[offset + 2] & 0xff) << 16;
                    }
                }
                word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
                word = rotl(word, 15);
                word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
                code ^= word;
            }
            return code ^ limit;
        };
        Murmur3.mixStringBE = function (code, string) {
            var word = 0;
            var k = 32;
            var i = 0;
            var n = string.length;
            var utf8Length = 0;
            while (i < n) {
                var c = string.codePointAt(i);
                if (c === void 0) {
                    c = string.charCodeAt(i);
                }
                if (c >= 0 && c <= 0x7f) {
                    k -= 8;
                    word |= c << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    utf8Length += 1;
                }
                else if (c >= 0x80 && c <= 0x7ff) {
                    k -= 8;
                    word |= (0xc0 | (c >>> 6)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | (c & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    utf8Length += 2;
                }
                else if (c >= 0x0800 && c <= 0xffff ||
                    c >= 0xe000 && c <= 0xffff) {
                    k -= 8;
                    word |= (0xe0 | (c >>> 12)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | (c & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    utf8Length += 3;
                }
                else if (c >= 0x10000 && c <= 0x10ffff) {
                    k -= 8;
                    word |= (0xf0 | (c >>> 18)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | ((c >>> 12) & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= (0x80 | (c & 0x3f)) << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    utf8Length += 4;
                }
                else {
                    k -= 8;
                    word |= 0xef << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= 0xbf << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    k -= 8;
                    word |= 0xbd << k;
                    if (k === 0) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 32;
                    }
                    utf8Length += 3;
                }
                i = string.offsetByCodePoints(i, 1);
            }
            if (k !== 32) {
                word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
                word = rotl(word, 15);
                word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
                code ^= word;
            }
            return code ^ utf8Length;
        };
        Murmur3.mixStringLE = function (code, string) {
            var word = 0;
            var k = 0;
            var i = 0;
            var n = string.length;
            var utf8Length = 0;
            while (i < n) {
                var c = string.codePointAt(i);
                if (c === void 0) {
                    c = string.charCodeAt(i);
                }
                if (c >= 0 && c <= 0x7f) {
                    word |= c << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    utf8Length += 1;
                }
                else if (c >= 0x80 && c <= 0x7ff) {
                    word |= (0xc0 | (c >>> 6)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | (c & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    utf8Length += 2;
                }
                else if (c >= 0x0800 && c <= 0xffff ||
                    c >= 0xe000 && c <= 0xffff) {
                    word |= (0xe0 | (c >>> 12)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | (c & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    utf8Length += 3;
                }
                else if (c >= 0x10000 && c <= 0x10ffff) {
                    word |= (0xf0 | (c >>> 18)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | ((c >>> 12) & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= (0x80 | (c & 0x3f)) << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    utf8Length += 4;
                }
                else {
                    word |= 0xef << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= 0xbf << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    word |= 0xbd << k;
                    k += 8;
                    if (k === 32) {
                        code = Murmur3.mix(code, word);
                        word = 0;
                        k = 0;
                    }
                    utf8Length += 3;
                }
                i = string.offsetByCodePoints(i, 1);
            }
            if (k !== 32) {
                word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
                word = rotl(word, 15);
                word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
                code ^= word;
            }
            return code ^ utf8Length;
        };
        Murmur3.mix = function (code, value) {
            if (typeof value === "number") {
                value = ((value & 0xffff) * 0xcc9e2d51) + (((value >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
                value = rotl(value, 15);
                value = ((value & 0xffff) * 0x1b873593) + (((value >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
                code ^= value;
                code = rotl(code, 13);
                code = ((code & 0xffff) * 5) + (((code >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
                code = ((code & 0xffff) + 0x6b64) + (((code >>> 16) + 0xe654 & 0xffff) << 16);
                return code;
            }
            else if (typeof value === "string") {
                if (NativeOrder === "BE") {
                    return Murmur3.mixStringBE(code, value);
                }
                else if (NativeOrder === "LE") {
                    return Murmur3.mixStringLE(code, value);
                }
            }
            else if (value instanceof Uint8Array) {
                if (NativeOrder === "BE") {
                    return Murmur3.mixUint8ArrayBE(code, value);
                }
                else if (NativeOrder === "LE") {
                    return Murmur3.mixUInt8ArrayLE(code, value);
                }
            }
            throw new TypeError("" + value);
        };
        Murmur3.mash = function (code) {
            code ^= code >>> 16;
            code = ((code & 0xffff) * 0x85ebca6b) + (((code >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
            code ^= code >>> 13;
            code = ((code & 0xffff) * 0xc2b2ae35) + (((code >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
            code ^= code >>> 16;
            return code >>> 0;
        };
        return Murmur3;
    }());

    var Objects = (function () {
        function Objects() {
        }
        Objects.compare = function (x, y) {
            if (x instanceof Date) {
                x = x.getTime();
            }
            if (y instanceof Date) {
                y = y.getTime();
            }
            if (x === void 0) {
                if (y === void 0) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else if (x === null) {
                if (y === void 0) {
                    return -1;
                }
                else if (y === null) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else if (typeof x === "number") {
                if (y === void 0 || y === null) {
                    return -1;
                }
                else if (typeof y === "number") {
                    return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;
                }
                else {
                    return 1;
                }
            }
            else if (typeof x === "string") {
                if (y === void 0 || y === null || typeof y === "number") {
                    return -1;
                }
                else if (typeof y === "string") {
                    return x < y ? -1 : x > y ? 1 : 0;
                }
                else {
                    return 1;
                }
            }
            else if (typeof x === "object" && typeof x.compareTo === "function") {
                var order = x.compareTo(y);
                return order < 0 ? -1 : order > 0 ? 1 : 0;
            }
            else if (Array.isArray(x)) {
                if (y === void 0 || y === null || typeof y === "number" || typeof y === "string") {
                    return -1;
                }
                else if (Array.isArray(y)) {
                    return Objects.compareArray(x, y);
                }
                else {
                    return 1;
                }
            }
            else {
                if (y === void 0 || y === null || typeof y === "number" || typeof y === "string" || Array.isArray(y)) {
                    return -1;
                }
                else {
                    return Objects.compareObject(x, y);
                }
            }
        };
        Objects.compareArray = function (x, y) {
            var p = x.length;
            var q = y.length;
            var order = 0;
            for (var i = 0, n = Math.min(p, q); i < n && order === 0; i += 1) {
                order = Objects.compare(x[i], y[i]);
            }
            return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
        };
        Objects.compareObject = function (x, y) {
            var xKeys = Object.keys(x);
            var yKeys = Object.keys(y);
            var p = xKeys.length;
            var q = yKeys.length;
            var n = Math.min(p, q);
            var order = 0;
            for (var i = 0; i < n && order === 0; i += 1) {
                var xKey = xKeys[i];
                var yKey = yKeys[i];
                order = Objects.compare(xKey, yKey);
                if (order === 0) {
                    order = Objects.compare(x[xKey], y[yKey]);
                }
            }
            return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
        };
        Objects.equal = function (x, y) {
            if (x instanceof Date) {
                x = x.getTime();
            }
            if (y instanceof Date) {
                y = y.getTime();
            }
            if (x === y) {
                return true;
            }
            else if (typeof x === "number") {
                if (typeof y === "number") {
                    return isNaN(x) && isNaN(y);
                }
            }
            else if (typeof x === "object" && x && typeof x.equals === "function") {
                return x.equals(y);
            }
            else if (Array.isArray(x)) {
                if (Array.isArray(y)) {
                    return Objects.equalArray(x, y);
                }
            }
            else if (typeof x === "object" && x) {
                if (typeof y === "object" && y) {
                    return Objects.equalObject(x, y);
                }
            }
            return false;
        };
        Objects.equalArray = function (x, y) {
            var n = x.length;
            if (n !== y.length) {
                return false;
            }
            for (var i = 0; i < n; i += 1) {
                if (!Objects.equal(x[i], y[i])) {
                    return false;
                }
            }
            return true;
        };
        Objects.equalObject = function (x, y) {
            var xKeys = Object.keys(x);
            var yKeys = Object.keys(y);
            var n = xKeys.length;
            if (n !== yKeys.length) {
                return false;
            }
            for (var i = 0; i < n; i += 1) {
                var key = xKeys[i];
                if (key !== yKeys[i] || !Objects.equal(x[key], y[key])) {
                    return false;
                }
            }
            return true;
        };
        Objects.hash = function (x) {
            if (x === void 0 || x === null || typeof x === "boolean"
                || typeof x === "number" || typeof x === "string") {
                return Murmur3.hash(x);
            }
            else if (typeof x === "object" && typeof x.hashCode === "function") {
                return x.hashCode();
            }
            else if (Array.isArray(x)) {
                return Objects.hashArray(x);
            }
            else if (typeof x === "object") {
                return Objects.hashObject(x);
            }
            else {
                throw new TypeError("" + x);
            }
        };
        Objects.hashArray = function (x) {
            var h = 0;
            var n = x.length;
            for (var i = 0; i < n; i += 1) {
                h = Murmur3.mix(h, Objects.hash(x[i]));
            }
            return Murmur3.mash(h);
        };
        Objects.hashObject = function (x) {
            var h = 0;
            var keys = Object.keys(x);
            var n = keys.length;
            for (var i = 0; i < n; i += 1) {
                var key = keys[i];
                h = Murmur3.mix(Murmur3.mix(h, Murmur3.hash(key)), x[key]);
            }
            return Murmur3.mash(h);
        };
        return Objects;
    }());

    var FromAny = {
        is: function (object) {
            if (typeof object === "object" && object || typeof object === "function") {
                return typeof object.fromAny === "function";
            }
            return false;
        },
    };
    var ToAny = {
        is: function (object) {
            if (typeof object === "object" && object) {
                return typeof object.toAny === "function";
            }
            return false;
        },
    };

    var Cursor = (function () {
        function Cursor() {
        }
        Cursor.prototype.set = function (newValue) {
            throw new Error("immutable");
        };
        Cursor.prototype.delete = function () {
            throw new Error("immutable");
        };
        Cursor.empty = function () {
            if (!Cursor._empty) {
                Cursor._empty = new Cursor.Empty();
            }
            return Cursor._empty;
        };
        Cursor.unary = function (value) {
            return new Cursor.Unary(value);
        };
        Cursor.array = function (array, index, limit) {
            if (index === void 0) { index = 0; }
            if (limit === void 0) { limit = array.length; }
            return new Cursor.Array(array, index, limit);
        };
        return Cursor;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    var CursorEmpty = (function (_super) {
        __extends(CursorEmpty, _super);
        function CursorEmpty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CursorEmpty.prototype.isEmpty = function () {
            return true;
        };
        CursorEmpty.prototype.head = function () {
            throw new Error("empty");
        };
        CursorEmpty.prototype.step = function () {
            throw new Error("empty");
        };
        CursorEmpty.prototype.skip = function (count) {
        };
        CursorEmpty.prototype.hasNext = function () {
            return false;
        };
        CursorEmpty.prototype.nextIndex = function () {
            return 0;
        };
        CursorEmpty.prototype.next = function () {
            return { done: true };
        };
        CursorEmpty.prototype.hasPrevious = function () {
            return false;
        };
        CursorEmpty.prototype.previousIndex = function () {
            return -1;
        };
        CursorEmpty.prototype.previous = function () {
            return { done: true };
        };
        return CursorEmpty;
    }(Cursor));
    Cursor.Empty = CursorEmpty;

    var CursorUnary = (function (_super) {
        __extends(CursorUnary, _super);
        function CursorUnary(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._index = 0;
            return _this;
        }
        CursorUnary.prototype.isEmpty = function () {
            return this._index !== 0;
        };
        CursorUnary.prototype.head = function () {
            if (this._index === 0) {
                return this._value;
            }
            else {
                throw new Error("empty");
            }
        };
        CursorUnary.prototype.step = function () {
            if (this._index === 0) {
                this._index = 1;
            }
            else {
                throw new Error("empty");
            }
        };
        CursorUnary.prototype.skip = function (count) {
            this._index = Math.min(Math.max(0, this._index + count), 1);
        };
        CursorUnary.prototype.hasNext = function () {
            return this._index === 0;
        };
        CursorUnary.prototype.nextIndex = function () {
            return this._index;
        };
        CursorUnary.prototype.next = function () {
            if (this._index === 0) {
                this._index = 1;
                return { value: this._value, done: true };
            }
            else {
                return { done: true };
            }
        };
        CursorUnary.prototype.hasPrevious = function () {
            return this._index === 1;
        };
        CursorUnary.prototype.previousIndex = function () {
            return this._index - 1;
        };
        CursorUnary.prototype.previous = function () {
            if (this._index === 1) {
                this._index = 0;
                return { value: this._value, done: true };
            }
            else {
                return { done: true };
            }
        };
        return CursorUnary;
    }(Cursor));
    Cursor.Unary = CursorUnary;

    var CursorArray = (function (_super) {
        __extends(CursorArray, _super);
        function CursorArray(array, index, limit) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._index = index;
            _this._limit = limit;
            return _this;
        }
        CursorArray.prototype.isEmpty = function () {
            return this._index >= this._limit;
        };
        CursorArray.prototype.head = function () {
            if (this._index < this._limit) {
                return this._array[this._index];
            }
            else {
                throw new Error("empty");
            }
        };
        CursorArray.prototype.step = function () {
            if (this._index < this._limit) {
                this._index = 1;
            }
            else {
                throw new Error("empty");
            }
        };
        CursorArray.prototype.skip = function (count) {
            this._index = Math.min(this._index + count, this._limit);
        };
        CursorArray.prototype.hasNext = function () {
            return this._index < this._limit;
        };
        CursorArray.prototype.nextIndex = function () {
            return this._index;
        };
        CursorArray.prototype.next = function () {
            var index = this._index;
            if (index < this._limit) {
                this._index = index + 1;
                return { value: this._array[index], done: this._index === this._limit };
            }
            else {
                this._index = this._limit;
                return { done: true };
            }
        };
        CursorArray.prototype.hasPrevious = function () {
            return this._index > 0;
        };
        CursorArray.prototype.previousIndex = function () {
            return this._index - 1;
        };
        CursorArray.prototype.previous = function () {
            var index = this._index - 1;
            if (index >= 0) {
                this._index = index;
                return { value: this._array[index], done: index === 0 };
            }
            else {
                this._index = 0;
                return { done: true };
            }
        };
        return CursorArray;
    }(Cursor));
    Cursor.Array = CursorArray;

    var AssertException = (function (_super) {
        __extends(AssertException, _super);
        function AssertException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = AssertException.prototype;
            return _this;
        }
        return AssertException;
    }(Error));

    var assert = function (condition, message) {
        if (!condition) {
            throw new AssertException(message);
        }
    };
    assert.ok = function (condition, message) {
        if (!condition) {
            throw new AssertException(message);
        }
    };
    assert.notOk = function (condition, message) {
        if (condition) {
            throw new AssertException(message);
        }
    };
    assert.equal = function (lhs, rhs, message) {
        if (!Objects.equal(lhs, rhs)) {
            throw new AssertException(message);
        }
    };
    assert.notEqual = function (lhs, rhs, message) {
        if (Objects.equal(lhs, rhs)) {
            throw new AssertException(message);
        }
    };
    assert.identity = function (lhs, rhs, message) {
        if (lhs !== rhs) {
            throw new AssertException(message);
        }
    };
    assert.notIdentity = function (lhs, rhs, message) {
        if (lhs === rhs) {
            throw new AssertException(message);
        }
    };
    assert.compareLessThan = function (lhs, rhs, message) {
        if (!(Objects.compare(lhs, rhs) < 0)) {
            throw new AssertException(message);
        }
    };
    assert.compareNotLessThan = function (lhs, rhs, message) {
        if (Objects.compare(lhs, rhs) < 0) {
            throw new AssertException(message);
        }
    };
    assert.compareLessThanOrEqual = function (lhs, rhs, message) {
        if (!(Objects.compare(lhs, rhs) <= 0)) {
            throw new AssertException(message);
        }
    };
    assert.compareNotLessThanOrEqual = function (lhs, rhs, message) {
        if (Objects.compare(lhs, rhs) <= 0) {
            throw new AssertException(message);
        }
    };
    assert.compareEqual = function (lhs, rhs, message) {
        if (!(Objects.compare(lhs, rhs) === 0)) {
            throw new AssertException(message);
        }
    };
    assert.compareNotEqual = function (lhs, rhs, message) {
        if (Objects.compare(lhs, rhs) === 0) {
            throw new AssertException(message);
        }
    };
    assert.compareGreaterThanOrEqual = function (lhs, rhs, message) {
        if (!(Objects.compare(lhs, rhs) >= 0)) {
            throw new AssertException(message);
        }
    };
    assert.compareNotGreaterThanOrEqual = function (lhs, rhs, message) {
        if (Objects.compare(lhs, rhs) >= 0) {
            throw new AssertException(message);
        }
    };
    assert.compareGreaterThan = function (lhs, rhs, message) {
        if (!(Objects.compare(lhs, rhs) > 0)) {
            throw new AssertException(message);
        }
    };
    assert.compareNotGreaterThan = function (lhs, rhs, message) {
        if (Objects.compare(lhs, rhs) > 0) {
            throw new AssertException(message);
        }
    };

    var Severity = (function () {
        function Severity(level, label) {
            this._level = level;
            this._label = label;
        }
        Severity.prototype.level = function () {
            return this._level;
        };
        Severity.prototype.label = function (label) {
            if (label === void 0) {
                return this._label;
            }
            else {
                return Severity.create(this._level, label);
            }
        };
        Severity.prototype.isTrace = function () {
            return this._level === Severity.TRACE_LEVEL;
        };
        Severity.prototype.isDebug = function () {
            return this._level === Severity.DEBUG_LEVEL;
        };
        Severity.prototype.isInfo = function () {
            return this._level === Severity.INFO_LEVEL;
        };
        Severity.prototype.isNote = function () {
            return this._level === Severity.NOTE_LEVEL;
        };
        Severity.prototype.isWarning = function () {
            return this._level === Severity.WARNING_LEVEL;
        };
        Severity.prototype.isError = function () {
            return this._level === Severity.ERROR_LEVEL;
        };
        Severity.prototype.isAlert = function () {
            return this._level === Severity.ALERT_LEVEL;
        };
        Severity.prototype.isFatal = function () {
            return this._level === Severity.FATAL_LEVEL;
        };
        Severity.prototype.compareTo = function (that) {
            if (this === that) {
                return 0;
            }
            else if (this._level < that._level) {
                return -1;
            }
            else if (this._level > that._level) {
                return 1;
            }
            else {
                return this._label.localeCompare(that._label);
            }
        };
        Severity.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Severity) {
                return this._level === that._level && this._label === that._label;
            }
            return false;
        };
        Severity.prototype.hashCode = function () {
            if (Severity._hashSeed === void 0) {
                Severity._hashSeed = Murmur3.seed(Severity);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Severity._hashSeed, this._level), Murmur3.hash(this._label)));
        };
        Severity.prototype.toString = function () {
            return this._label;
        };
        Severity.create = function (level, label) {
            switch (level) {
                case Severity.TRACE_LEVEL: return Severity.trace(label);
                case Severity.DEBUG_LEVEL: return Severity.debug(label);
                case Severity.INFO_LEVEL: return Severity.info(label);
                case Severity.NOTE_LEVEL: return Severity.note(label);
                case Severity.WARNING_LEVEL: return Severity.warning(label);
                case Severity.ERROR_LEVEL: return Severity.error(label);
                case Severity.ALERT_LEVEL: return Severity.alert(label);
                case Severity.FATAL_LEVEL: return Severity.fatal(label);
                default: throw new Error("" + level);
            }
        };
        Severity.trace = function (label) {
            if (label === void 0) { label = "trace"; }
            if (label === "trace") {
                if (!Severity._trace) {
                    Severity._trace = new Severity(Severity.TRACE_LEVEL, label);
                }
                return Severity._trace;
            }
            else {
                return new Severity(Severity.TRACE_LEVEL, label);
            }
        };
        Severity.debug = function (label) {
            if (label === void 0) { label = "debug"; }
            if (label === "debug") {
                if (!Severity._debug) {
                    Severity._debug = new Severity(Severity.DEBUG_LEVEL, label);
                }
                return Severity._debug;
            }
            else {
                return new Severity(Severity.DEBUG_LEVEL, label);
            }
        };
        Severity.info = function (label) {
            if (label === void 0) { label = "info"; }
            if (label === "info") {
                if (!Severity._info) {
                    Severity._info = new Severity(Severity.INFO_LEVEL, label);
                }
                return Severity._info;
            }
            else {
                return new Severity(Severity.INFO_LEVEL, label);
            }
        };
        Severity.note = function (label) {
            if (label === void 0) { label = "note"; }
            if (label === "note") {
                if (!Severity._note) {
                    Severity._note = new Severity(Severity.NOTE_LEVEL, label);
                }
                return Severity._note;
            }
            else {
                return new Severity(Severity.NOTE_LEVEL, label);
            }
        };
        Severity.warning = function (label) {
            if (label === void 0) { label = "warning"; }
            if (label === "warning") {
                if (!Severity._warning) {
                    Severity._warning = new Severity(Severity.WARNING_LEVEL, label);
                }
                return Severity._warning;
            }
            else {
                return new Severity(Severity.WARNING_LEVEL, label);
            }
        };
        Severity.error = function (label) {
            if (label === void 0) { label = "error"; }
            if (label === "error") {
                if (!Severity._error) {
                    Severity._error = new Severity(Severity.ERROR_LEVEL, label);
                }
                return Severity._error;
            }
            else {
                return new Severity(Severity.ERROR_LEVEL, label);
            }
        };
        Severity.alert = function (label) {
            if (label === void 0) { label = "alert"; }
            if (label === "alert") {
                if (!Severity._alert) {
                    Severity._alert = new Severity(Severity.ALERT_LEVEL, label);
                }
                return Severity._alert;
            }
            else {
                return new Severity(Severity.ALERT_LEVEL, label);
            }
        };
        Severity.fatal = function (label) {
            if (label === void 0) { label = "fatal"; }
            if (label === "fatal") {
                if (!Severity._fatal) {
                    Severity._fatal = new Severity(Severity.FATAL_LEVEL, label);
                }
                return Severity._fatal;
            }
            else {
                return new Severity(Severity.FATAL_LEVEL, label);
            }
        };
        Severity.TRACE_LEVEL = 0;
        Severity.DEBUG_LEVEL = 1;
        Severity.INFO_LEVEL = 2;
        Severity.NOTE_LEVEL = 3;
        Severity.WARNING_LEVEL = 4;
        Severity.ERROR_LEVEL = 5;
        Severity.ALERT_LEVEL = 6;
        Severity.FATAL_LEVEL = 7;
        return Severity;
    }());

    var HashGenCacheMap = (function () {
        function HashGenCacheMap(size) {
            this._buckets = new Array(size);
            this._gen4Hits = 0;
            this._gen3Hits = 0;
            this._gen2Hits = 0;
            this._gen1Hits = 0;
            this._misses = 0;
        }
        HashGenCacheMap.prototype.get = function (key) {
            if (this._buckets.length === 0) {
                return void 0;
            }
            var index = Math.abs(Objects.hash(key)) % this._buckets.length;
            var bucket = this._buckets[index];
            if (!bucket) {
                return void 0;
            }
            var gen4Key = bucket._gen4Key;
            if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
                var gen4Val = bucket._gen4Val;
                if (gen4Val !== void 0) {
                    this._gen4Hits += 1;
                    bucket._gen4Weight++;
                    return gen4Val;
                }
                else {
                    bucket._gen4Key = void 0;
                }
            }
            var gen3Key = bucket._gen3Key;
            if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
                var gen3Val = bucket._gen3Val;
                if (gen3Val !== void 0) {
                    this._gen3Hits += 1;
                    if (bucket._gen3Weight++ > bucket._gen4Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                    }
                    return gen3Val;
                }
                else {
                    bucket._gen3Key = void 0;
                }
            }
            var gen2Key = bucket._gen2Key;
            if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
                var gen2Val = bucket._gen2Val;
                if (gen2Val !== void 0) {
                    this._gen2Hits += 1;
                    if (bucket._gen2Weight++ > bucket._gen3Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                    }
                    return gen2Val;
                }
                else {
                    bucket._gen2Key = void 0;
                }
            }
            var gen1Key = bucket._gen1Key;
            if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
                var gen1Val = bucket._gen1Val;
                if (gen1Val !== void 0) {
                    this._gen1Hits += 1;
                    if (bucket._gen1Weight++ > bucket._gen2Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight);
                    }
                    return gen1Val;
                }
                else {
                    bucket._gen1Key = void 0;
                }
            }
            this._misses += 1;
            return void 0;
        };
        HashGenCacheMap.prototype.put = function (key, value) {
            if (this._buckets.length === 0) {
                return value;
            }
            var index = Math.abs(Objects.hash(key)) % this._buckets.length;
            var bucket = this._buckets[index] || new HashGenCacheMapBucket();
            var gen4Key = bucket._gen4Key;
            if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
                var gen4Val = bucket._gen4Val;
                if (gen4Val !== void 0) {
                    this._gen4Hits += 1;
                    bucket._gen4Weight++;
                    return gen4Val;
                }
                else {
                    bucket._gen4Key = void 0;
                    gen4Key = void 0;
                }
            }
            var gen3Key = bucket._gen3Key;
            if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
                var gen3Val = bucket._gen3Val;
                if (gen3Val !== void 0) {
                    this._gen3Hits += 1;
                    if (bucket._gen3Weight++ > bucket._gen4Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                    }
                    return gen3Val;
                }
                else {
                    bucket._gen3Key = void 0;
                    gen3Key = void 0;
                }
            }
            var gen2Key = bucket._gen2Key;
            if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
                var gen2Val = bucket._gen2Val;
                if (gen2Val !== void 0) {
                    this._gen2Hits += 1;
                    if (bucket._gen2Weight++ > bucket._gen3Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                    }
                    return gen2Val;
                }
                else {
                    bucket._gen2Key = void 0;
                    gen2Key = void 0;
                }
            }
            var gen1Key = bucket._gen1Key;
            if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
                var gen1Val = bucket._gen1Val;
                if (gen1Val !== void 0) {
                    this._gen1Hits += 1;
                    if (bucket._gen1Weight++ > bucket._gen2Weight) {
                        this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight);
                    }
                    return gen1Val;
                }
                else {
                    bucket._gen1Key = void 0;
                    gen1Key = void 0;
                }
            }
            this._misses += 1;
            if (gen4Key === void 0) {
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
            }
            else if (gen3Key === void 0) {
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
            }
            else if (gen2Key === void 0) {
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
            }
            else if (gen1Key === void 0) {
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, key, value, 1);
            }
            else {
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight - 1, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight - 1, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
            }
            return value;
        };
        HashGenCacheMap.prototype.remove = function (key) {
            if (this._buckets.length === 0) {
                return void 0;
            }
            var index = Math.abs(Objects.hash(key)) % this._buckets.length;
            var bucket = this._buckets[index];
            if (!bucket) {
                return void 0;
            }
            var gen4Key = bucket._gen4Key;
            if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
                var gen4Val = bucket._gen4Val;
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
                return gen4Val;
            }
            var gen3Key = bucket._gen3Key;
            if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
                var gen3Val = bucket._gen3Val;
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
                return gen3Val;
            }
            var gen2Key = bucket._gen2Key;
            if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
                var gen2Val = bucket._gen2Val;
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
                return gen2Val;
            }
            var gen1Key = bucket._gen1Key;
            if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
                var gen1Val = bucket._gen1Val;
                this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, void 0, void 0, 0);
                return gen1Val;
            }
            return void 0;
        };
        HashGenCacheMap.prototype.clear = function () {
            for (var i = 0; i < this._buckets.length; i += 1) {
                this._buckets[i] = void 0;
            }
        };
        HashGenCacheMap.prototype.hits = function () {
            return this._gen4Hits + this._gen3Hits + this._gen2Hits + this._gen1Hits;
        };
        HashGenCacheMap.prototype.hitRatio = function () {
            var hits = this.hits();
            return hits / (hits + this._misses);
        };
        return HashGenCacheMap;
    }());
    var HashGenCacheMapBucket = (function () {
        function HashGenCacheMapBucket(gen4Key, gen4Val, gen4Weight, gen3Key, gen3Val, gen3Weight, gen2Key, gen2Val, gen2Weight, gen1Key, gen1Val, gen1Weight) {
            if (gen4Weight === void 0) { gen4Weight = 0; }
            if (gen3Weight === void 0) { gen3Weight = 0; }
            if (gen2Weight === void 0) { gen2Weight = 0; }
            if (gen1Weight === void 0) { gen1Weight = 0; }
            this._gen4Key = gen4Key;
            this._gen4Val = gen4Val;
            this._gen4Weight = gen4Weight;
            this._gen3Key = gen3Key;
            this._gen3Val = gen3Val;
            this._gen3Weight = gen3Weight;
            this._gen2Key = gen2Key;
            this._gen2Val = gen2Val;
            this._gen2Weight = gen2Weight;
            this._gen1Key = gen1Key;
            this._gen1Val = gen1Val;
            this._gen1Weight = gen1Weight;
        }
        return HashGenCacheMapBucket;
    }());

    var HashGenCacheSet = (function () {
        function HashGenCacheSet(size) {
            this._buckets = new Array(size);
            this._gen4Hits = 0;
            this._gen3Hits = 0;
            this._gen2Hits = 0;
            this._gen1Hits = 0;
            this._misses = 0;
        }
        HashGenCacheSet.prototype.put = function (value) {
            if (this._buckets.length === 0) {
                return value;
            }
            var index = Math.abs(Objects.hash(value)) % this._buckets.length;
            var bucket = this._buckets[index] || new HashGenCacheSetBucket();
            var gen4Val = bucket._gen4Val;
            if (gen4Val !== void 0 && Objects.equal(value, gen4Val)) {
                this._gen4Hits += 1;
                bucket._gen4Weight++;
                return gen4Val;
            }
            var gen3Val = bucket._gen3Val;
            if (gen3Val !== void 0 && Objects.equal(value, gen3Val)) {
                this._gen3Hits += 1;
                if (bucket._gen3Weight++ > bucket._gen4Weight) {
                    this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen3Val;
            }
            var gen2Val = bucket._gen2Val;
            if (gen2Val !== void 0 && Objects.equal(value, gen2Val)) {
                this._gen2Hits += 1;
                if (bucket._gen2Weight++ > bucket._gen3Weight) {
                    this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen2Val;
            }
            var gen1Val = bucket._gen1Val;
            if (gen1Val !== void 0 && Objects.equal(value, gen1Val)) {
                this._gen1Hits += 1;
                if (bucket._gen1Weight++ > bucket._gen2Weight) {
                    this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Val, bucket._gen2Weight);
                }
                return gen1Val;
            }
            this._misses += 1;
            if (gen4Val === void 0) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
            }
            else if (gen3Val === void 0) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
            }
            else if (gen2Val === void 0) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
            }
            else if (gen1Val === void 0) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, value, 1);
            }
            else {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight - 1, bucket._gen3Val, bucket._gen3Weight - 1, bucket._gen1Val, bucket._gen1Weight, value, 1);
            }
            return value;
        };
        HashGenCacheSet.prototype.remove = function (value) {
            if (this._buckets.length === 0) {
                return false;
            }
            var index = Math.abs(Objects.hash(value)) % this._buckets.length;
            var bucket = this._buckets[index];
            if (!bucket) {
                return false;
            }
            var gen4Val = bucket._gen4Val;
            if (gen4Val !== void 0 && Objects.equal(value, gen4Val)) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
                return true;
            }
            var gen3Val = bucket._gen3Val;
            if (gen3Val !== void 0 && Objects.equal(value, gen3Val)) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
                return true;
            }
            var gen2Val = bucket._gen2Val;
            if (gen2Val !== void 0 && Objects.equal(value, gen2Val)) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
                return true;
            }
            var gen1Val = bucket._gen1Val;
            if (gen1Val !== void 0 && Objects.equal(value, gen1Val)) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, void 0, 0);
                return true;
            }
            return false;
        };
        HashGenCacheSet.prototype.clear = function () {
            for (var i = 0; i < this._buckets.length; i += 1) {
                this._buckets[i] = void 0;
            }
        };
        HashGenCacheSet.prototype.hits = function () {
            return this._gen4Hits + this._gen3Hits + this._gen2Hits + this._gen1Hits;
        };
        HashGenCacheSet.prototype.hitRatio = function () {
            var hits = this.hits();
            return hits / (hits + this._misses);
        };
        return HashGenCacheSet;
    }());
    var HashGenCacheSetBucket = (function () {
        function HashGenCacheSetBucket(gen4Val, gen4Weight, gen3Val, gen3Weight, gen2Val, gen2Weight, gen1Val, gen1Weight) {
            if (gen4Weight === void 0) { gen4Weight = 0; }
            if (gen3Weight === void 0) { gen3Weight = 0; }
            if (gen2Weight === void 0) { gen2Weight = 0; }
            if (gen1Weight === void 0) { gen1Weight = 0; }
            this._gen4Val = gen4Val;
            this._gen4Weight = gen4Weight;
            this._gen3Val = gen3Val;
            this._gen3Weight = gen3Weight;
            this._gen2Val = gen2Val;
            this._gen2Weight = gen2Weight;
            this._gen1Val = gen1Val;
            this._gen1Weight = gen1Weight;
        }
        return HashGenCacheSetBucket;
    }());

    var Tag = (function () {
        function Tag() {
        }
        return Tag;
    }());

    var Mark = (function (_super) {
        __extends(Mark, _super);
        function Mark(offset, line, column, note) {
            var _this = _super.call(this) || this;
            _this._offset = offset;
            _this._line = line;
            _this._column = column;
            _this._note = note;
            return _this;
        }
        Mark.prototype.offset = function () {
            return this._offset;
        };
        Mark.prototype.line = function () {
            return this._line;
        };
        Mark.prototype.column = function () {
            return this._column;
        };
        Mark.prototype.note = function () {
            return this._note;
        };
        Mark.prototype.min = function (that) {
            if (this._offset <= that._offset) {
                return this;
            }
            else {
                return that;
            }
        };
        Mark.prototype.max = function (that) {
            if (this._offset >= that._offset) {
                return this;
            }
            else {
                return that;
            }
        };
        Mark.prototype.start = function () {
            return this;
        };
        Mark.prototype.end = function () {
            return this;
        };
        Mark.prototype.union = function (that) {
            if (that instanceof Mark) {
                if (this._offset === that._offset && this._line === that._line
                    && this._column === that._column) {
                    return this;
                }
                else {
                    return Tag.Span.from(this, that);
                }
            }
            else if (that instanceof Tag.Span) {
                var start = this.min(that._start);
                var end = this.max(that._end);
                if (start === that._start && end === that._end) {
                    return that;
                }
                else {
                    return Tag.Span.from(start, end);
                }
            }
            throw new Error(that.toString());
        };
        Mark.prototype.shift = function (mark) {
            var offset = this._offset + (this._offset - mark._offset);
            var line = this._line + (this._line - mark._line);
            var column = this._column;
            if (line === 1) {
                column += (this._column - mark._column);
            }
            if (offset === this._offset && line === this._line && column === this._column) {
                return this;
            }
            else {
                return Mark.at(offset, line, column, this._note);
            }
        };
        Mark.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Mark) {
                return this._offset === that._offset && this._line === that._line
                    && this._column === that._column && this._note === that._note;
            }
            return false;
        };
        Mark.prototype.hashCode = function () {
            if (Mark._hashSeed === void 0) {
                Mark._hashSeed = Murmur3.seed(Mark);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Mark._hashSeed, this._offset), this._line), this._column), Murmur3.hash(this._note)));
        };
        Mark.prototype.display = function (output) {
            Tag.Format.displayNumber(this._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._column, output);
            if (this._note !== null) {
                output = output.write(58).write(32).write(this._note);
            }
        };
        Mark.prototype.debug = function (output) {
            output = output.write("Mark").write(".").write("at").write("(");
            Tag.Format.debugNumber(this._offset, output);
            output = output.write(", ");
            Tag.Format.debugNumber(this._line, output);
            output = output.write(", ");
            Tag.Format.debugNumber(this._column, output);
            if (this._note !== null) {
                output = output.write(", ");
                Tag.Format.debugString(this._note, output);
            }
            output = output.write(")");
        };
        Mark.prototype.toString = function () {
            return Tag.Format.display(this);
        };
        Mark.zero = function () {
            if (!Mark._zero) {
                Mark._zero = new Mark(0, 1, 1, null);
            }
            return Mark._zero;
        };
        Mark.at = function (offset, line, column, note) {
            if (note === void 0) { note = null; }
            return new Mark(offset, line, column, note);
        };
        return Mark;
    }(Tag));
    Tag.Mark = Mark;

    var Span = (function (_super) {
        __extends(Span, _super);
        function Span(start, end) {
            var _this = _super.call(this) || this;
            _this._start = start;
            _this._end = end;
            return _this;
        }
        Span.prototype.start = function () {
            return this._start;
        };
        Span.prototype.end = function () {
            return this._end;
        };
        Span.prototype.union = function (that) {
            if (that instanceof Tag.Mark) {
                var start = this._start.min(that);
                var end = this._end.max(that);
                if (start === this._start && end === this._end) {
                    return this;
                }
                else {
                    return Span.from(start, end);
                }
            }
            else if (that instanceof Span) {
                var start = this._start.min(that._start);
                var end = this._end.max(that._end);
                if (start === this._start && end === this._end) {
                    return this;
                }
                else {
                    return Span.from(start, end);
                }
            }
            throw new Error(that.toString());
        };
        Span.prototype.shift = function (mark) {
            var start = this._start.shift(mark);
            var end = this._end.shift(mark);
            if (start === this._start && end === this._end) {
                return this;
            }
            else {
                return Span.from(start, end);
            }
        };
        Span.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Span) {
                return this._start.equals(that._start) && this._end.equals(that._end);
            }
            return false;
        };
        Span.prototype.hashCode = function () {
            if (Span._hashSeed === void 0) {
                Span._hashSeed = Murmur3.seed(Span);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Span._hashSeed, this._start.hashCode()), this._end.hashCode()));
        };
        Span.prototype.display = function (output) {
            if (this._start._note !== null) {
                output = output.write(this._start._note).write(58).write(32);
            }
            Tag.Format.displayNumber(this._start._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._start._column, output);
            output = output.write(45);
            Tag.Format.displayNumber(this._end._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._end._column, output);
            if (this._end._note !== null) {
                output = output.write(58).write(32).write(this._end._note);
            }
        };
        Span.prototype.debug = function (output) {
            output = output.write("Span").write(".").write("from").write("(");
            this._start.debug(output);
            output = output.write(", ");
            this._end.debug(output);
            output = output.write(")");
        };
        Span.prototype.toString = function () {
            return Tag.Format.display(this);
        };
        Span.from = function (start, end) {
            if (start._offset > end._offset) {
                var tmp = start;
                start = end;
                end = tmp;
            }
            return new Span(start, end);
        };
        return Span;
    }(Tag));
    Tag.Span = Span;

    var InputException = (function (_super) {
        __extends(InputException, _super);
        function InputException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = InputException.prototype;
            return _this;
        }
        return InputException;
    }(Error));

    var OutputSettings = (function () {
        function OutputSettings(lineSeparator, isPretty, isStyled) {
            this._lineSeparator = lineSeparator;
            this._isPretty = isPretty;
            this._isStyled = isStyled;
        }
        OutputSettings.prototype.lineSeparator = function (lineSeparator) {
            if (lineSeparator === void 0) {
                return this._lineSeparator;
            }
            else {
                return this.copy(lineSeparator, this._isPretty, this._isStyled);
            }
        };
        OutputSettings.prototype.isPretty = function (isPretty) {
            if (isPretty === void 0) {
                return this._isPretty;
            }
            else {
                return this.copy(this._lineSeparator, isPretty, this._isStyled);
            }
        };
        OutputSettings.prototype.isStyled = function (isStyled) {
            if (isStyled === void 0) {
                return this._isStyled;
            }
            else {
                return this.copy(this._lineSeparator, this._isPretty, isStyled);
            }
        };
        OutputSettings.prototype.copy = function (lineSeparator, isPretty, isStyled) {
            return OutputSettings.create(lineSeparator, isPretty, isStyled);
        };
        OutputSettings.prototype.canEqual = function (that) {
            return that instanceof OutputSettings;
        };
        OutputSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof OutputSettings) {
                return that.canEqual(this) && this._lineSeparator === that._lineSeparator
                    && this._isPretty === that._isPretty && this._isStyled === that._isStyled;
            }
            return false;
        };
        OutputSettings.prototype.hashCode = function () {
            if (OutputSettings._hashSeed === void 0) {
                OutputSettings._hashSeed = Murmur3.seed(OutputSettings);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(OutputSettings._hashSeed, Murmur3.hash(this._lineSeparator)), Murmur3.hash(this._isPretty)), Murmur3.hash(this._isStyled)));
        };
        OutputSettings.prototype.debug = function (output) {
            output = output.write("OutputSettings").write(46);
            if (!this._isPretty && !this._isStyled) {
                output = output.write("standard");
            }
            else if (this._isPretty && !this._isStyled) {
                output = output.write("pretty");
            }
            else if (!this._isPretty && this._isStyled) {
                output = output.write("styled");
            }
            else {
                output = output.write("prettyStyled");
            }
            output = output.write(40).write(41);
            if (Format.lineSeparator() !== this._lineSeparator) {
                output = output.write(46).write("lineSeparator").write(40)
                    .display(this._lineSeparator).write(41);
            }
        };
        OutputSettings.prototype.toString = function () {
            return Format.debug(this);
        };
        OutputSettings.standard = function () {
            if (!OutputSettings._standard) {
                OutputSettings._standard = new OutputSettings(Format.lineSeparator(), false, false);
            }
            return OutputSettings._standard;
        };
        OutputSettings.pretty = function () {
            if (!OutputSettings._pretty) {
                OutputSettings._pretty = new OutputSettings(Format.lineSeparator(), true, false);
            }
            return OutputSettings._pretty;
        };
        OutputSettings.styled = function () {
            if (!OutputSettings._styled) {
                OutputSettings._styled = new OutputSettings(Format.lineSeparator(), false, true);
            }
            return OutputSettings._styled;
        };
        OutputSettings.prettyStyled = function () {
            if (!OutputSettings._prettyStyled) {
                OutputSettings._prettyStyled = new OutputSettings(Format.lineSeparator(), true, true);
            }
            return OutputSettings._prettyStyled;
        };
        OutputSettings.create = function (lineSeparator, isPretty, isStyled) {
            if (typeof lineSeparator !== "string") {
                lineSeparator = Format.lineSeparator();
            }
            if (typeof isPretty !== "boolean") {
                isPretty = false;
            }
            if (typeof isStyled !== "boolean") {
                isStyled = false;
            }
            if (Format.lineSeparator() === lineSeparator) {
                if (!isPretty && !isStyled) {
                    return OutputSettings.standard();
                }
                else if (isPretty && !isStyled) {
                    return OutputSettings.pretty();
                }
                else if (!isPretty && isStyled) {
                    return OutputSettings.styled();
                }
                else {
                    return OutputSettings.prettyStyled();
                }
            }
            return new OutputSettings(lineSeparator, isPretty, isStyled);
        };
        OutputSettings.fromAny = function (settings) {
            if (settings instanceof OutputSettings) {
                return settings;
            }
            else if (typeof settings === "object" && settings) {
                return OutputSettings.create(settings.lineSeparator, settings.isPretty, settings.isStyled);
            }
            return OutputSettings.standard();
        };
        return OutputSettings;
    }());

    var OutputException = (function (_super) {
        __extends(OutputException, _super);
        function OutputException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = OutputException.prototype;
            return _this;
        }
        return OutputException;
    }(Error));

    var Output = (function () {
        function Output() {
        }
        Output.prototype.writeln = function (string) {
            if (typeof string === "string") {
                this.write(string);
            }
            return this.write(this.settings().lineSeparator());
        };
        Output.prototype.display = function (object) {
            Format.display(object, this);
            return this;
        };
        Output.prototype.debug = function (object) {
            Format.debug(object, this);
            return this;
        };
        Output.prototype.flush = function () {
            return this;
        };
        Output.prototype.push = function () {
            var tokens = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                tokens[_i] = arguments[_i];
            }
            var n = tokens.length;
            for (var i = 0; i < n; i += 1) {
                this.write(tokens[i]);
            }
        };
        Output.prototype.trap = function () {
            throw new OutputException();
        };
        Output.prototype.clone = function () {
            throw new Error();
        };
        Output.full = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!Output._full) {
                    Output._full = new OutputFull(value, OutputSettings.standard());
                }
                return Output._full;
            }
            return new OutputFull(value, settings);
        };
        Output.done = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!Output._done) {
                    Output._done = new OutputDone(value, OutputSettings.standard());
                }
                return Output._done;
            }
            return new OutputDone(value, settings);
        };
        Output.error = function (error, settings) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            return new OutputError(error, settings);
        };
        return Output;
    }());
    var OutputFull = (function (_super) {
        __extends(OutputFull, _super);
        function OutputFull(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputFull.prototype.isCont = function () {
            return false;
        };
        OutputFull.prototype.isFull = function () {
            return true;
        };
        OutputFull.prototype.isDone = function () {
            return false;
        };
        OutputFull.prototype.isError = function () {
            return false;
        };
        OutputFull.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return Output.done(this._value, this._settings);
            }
            else {
                return this;
            }
        };
        OutputFull.prototype.write = function (tokenOrString) {
            return Output.error(new OutputException("full"), this._settings);
        };
        OutputFull.prototype.writeln = function (string) {
            return Output.error(new OutputException("full"), this._settings);
        };
        OutputFull.prototype.bind = function () {
            return this._value;
        };
        OutputFull.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.full(this._value, settings);
            }
        };
        OutputFull.prototype.clone = function () {
            return this;
        };
        return OutputFull;
    }(Output));
    var OutputDone = (function (_super) {
        __extends(OutputDone, _super);
        function OutputDone(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputDone.prototype.isCont = function () {
            return false;
        };
        OutputDone.prototype.isFull = function () {
            return false;
        };
        OutputDone.prototype.isDone = function () {
            return true;
        };
        OutputDone.prototype.isError = function () {
            return false;
        };
        OutputDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return this;
            }
            else {
                return Output.full(this._value, this._settings);
            }
        };
        OutputDone.prototype.write = function (tokenOrString) {
            return Output.error(new OutputException("done"), this._settings);
        };
        OutputDone.prototype.writeln = function (string) {
            return Output.error(new OutputException("done"), this._settings);
        };
        OutputDone.prototype.bind = function () {
            return this._value;
        };
        OutputDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.done(this._value, settings);
            }
        };
        OutputDone.prototype.clone = function () {
            return this;
        };
        return OutputDone;
    }(Output));
    var OutputError = (function (_super) {
        __extends(OutputError, _super);
        function OutputError(error, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._settings = settings;
            return _this;
        }
        OutputError.prototype.isCont = function () {
            return false;
        };
        OutputError.prototype.isFull = function () {
            return false;
        };
        OutputError.prototype.isDone = function () {
            return false;
        };
        OutputError.prototype.isError = function () {
            return true;
        };
        OutputError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        OutputError.prototype.write = function (tokenOrString) {
            return this;
        };
        OutputError.prototype.writeln = function (string) {
            return this;
        };
        OutputError.prototype.bind = function () {
            throw new OutputException();
        };
        OutputError.prototype.trap = function () {
            return this._error;
        };
        OutputError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.error(this._error, settings);
            }
        };
        OutputError.prototype.clone = function () {
            return this;
        };
        return OutputError;
    }(Output));

    var Input = (function () {
        function Input() {
        }
        Input.prototype.trap = function () {
            throw new InputException();
        };
        Input.prototype.offset = function () {
            return this.mark()._offset;
        };
        Input.prototype.line = function () {
            return this.mark()._line;
        };
        Input.prototype.column = function () {
            return this.mark()._column;
        };
        Input.empty = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!Input._empty) {
                    Input._empty = new InputEmpty(null, Mark.zero(), InputSettings.standard());
                }
                return Input._empty;
            }
            return new InputEmpty(id, mark, settings);
        };
        Input.done = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!Input._done) {
                    Input._done = new InputDone(null, Mark.zero(), InputSettings.standard());
                }
                return Input._done;
            }
            return new InputDone(id, mark, settings);
        };
        Input.error = function (error, id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            return new InputError(error, id, mark, settings);
        };
        return Input;
    }());
    var InputEmpty = (function (_super) {
        __extends(InputEmpty, _super);
        function InputEmpty(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputEmpty.prototype.isCont = function () {
            return false;
        };
        InputEmpty.prototype.isEmpty = function () {
            return true;
        };
        InputEmpty.prototype.isDone = function () {
            return false;
        };
        InputEmpty.prototype.isError = function () {
            return false;
        };
        InputEmpty.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return this;
            }
            else {
                return Input.done(this._id, this._mark, this._settings);
            }
        };
        InputEmpty.prototype.head = function () {
            throw new InputException();
        };
        InputEmpty.prototype.step = function () {
            var error = new InputException("empty step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputEmpty.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputEmpty.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.empty(id, this._mark, this._settings);
            }
        };
        InputEmpty.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.empty(this._id, mark, this._settings);
            }
        };
        InputEmpty.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.empty(this._id, this._mark, settings);
            }
        };
        InputEmpty.prototype.clone = function () {
            return this;
        };
        return InputEmpty;
    }(Input));
    var InputDone = (function (_super) {
        __extends(InputDone, _super);
        function InputDone(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputDone.prototype.isCont = function () {
            return false;
        };
        InputDone.prototype.isEmpty = function () {
            return false;
        };
        InputDone.prototype.isDone = function () {
            return true;
        };
        InputDone.prototype.isError = function () {
            return false;
        };
        InputDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return Input.empty(this._id, this._mark, this._settings);
            }
            else {
                return this;
            }
        };
        InputDone.prototype.head = function () {
            throw new InputException();
        };
        InputDone.prototype.step = function () {
            var error = new InputException("done step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputDone.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputDone.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.done(id, this._mark, this._settings);
            }
        };
        InputDone.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.done(this._id, mark, this._settings);
            }
        };
        InputDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.done(this._id, this._mark, settings);
            }
        };
        InputDone.prototype.clone = function () {
            return this;
        };
        return InputDone;
    }(Input));
    var InputError = (function (_super) {
        __extends(InputError, _super);
        function InputError(error, id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputError.prototype.isCont = function () {
            return false;
        };
        InputError.prototype.isEmpty = function () {
            return false;
        };
        InputError.prototype.isDone = function () {
            return false;
        };
        InputError.prototype.isError = function () {
            return true;
        };
        InputError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        InputError.prototype.head = function () {
            throw new InputException();
        };
        InputError.prototype.step = function () {
            var error = new InputException("error step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputError.prototype.trap = function () {
            return this._error;
        };
        InputError.prototype.seek = function (mark) {
            var error = new InputException("error seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputError.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.error(this._error, id, this._mark, this._settings);
            }
        };
        InputError.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.error(this._error, this._id, mark, this._settings);
            }
        };
        InputError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.error(this._error, this._id, this._mark, settings);
            }
        };
        InputError.prototype.clone = function () {
            return this;
        };
        return InputError;
    }(Input));

    var StringInput = (function (_super) {
        __extends(StringInput, _super);
        function StringInput(string, id, offset, line, column, settings, index, isPart) {
            if (id === void 0) { id = null; }
            if (offset === void 0) { offset = 0; }
            if (line === void 0) { line = 1; }
            if (column === void 0) { column = 1; }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (index === void 0) { index = 0; }
            if (isPart === void 0) { isPart = false; }
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._id = id;
            _this._offset = offset;
            _this._line = line;
            _this._column = column;
            _this._settings = settings;
            _this._index = index;
            _this._isPart = isPart;
            return _this;
        }
        StringInput.prototype.isCont = function () {
            return this._index < this._string.length;
        };
        StringInput.prototype.isEmpty = function () {
            return this._isPart && this._index >= this._string.length;
        };
        StringInput.prototype.isDone = function () {
            return !this._isPart && this._index >= this._string.length;
        };
        StringInput.prototype.isError = function () {
            return false;
        };
        StringInput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._isPart;
            }
            else {
                this._isPart = isPart;
                return this;
            }
        };
        StringInput.prototype.head = function () {
            if (this._index < this._string.length) {
                var c = this._string.codePointAt(this._index);
                if (c !== void 0) {
                    return c;
                }
                else {
                    return this._string.charCodeAt(this._index);
                }
            }
            throw new InputException();
        };
        StringInput.prototype.step = function () {
            var index = this._index;
            if (index < this._string.length) {
                var c = this._string.codePointAt(index);
                this._index = this._string.offsetByCodePoints(index, 1);
                this._offset += this._index - index;
                if (c === 10) {
                    this._line += 1;
                    this._column = 1;
                }
                else {
                    this._column += 1;
                }
                return this;
            }
            else {
                var error = new InputException("invalid step");
                return Input.error(error, this._id, this.mark(), this._settings);
            }
        };
        StringInput.prototype.seek = function (mark) {
            if (mark !== void 0) {
                var index = this._index + (mark._offset - this._offset);
                if (0 <= index && index <= this._string.length) {
                    this._offset = mark._offset;
                    this._line = mark._line;
                    this._column = mark._column;
                    this._index = index;
                    return this;
                }
                else {
                    var error = new InputException("invalid seek to " + mark);
                    return Input.error(error, this._id, this.mark(), this._settings);
                }
            }
            else {
                this._offset = 0;
                this._line = 1;
                this._column = 1;
                this._index = 0;
                return this;
            }
        };
        StringInput.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                this._id = id;
                return this;
            }
        };
        StringInput.prototype.mark = function (mark) {
            if (mark === void 0) {
                return Mark.at(this._offset, this._line, this._column);
            }
            else {
                this._offset = mark._offset;
                this._line = mark._line;
                this._column = mark._column;
                return this;
            }
        };
        StringInput.prototype.offset = function () {
            return this._offset;
        };
        StringInput.prototype.line = function () {
            return this._line;
        };
        StringInput.prototype.column = function () {
            return this._column;
        };
        StringInput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = InputSettings.fromAny(settings);
                return this;
            }
        };
        StringInput.prototype.clone = function () {
            return new StringInput(this._string, this._id, this._offset, this._line, this._column, this._settings, this._index, this._isPart);
        };
        return StringInput;
    }(Input));

    var StringOutput = (function (_super) {
        __extends(StringOutput, _super);
        function StringOutput(string, settings) {
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._settings = settings;
            return _this;
        }
        StringOutput.prototype.isCont = function () {
            return true;
        };
        StringOutput.prototype.isFull = function () {
            return false;
        };
        StringOutput.prototype.isDone = function () {
            return false;
        };
        StringOutput.prototype.isError = function () {
            return false;
        };
        StringOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        StringOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                if ((token >= 0x0000 && token <= 0xd7ff)
                    || (token >= 0xe000 && token <= 0xffff)) {
                    token = String.fromCharCode(token);
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    var u = token - 0x10000;
                    token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));
                }
                else {
                    token = "\ufffd";
                }
            }
            this._string += token;
            return this;
        };
        StringOutput.prototype.writeln = function (string) {
            if (string === void 0) {
                this._string = this._string.concat(this._settings._lineSeparator);
                return this;
            }
            else {
                this._string = this._string.concat(string).concat(this._settings._lineSeparator);
                return this;
            }
        };
        StringOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        StringOutput.prototype.bind = function () {
            return this._string;
        };
        StringOutput.prototype.clone = function () {
            return new StringOutput(this._string, this._settings);
        };
        StringOutput.prototype.toString = function () {
            return this._string;
        };
        return StringOutput;
    }(Output));

    var WriterException = (function (_super) {
        __extends(WriterException, _super);
        function WriterException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = WriterException.prototype;
            return _this;
        }
        return WriterException;
    }(Error));

    var Writer = (function () {
        function Writer() {
        }
        Writer.prototype.isCont = function () {
            return true;
        };
        Writer.prototype.isDone = function () {
            return false;
        };
        Writer.prototype.isError = function () {
            return false;
        };
        Writer.prototype.feed = function (input) {
            throw new Error();
        };
        Writer.prototype.fork = function (condition) {
            return this;
        };
        Writer.prototype.bind = function () {
            throw new Error();
        };
        Writer.prototype.trap = function () {
            throw new Error();
        };
        Writer.prototype.asDone = function () {
            throw new Error();
        };
        Writer.prototype.asError = function () {
            throw new Error();
        };
        Writer.prototype.andThen = function (that) {
            return new WriterAndThen(this, that);
        };
        Writer.done = function (output) {
            if (output === void 0) {
                if (!Writer._done) {
                    Writer._done = new WriterDone(void 0);
                }
                return Writer._done;
            }
            else {
                return new WriterDone(output);
            }
        };
        Writer.error = function (error) {
            return new WriterError(error);
        };
        return Writer;
    }());
    var WriterDone = (function (_super) {
        __extends(WriterDone, _super);
        function WriterDone(output) {
            var _this = _super.call(this) || this;
            _this._output = output;
            return _this;
        }
        WriterDone.prototype.isCont = function () {
            return false;
        };
        WriterDone.prototype.isDone = function () {
            return true;
        };
        WriterDone.prototype.pull = function (output) {
            return this;
        };
        WriterDone.prototype.bind = function () {
            return this._output;
        };
        WriterDone.prototype.asDone = function () {
            return this;
        };
        WriterDone.prototype.andThen = function (that) {
            return that;
        };
        return WriterDone;
    }(Writer));
    var WriterError = (function (_super) {
        __extends(WriterError, _super);
        function WriterError(error) {
            var _this = _super.call(this) || this;
            _this._error = error;
            return _this;
        }
        WriterError.prototype.isCont = function () {
            return false;
        };
        WriterError.prototype.isError = function () {
            return true;
        };
        WriterError.prototype.pull = function (output) {
            return this;
        };
        WriterError.prototype.bind = function () {
            throw this._error;
        };
        WriterError.prototype.trap = function () {
            return this._error;
        };
        WriterError.prototype.asError = function () {
            return this;
        };
        WriterError.prototype.andThen = function (that) {
            return this;
        };
        return WriterError;
    }(Writer));
    var WriterAndThen = (function (_super) {
        __extends(WriterAndThen, _super);
        function WriterAndThen(head, tail) {
            var _this = _super.call(this) || this;
            _this._head = head;
            _this._tail = tail;
            return _this;
        }
        WriterAndThen.prototype.pull = function (output) {
            var head = this._head;
            if (head.isCont()) {
                head = head.pull(output);
            }
            if (head.isError()) {
                return head.asError();
            }
            else if (head.isDone()) {
                return this._tail.pull(output);
            }
            else {
                return new WriterAndThen(head, this._tail);
            }
        };
        return WriterAndThen;
    }(Writer));

    var StringWriter = (function (_super) {
        __extends(StringWriter, _super);
        function StringWriter(value, input, index) {
            if (index === void 0) { index = 0; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._index = index;
            return _this;
        }
        StringWriter.prototype.feed = function (input) {
            return new StringWriter(input, "" + input);
        };
        StringWriter.prototype.pull = function (output) {
            return StringWriter.write(output, this._value, this._input, this._index);
        };
        StringWriter.write = function (output, value, input, index) {
            if (index === void 0) { index = 0; }
            var length = input.length;
            while (index < length && output.isCont()) {
                var c = input.codePointAt(index);
                if (c === void 0) {
                    c = input.charCodeAt(index);
                }
                output = output.write(c);
                index = input.offsetByCodePoints(index, 1);
            }
            if (index === length) {
                return Writer.done(value);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new StringWriter(value, input, index);
        };
        return StringWriter;
    }(Writer));

    var Unicode = (function () {
        function Unicode() {
        }
        Unicode.stringInput = function (string) {
            return new StringInput(string);
        };
        Unicode.stringOutput = function (string, settings) {
            if (settings === void 0 && typeof string !== "string") {
                settings = string;
                string = "";
            }
            else if (typeof string !== "string") {
                string = "";
            }
            settings = OutputSettings.fromAny(settings);
            return new StringOutput(string, settings);
        };
        Unicode.stringWriter = function (input) {
            if (input === void 0) {
                return new StringWriter(void 0, "");
            }
            else {
                return new StringWriter(input, "" + input);
            }
        };
        Unicode.writeString = function (input, output) {
            return StringWriter.write(output, void 0, "" + input);
        };
        Unicode.isAlpha = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122;
        };
        Unicode.isSpace = function (c) {
            return c === 0x20 || c === 0x9;
        };
        Unicode.isNewline = function (c) {
            return c === 0xa || c === 0xd;
        };
        Unicode.isWhitespace = function (c) {
            return Unicode.isSpace(c) || Unicode.isNewline(c);
        };
        return Unicode;
    }());

    var Format = (function () {
        function Format() {
        }
        Format.display = function (object, output) {
            var notOutput = !(output instanceof Output);
            if (object === void 0) {
                if (output === void 0) {
                    return "undefined";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("undefined");
                }
            }
            else if (object === null) {
                if (output === void 0) {
                    return "null";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("null");
                }
            }
            else if (typeof object === "number") {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    Format.displayNumber(object, output);
                }
            }
            else if (typeof object === "string") {
                if (output === void 0) {
                    return object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write(object);
                }
            }
            else if (object && typeof object.display === "function") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                object.display(output);
            }
            else {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("" + object);
                }
            }
            if (notOutput) {
                return output.toString();
            }
        };
        Format.debug = function (object, output) {
            var notOutput = !(output instanceof Output);
            if (object === void 0) {
                if (output === void 0) {
                    return "undefined";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("undefined");
                }
            }
            else if (object === null) {
                if (output === void 0) {
                    return "null";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("null");
                }
            }
            else if (typeof object === "number") {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    Format.debugNumber(object, output);
                }
            }
            else if (typeof object === "string") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                Format.debugString(object, output);
            }
            else if (typeof object.debug === "function") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                object.debug(output);
            }
            else {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("" + object);
                }
            }
            if (notOutput) {
                return output.toString();
            }
        };
        Format.displayNumber = function (value, output) {
            if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
                if (value < 0) {
                    output = output.write(45);
                }
                if (value > -10 && value < 10) {
                    output = output.write(48 + Math.abs(value));
                }
                else {
                    var digits = new Array(19);
                    var x = value;
                    var i = 18;
                    while (x) {
                        digits[i] = Math.abs((x % 10) | 0);
                        x = (x / 10) | 0;
                        i -= 1;
                    }
                    i += 1;
                    while (i < 19) {
                        output = output.write(48 + digits[i]);
                        i += 1;
                    }
                }
            }
            else {
                output = output.write("" + value);
            }
        };
        Format.debugNumber = function (value, output) {
            Format.displayNumber(value, output);
        };
        Format.debugChar = function (character, output) {
            output = output.write(39);
            switch (character) {
                case 8:
                    output.write(92).write(98);
                    break;
                case 9:
                    output.write(92).write(116);
                    break;
                case 10:
                    output.write(92).write(110);
                    break;
                case 12:
                    output.write(92).write(102);
                    break;
                case 13:
                    output.write(92).write(114);
                    break;
                case 34:
                    output.write(92).write(34);
                    break;
                case 39:
                    output.write(92).write(39);
                    break;
                case 92:
                    output.write(92).write(92);
                    break;
                default:
                    if (character >= 0x0000 && character <= 0x001f
                        || character >= 0x007f && character <= 0x009f) {
                        output = output.write(92).write(117)
                            .write(Format.encodeHex(character >>> 12 & 0xf))
                            .write(Format.encodeHex(character >>> 8 & 0xf))
                            .write(Format.encodeHex(character >>> 4 & 0xf))
                            .write(Format.encodeHex(character & 0xf));
                    }
                    else {
                        output = output.write(character);
                    }
            }
            output = output.write(39);
        };
        Format.debugString = function (string, output) {
            output = output.write(34);
            var input = Unicode.stringInput(string);
            while (input.isCont()) {
                var c = input.head();
                switch (c) {
                    case 8:
                        output.write(92).write(98);
                        break;
                    case 9:
                        output.write(92).write(116);
                        break;
                    case 10:
                        output.write(92).write(110);
                        break;
                    case 12:
                        output.write(92).write(102);
                        break;
                    case 13:
                        output.write(92).write(114);
                        break;
                    case 34:
                        output.write(92).write(34);
                        break;
                    case 92:
                        output.write(92).write(92);
                        break;
                    default:
                        if (c >= 0x0000 && c <= 0x001f || c >= 0x007f && c <= 0x009f) {
                            output = output.write(92).write(117)
                                .write(Format.encodeHex(c >>> 12 & 0xf))
                                .write(Format.encodeHex(c >>> 8 & 0xf))
                                .write(Format.encodeHex(c >>> 4 & 0xf))
                                .write(Format.encodeHex(c & 0xf));
                        }
                        else {
                            output = output.write(c);
                        }
                }
                input = input.step();
            }
            output = output.write(34);
        };
        Format.encodeHex = function (x) {
            if (x < 10) {
                return 48 + x;
            }
            else {
                return 65 + (x - 10);
            }
        };
        Format.lineSeparator = function () {
            if (!Format._lineSeparator) {
                if (typeof require === "function") {
                    var os = require("os");
                    if (os) {
                        Format._lineSeparator = os.EOL;
                    }
                }
                if (!Format._lineSeparator) {
                    Format._lineSeparator = "\n";
                }
            }
            return Format._lineSeparator;
        };
        return Format;
    }());
    Tag.Format = Format;

    var InputSettings = (function () {
        function InputSettings(isStripped) {
            this._isStrict = isStripped;
        }
        InputSettings.prototype.isStripped = function (isStripped) {
            if (isStripped === void 0) {
                return this._isStrict;
            }
            else {
                return this.copy(isStripped);
            }
        };
        InputSettings.prototype.copy = function (isStripped) {
            return InputSettings.create(isStripped);
        };
        InputSettings.prototype.canEqual = function (that) {
            return that instanceof InputSettings;
        };
        InputSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InputSettings) {
                return that.canEqual(this) && this._isStrict === that._isStrict;
            }
            return false;
        };
        InputSettings.prototype.hashCode = function () {
            if (InputSettings._hashSeed === void 0) {
                InputSettings._hashSeed = Murmur3.seed(InputSettings);
            }
            return Murmur3.mash(Murmur3.mix(InputSettings._hashSeed, Murmur3.hash(this._isStrict)));
        };
        InputSettings.prototype.debug = function (output) {
            output = output.write("InputSettings").write(46);
            if (!this._isStrict) {
                output = output.write("standard");
            }
            else {
                output = output.write("stripped");
            }
            output = output.write(40).write(41);
        };
        InputSettings.prototype.toString = function () {
            return Format.debug(this);
        };
        InputSettings.standard = function () {
            if (!InputSettings._standard) {
                InputSettings._standard = new InputSettings(false);
            }
            return InputSettings._standard;
        };
        InputSettings.stripped = function () {
            if (!InputSettings._stripped) {
                InputSettings._stripped = new InputSettings(false);
            }
            return InputSettings._stripped;
        };
        InputSettings.create = function (isStripped) {
            if (isStripped) {
                return InputSettings.stripped();
            }
            return InputSettings.standard();
        };
        InputSettings.fromAny = function (settings) {
            if (settings instanceof InputSettings) {
                return settings;
            }
            else if (typeof settings === "object" && settings) {
                return InputSettings.create(settings.isStripped);
            }
            else {
                return InputSettings.standard();
            }
        };
        return InputSettings;
    }());

    var InputBuffer = (function (_super) {
        __extends(InputBuffer, _super);
        function InputBuffer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InputBuffer.empty = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!InputBuffer._emptyBuffer) {
                    InputBuffer._emptyBuffer = new InputBufferEmpty(null, Mark.zero(), InputSettings.standard());
                }
                return InputBuffer._emptyBuffer;
            }
            return new InputBufferEmpty(id, mark, settings);
        };
        InputBuffer.done = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!InputBuffer._doneBuffer) {
                    InputBuffer._doneBuffer = new InputBufferDone(null, Mark.zero(), InputSettings.standard());
                }
                return InputBuffer._doneBuffer;
            }
            return new InputBufferDone(id, mark, settings);
        };
        InputBuffer.error = function (error, id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            return new InputBufferError(error, id, mark, settings);
        };
        return InputBuffer;
    }(Input));
    var InputBufferEmpty = (function (_super) {
        __extends(InputBufferEmpty, _super);
        function InputBufferEmpty(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferEmpty.prototype.isCont = function () {
            return false;
        };
        InputBufferEmpty.prototype.isEmpty = function () {
            return true;
        };
        InputBufferEmpty.prototype.isDone = function () {
            return false;
        };
        InputBufferEmpty.prototype.isError = function () {
            return false;
        };
        InputBufferEmpty.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return this;
            }
            else {
                return InputBuffer.done(this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.capacity = function () {
            return 0;
        };
        InputBufferEmpty.prototype.remaining = function () {
            return 0;
        };
        InputBufferEmpty.prototype.has = function (index) {
            return false;
        };
        InputBufferEmpty.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferEmpty.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferEmpty.prototype.head = function () {
            throw new InputException();
        };
        InputBufferEmpty.prototype.step = function (offset) {
            var error = new InputException("empty step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferEmpty.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferEmpty.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.empty(id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.empty(this._id, mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.empty(this._id, this._mark, settings);
            }
        };
        InputBufferEmpty.prototype.clone = function () {
            return this;
        };
        return InputBufferEmpty;
    }(InputBuffer));
    var InputBufferDone = (function (_super) {
        __extends(InputBufferDone, _super);
        function InputBufferDone(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferDone.prototype.isCont = function () {
            return false;
        };
        InputBufferDone.prototype.isEmpty = function () {
            return false;
        };
        InputBufferDone.prototype.isDone = function () {
            return true;
        };
        InputBufferDone.prototype.isError = function () {
            return false;
        };
        InputBufferDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return InputBuffer.empty(this._id, this._mark, this._settings);
            }
            else {
                return this;
            }
        };
        InputBufferDone.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.capacity = function () {
            return 0;
        };
        InputBufferDone.prototype.remaining = function () {
            return 0;
        };
        InputBufferDone.prototype.has = function (index) {
            return false;
        };
        InputBufferDone.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferDone.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferDone.prototype.head = function () {
            throw new InputException();
        };
        InputBufferDone.prototype.step = function (offset) {
            var error = new InputException("done step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferDone.prototype.seek = function (mark) {
            var error = new InputException("done seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferDone.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.done(id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.done(this._id, mark, this._settings);
            }
        };
        InputBufferDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.done(this._id, this._mark, settings);
            }
        };
        InputBufferDone.prototype.clone = function () {
            return this;
        };
        return InputBufferDone;
    }(InputBuffer));
    var InputBufferError = (function (_super) {
        __extends(InputBufferError, _super);
        function InputBufferError(error, id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferError.prototype.isCont = function () {
            return false;
        };
        InputBufferError.prototype.isEmpty = function () {
            return false;
        };
        InputBufferError.prototype.isDone = function () {
            return false;
        };
        InputBufferError.prototype.isError = function () {
            return true;
        };
        InputBufferError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        InputBufferError.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.capacity = function () {
            return 0;
        };
        InputBufferError.prototype.remaining = function () {
            return 0;
        };
        InputBufferError.prototype.has = function (index) {
            return false;
        };
        InputBufferError.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferError.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferError.prototype.head = function () {
            throw new InputException();
        };
        InputBufferError.prototype.step = function (offset) {
            var error = new InputException("error step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferError.prototype.trap = function () {
            return this._error;
        };
        InputBufferError.prototype.seek = function (mark) {
            var error = new InputException("error seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferError.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.error(this._error, id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.error(this._error, this._id, mark, this._settings);
            }
        };
        InputBufferError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.error(this._error, this._id, this._mark, settings);
            }
        };
        InputBufferError.prototype.clone = function () {
            return this;
        };
        return InputBufferError;
    }(InputBuffer));

    var OutputBuffer = (function (_super) {
        __extends(OutputBuffer, _super);
        function OutputBuffer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OutputBuffer.prototype.writeln = function (string) {
            if (typeof string === "string") {
                this.write(string);
            }
            return this.write(this.settings().lineSeparator());
        };
        OutputBuffer.prototype.display = function (object) {
            Format.display(object, this);
            return this;
        };
        OutputBuffer.prototype.debug = function (object) {
            Format.debug(object, this);
            return this;
        };
        OutputBuffer.prototype.flush = function () {
            return this;
        };
        OutputBuffer.prototype.clone = function () {
            throw new Error();
        };
        OutputBuffer.full = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!OutputBuffer._fullBuffer) {
                    OutputBuffer._fullBuffer = new OutputBufferFull(value, OutputSettings.standard());
                }
                return OutputBuffer._fullBuffer;
            }
            return new OutputBufferFull(value, settings);
        };
        OutputBuffer.done = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!OutputBuffer._doneBuffer) {
                    OutputBuffer._doneBuffer = new OutputBufferDone(value, OutputSettings.standard());
                }
                return OutputBuffer._doneBuffer;
            }
            return new OutputBufferDone(value, settings);
        };
        OutputBuffer.error = function (error, settings) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            return new OutputBufferError(error, settings);
        };
        return OutputBuffer;
    }(Output));
    var OutputBufferFull = (function (_super) {
        __extends(OutputBufferFull, _super);
        function OutputBufferFull(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputBufferFull.prototype.isCont = function () {
            return false;
        };
        OutputBufferFull.prototype.isFull = function () {
            return true;
        };
        OutputBufferFull.prototype.isDone = function () {
            return false;
        };
        OutputBufferFull.prototype.isError = function () {
            return false;
        };
        OutputBufferFull.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return OutputBuffer.done(this._value, this._settings);
            }
            else {
                return this;
            }
        };
        OutputBufferFull.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferFull.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferFull.prototype.capacity = function () {
            return 0;
        };
        OutputBufferFull.prototype.remaining = function () {
            return 0;
        };
        OutputBufferFull.prototype.has = function (index) {
            return false;
        };
        OutputBufferFull.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferFull.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferFull.prototype.write = function (tokenOrString) {
            return OutputBuffer.error(new OutputException("full"), this._settings);
        };
        OutputBufferFull.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("full"), this._settings);
        };
        OutputBufferFull.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferFull.prototype.bind = function () {
            return this._value;
        };
        OutputBufferFull.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.full(this._value, settings);
            }
        };
        OutputBufferFull.prototype.clone = function () {
            return this;
        };
        return OutputBufferFull;
    }(OutputBuffer));
    var OutputBufferDone = (function (_super) {
        __extends(OutputBufferDone, _super);
        function OutputBufferDone(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputBufferDone.prototype.isCont = function () {
            return false;
        };
        OutputBufferDone.prototype.isFull = function () {
            return false;
        };
        OutputBufferDone.prototype.isDone = function () {
            return true;
        };
        OutputBufferDone.prototype.isError = function () {
            return false;
        };
        OutputBufferDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return this;
            }
            else {
                return OutputBuffer.full(this._value, this._settings);
            }
        };
        OutputBufferDone.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferDone.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferDone.prototype.capacity = function () {
            return 0;
        };
        OutputBufferDone.prototype.remaining = function () {
            return 0;
        };
        OutputBufferDone.prototype.has = function (index) {
            return false;
        };
        OutputBufferDone.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferDone.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferDone.prototype.write = function (tokenOrString) {
            return OutputBuffer.error(new OutputException("done"), this._settings);
        };
        OutputBufferDone.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("done"), this._settings);
        };
        OutputBufferDone.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferDone.prototype.bind = function () {
            return this._value;
        };
        OutputBufferDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.done(this._value, settings);
            }
        };
        OutputBufferDone.prototype.clone = function () {
            return this;
        };
        return OutputBufferDone;
    }(OutputBuffer));
    var OutputBufferError = (function (_super) {
        __extends(OutputBufferError, _super);
        function OutputBufferError(error, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._settings = settings;
            return _this;
        }
        OutputBufferError.prototype.isCont = function () {
            return false;
        };
        OutputBufferError.prototype.isFull = function () {
            return false;
        };
        OutputBufferError.prototype.isDone = function () {
            return false;
        };
        OutputBufferError.prototype.isError = function () {
            return true;
        };
        OutputBufferError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        OutputBufferError.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferError.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferError.prototype.capacity = function () {
            return 0;
        };
        OutputBufferError.prototype.remaining = function () {
            return 0;
        };
        OutputBufferError.prototype.has = function (index) {
            return false;
        };
        OutputBufferError.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferError.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferError.prototype.write = function (tokenOrString) {
            return this;
        };
        OutputBufferError.prototype.writeln = function (string) {
            return this;
        };
        OutputBufferError.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferError.prototype.bind = function () {
            throw new OutputException();
        };
        OutputBufferError.prototype.trap = function () {
            return this._error;
        };
        OutputBufferError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.error(this._error, settings);
            }
        };
        OutputBufferError.prototype.clone = function () {
            return this;
        };
        return OutputBufferError;
    }(OutputBuffer));

    var OutputStyle = (function () {
        function OutputStyle() {
        }
        OutputStyle.reset = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(109);
            }
        };
        OutputStyle.bold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(109);
            }
        };
        OutputStyle.faint = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(50).write(109);
            }
        };
        OutputStyle.black = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(48).write(109);
            }
        };
        OutputStyle.red = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(49).write(109);
            }
        };
        OutputStyle.green = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(50).write(109);
            }
        };
        OutputStyle.yellow = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(51).write(109);
            }
        };
        OutputStyle.blue = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(52).write(109);
            }
        };
        OutputStyle.magenta = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(53).write(109);
            }
        };
        OutputStyle.cyan = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(54).write(109);
            }
        };
        OutputStyle.gray = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(55).write(109);
            }
        };
        OutputStyle.blackBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(48).write(109);
            }
        };
        OutputStyle.redBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(49).write(109);
            }
        };
        OutputStyle.greenBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(50).write(109);
            }
        };
        OutputStyle.yellowBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(51).write(109);
            }
        };
        OutputStyle.blueBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(52).write(109);
            }
        };
        OutputStyle.magentaBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(53).write(109);
            }
        };
        OutputStyle.cyanBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(54).write(109);
            }
        };
        OutputStyle.grayBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(55).write(109);
            }
        };
        return OutputStyle;
    }());

    var Base10 = (function () {
        function Base10() {
        }
        Base10.isDigit = function (c) {
            return c >= 48 && c <= 57;
        };
        Base10.decodeDigit = function (c) {
            if (c >= 48 && c <= 57) {
                return c - 48;
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-10 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base10.encodeDigit = function (b) {
            if (b >= 0 && b <= 9) {
                return 48 + b;
            }
            else {
                throw new Error("" + b);
            }
        };
        Base10.countDigits = function (value) {
            var size = 0;
            do {
                size += 1;
                value = (value / 10) | 0;
            } while (value);
            return size;
        };
        Base10.integerParser = function () {
            return new Base10.NumberParser(void 0, void 0, 0);
        };
        Base10.parseInteger = function (input) {
            return Base10.NumberParser.parse(input, void 0, void 0, 0);
        };
        Base10.decimalParser = function () {
            return new Base10.NumberParser(void 0, void 0, 1);
        };
        Base10.parseDecimal = function (input) {
            return Base10.NumberParser.parse(input, void 0, void 0, 1);
        };
        Base10.numberParser = function () {
            return new Base10.NumberParser();
        };
        Base10.parseNumber = function (input) {
            return Base10.NumberParser.parse(input);
        };
        Base10.integerWriter = function (input) {
            if (input === void 0) {
                return new Base10.IntegerWriter(void 0, 0);
            }
            else {
                return new Base10.IntegerWriter(void 0, input);
            }
        };
        Base10.writeInteger = function (input, output) {
            return Base10.IntegerWriter.write(output, void 0, input);
        };
        return Base10;
    }());

    var Diagnostic = (function () {
        function Diagnostic(input, tag, severity, message, note, cause) {
            this._input = input;
            this._tag = tag;
            this._severity = severity;
            this._message = message;
            this._note = note;
            this._cause = cause;
        }
        Diagnostic.prototype.input = function () {
            return this._input.clone();
        };
        Diagnostic.prototype.tag = function () {
            return this._tag;
        };
        Diagnostic.prototype.severity = function () {
            return this._severity;
        };
        Diagnostic.prototype.message = function () {
            return this._message;
        };
        Diagnostic.prototype.note = function () {
            return this._note;
        };
        Diagnostic.prototype.cause = function () {
            return this._cause;
        };
        Diagnostic.prototype.lineDigits = function () {
            var digits = Base10.countDigits(this._tag.end().line());
            if (this._cause !== null) {
                digits = Math.max(digits, this._cause.lineDigits());
            }
            return digits;
        };
        Diagnostic.prototype.display = function (output) {
            var input = this._input.clone();
            var start = this._tag.start();
            var end = this._tag.end();
            var severity = this._severity;
            var message = this._message;
            var note = this._note;
            var cause = this._cause;
            var contextLines = 2;
            var lineDigits = this.lineDigits();
            Diagnostic.displayDiagnostic(input, start, end, severity, message, note, cause, contextLines, lineDigits, output);
        };
        Diagnostic.prototype.toString = function (settings) {
            return Format.display(this, settings);
        };
        Diagnostic.from = function (input, tag, severity, message, note, cause) {
            if (message instanceof Diagnostic) {
                cause = message;
                note = null;
                message = null;
            }
            else if (note instanceof Diagnostic) {
                cause = note;
                note = null;
            }
            input = input.clone();
            if (message === void 0) {
                message = null;
            }
            if (note === void 0) {
                note = null;
            }
            if (cause === void 0) {
                cause = null;
            }
            return new Diagnostic(input, tag, severity, message, note, cause);
        };
        Diagnostic.message = function (message, input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = Severity.error();
            }
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.unexpected = function (input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = Severity.error();
            }
            var message;
            if (input.isCont()) {
                var output = Unicode.stringOutput().write("unexpected").write(32);
                Format.debugChar(input.head(), output);
                message = output.bind();
            }
            else {
                message = "unexpected end of input";
            }
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.expected = function (expected, input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = Severity.error();
            }
            var output = Unicode.stringOutput().write("expected").write(32);
            if (typeof expected === "number") {
                Format.debugChar(expected, output);
            }
            else {
                output = output.write(expected);
            }
            output = output.write(44).write(32).write("but found").write(32);
            if (input.isCont()) {
                Format.debugChar(input.head(), output);
            }
            else {
                output = output.write("end of input");
            }
            var message = output.bind();
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.displayDiagnostic = function (input, start, end, severity, message, note, cause, contextLines, lineDigits, output) {
            do {
                if (message !== null) {
                    Diagnostic.displayMessage(severity, message, output);
                    output = output.writeln();
                }
                Diagnostic.displayAnchor(input, start, lineDigits, output);
                output = output.writeln();
                var next = Diagnostic.displayContext(input, start, end, severity, note, cause, contextLines, lineDigits, output);
                if (next !== null) {
                    output = output.writeln();
                    input = next._input.clone();
                    start = next._tag.start();
                    end = next._tag.end();
                    severity = next._severity;
                    message = next._message;
                    note = next._note;
                    cause = next._cause;
                }
                else {
                    break;
                }
            } while (true);
        };
        Diagnostic.displayMessage = function (severity, message, output) {
            Diagnostic.formatSeverity(severity, output);
            output = output.write(severity.label());
            OutputStyle.reset(output);
            OutputStyle.bold(output);
            output = output.write(58);
            if (message !== null) {
                output = output.write(32).write(message);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayAnchor = function (input, start, lineDigits, output) {
            Diagnostic.displayLineLeadArrow(lineDigits, output);
            output = output.write(32);
            var id = input.id();
            if (id !== null) {
                Format.display(id, output);
            }
            output = output.write(58);
            Format.displayNumber(start._line, output);
            output = output.write(58);
            Format.displayNumber(start._column, output);
            output = output.writeln();
            Diagnostic.displayLineLead(lineDigits, output);
        };
        Diagnostic.displayCause = function (cause, contextLines, lineDigits, output) {
            var input = cause._input.clone();
            var start = cause._tag.start();
            var end = cause._tag.end();
            var severity = cause._severity;
            var note = cause._note;
            var next = cause._cause;
            return Diagnostic.displayContext(input, start, end, severity, note, next, contextLines, lineDigits, output);
        };
        Diagnostic.displayContext = function (input, start, end, severity, note, cause, contextLines, lineDigits, output) {
            var next = cause;
            var sameCause = cause !== null && cause._message === null
                && Objects.equal(input.id(), cause._input.id());
            var causeOrder = sameCause ? (start._offset <= cause._tag.start()._offset ? -1 : 1) : 0;
            if (causeOrder === 1) {
                next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
                output = output.writeln();
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.writeln();
            }
            Diagnostic.displayLines(input, start, end, severity, contextLines, lineDigits, output);
            if (note !== null) {
                Diagnostic.displayNote(note, lineDigits, output);
            }
            if (causeOrder === -1) {
                output = output.writeln();
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.writeln();
                next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
            }
            return next;
        };
        Diagnostic.displayLines = function (input, start, end, severity, contextLines, lineDigits, output) {
            var startLine = start.line();
            var endLine = end.line();
            var line = input.line();
            while (line < startLine) {
                Diagnostic.consumeLineText(input, line);
                line += 1;
            }
            if (endLine - startLine > 2 * contextLines + 2) {
                while (line <= startLine + contextLines) {
                    Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
                    line += 1;
                }
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.write(32);
                Diagnostic.formatSeverity(severity, output);
                output = output.write(124);
                OutputStyle.reset(output);
                output = output.writeln();
                while (line < endLine - contextLines) {
                    Diagnostic.consumeLineText(input, line);
                    line += 1;
                }
            }
            while (line <= endLine) {
                Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
                line += 1;
            }
        };
        Diagnostic.displayNote = function (note, lineDigits, output) {
            output = output.writeln();
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.writeln();
            Diagnostic.displayLineComment('note', note, lineDigits, output);
        };
        Diagnostic.displayLine = function (input, start, end, severity, line, lineDigits, output) {
            if (start._line === line && end._line === line) {
                Diagnostic.displaySingleLine(input, start, end, severity, line, lineDigits, output);
            }
            else if (start._line === line) {
                Diagnostic.displayStartLine(input, start, severity, line, lineDigits, output);
            }
            else if (end._line === line) {
                Diagnostic.displayEndLine(input, end, severity, line, lineDigits, output);
            }
            else {
                Diagnostic.displayMidLine(input, severity, line, lineDigits, output);
            }
        };
        Diagnostic.displaySingleLine = function (input, start, end, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            for (var i_1 = 1; i_1 < input.column(); i_1 += 1) {
                output = output.write(32);
            }
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32);
            var i = 1;
            while (i < start._column) {
                output = output.write(32);
                i += 1;
            }
            Diagnostic.formatSeverity(severity, output);
            while (i <= end._column) {
                output = output.write(94);
                i += 1;
            }
            if (end._note !== null) {
                output = output.write(32).write(end._note);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayStartLine = function (input, start, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32).write(32).write(32);
            for (var i_2 = 1; i_2 < input.column(); i_2 += 1) {
                output = output.write(32);
            }
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32).write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(95);
            var i = 1;
            while (i < start._column) {
                output = output.write(95);
                i += 1;
            }
            output = output.write(94);
            if (start._note !== null) {
                output = output.write(32).write(start._note);
            }
            OutputStyle.reset(output);
            output = output.writeln();
        };
        Diagnostic.displayEndLine = function (input, end, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124);
            OutputStyle.reset(output);
            output = output.write(32);
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124).write(95);
            var i = 1;
            while (i < end._column) {
                output = output.write(95);
                i += 1;
            }
            output = output.write(94);
            if (end._note !== null) {
                output = output.write(32).write(end._note);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayMidLine = function (input, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124);
            OutputStyle.reset(output);
            output = output.write(32);
            Diagnostic.displayLineText(input, line, output);
        };
        Diagnostic.displayLineComment = function (label, comment, lineDigits, output) {
            Diagnostic.displayLineLeadComment(lineDigits, output);
            output = output.write(32);
            OutputStyle.bold(output);
            output = output.write(label).write(58);
            OutputStyle.reset(output);
            if (comment != null) {
                output = output.write(32).write(comment);
            }
        };
        Diagnostic.displayLineLead = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            var padding = 1 + lineDigits;
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            output = output.write(124);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadComment = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            var padding = 1 + lineDigits;
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            output = output.write(61);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadArrow = function (lineDigits, output) {
            for (var i = 0; i < lineDigits; i += 1) {
                output = output.write(32);
            }
            OutputStyle.blueBold(output);
            output = output.write(45).write(45).write(62);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadEllipsis = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            for (var i = 0; i < lineDigits; i += 1) {
                output = output.write(46);
            }
            OutputStyle.reset(output);
            output = output.write(32).write(32);
        };
        Diagnostic.displayLineLeadNumber = function (line, lineDigits, output) {
            var padding = lineDigits - Base10.countDigits(line);
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            OutputStyle.blueBold(output);
            Format.displayNumber(line, output);
            output = output.write(32).write(124);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineText = function (input, line, output) {
            while (input.isCont() && input.line() === line) {
                output = output.write(input.head());
                input = input.step();
            }
            if (input.line() === line) {
                output = output.writeln();
            }
        };
        Diagnostic.consumeLineText = function (input, line) {
            while (input.isCont() && input.line() === line) {
                input = input.step();
            }
        };
        Diagnostic.formatSeverity = function (severity, output) {
            switch (severity.level()) {
                case Severity.FATAL_LEVEL:
                case Severity.ALERT_LEVEL:
                case Severity.ERROR_LEVEL:
                    OutputStyle.redBold(output);
                    break;
                case Severity.WARNING_LEVEL:
                    OutputStyle.yellowBold(output);
                    break;
                case Severity.NOTE_LEVEL:
                    OutputStyle.greenBold(output);
                    break;
                case Severity.INFO_LEVEL:
                    OutputStyle.cyanBold(output);
                    break;
                case Severity.DEBUG_LEVEL:
                case Severity.TRACE_LEVEL:
                default:
                    OutputStyle.magentaBold(output);
            }
        };
        return Diagnostic;
    }());

    var ParserException = (function (_super) {
        __extends(ParserException, _super);
        function ParserException(message) {
            var _this = _super.call(this, message instanceof Diagnostic ? message.message() || void 0 : message) || this;
            if (message instanceof Diagnostic) {
                _this.diagnostic = message;
            }
            _this.__proto__ = ParserException.prototype;
            return _this;
        }
        ParserException.prototype.toString = function () {
            if (this.diagnostic) {
                return this.diagnostic.toString();
            }
            else {
                return _super.prototype.toString.call(this);
            }
        };
        return ParserException;
    }(Error));

    var Parser = (function () {
        function Parser() {
        }
        Parser.prototype.isCont = function () {
            return true;
        };
        Parser.prototype.isDone = function () {
            return false;
        };
        Parser.prototype.isError = function () {
            return false;
        };
        Parser.prototype.fork = function (condition) {
            return this;
        };
        Parser.prototype.bind = function () {
            throw new Error();
        };
        Parser.prototype.trap = function () {
            throw new Error();
        };
        Parser.prototype.asError = function () {
            throw new Error();
        };
        Parser.done = function (output) {
            if (output === void 0) {
                if (!Parser._done) {
                    Parser._done = new ParserDone(void 0);
                }
                return Parser._done;
            }
            else {
                return new ParserDone(output);
            }
        };
        Parser.error = function (error) {
            if (error instanceof Error) {
                return new ParserError(error);
            }
            else {
                return new ParserError(new ParserException(error));
            }
        };
        return Parser;
    }());
    var ParserDone = (function (_super) {
        __extends(ParserDone, _super);
        function ParserDone(output) {
            var _this = _super.call(this) || this;
            _this._output = output;
            return _this;
        }
        ParserDone.prototype.isCont = function () {
            return false;
        };
        ParserDone.prototype.isDone = function () {
            return true;
        };
        ParserDone.prototype.feed = function (input) {
            return this;
        };
        ParserDone.prototype.bind = function () {
            return this._output;
        };
        return ParserDone;
    }(Parser));
    var ParserError = (function (_super) {
        __extends(ParserError, _super);
        function ParserError(error) {
            var _this = _super.call(this) || this;
            _this._error = error;
            return _this;
        }
        ParserError.prototype.isCont = function () {
            return false;
        };
        ParserError.prototype.isError = function () {
            return true;
        };
        ParserError.prototype.feed = function (input) {
            return this;
        };
        ParserError.prototype.bind = function () {
            throw this._error;
        };
        ParserError.prototype.trap = function () {
            return this._error;
        };
        ParserError.prototype.asError = function () {
            return this;
        };
        return ParserError;
    }(Parser));

    var UtfErrorMode = (function () {
        function UtfErrorMode() {
        }
        UtfErrorMode.prototype.isFatal = function () {
            return false;
        };
        UtfErrorMode.prototype.isReplacement = function () {
            return false;
        };
        UtfErrorMode.prototype.replacementChar = function () {
            return 0xfffd;
        };
        UtfErrorMode.prototype.toString = function () {
            return Format.debug(this);
        };
        UtfErrorMode.fatal = function () {
            if (!UtfErrorMode._fatal) {
                UtfErrorMode._fatal = new UtfFatalErrorMode(false);
            }
            return UtfErrorMode._fatal;
        };
        UtfErrorMode.fatalNonZero = function () {
            if (!UtfErrorMode._fatalNonZero) {
                UtfErrorMode._fatalNonZero = new UtfFatalErrorMode(true);
            }
            return UtfErrorMode._fatalNonZero;
        };
        UtfErrorMode.replacement = function (replacementChar) {
            if (replacementChar === void 0 || replacementChar === 0xfffd) {
                if (!UtfErrorMode._replacement) {
                    UtfErrorMode._replacement = new UtfReplacementErrorMode(0xfffd, false);
                }
                return UtfErrorMode._replacement;
            }
            else {
                return new UtfReplacementErrorMode(replacementChar, false);
            }
        };
        UtfErrorMode.replacementNonZero = function (replacementChar) {
            if (replacementChar === void 0 || replacementChar === 0xfffd) {
                if (!UtfErrorMode._replacementNonZero) {
                    UtfErrorMode._replacementNonZero = new UtfReplacementErrorMode(0xfffd, true);
                }
                return UtfErrorMode._replacementNonZero;
            }
            else {
                return new UtfReplacementErrorMode(replacementChar, true);
            }
        };
        return UtfErrorMode;
    }());
    var UtfFatalErrorMode = (function (_super) {
        __extends(UtfFatalErrorMode, _super);
        function UtfFatalErrorMode(isNonZero) {
            var _this = _super.call(this) || this;
            _this._isNonZero = isNonZero;
            return _this;
        }
        UtfFatalErrorMode.prototype.isFatal = function () {
            return true;
        };
        UtfFatalErrorMode.prototype.isNonZero = function (isNonZero) {
            if (isNonZero === void 0) {
                return this._isNonZero;
            }
            else if (isNonZero) {
                return UtfErrorMode.fatalNonZero();
            }
            else {
                return UtfErrorMode.fatal();
            }
        };
        UtfFatalErrorMode.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UtfFatalErrorMode) {
                return this._isNonZero === that._isNonZero;
            }
            return false;
        };
        UtfFatalErrorMode.prototype.hashCode = function () {
            if (UtfFatalErrorMode._hashSeed === void 0) {
                UtfFatalErrorMode._hashSeed = Murmur3.seed(UtfFatalErrorMode);
            }
            return Murmur3.mash(Murmur3.mix(UtfFatalErrorMode._hashSeed, Murmur3.hash(this._isNonZero)));
        };
        UtfFatalErrorMode.prototype.debug = function (output) {
            output = output.write("UtfErrorMode").write(46)
                .write(this.isNonZero ? "fatalNonZero" : "fatal")
                .write(40).write(41);
        };
        return UtfFatalErrorMode;
    }(UtfErrorMode));
    var UtfReplacementErrorMode = (function (_super) {
        __extends(UtfReplacementErrorMode, _super);
        function UtfReplacementErrorMode(replacementChar, isNonZero) {
            var _this = _super.call(this) || this;
            _this._replacementChar = replacementChar;
            _this._isNonZero = isNonZero;
            return _this;
        }
        UtfReplacementErrorMode.prototype.isReplacement = function () {
            return true;
        };
        UtfReplacementErrorMode.prototype.replacementChar = function () {
            return this._replacementChar;
        };
        UtfReplacementErrorMode.prototype.isNonZero = function (isNonZero) {
            if (isNonZero === void 0) {
                return this._isNonZero;
            }
            else if (this._replacementChar === 0xfffd) {
                if (isNonZero) {
                    return UtfErrorMode.replacementNonZero();
                }
                else {
                    return UtfErrorMode.replacement();
                }
            }
            else {
                return new UtfReplacementErrorMode(this._replacementChar, isNonZero);
            }
        };
        UtfReplacementErrorMode.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UtfReplacementErrorMode) {
                return this.replacementChar === that.replacementChar
                    && this.isNonZero === that.isNonZero;
            }
            return false;
        };
        UtfReplacementErrorMode.prototype.hashCode = function () {
            if (UtfReplacementErrorMode._hashSeed === void 0) {
                UtfReplacementErrorMode._hashSeed = Murmur3.seed(UtfReplacementErrorMode);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(UtfReplacementErrorMode._hashSeed, this._replacementChar), Murmur3.hash(this._isNonZero)));
        };
        UtfReplacementErrorMode.prototype.debug = function (output) {
            output = output.write("UtfErrorMode").write(46)
                .write(this._isNonZero ? "replacementNonZero" : "replacement")
                .write(40);
            if (this._replacementChar !== 0xfffd) {
                Format.debugChar(this._replacementChar, output);
            }
            output = output.write(41);
        };
        return UtfReplacementErrorMode;
    }(UtfErrorMode));

    var Uint8ArrayOutput = (function (_super) {
        __extends(Uint8ArrayOutput, _super);
        function Uint8ArrayOutput(array, index, limit, settings, isPart) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (isPart === void 0) { isPart = false; }
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._index = index;
            _this._limit = limit;
            _this._settings = settings;
            _this._isPart = isPart;
            return _this;
        }
        Uint8ArrayOutput.prototype.isCont = function () {
            return this._index < this._limit;
        };
        Uint8ArrayOutput.prototype.isFull = function () {
            return this._isPart && this._index >= this._limit;
        };
        Uint8ArrayOutput.prototype.isDone = function () {
            return !this._isPart && this._index >= this._limit;
        };
        Uint8ArrayOutput.prototype.isError = function () {
            return false;
        };
        Uint8ArrayOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._isPart;
            }
            else {
                this._isPart = isPart;
                return this;
            }
        };
        Uint8ArrayOutput.prototype.index = function (index) {
            if (index === void 0) {
                return this._index;
            }
            else if (0 <= index && index <= this._limit) {
                this._index = index;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.limit = function (limit) {
            if (limit === void 0) {
                return this._limit;
            }
            else if (0 <= limit && limit <= this._array.length) {
                this._limit = limit;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid limit"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.capacity = function () {
            return this._array.length;
        };
        Uint8ArrayOutput.prototype.remaining = function () {
            return this._limit - this._index;
        };
        Uint8ArrayOutput.prototype.has = function (index) {
            return 0 <= index && index < this._limit;
        };
        Uint8ArrayOutput.prototype.get = function (index) {
            if (0 <= index && index < this._limit) {
                return this._array[index];
            }
            else {
                throw new OutputException();
            }
        };
        Uint8ArrayOutput.prototype.set = function (index, token) {
            if (0 <= index && index < this._limit) {
                this._array[index] = token;
            }
            else {
                throw new OutputException();
            }
        };
        Uint8ArrayOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var index = this._index;
                if (index < this._limit) {
                    this._array[index] = token;
                    this._index = index + 1;
                    return this;
                }
                else {
                    return OutputBuffer.error(new OutputException("full"), this._settings);
                }
            }
            else {
                return OutputBuffer.error(new OutputException("binary output"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("binary output"), this._settings);
        };
        Uint8ArrayOutput.prototype.step = function (offset) {
            var index = this._index + offset;
            if (0 <= index && index <= this._limit) {
                this._index = index;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.bind = function () {
            return new Uint8Array(this._array.buffer, 0, this._index);
        };
        Uint8ArrayOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        Uint8ArrayOutput.prototype.clone = function () {
            return new Uint8ArrayOutput(this._array, this._index, this._limit, this._settings, this._isPart);
        };
        return Uint8ArrayOutput;
    }(OutputBuffer));

    var ByteOutput = (function (_super) {
        __extends(ByteOutput, _super);
        function ByteOutput(array, size, settings) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._size = size;
            _this._settings = settings;
            return _this;
        }
        ByteOutput.prototype.isCont = function () {
            return true;
        };
        ByteOutput.prototype.isFull = function () {
            return false;
        };
        ByteOutput.prototype.isDone = function () {
            return false;
        };
        ByteOutput.prototype.isError = function () {
            return false;
        };
        ByteOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        ByteOutput.prototype.write = function (b) {
            if (typeof b === "number") {
                var n = this._size;
                var oldArray = this._array;
                var newArray = void 0;
                if (oldArray === null || n + 1 > oldArray.length) {
                    newArray = new Uint8Array(ByteOutput.expand(n + 1));
                    if (oldArray !== null) {
                        newArray.set(oldArray, 0);
                    }
                    this._array = newArray;
                }
                else {
                    newArray = oldArray;
                }
                newArray[n] = b;
                this._size = n + 1;
                return this;
            }
            else {
                throw new TypeError("" + b);
            }
        };
        ByteOutput.prototype.writeln = function (string) {
            throw new TypeError("" + string);
        };
        ByteOutput.prototype.toUint8Array = function () {
            var n = this._size;
            var oldArray = this._array;
            if (oldArray !== null && n === oldArray.length) {
                return oldArray;
            }
            else {
                var newArray = new Uint8Array(n);
                if (oldArray !== null) {
                    newArray.set(oldArray.slice(0, n), 0);
                }
                this._array = newArray;
                return newArray;
            }
        };
        ByteOutput.prototype.cloneArray = function () {
            var oldArray = this._array;
            if (oldArray !== null) {
                return oldArray.slice(0, this._size);
            }
            else {
                return null;
            }
        };
        ByteOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        ByteOutput.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        return ByteOutput;
    }(Output));

    var ByteOutputUint8Array = (function (_super) {
        __extends(ByteOutputUint8Array, _super);
        function ByteOutputUint8Array(array, size, settings) {
            return _super.call(this, array, size, settings) || this;
        }
        ByteOutputUint8Array.prototype.bind = function () {
            return this.toUint8Array();
        };
        ByteOutputUint8Array.prototype.clone = function () {
            return new ByteOutputUint8Array(this.cloneArray(), this._size, this._settings);
        };
        return ByteOutputUint8Array;
    }(ByteOutput));

    var Binary = (function () {
        function Binary() {
        }
        Binary.outputBuffer = function (array, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = array.length; }
            return new Uint8ArrayOutput(array, offset, offset + length);
        };
        Binary.uint8ArrayOutput = function (initialCapacity, settings) {
            if (settings === void 0 && typeof initialCapacity !== "number") {
                settings = initialCapacity;
                initialCapacity = void 0;
            }
            else if (typeof initialCapacity !== "number") {
                initialCapacity = void 0;
            }
            var array;
            if (typeof initialCapacity === "number") {
                array = new Uint8Array(initialCapacity);
            }
            else {
                array = null;
            }
            settings = OutputSettings.fromAny(settings);
            return new ByteOutputUint8Array(array, 0, settings);
        };
        return Binary;
    }());

    var Base16 = (function () {
        function Base16(alphabet) {
            this._alphabet = alphabet;
        }
        Base16.prototype.alphabet = function () {
            return this._alphabet;
        };
        Base16.prototype.encodeDigit = function (b) {
            return this._alphabet.charCodeAt(b);
        };
        Base16.prototype.uint8ArrayWriter = function (input) {
            if (input === void 0) {
                return new Base16.Writer(void 0, void 0, this);
            }
            else {
                return new Base16.Writer(input, input, this);
            }
        };
        Base16.prototype.writeUint8Array = function (input, output) {
            return Base16.Writer.write(output, void 0, input, this);
        };
        Base16.prototype.writeInteger = function (input, output, width) {
            if (width === void 0) { width = 0; }
            return Base16.IntegerWriter.write(output, void 0, input, width, this);
        };
        Base16.prototype.writeIntegerLiteral = function (input, output, width) {
            if (width === void 0) { width = 0; }
            return Base16.IntegerWriter.writeLiteral(output, void 0, input, width, this);
        };
        Base16.lowercase = function () {
            if (!Base16._lowercase) {
                Base16._lowercase = new Base16("0123456789abcdef");
            }
            return Base16._lowercase;
        };
        Base16.uppercase = function () {
            if (!Base16._uppercase) {
                Base16._uppercase = new Base16("0123456789ABCDEF");
            }
            return Base16._uppercase;
        };
        Base16.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 70
                || c >= 97 && c <= 102;
        };
        Base16.decodeDigit = function (c) {
            if (c >= 48 && c <= 57) {
                return c - 48;
            }
            else if (c >= 65 && c <= 70) {
                return 10 + (c - 65);
            }
            else if (c >= 97 && c <= 102) {
                return 10 + (c - 97);
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-16 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base16.writeQuantum = function (c1, c2, output) {
            var x = Base16.decodeDigit(c1);
            var y = Base16.decodeDigit(c2);
            output = output.write(x << 4 | y);
        };
        Base16.parser = function (output) {
            return new Base16.Parser(output);
        };
        Base16.parse = function (input, output) {
            return Base16.Parser.parse(input, output);
        };
        Base16.parseUint8Array = function (input) {
            return Base16.Parser.parse(input, Binary.uint8ArrayOutput());
        };
        return Base16;
    }());

    var Utf8DecodedOutput = (function (_super) {
        __extends(Utf8DecodedOutput, _super);
        function Utf8DecodedOutput(output, errorMode, c1, c2, c3, have) {
            if (c1 === void 0) { c1 = -1; }
            if (c2 === void 0) { c2 = -1; }
            if (c3 === void 0) { c3 = -1; }
            if (have === void 0) { have = 0; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._errorMode = errorMode;
            _this._c1 = c1;
            _this._c2 = c2;
            _this._c3 = c3;
            _this._have = have;
            return _this;
        }
        Utf8DecodedOutput.prototype.isCont = function () {
            return this._output.isCont();
        };
        Utf8DecodedOutput.prototype.isFull = function () {
            return this._output.isFull();
        };
        Utf8DecodedOutput.prototype.isDone = function () {
            return this._output.isDone();
        };
        Utf8DecodedOutput.prototype.isError = function () {
            return this._output.isError();
        };
        Utf8DecodedOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._output.isPart();
            }
            else {
                this._output = this._output.isPart(isPart);
                return this;
            }
        };
        Utf8DecodedOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var c1 = this._c1;
                var c2 = this._c2;
                var c3 = this._c3;
                var c4 = -1;
                var have = this._have;
                if (token >= 0) {
                    switch (have) {
                        case 0:
                            c1 = token & 0xff;
                            have = 1;
                            break;
                        case 1:
                            c2 = token & 0xff;
                            have = 2;
                            break;
                        case 2:
                            c3 = token & 0xff;
                            have = 3;
                            break;
                        case 3:
                            c4 = token & 0xff;
                            have = 4;
                            break;
                        default:
                            throw new Error("unreachable");
                    }
                }
                if (c1 === 0 && this._errorMode.isNonZero()) {
                    return Output.error(new OutputException("unexpected NUL byte"));
                }
                else if (c1 >= 0 && c1 <= 0x7f) {
                    this._output = this._output.write(c1);
                    this._have = 0;
                }
                else if (c1 >= 0xc2 && c1 <= 0xf4) {
                    if (c1 >= 0xc2 && c1 <= 0xdf && c2 >= 0x80 && c2 <= 0xbf) {
                        this._output = this._output.write((c1 & 0x1f) << 6 | c2 & 0x3f);
                        this._c1 = -1;
                        this._have = 0;
                    }
                    else if (c1 === 0xe0 && c2 >= 0xa0 && c2 <= 0xbf
                        || c1 >= 0xe1 && c1 <= 0xec && c2 >= 0x80 && c2 <= 0xbf
                        || c1 === 0xed && c2 >= 0x80 && c2 <= 0x9f
                        || c1 >= 0xee && c1 <= 0xef && c2 >= 0x80 && c2 <= 0xbf) {
                        if (c3 >= 0x80 && c3 <= 0xbf) {
                            this._output = this._output.write((c1 & 0x0f) << 12 | (c2 & 0x3f) << 6 | c3 & 0x3f);
                            this._c1 = -1;
                            this._c2 = -1;
                            this._have = 0;
                        }
                        else if (c3 >= 0) {
                            if (this._errorMode.isFatal()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            this._output = this._output.write(this._errorMode.replacementChar());
                            this._c1 = c3;
                            this._c2 = -1;
                            this._have = 1;
                        }
                        else if (token < 0 || this._output.isDone()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        else {
                            this._c2 = c2;
                            this._have = 2;
                        }
                    }
                    else if (c1 === 0xf0 && c2 >= 0x90 && c2 <= 0xbf
                        || c1 >= 0xf1 && c1 <= 0xf3 && c2 >= 0x80 && c2 <= 0xbf
                        || c1 === 0xf4 && c2 >= 0x80 && c2 <= 0x8f) {
                        if (c3 >= 0x80 && c3 <= 0xbf) {
                            if (c4 >= 0x80 && c4 <= 0xbf) {
                                this._have = 4;
                                this._output = this._output.write((c1 & 0x07) << 18 | (c2 & 0x3f) << 12 | (c3 & 0x3f) << 6 | c4 & 0x3f);
                                this._c1 = -1;
                                this._c2 = -1;
                                this._c3 = -1;
                                this._have = 0;
                            }
                            else if (c4 >= 0) {
                                if (this._errorMode.isFatal()) {
                                    return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3, c4)));
                                }
                                this._output = this._output.write(this._errorMode.replacementChar());
                                this._c1 = c4;
                                this._c2 = -1;
                                this._c3 = -1;
                                this._have = 1;
                            }
                            else if (token < 0 || this._output.isDone()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            else {
                                this._c3 = c3;
                                this._have = 3;
                            }
                        }
                        else if (c3 >= 0) {
                            if (this._errorMode.isFatal()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            this._output = this._output.write(this._errorMode.replacementChar());
                            this._c1 = c3;
                            this._c2 = -1;
                            this._have = 1;
                        }
                        else if (token < 0 || this._output.isDone()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        else {
                            this._c2 = c2;
                            this._have = 2;
                        }
                    }
                    else if (c2 >= 0) {
                        if (this._errorMode.isFatal()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        this._output = this._output.write(this._errorMode.replacementChar());
                        this._c1 = c2;
                        this._have = 1;
                    }
                    else if (token < 0 || this._output.isDone()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                    }
                    else {
                        this._c1 = c1;
                        this._have = 1;
                    }
                }
                else if (c1 >= 0) {
                    if (this._errorMode.isFatal()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                    }
                    this._output = this._output.write(this._errorMode.replacementChar());
                    this._have = 0;
                }
                if (this._output.isError()) {
                    return this._output;
                }
                return this;
            }
            else if (typeof token === "string") {
                this._output.write(token);
                return this;
            }
            else {
                throw new TypeError("" + token);
            }
        };
        Utf8DecodedOutput.invalid = function (c1, c2, c3, c4) {
            var output = Unicode.stringOutput();
            output = output.write("invalid UTF-8 code unit sequence: ");
            Base16.uppercase().writeIntegerLiteral(c1, output, 2);
            if (c2 !== void 0) {
                output = output.write(' ');
                Base16.uppercase().writeIntegerLiteral(c2, output, 2);
                if (c3 !== void 0) {
                    output = output.write(' ');
                    Base16.uppercase().writeIntegerLiteral(c3, output, 2);
                    if (c4 !== void 0) {
                        output = output.write(' ');
                        Base16.uppercase().writeIntegerLiteral(c4, output, 2);
                    }
                }
            }
            return output.bind();
        };
        Utf8DecodedOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._output.settings();
            }
            else {
                this._output.settings(settings);
                return this;
            }
        };
        Utf8DecodedOutput.prototype.bind = function () {
            if (this._have === 0) {
                return this._output.bind();
            }
            else {
                return this.write(-1).bind();
            }
        };
        Utf8DecodedOutput.prototype.trap = function () {
            return this._output.trap();
        };
        Utf8DecodedOutput.prototype.clone = function () {
            return new Utf8DecodedOutput(this._output.clone(), this._errorMode, this._c1, this._c2, this._c3, this._have);
        };
        return Utf8DecodedOutput;
    }(Output));

    var Utf8EncodedOutput = (function (_super) {
        __extends(Utf8EncodedOutput, _super);
        function Utf8EncodedOutput(output, errorMode, c2, c3, c4, index) {
            if (c2 === void 0) { c2 = 0; }
            if (c3 === void 0) { c3 = 0; }
            if (c4 === void 0) { c4 = 0; }
            if (index === void 0) { index = 4; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._errorMode = errorMode;
            _this._c2 = c2;
            _this._c3 = c3;
            _this._c4 = c4;
            _this._index = index;
            return _this;
        }
        Utf8EncodedOutput.prototype.isCont = function () {
            return this._output.isCont();
        };
        Utf8EncodedOutput.prototype.isFull = function () {
            return this._output.isFull();
        };
        Utf8EncodedOutput.prototype.isDone = function () {
            return this._output.isDone();
        };
        Utf8EncodedOutput.prototype.isError = function () {
            return false;
        };
        Utf8EncodedOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._output.isPart();
            }
            else {
                this._output = this._output.isPart(isPart);
                return this;
            }
        };
        Utf8EncodedOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var c1 = 0;
                var c2 = this._c2;
                var c3 = this._c3;
                var c4 = this._c4;
                var index = this._index;
                while (index < 4) {
                    if (this._output.isCont()) {
                        switch (index) {
                            case 1:
                                this._output = this._output.write(c2);
                                this._c2 = 0;
                                break;
                            case 2:
                                this._output = this._output.write(c3);
                                this._c3 = 0;
                                break;
                            case 3:
                                this._output = this._output.write(c4);
                                this._c4 = 0;
                                break;
                            default: throw new Error("unreachable");
                        }
                        index += 1;
                    }
                    else {
                        return Output.error(new OutputException("unable to flush buffered code units"));
                    }
                }
                if (token >= 0 && token <= 0x7f) {
                    c4 = token;
                    index = 3;
                }
                else if (token >= 0x80 && token <= 0x7ff) {
                    c3 = 0xc0 | (token >>> 6);
                    c4 = 0x80 | (token & 0x3f);
                    index = 2;
                }
                else if (token >= 0x0800 && token <= 0xffff ||
                    token >= 0xe000 && token <= 0xffff) {
                    c2 = 0xe0 | (token >>> 12);
                    c3 = 0x80 | ((token >>> 6) & 0x3f);
                    c4 = 0x80 | (token & 0x3f);
                    index = 1;
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    c1 = 0xf0 | (token >>> 18);
                    c2 = 0x80 | ((token >>> 12) & 0x3f);
                    c3 = 0x80 | ((token >>> 6) & 0x3f);
                    c4 = 0x80 | (token & 0x3f);
                    index = 0;
                }
                else {
                    if (this._errorMode.isFatal()) {
                        return Output.error(new OutputException("invalid code point: " + token));
                    }
                    else {
                        return this.write(this._errorMode.replacementChar());
                    }
                }
                do {
                    switch (index) {
                        case 0:
                            this._output = this._output.write(c1);
                            break;
                        case 1:
                            this._output = this._output.write(c2);
                            this._c2 = 0;
                            break;
                        case 2:
                            this._output = this._output.write(c3);
                            this._c3 = 0;
                            break;
                        case 3:
                            this._output = this._output.write(c4);
                            this._c4 = 0;
                            break;
                        default: throw new Error("unreachable");
                    }
                    index += 1;
                } while (index < 4 && this._output.isCont());
                if (index < 4) {
                    if (index < 3) {
                        if (index < 2) {
                            this._c2 = c2;
                        }
                        this._c3 = c3;
                    }
                    this._c4 = c4;
                }
                this._index = index;
                return this;
            }
            else if (typeof token === "string") {
                this._output.write(token);
                return this;
            }
            else {
                throw new TypeError("" + token);
            }
        };
        Utf8EncodedOutput.prototype.flush = function () {
            var index = this._index;
            while (index < 4) {
                if (this._output.isCont()) {
                    switch (index) {
                        case 1:
                            this._output = this._output.write(this._c2);
                            this._c2 = 0;
                            break;
                        case 2:
                            this._output = this._output.write(this._c3);
                            this._c3 = 0;
                            break;
                        case 3:
                            this._output = this._output.write(this._c4);
                            this._c4 = 0;
                            break;
                        default: throw new Error("unreachable");
                    }
                    index += 1;
                }
                else {
                    return Output.error(new OutputException("unable to flush buffered code units"));
                }
            }
            this._index = index;
            return this;
        };
        Utf8EncodedOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._output.settings();
            }
            else {
                this._output.settings(settings);
                return this;
            }
        };
        Utf8EncodedOutput.prototype.bind = function () {
            return this._output.bind();
        };
        Utf8EncodedOutput.prototype.clone = function () {
            return new Utf8EncodedOutput(this._output.clone(), this._errorMode, this._c2, this._c3, this._c4, this._index);
        };
        return Utf8EncodedOutput;
    }(Output));

    var Utf8 = (function () {
        function Utf8() {
        }
        Utf8.sizeOf = function (u, errorMode) {
            if (typeof u === "number" || u === void 0) {
                if (typeof u === "number") {
                    if (u === 0x0000 && errorMode !== void 0 && errorMode.isNonZero()) {
                        return 2;
                    }
                    else if (u >= 0x0000 && u <= 0x007F) {
                        return 1;
                    }
                    else if (u >= 0x0080 && u <= 0x07FF) {
                        return 2;
                    }
                    else if (u >= 0x0800 && u <= 0xFFFF ||
                        u >= 0xE000 && u <= 0xFFFF) {
                        return 3;
                    }
                    else if (u >= 0x10000 && u <= 0x10FFFF) {
                        return 4;
                    }
                }
                if (errorMode === void 0) {
                    return 3;
                }
                else if (errorMode.isReplacement()) {
                    return Utf8.sizeOf(errorMode.replacementChar());
                }
                else {
                    return 0;
                }
            }
            else if (typeof u === "string") {
                var size = 0;
                for (var i = 0, n = u.length; i < n; i = u.offsetByCodePoints(i, 1)) {
                    size += Utf8.sizeOf(u.charCodeAt(i), errorMode);
                }
                return size;
            }
            else {
                throw new TypeError("" + u);
            }
        };
        Utf8.decodedOutput = function (output, errorMode) {
            if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
            return new Utf8DecodedOutput(output, errorMode);
        };
        Utf8.encodedOutput = function (output, errorMode) {
            if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
            return new Utf8EncodedOutput(output, errorMode);
        };
        Utf8.decodedString = function () {
            return Utf8.decodedOutput(Unicode.stringOutput());
        };
        return Utf8;
    }());

    var Base10NumberParser = (function (_super) {
        __extends(Base10NumberParser, _super);
        function Base10NumberParser(sign, value, mode, step) {
            var _this = _super.call(this) || this;
            _this._sign = sign;
            _this._value = value;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        Base10NumberParser.prototype.feed = function (input) {
            return Base10NumberParser.parse(input, this._sign, this._value, this._mode, this._step);
        };
        Base10NumberParser.parse = function (input, sign, value, mode, step) {
            if (sign === void 0) { sign = 1; }
            if (value === void 0) { value = 0; }
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 45) {
                        input = input.step();
                        sign = -1;
                    }
                    step = 2;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 48) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c >= 49 && c <= 57) {
                        input = input.step();
                        value = sign * (c - 48);
                        step = 3;
                    }
                    else if (mode > 0 && c === 46) {
                        var output = Unicode.stringOutput();
                        if (sign < 0) {
                            output = output.write(45);
                        }
                        return Base10DecimalParser.parse(input, output, mode);
                    }
                    else {
                        return Parser.error(Diagnostic.expected("number", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        var newValue = 10 * value + sign * (c - 48);
                        if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {
                            value = newValue;
                            input = input.step();
                        }
                        else {
                            return Parser.error(Diagnostic.message("integer overflow", input));
                        }
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    step = 4;
                }
                else if (input.isDone()) {
                    return Parser.done(value);
                }
            }
            if (step === 4) {
                if (input.isCont()) {
                    c = input.head();
                    if (mode > 0 && c === 46 || mode > 1 && (c === 69 || c === 101)) {
                        var output = Unicode.stringOutput();
                        if (sign < 0 && value === 0) {
                            output = output.write(45).write(48);
                        }
                        else {
                            output = output.write("" + value);
                        }
                        return Base10DecimalParser.parse(input, output, mode);
                    }
                    else {
                        return Parser.done(value);
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(value);
                }
            }
            return new Base10NumberParser(sign, value, mode, step);
        };
        return Base10NumberParser;
    }(Parser));
    Base10.NumberParser = Base10NumberParser;
    var Base10DecimalParser = (function (_super) {
        __extends(Base10DecimalParser, _super);
        function Base10DecimalParser(output, mode, step) {
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        Base10DecimalParser.prototype.feed = function (input) {
            return Base10DecimalParser.parse(input, this._output, this._mode, this._step);
        };
        Base10DecimalParser.parse = function (input, output, mode, step) {
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 46) {
                        input = input.step();
                        output = output.write(c);
                        step = 2;
                    }
                    else if (mode > 1 && (c === 69 || c === 101)) {
                        input = input.step();
                        output = output.write(c);
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("decimal or exponent", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("decimal or exponent", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    if (mode > 1) {
                        step = 4;
                    }
                    else {
                        return Parser.done(+output.bind());
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(+output.bind());
                }
            }
            if (step === 4) {
                c = input.head();
                if (c === 69 || c === 101) {
                    input = input.step();
                    output = output.write(c);
                    step = 5;
                }
                else {
                    return Parser.done(+output.bind());
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 43 || c === 45) {
                        input = input.step();
                        output = output.write(c);
                    }
                    step = 6;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 6) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 7;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 7) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (!input.isEmpty()) {
                    return Parser.done(+output.bind());
                }
            }
            return new Base10DecimalParser(output, mode, step);
        };
        return Base10DecimalParser;
    }(Parser));

    var Base10IntegerWriter = (function (_super) {
        __extends(Base10IntegerWriter, _super);
        function Base10IntegerWriter(value, input, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base10IntegerWriter.prototype.pull = function (output) {
            return Base10IntegerWriter.write(output, this._value, this._input, this._index, this._step);
        };
        Base10IntegerWriter.write = function (output, value, input, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            if (step === 0) {
                return Writer.done();
            }
            if (step === 1) {
                if (input < 0) {
                    if (output.isCont()) {
                        output = output.write(45);
                        step = 2;
                    }
                }
                else {
                    step = 2;
                }
            }
            if (step === 2) {
                if (input > -10 && input < 10) {
                    if (output.isCont()) {
                        output = output.write(Base10.encodeDigit(Math.abs(input | 0)));
                        return Writer.done(value);
                    }
                }
                else {
                    var digits = new Array(19);
                    var x = input;
                    var i = 18;
                    while (x) {
                        digits[i] = Math.abs((x % 10) | 0);
                        x = (x / 10) | 0;
                        i -= 1;
                    }
                    i += 1 + index;
                    while (i < 19 && output.isCont()) {
                        output = output.write(Base10.encodeDigit(digits[i]));
                        index += 1;
                        i += 1;
                    }
                    if (i === 19) {
                        return Writer.done(value);
                    }
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base10IntegerWriter(value, input, index, step);
        };
        return Base10IntegerWriter;
    }(Writer));
    Base10.IntegerWriter = Base10IntegerWriter;

    var Base16Parser = (function (_super) {
        __extends(Base16Parser, _super);
        function Base16Parser(output, p, step) {
            if (p === void 0) { p = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._p = p;
            _this._step = step;
            return _this;
        }
        Base16Parser.prototype.feed = function (input) {
            return Base16Parser.parse(input, this._output.clone(), this._p, this._step);
        };
        Base16Parser.parse = function (input, output, p, step) {
            if (p === void 0) { p = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            while (!input.isEmpty()) {
                if (step === 1) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        p = c;
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(output.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        Base16.writeQuantum(p, c, output);
                        p = 0;
                        step = 1;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("base16 digit", input));
                    }
                }
            }
            return new Base16Parser(output, p, step);
        };
        return Base16Parser;
    }(Parser));
    Base16.Parser = Base16Parser;

    var Base16Writer = (function (_super) {
        __extends(Base16Writer, _super);
        function Base16Writer(value, input, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._base16 = base16;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base16Writer.prototype.feed = function (value) {
            if (value instanceof Uint8Array) {
                return new Base16Writer(undefined, value, this._base16);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Base16Writer.prototype.pull = function (output) {
            return Base16Writer.write(output, this._value, this._input, this._base16, this._index, this._step);
        };
        Base16Writer.write = function (output, value, input, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            while (index < input.length) {
                var x = input[index];
                if (step === 1 && output.isCont()) {
                    output = output.write(base16.encodeDigit(x >>> 4));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base16.encodeDigit(x & 0x0f));
                    index += 1;
                    step = 1;
                }
            }
            if (index === input.length) {
                return Writer.done(value);
            }
            else if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base16Writer(value, input, base16, index, step);
        };
        return Base16Writer;
    }(Writer));
    Base16.Writer = Base16Writer;

    var Base16IntegerWriter = (function (_super) {
        __extends(Base16IntegerWriter, _super);
        function Base16IntegerWriter(value, input, width, base16, index, step) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._width = width;
            _this._base16 = base16;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base16IntegerWriter.prototype.pull = function (output) {
            return Base16IntegerWriter.write(output, this._value, this._input, this._width, this._base16, this._index, this._step);
        };
        Base16IntegerWriter.write = function (output, value, input, width, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 3; }
            if (step <= 0) {
                return Writer.done();
            }
            if (step === 1 && output.isCont()) {
                output = output.write(48);
                step = 2;
            }
            if (step === 2 && output.isCont()) {
                output = output.write(120);
                step = 3;
            }
            if (step === 3) {
                if (input >= 0 && input < 16 && width <= 1) {
                    if (output.isCont()) {
                        output = output.write(base16.encodeDigit(input));
                        return Writer.done(value);
                    }
                }
                else {
                    var i = 15;
                    var digits = new Array(16);
                    var x = input;
                    while (x !== 0 || i >= 16 - width) {
                        digits[i] = x & 0xf;
                        x >>>= 4;
                        i -= 1;
                    }
                    i += 1 + index;
                    while (i < 16 && output.isCont()) {
                        output = output.write(base16.encodeDigit(digits[i]));
                        index += 1;
                        i += 1;
                    }
                    if (i === 16) {
                        return Writer.done(value);
                    }
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base16IntegerWriter(value, input, width, base16, index, step);
        };
        Base16IntegerWriter.writeLiteral = function (output, value, input, width, base16) {
            return Base16IntegerWriter.write(output, value, input, width, base16, 0, 1);
        };
        return Base16IntegerWriter;
    }(Writer));
    Base16.IntegerWriter = Base16IntegerWriter;

    var Base64 = (function () {
        function Base64() {
        }
        Base64.prototype.decodeDigit = function (c) {
            if (c >= 65 && c <= 90) {
                return c - 65;
            }
            else if (c >= 97 && c <= 122) {
                return c + (26 - 97);
            }
            else if (c >= 48 && c <= 57) {
                return c + (52 - 48);
            }
            else if (c === 43 || c === 45) {
                return 62;
            }
            else if (c === 47 || c === 95) {
                return 63;
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-64 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base64.prototype.encodeDigit = function (b) {
            return this.alphabet().charCodeAt(b);
        };
        Base64.prototype.writeQuantum = function (c1, c2, c3, c4, output) {
            var x = this.decodeDigit(c1);
            var y = this.decodeDigit(c2);
            if (c3 !== 61) {
                var z = this.decodeDigit(c3);
                if (c4 !== 61) {
                    var w = this.decodeDigit(c4);
                    output = output.write((x << 2) | (y >>> 4));
                    output = output.write((y << 4) | (z >>> 2));
                    output = output.write((z << 6) | w);
                }
                else {
                    output = output.write((x << 2) | (y >>> 4));
                    output = output.write((y << 4) | (z >>> 2));
                }
            }
            else {
                if (c4 !== 61) {
                    throw new Error("Improperly padded base-64");
                }
                output = output.write((x << 2) | (y >>> 4));
            }
        };
        Base64.prototype.parser = function (output) {
            return new Base64.Parser(output, this);
        };
        Base64.prototype.parse = function (input, output) {
            return Base64.Parser.parse(input, output, this);
        };
        Base64.prototype.parseUint8Array = function (input) {
            return Base64.Parser.parse(input, Binary.uint8ArrayOutput(), this);
        };
        Base64.prototype.uint8ArrayWriter = function (input) {
            if (input === void 0) {
                return new Base64.Writer(void 0, void 0, this);
            }
            else {
                return new Base64.Writer(input, input, this);
            }
        };
        Base64.prototype.writeUint8Array = function (input, output) {
            return Base64.Writer.write(output, void 0, input, this);
        };
        Base64.standard = function (isPadded) {
            if (isPadded === void 0) { isPadded = true; }
            if (isPadded) {
                if (!Base64._standard) {
                    Base64._standard = new Base64Standard(true);
                }
                return Base64._standard;
            }
            else {
                if (!Base64._standardUnpadded) {
                    Base64._standardUnpadded = new Base64Standard(true);
                }
                return Base64._standardUnpadded;
            }
        };
        Base64.url = function (isPadded) {
            if (isPadded === void 0) { isPadded = true; }
            if (isPadded) {
                if (!Base64._url) {
                    Base64._url = new Base64Url(true);
                }
                return Base64._url;
            }
            else {
                if (!Base64._urlUnpadded) {
                    Base64._urlUnpadded = new Base64Url(false);
                }
                return Base64._urlUnpadded;
            }
        };
        return Base64;
    }());
    var Base64Standard = (function (_super) {
        __extends(Base64Standard, _super);
        function Base64Standard(isPadded) {
            var _this = _super.call(this) || this;
            _this._isPadded = isPadded;
            return _this;
        }
        Base64Standard.prototype.alphabet = function () {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        };
        Base64Standard.prototype.isPadded = function (isPadded) {
            if (isPadded === void 0) {
                return this._isPadded;
            }
            else {
                if (isPadded === this._isPadded) {
                    return this;
                }
                else {
                    return Base64.standard(isPadded);
                }
            }
        };
        Base64Standard.prototype.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c === 43 || c === 47;
        };
        return Base64Standard;
    }(Base64));
    var Base64Url = (function (_super) {
        __extends(Base64Url, _super);
        function Base64Url(isPadded) {
            var _this = _super.call(this) || this;
            _this._isPadded = isPadded;
            return _this;
        }
        Base64Url.prototype.alphabet = function () {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
        };
        Base64Url.prototype.isPadded = function (isPadded) {
            if (isPadded === void 0) {
                return this._isPadded;
            }
            else {
                if (isPadded === this._isPadded) {
                    return this;
                }
                else {
                    return Base64.url(isPadded);
                }
            }
        };
        Base64Url.prototype.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c === 45 || c === 95;
        };
        return Base64Url;
    }(Base64));

    var Base64Parser = (function (_super) {
        __extends(Base64Parser, _super);
        function Base64Parser(output, base64, p, q, r, step) {
            if (p === void 0) { p = 0; }
            if (q === void 0) { q = 0; }
            if (r === void 0) { r = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._base64 = base64;
            _this._p = p;
            _this._q = q;
            _this._r = r;
            _this._step = step;
            return _this;
        }
        Base64Parser.prototype.feed = function (input) {
            return Base64Parser.parse(input, this._output.clone(), this._base64, this._p, this._q, this._r, this._step);
        };
        Base64Parser.parse = function (input, output, base64, p, q, r, step) {
            if (p === void 0) { p = 0; }
            if (q === void 0) { q = 0; }
            if (r === void 0) { r = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            while (!input.isEmpty()) {
                if (step === 1) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c))) {
                        input = input.step();
                        p = c;
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(output.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c))) {
                        input = input.step();
                        q = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("base64 digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61)) {
                        input = input.step();
                        r = c;
                        if (c !== 61) {
                            step = 4;
                        }
                        else {
                            step = 5;
                        }
                    }
                    else if (!input.isEmpty()) {
                        if (!base64.isPadded()) {
                            base64.writeQuantum(p, q, 61, 61, output);
                            return Parser.done(output.bind());
                        }
                        else {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                    }
                }
                if (step === 4) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61)) {
                        input = input.step();
                        base64.writeQuantum(p, q, r, c, output);
                        r = 0;
                        q = 0;
                        p = 0;
                        if (c !== 61) {
                            step = 1;
                        }
                        else {
                            return Parser.done(output.bind());
                        }
                    }
                    else if (!input.isEmpty()) {
                        if (!base64.isPadded()) {
                            base64.writeQuantum(p, q, r, 61, output);
                            return Parser.done(output.bind());
                        }
                        else {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                    }
                }
                else if (step === 5) {
                    if (input.isCont() && (c = input.head(), c === 61)) {
                        input = input.step();
                        base64.writeQuantum(p, q, r, c, output);
                        r = 0;
                        q = 0;
                        p = 0;
                        return Parser.done(output.bind());
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected(61, input));
                    }
                }
            }
            return new Base64Parser(output, base64, p, q, r, step);
        };
        return Base64Parser;
    }(Parser));
    Base64.Parser = Base64Parser;

    var Base64Writer = (function (_super) {
        __extends(Base64Writer, _super);
        function Base64Writer(value, input, base64, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._base64 = base64;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base64Writer.prototype.feed = function (value) {
            if (value instanceof Uint8Array) {
                return new Base64Writer(undefined, value, this._base64);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Base64Writer.prototype.pull = function (output) {
            return Base64Writer.write(output, this._value, this._input, this._base64, this._index, this._step);
        };
        Base64Writer.write = function (output, value, input, base64, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            while (index + 2 < input.length && output.isCont()) {
                var x = input[index];
                var y = input[index + 1];
                var z = input[index + 2];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));
                    step = 3;
                }
                if (step === 3 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((y << 2) | (z >>> 6)) & 0x3f));
                    step = 4;
                }
                if (step === 4 && output.isCont()) {
                    output = output.write(base64.encodeDigit(z & 0x3f));
                    index += 3;
                    step = 1;
                }
            }
            if (index + 1 < input.length && output.isCont()) {
                var x = input[index];
                var y = input[index + 1];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));
                    step = 3;
                }
                if (step === 3 && output.isCont()) {
                    output = output.write(base64.encodeDigit((y << 2) & 0x3f));
                    step = 4;
                }
                if (step === 4) {
                    if (!base64.isPadded()) {
                        index += 2;
                    }
                    else if (output.isCont()) {
                        output = output.write(61);
                        index += 2;
                    }
                }
            }
            else if (index < input.length && output.isCont()) {
                var x = input[index];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit((x << 4) & 0x3f));
                    step = 3;
                }
                if (step === 3) {
                    if (!base64.isPadded()) {
                        index += 1;
                    }
                    else if (output.isCont()) {
                        output = output.write(61);
                        step = 4;
                    }
                }
                if (step === 4 && output.isCont()) {
                    output = output.write(61);
                    index += 1;
                }
            }
            if (index === input.length) {
                return Writer.done(value);
            }
            else if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base64Writer(value, input, base64, index, step);
        };
        return Base64Writer;
    }(Writer));
    Base64.Writer = Base64Writer;

    var KeysCursor = (function (_super) {
        __extends(KeysCursor, _super);
        function KeysCursor(cursor) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            return _this;
        }
        KeysCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        KeysCursor.prototype.head = function () {
            return this._cursor.head()[0];
        };
        KeysCursor.prototype.step = function () {
            this._cursor.step();
        };
        KeysCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        KeysCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        KeysCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        KeysCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value[0], done: done };
        };
        KeysCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        KeysCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        KeysCursor.prototype.previous = function () {
            var _a = this._cursor.previous(), value = _a.value, done = _a.done;
            return { value: value && value[0], done: done };
        };
        KeysCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return KeysCursor;
    }(Cursor));

    var ValuesCursor = (function (_super) {
        __extends(ValuesCursor, _super);
        function ValuesCursor(cursor) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            return _this;
        }
        ValuesCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        ValuesCursor.prototype.head = function () {
            return this._cursor.head()[1];
        };
        ValuesCursor.prototype.step = function () {
            this._cursor.step();
        };
        ValuesCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        ValuesCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        ValuesCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        ValuesCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value[1], done: done };
        };
        ValuesCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        ValuesCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        ValuesCursor.prototype.previous = function () {
            var _a = this._cursor.previous(), value = _a.value, done = _a.done;
            return { value: value && value[1], done: done };
        };
        ValuesCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return ValuesCursor;
    }(Cursor));

    var NodeCursor = (function (_super) {
        __extends(NodeCursor, _super);
        function NodeCursor(pages, index, pageIndex, pageCursor) {
            if (index === void 0) { index = 0; }
            if (pageIndex === void 0) { pageIndex = 0; }
            var _this = _super.call(this) || this;
            _this._pages = pages;
            _this._index = index;
            _this._pageIndex = pageIndex;
            _this._pageCursor = pageCursor;
            return _this;
        }
        NodeCursor.prototype.isEmpty = function () {
            do {
                if (this._pageCursor) {
                    if (!this._pageCursor.isEmpty()) {
                        return false;
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else if (this._pageIndex < this._pages.length) {
                    this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this._pages.length;
                    return true;
                }
            } while (true);
        };
        NodeCursor.prototype.head = function () {
            do {
                if (this._pageCursor) {
                    if (!this._pageCursor.isEmpty()) {
                        return this._pageCursor.head();
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else {
                    if (this._pageIndex < this._pages.length) {
                        this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                        this._pageIndex += 1;
                    }
                    else {
                        this._pageIndex = this._pages.length;
                        throw new Error("empty");
                    }
                }
            } while (true);
        };
        NodeCursor.prototype.step = function () {
            do {
                if (this._pageCursor) {
                    if (!this._pageCursor.isEmpty()) {
                        this._index += 1;
                        return;
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else {
                    if (this._pageIndex < this._pages.length) {
                        this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                        this._pageIndex += 1;
                    }
                    else {
                        this._pageIndex = this._pages.length;
                        throw new Error("empty");
                    }
                }
            } while (true);
        };
        NodeCursor.prototype.skip = function (count) {
            while (count > 0) {
                if (this._pageCursor) {
                    if (this._pageCursor.hasNext()) {
                        this._index += 1;
                        count -= 1;
                        this._pageCursor.next();
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else if (this._pageIndex < this._pages.length) {
                    var page = this._pages[this._pageIndex];
                    var pageSize = this.pageSize(page);
                    this._pageIndex += 1;
                    if (pageSize < count) {
                        this._pageCursor = this.pageCursor(page);
                        if (count > 0) {
                            this._index += count;
                            this._pageCursor.skip(count);
                            count = 0;
                        }
                        break;
                    }
                    else {
                        this._index += pageSize;
                        count -= pageSize;
                    }
                }
                else {
                    break;
                }
            }
        };
        NodeCursor.prototype.hasNext = function () {
            do {
                if (this._pageCursor) {
                    if (this._pageCursor.hasNext()) {
                        return true;
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else if (this._pageIndex < this._pages.length) {
                    this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this._pages.length;
                    return false;
                }
            } while (true);
        };
        NodeCursor.prototype.nextIndex = function () {
            return this._index;
        };
        NodeCursor.prototype.next = function () {
            do {
                if (this._pageCursor) {
                    if (this._pageCursor.hasNext()) {
                        this._index += 1;
                        return this._pageCursor.next();
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else {
                    if (this._pageIndex < this._pages.length) {
                        this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                        this._pageIndex += 1;
                    }
                    else {
                        this._pageIndex = this._pages.length;
                        return { done: true };
                    }
                }
            } while (true);
        };
        NodeCursor.prototype.hasPrevious = function () {
            do {
                if (this._pageCursor) {
                    if (this._pageCursor.hasPrevious()) {
                        return true;
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else if (this._pageIndex > 0) {
                    this._pageCursor = this.reversePageCursor(this._pages[this._pageIndex - 1]);
                    this._pageIndex -= 1;
                }
                else {
                    this._pageIndex = 0;
                    return false;
                }
            } while (true);
        };
        NodeCursor.prototype.previousIndex = function () {
            return this._index - 1;
        };
        NodeCursor.prototype.previous = function () {
            do {
                if (this._pageCursor) {
                    if (this._pageCursor.hasPrevious()) {
                        this._index -= 1;
                        return this._pageCursor.previous();
                    }
                    else {
                        this._pageCursor = void 0;
                    }
                }
                else if (this._pageIndex > 0) {
                    this._pageCursor = this.reversePageCursor(this._pages[this._pageIndex - 1]);
                    this._pageIndex -= 1;
                }
                else {
                    this._pageIndex = 0;
                    return { done: true };
                }
            } while (true);
        };
        NodeCursor.prototype.set = function (newValue) {
            this._pageCursor.set(newValue);
        };
        NodeCursor.prototype.delete = function () {
            this._pageCursor.delete();
        };
        return NodeCursor;
    }(Cursor));

    var BTreeContext = (function () {
        function BTreeContext() {
        }
        BTreeContext.prototype.compare = function (x, y) {
            return Objects.compare(x, y);
        };
        BTreeContext.prototype.pageShouldSplit = function (page) {
            return page.arity > this.pageSplitSize;
        };
        BTreeContext.prototype.pageShouldMerge = function (page) {
            return page.arity < this.pageSplitSize >>> 1;
        };
        return BTreeContext;
    }());
    BTreeContext.prototype.pageSplitSize = 32;

    var BTree = (function (_super) {
        __extends(BTree, _super);
        function BTree(root) {
            if (root === void 0) { root = BTree.Page.empty(); }
            var _this = _super.call(this) || this;
            _this.root = root;
            return _this;
        }
        Object.defineProperty(BTree.prototype, "size", {
            get: function () {
                return this.root.size;
            },
            enumerable: true,
            configurable: true
        });
        BTree.prototype.isEmpty = function () {
            return this.root.isEmpty();
        };
        BTree.prototype.has = function (key) {
            return this.root.has(key, this);
        };
        BTree.prototype.get = function (key) {
            return this.root.get(key, this);
        };
        BTree.prototype.getEntry = function (index) {
            return this.root.getEntry(index);
        };
        BTree.prototype.firstKey = function () {
            var entry = this.root.firstEntry();
            if (entry) {
                return entry[0];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.firstValue = function () {
            var entry = this.root.firstEntry();
            if (entry) {
                return entry[1];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.firstEntry = function () {
            return this.root.firstEntry();
        };
        BTree.prototype.lastKey = function () {
            var entry = this.root.lastEntry();
            if (entry) {
                return entry[0];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.lastValue = function () {
            var entry = this.root.lastEntry();
            if (entry) {
                return entry[1];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.lastEntry = function () {
            return this.root.lastEntry();
        };
        BTree.prototype.nextKey = function (key) {
            var entry = this.root.nextEntry(key, this);
            if (entry) {
                return entry[0];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.nextValue = function (key) {
            var entry = this.root.nextEntry(key, this);
            if (entry) {
                return entry[1];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.nextEntry = function (key) {
            return this.root.nextEntry(key, this);
        };
        BTree.prototype.previousKey = function (key) {
            var entry = this.root.previousEntry(key, this);
            if (entry) {
                return entry[0];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.previousValue = function (key) {
            var entry = this.root.previousEntry(key, this);
            if (entry) {
                return entry[1];
            }
            else {
                return void 0;
            }
        };
        BTree.prototype.previousEntry = function (key) {
            return this.root.previousEntry(key, this);
        };
        BTree.prototype.set = function (key, newValue) {
            var oldRoot = this.root;
            var newRoot = this.root.updated(key, newValue, this);
            if (oldRoot !== newRoot) {
                if (newRoot.size > oldRoot.size) {
                    newRoot = newRoot.balanced(this);
                }
                this.root = newRoot;
            }
            return this;
        };
        BTree.prototype.delete = function (key) {
            var oldRoot = this.root;
            var newRoot = this.root.removed(key, this);
            if (oldRoot !== newRoot) {
                this.root = newRoot;
                return true;
            }
            else {
                return false;
            }
        };
        BTree.prototype.drop = function (lower) {
            if (lower > 0 && this.root.size > 0) {
                if (lower < this.root.size) {
                    this.root = this.root.drop(lower, this);
                }
                else {
                    this.root = BTree.Page.empty();
                }
            }
            return this;
        };
        BTree.prototype.take = function (upper) {
            if (upper < this.root.size && this.root.size > 0) {
                if (upper > 0) {
                    this.root = this.root.take(upper, this);
                }
                else {
                    this.root = BTree.Page.empty();
                }
            }
            return this;
        };
        BTree.prototype.clear = function () {
            this.root = BTree.Page.empty();
        };
        BTree.prototype.updated = function (key, newValue) {
            var oldRoot = this.root;
            var newRoot = oldRoot.updated(key, newValue, this);
            if (oldRoot !== newRoot) {
                if (newRoot.size > oldRoot.size) {
                    newRoot = newRoot.balanced(this);
                }
                return this.copy(newRoot);
            }
            else {
                return this;
            }
        };
        BTree.prototype.removed = function (key) {
            var oldRoot = this.root;
            var newRoot = oldRoot.removed(key, this);
            if (oldRoot !== newRoot) {
                return this.copy(newRoot);
            }
            else {
                return this;
            }
        };
        BTree.prototype.cleared = function () {
            if (!this.root.isEmpty()) {
                return this.copy(BTree.Page.empty());
            }
            else {
                return this;
            }
        };
        BTree.prototype.reduced = function (identity, accumulator, combiner) {
            var oldRoot = this.root;
            var newRoot = oldRoot.reduced(identity, accumulator, combiner);
            if (oldRoot !== newRoot) {
                this.root = newRoot;
            }
            return newRoot.fold();
        };
        BTree.prototype.forEach = function (callback, thisArg) {
            return this.root.forEach(callback, thisArg, this);
        };
        BTree.prototype.keys = function () {
            return this.root.keys();
        };
        BTree.prototype.values = function () {
            return this.root.values();
        };
        BTree.prototype.entries = function () {
            return this.root.entries();
        };
        BTree.prototype.reverseKeys = function () {
            return this.root.reverseKeys();
        };
        BTree.prototype.reverseValues = function () {
            return this.root.reverseValues();
        };
        BTree.prototype.reverseEntries = function () {
            return this.root.reverseEntries();
        };
        BTree.prototype.clone = function () {
            return this.copy(this.root);
        };
        BTree.prototype.copy = function (root) {
            var tree = new BTree(root);
            if (tree.compare !== this.compare) {
                tree.compare = this.compare;
            }
            if (tree.pageSplitSize !== this.pageSplitSize) {
                tree.pageSplitSize = this.pageSplitSize;
            }
            return tree;
        };
        return BTree;
    }(BTreeContext));

    var BTreePage = (function () {
        function BTreePage() {
        }
        BTreePage.prototype.keys = function () {
            return new KeysCursor(this.entries());
        };
        BTreePage.prototype.values = function () {
            return new ValuesCursor(this.entries());
        };
        BTreePage.prototype.reverseKeys = function () {
            return new KeysCursor(this.reverseEntries());
        };
        BTreePage.prototype.reverseValues = function () {
            return new ValuesCursor(this.reverseEntries());
        };
        BTreePage.empty = function () {
            if (!BTreePage._empty) {
                BTreePage._empty = new BTree.Leaf([], void 0);
            }
            return BTreePage._empty;
        };
        return BTreePage;
    }());
    BTree.Page = BTreePage;

    var BTreeLeaf = (function (_super) {
        __extends(BTreeLeaf, _super);
        function BTreeLeaf(slots, fold) {
            var _this = _super.call(this) || this;
            _this._slots = slots;
            _this._fold = fold;
            return _this;
        }
        Object.defineProperty(BTreeLeaf.prototype, "arity", {
            get: function () {
                return this._slots.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BTreeLeaf.prototype, "size", {
            get: function () {
                return this._slots.length;
            },
            enumerable: true,
            configurable: true
        });
        BTreeLeaf.prototype.isEmpty = function () {
            return this._slots.length === 0;
        };
        BTreeLeaf.prototype.fold = function () {
            return this._fold;
        };
        BTreeLeaf.prototype.minKey = function () {
            return this._slots[0][0];
        };
        BTreeLeaf.prototype.maxKey = function () {
            return this._slots[this._slots.length - 1][0];
        };
        BTreeLeaf.prototype.has = function (key, tree) {
            return this.lookup(key, tree) >= 0;
        };
        BTreeLeaf.prototype.get = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                return this._slots[x][1];
            }
            else {
                return void 0;
            }
        };
        BTreeLeaf.prototype.getEntry = function (index) {
            return this._slots[index];
        };
        BTreeLeaf.prototype.firstEntry = function () {
            if (this._slots.length) {
                return this._slots[0];
            }
            else {
                return void 0;
            }
        };
        BTreeLeaf.prototype.lastEntry = function () {
            if (this._slots.length) {
                return this._slots[this._slots.length - 1];
            }
            else {
                return void 0;
            }
        };
        BTreeLeaf.prototype.nextEntry = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            return this._slots[x];
        };
        BTreeLeaf.prototype.previousEntry = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x -= 1;
            }
            else {
                x = -(x + 2);
            }
            return this._slots[x];
        };
        BTreeLeaf.prototype.updated = function (key, newValue, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                return this.updatedSlot(x, key, newValue);
            }
            else {
                x = -(x + 1);
                return this.insertedSlot(x, key, newValue);
            }
        };
        BTreeLeaf.prototype.updatedSlot = function (x, key, newValue) {
            var oldSlots = this._slots;
            if (newValue !== oldSlots[x][1]) {
                var newSlots = oldSlots.slice(0);
                newSlots[x] = [key, newValue];
                return this.newLeaf(newSlots, void 0);
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.insertedSlot = function (x, key, newValue) {
            var oldSlots = this._slots;
            var n = oldSlots.length + 1;
            var newSlots = new Array(n);
            for (var i = 0; i < x; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            newSlots[x] = [key, newValue];
            for (var i = x; i < n - 1; i += 1) {
                newSlots[i + 1] = oldSlots[i];
            }
            return this.newLeaf(newSlots, void 0);
        };
        BTreeLeaf.prototype.removed = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                if (this._slots.length > 1) {
                    return this.removedSlot(x);
                }
                else {
                    return BTreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.removedSlot = function (x) {
            var oldSlots = this._slots;
            var newSlots = new Array(oldSlots.length - 1);
            for (var i = 0; i < x; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            for (var i = x; i < newSlots.length; i += 1) {
                newSlots[i] = oldSlots[i + 1];
            }
            return this.newLeaf(newSlots, void 0);
        };
        BTreeLeaf.prototype.drop = function (lower, tree) {
            if (lower > 0) {
                var oldSlots = this._slots;
                if (lower < oldSlots.length) {
                    var size = oldSlots.length - lower;
                    var newSlots = new Array(size);
                    for (var i = 0; i < size; i += 1) {
                        newSlots[i] = oldSlots[i + lower];
                    }
                    return this.newLeaf(newSlots, void 0);
                }
                else {
                    return BTreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.take = function (upper, tree) {
            var oldSlots = this._slots;
            if (upper < oldSlots.length) {
                if (upper > 0) {
                    var newSlots = new Array(upper);
                    for (var i = 0; i < upper; i += 1) {
                        newSlots[i] = oldSlots[i];
                    }
                    return this.newLeaf(newSlots, void 0);
                }
                else {
                    return BTreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.balanced = function (tree) {
            var n = this._slots.length;
            if (n > 1 && tree.pageShouldSplit(this)) {
                var x = n >>> 1;
                return this.split(x);
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.split = function (x) {
            var newPages = new Array(2);
            var newLeftPage = this.splitLeft(x);
            var newRightPage = this.splitRight(x);
            newPages[0] = newLeftPage;
            newPages[1] = newRightPage;
            var newKnots = new Array(1);
            newKnots[0] = newRightPage.minKey();
            return this.newNode(newPages, newKnots, void 0, this._slots.length);
        };
        BTreeLeaf.prototype.splitLeft = function (x) {
            var oldSlots = this._slots;
            var newSlots = new Array(x);
            for (var i = 0; i < x; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            return this.newLeaf(newSlots, void 0);
        };
        BTreeLeaf.prototype.splitRight = function (x) {
            var oldSlots = this._slots;
            var y = oldSlots.length - x;
            var newSlots = new Array(y);
            for (var i = 0; i < y; i += 1) {
                newSlots[i] = oldSlots[i + x];
            }
            return this.newLeaf(newSlots, void 0);
        };
        BTreeLeaf.prototype.reduced = function (identity, accumulator, combiner) {
            if (this._fold === void 0) {
                var slots = this._slots;
                var fold = identity;
                for (var i = 0, n = slots.length; i < n; i += 1) {
                    fold = accumulator(fold, slots[i][1]);
                }
                return this.newLeaf(slots, fold);
            }
            else {
                return this;
            }
        };
        BTreeLeaf.prototype.forEach = function (callback, thisArg, tree) {
            var slots = this._slots;
            for (var i = 0, n = slots.length; i < n; i += 1) {
                var slot = slots[i];
                var result = callback.call(thisArg, slot[0], slot[1], tree);
                if (result !== void 0) {
                    return result;
                }
            }
            return void 0;
        };
        BTreeLeaf.prototype.entries = function () {
            return Cursor.array(this._slots);
        };
        BTreeLeaf.prototype.reverseEntries = function () {
            return Cursor.array(this._slots, this._slots.length);
        };
        BTreeLeaf.prototype.lookup = function (key, tree) {
            var lo = 0;
            var hi = this._slots.length - 1;
            while (lo <= hi) {
                var mid = (lo + hi) >>> 1;
                var order = tree.compare(key, this._slots[mid][0]);
                if (order > 0) {
                    lo = mid + 1;
                }
                else if (order < 0) {
                    hi = mid - 1;
                }
                else {
                    return mid;
                }
            }
            return -(lo + 1);
        };
        BTreeLeaf.prototype.newLeaf = function (slots, fold) {
            return new BTreeLeaf(slots, fold);
        };
        BTreeLeaf.prototype.newNode = function (pages, knots, fold, size) {
            return new BTree.Node(pages, knots, fold, size);
        };
        return BTreeLeaf;
    }(BTreePage));
    BTree.Leaf = BTreeLeaf;

    var BTreeNode = (function (_super) {
        __extends(BTreeNode, _super);
        function BTreeNode(pages, knots, fold, size) {
            var _this = _super.call(this) || this;
            _this._pages = pages;
            _this._knots = knots;
            _this._fold = fold;
            _this._size = size;
            return _this;
        }
        Object.defineProperty(BTreeNode.prototype, "arity", {
            get: function () {
                return this._pages.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BTreeNode.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: true,
            configurable: true
        });
        BTreeNode.prototype.isEmpty = function () {
            return this._size === 0;
        };
        BTreeNode.prototype.fold = function () {
            return this._fold;
        };
        BTreeNode.prototype.minKey = function () {
            return this._pages[0].minKey();
        };
        BTreeNode.prototype.maxKey = function () {
            return this._pages[this._pages.length - 1].maxKey();
        };
        BTreeNode.prototype.has = function (key, tree) {
            var xx = this.lookup(key, tree);
            if (xx > 0) {
                xx += 1;
            }
            else if (xx < 0) {
                xx = -(xx + 1);
            }
            else {
                return true;
            }
            return this._pages[xx].has(key, tree);
        };
        BTreeNode.prototype.get = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            return this._pages[x].get(key, tree);
        };
        BTreeNode.prototype.getEntry = function (x) {
            var pages = this._pages;
            for (var i = 0, n = pages.length; i < n; i += 1) {
                var page = pages[i];
                if (x < page.size) {
                    return page.getEntry(x);
                }
                else {
                    x -= page.size;
                }
            }
            return void 0;
        };
        BTreeNode.prototype.firstEntry = function () {
            var pages = this._pages;
            if (pages.length) {
                return pages[0].firstEntry();
            }
            else {
                return void 0;
            }
        };
        BTreeNode.prototype.lastEntry = function () {
            var pages = this._pages;
            if (pages.length) {
                return pages[pages.length - 1].lastEntry();
            }
            else {
                return void 0;
            }
        };
        BTreeNode.prototype.nextEntry = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var pages = this._pages;
            var entry = pages[x].nextEntry(key, tree);
            if (entry === void 0 && x + 1 < pages.length) {
                entry = pages[x + 1].nextEntry(key, tree);
            }
            return entry;
        };
        BTreeNode.prototype.previousEntry = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var pages = this._pages;
            var entry = pages[x].previousEntry(key, tree);
            if (entry === void 0 && x > 0) {
                entry = pages[x - 1].previousEntry(key, tree);
            }
            return entry;
        };
        BTreeNode.prototype.updated = function (key, newValue, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var oldPage = this._pages[x];
            var newPage = oldPage.updated(key, newValue, tree);
            if (oldPage !== newPage) {
                if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                    return this.updatedPageSplit(x, newPage, oldPage);
                }
                else {
                    return this.updatedPage(x, newPage, oldPage);
                }
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.updatedPage = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = oldPages.slice(0);
            newPages[x] = newPage;
            var oldKnots = this._knots;
            var newKnots;
            if (oldKnots.length > 0) {
                newKnots = oldKnots.slice(0);
                if (x > 0) {
                    newKnots[x - 1] = newPage.minKey();
                }
            }
            else {
                newKnots = [];
            }
            var newSize = this._size - oldPage.size + newPage.size;
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.updatedPageSplit = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = new Array(oldPages.length + 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
            var newRightPage = newPage.splitRight(newPage.arity >>> 1);
            newPages[x] = newLeftPage;
            newPages[x + 1] = newRightPage;
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i + 1] = oldPages[i];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(oldPages.length);
            if (x > 0) {
                for (var i = 0; i < x - 1; i += 1) {
                    newKnots[i] = oldKnots[i];
                }
                newKnots[x - 1] = newLeftPage.minKey();
                newKnots[x] = newRightPage.minKey();
                for (var i = x; i < oldKnots.length; i += 1) {
                    newKnots[i + 1] = oldKnots[i];
                }
            }
            else {
                newKnots[0] = newRightPage.minKey();
                for (var i = 0; i < oldKnots.length; i += 1) {
                    newKnots[i + 1] = oldKnots[i];
                }
            }
            var newSize = this._size - oldPage.size + newPage.size;
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.updatedPageMerge = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var midPages = newPage._pages;
            var newPages = new Array(oldPages.length + midPages.length - 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            for (var i = 0; i < midPages.length; i += 1) {
                newPages[i + x] = midPages[i];
            }
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i + midPages.length - 1] = oldPages[i];
            }
            var oldKnots = this._knots;
            var midKnots = newPage._knots;
            var newKnots = new Array(newPages.length - 1);
            if (x > 0) {
                for (var i = 0; i < x - 1; i += 1) {
                    newKnots[i] = oldKnots[i];
                }
                newKnots[x - 1] = midPages[0].minKey();
                for (var i = 0; i < midKnots.length; i += 1) {
                    newKnots[i + x] = midKnots[i];
                }
                for (var i = x; i < oldKnots.length; i += 1) {
                    newKnots[i + midKnots.length] = oldKnots[i];
                }
            }
            else {
                for (var i = 0; i < midKnots.length; i += 1) {
                    newKnots[i] = midKnots[i];
                }
                newKnots[midKnots.length] = oldPages[1].minKey();
                for (var i = 1; i < oldKnots.length; i += 1) {
                    newKnots[i + midKnots.length] = oldKnots[i];
                }
            }
            var newSize = this._size - oldPage.size + newPage.size;
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.removed = function (key, tree) {
            var x = this.lookup(key, tree);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var oldPage = this._pages[x];
            var newPage = oldPage.removed(key, tree);
            if (oldPage !== newPage) {
                return this.replacedPage(x, newPage, oldPage, tree);
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.replacedPage = function (x, newPage, oldPage, tree) {
            if (!newPage.isEmpty()) {
                if (newPage instanceof BTreeNode && tree.pageShouldMerge(newPage)) {
                    return this.updatedPageMerge(x, newPage, oldPage);
                }
                else {
                    return this.updatedPage(x, newPage, oldPage);
                }
            }
            else if (this._pages.length > 2) {
                return this.removedPage(x, newPage, oldPage);
            }
            else if (this._pages.length > 1) {
                if (x === 0) {
                    return this._pages[1];
                }
                else {
                    return this._pages[0];
                }
            }
            else {
                return BTreePage.empty();
            }
        };
        BTreeNode.prototype.removedPage = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = new Array(oldPages.length - 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i - 1] = oldPages[i];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(oldKnots.length - 1);
            if (x > 0) {
                for (var i = 0; i < x - 1; i += 1) {
                    newKnots[i] = oldKnots[i];
                }
                for (var i = x; i < oldKnots.length; i += 1) {
                    newKnots[i - 1] = oldKnots[i];
                }
            }
            else {
                for (var i = 1; i < oldKnots.length; i += 1) {
                    newKnots[i - 1] = oldKnots[i];
                }
            }
            var newSize = this._size - oldPage.size;
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.drop = function (lower, tree) {
            if (lower > 0) {
                var newSize = this._size;
                if (lower < newSize) {
                    var oldPages = this._pages;
                    var x = 0;
                    while (x < oldPages.length) {
                        var size = oldPages[x].size;
                        if (size <= lower) {
                            newSize -= size;
                            lower -= size;
                            x += 1;
                        }
                        else {
                            break;
                        }
                    }
                    var newArity = oldPages.length - x;
                    if (newArity > 1) {
                        var newNode = void 0;
                        if (x > 0) {
                            var newPages = new Array(newArity);
                            for (var i = 0; i < newArity; i += 1) {
                                newPages[i] = oldPages[i + x];
                            }
                            var newKnots = new Array(newArity - 1);
                            for (var i = 0; i < newKnots.length; i += 1) {
                                newKnots[i] = this._knots[i + x];
                            }
                            newNode = this.newNode(newPages, newKnots, void 0, newSize);
                        }
                        else {
                            newNode = this;
                        }
                        if (lower > 0) {
                            var oldPage = oldPages[x];
                            var newPage = oldPage.drop(lower, tree);
                            return newNode.replacedPage(0, newPage, oldPage, tree);
                        }
                        else {
                            return newNode;
                        }
                    }
                    else {
                        return oldPages[x].drop(lower, tree);
                    }
                }
                else {
                    return BTreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.take = function (upper, tree) {
            if (upper < this._size) {
                if (upper > 0) {
                    var oldPages = this._pages;
                    var x = 0;
                    var newSize = 0;
                    while (x < oldPages.length && upper > 0) {
                        var size = oldPages[x].size;
                        newSize += size;
                        x += 1;
                        if (size <= upper) {
                            upper -= size;
                        }
                        else {
                            break;
                        }
                    }
                    var newArity = upper === 0 ? x : x + 1;
                    if (newArity > 1) {
                        var newNode = void 0;
                        if (x < oldPages.length) {
                            var newPages = new Array(newArity);
                            for (var i = 0; i < newArity; i += 1) {
                                newPages[i] = oldPages[i];
                            }
                            var newKnots = new Array(newArity - 1);
                            for (var i = 0; i < newKnots.length; i += 1) {
                                newKnots[i] = this._knots[i];
                            }
                            newNode = this.newNode(newPages, newKnots, void 0, newSize);
                        }
                        else {
                            newNode = this;
                        }
                        if (upper > 0) {
                            var oldPage = oldPages[x - 1];
                            var newPage = oldPage.take(upper, tree);
                            return newNode.replacedPage(x - 1, newPage, oldPage, tree);
                        }
                        else {
                            return newNode;
                        }
                    }
                    else if (upper > 0) {
                        return oldPages[0].take(upper, tree);
                    }
                    else {
                        return oldPages[0];
                    }
                }
                else {
                    return BTreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.balanced = function (tree) {
            if (this._pages.length > 1 && tree.pageShouldSplit(this)) {
                var x = this._knots.length >>> 1;
                return this.split(x);
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.split = function (x) {
            var newPages = new Array(2);
            var newLeftPage = this.splitLeft(x);
            var newRightPage = this.splitRight(x);
            newPages[0] = newLeftPage;
            newPages[1] = newRightPage;
            var newKnots = new Array(1);
            newKnots[0] = newRightPage.minKey();
            return this.newNode(newPages, newKnots, void 0, this._size);
        };
        BTreeNode.prototype.splitLeft = function (x) {
            var oldPages = this._pages;
            var newPages = new Array(x + 1);
            for (var i = 0; i < x + 1; i += 1) {
                newPages[i] = oldPages[i];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(x);
            for (var i = 0; i < x; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            var newSize = 0;
            for (var i = 0; i <= x; i += 1) {
                newSize += newPages[i].size;
            }
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.splitRight = function (x) {
            var oldPages = this._pages;
            var newArity = oldPages.length - (x + 1);
            var newPages = new Array(newArity);
            for (var i = 0; i < newArity; i += 1) {
                newPages[i] = oldPages[i + (x + 1)];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(newArity - 1);
            for (var i = 0; i < newKnots.length; i += 1) {
                newKnots[i] = oldKnots[i + (x + 1)];
            }
            var newSize = 0;
            for (var i = 0; i < newArity; i += 1) {
                newSize += newPages[i].size;
            }
            return this.newNode(newPages, newKnots, void 0, newSize);
        };
        BTreeNode.prototype.reduced = function (identity, accumulator, combiner) {
            if (this._fold === void 0) {
                var oldPages = this._pages;
                var n = oldPages.length;
                var newPages = new Array(n);
                for (var i = 0; i < n; i += 1) {
                    newPages[i] = oldPages[i].reduced(identity, accumulator, combiner);
                }
                var fold = newPages[0].fold();
                for (var i = 1; i < n; i += 1) {
                    fold = combiner(fold, newPages[i].fold());
                }
                return this.newNode(newPages, this._knots, fold, this._size);
            }
            else {
                return this;
            }
        };
        BTreeNode.prototype.forEach = function (callback, thisArg, tree) {
            var pages = this._pages;
            for (var i = 0, n = pages.length; i < n; i += 1) {
                var result = pages[i].forEach(callback, thisArg, tree);
                if (result !== void 0) {
                    return result;
                }
            }
            return void 0;
        };
        BTreeNode.prototype.entries = function () {
            return new BTree.NodeCursor(this._pages);
        };
        BTreeNode.prototype.reverseEntries = function () {
            return new BTree.NodeCursor(this._pages, this._size, this._pages.length);
        };
        BTreeNode.prototype.lookup = function (key, tree) {
            var lo = 0;
            var hi = this._knots.length - 1;
            while (lo <= hi) {
                var mid = (lo + hi) >>> 1;
                var order = tree.compare(key, this._knots[mid]);
                if (order > 0) {
                    lo = mid + 1;
                }
                else if (order < 0) {
                    hi = mid - 1;
                }
                else {
                    return mid;
                }
            }
            return -(lo + 1);
        };
        BTreeNode.prototype.newNode = function (pages, knots, fold, size) {
            return new BTreeNode(pages, knots, fold, size);
        };
        return BTreeNode;
    }(BTreePage));
    BTree.Node = BTreeNode;

    var BTreeNodeCursor = (function (_super) {
        __extends(BTreeNodeCursor, _super);
        function BTreeNodeCursor(pages, index, pageIndex, subCursor) {
            return _super.call(this, pages, index, pageIndex, subCursor) || this;
        }
        BTreeNodeCursor.prototype.pageSize = function (page) {
            return page.size;
        };
        BTreeNodeCursor.prototype.pageCursor = function (page) {
            return page.entries();
        };
        BTreeNodeCursor.prototype.reversePageCursor = function (page) {
            return page.reverseEntries();
        };
        return BTreeNodeCursor;
    }(NodeCursor));
    BTree.NodeCursor = BTreeNodeCursor;

    var STreeContext = (function () {
        function STreeContext() {
        }
        STreeContext.prototype.identify = function (value) {
            var id = new Uint8Array(6);
            Random.fillBytes(id);
            return id;
        };
        STreeContext.prototype.compare = function (x, y) {
            return Objects.compare(x, y);
        };
        STreeContext.prototype.pageShouldSplit = function (page) {
            return page.arity > this.pageSplitSize;
        };
        STreeContext.prototype.pageShouldMerge = function (page) {
            return page.arity < this.pageSplitSize >>> 1;
        };
        return STreeContext;
    }());
    STreeContext.prototype.pageSplitSize = 32;

    var STree = (function (_super) {
        __extends(STree, _super);
        function STree(root) {
            if (root === void 0) { root = STree.Page.empty(); }
            var _this = _super.call(this) || this;
            _this.root = root;
            return _this;
        }
        Object.defineProperty(STree.prototype, "length", {
            get: function () {
                return this.root.size;
            },
            enumerable: true,
            configurable: true
        });
        STree.prototype.isEmpty = function () {
            return this.root.isEmpty();
        };
        STree.prototype.get = function (index, id) {
            if (id !== void 0) {
                index = this.lookup(id, index);
                if (index < 0) {
                    return void 0;
                }
            }
            return this.root.get(index);
        };
        STree.prototype.getEntry = function (index, id) {
            if (id !== void 0) {
                index = this.lookup(id, index);
                if (index < 0) {
                    return void 0;
                }
            }
            return this.root.getEntry(index);
        };
        STree.prototype.set = function (index, newValue, id) {
            if (id !== void 0) {
                index = this.lookup(id, index);
                if (index < 0) {
                    throw new RangeError("" + id);
                }
            }
            var oldRoot = this.root;
            if (index < 0 || index >= oldRoot.size) {
                throw new RangeError("" + index);
            }
            this.root = oldRoot.updated(index, newValue, this);
            return this;
        };
        STree.prototype.insert = function (index, newValue, id) {
            var oldRoot = this.root;
            if (index < 0 || index > oldRoot.size) {
                throw new RangeError("" + index);
            }
            this.root = oldRoot.inserted(index, newValue, id, this).balanced(this);
            return this;
        };
        STree.prototype.remove = function (index, id) {
            if (id !== void 0) {
                index = this.lookup(id, index);
                if (index < 0) {
                    throw new RangeError("" + id);
                }
            }
            var oldRoot = this.root;
            if (index < 0 || index > oldRoot.size) {
                throw new RangeError("" + index);
            }
            this.root = oldRoot.removed(index, this);
            return this;
        };
        STree.prototype.push = function () {
            var newValues = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newValues[_i] = arguments[_i];
            }
            var newRoot = this.root;
            for (var i = 0; i < newValues.length; i += 1) {
                newRoot = newRoot.inserted(newRoot.size, newValues[i], void 0, this).balanced(this);
            }
            this.root = newRoot;
            return newRoot.size;
        };
        STree.prototype.pop = function () {
            var oldRoot = this.root;
            var index = oldRoot.size - 1;
            if (index >= 0) {
                var oldValue = oldRoot.get(index);
                this.root = oldRoot.removed(index, this);
                return oldValue;
            }
            else {
                return void 0;
            }
        };
        STree.prototype.unshift = function () {
            var newValues = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newValues[_i] = arguments[_i];
            }
            var newRoot = this.root;
            for (var i = newValues.length - 1; i >= 0; i -= 1) {
                newRoot = newRoot.inserted(0, newValues[i], void 0, this).balanced(this);
            }
            this.root = newRoot;
            return newRoot.size;
        };
        STree.prototype.shift = function () {
            var oldRoot = this.root;
            if (oldRoot.size > 0) {
                var oldValue = oldRoot.get(0);
                this.root = oldRoot.removed(0, this);
                return oldValue;
            }
            else {
                return void 0;
            }
        };
        STree.prototype.move = function (fromIndex, toIndex, id) {
            if (id !== void 0) {
                fromIndex = this.lookup(id, fromIndex);
                if (fromIndex < 0) {
                    throw new RangeError("" + id);
                }
            }
            var oldRoot = this.root;
            if (fromIndex < 0 || fromIndex >= oldRoot.size) {
                throw new RangeError("" + fromIndex);
            }
            if (toIndex < 0 || toIndex >= oldRoot.size) {
                throw new RangeError("" + toIndex);
            }
            if (fromIndex !== toIndex) {
                var entry = oldRoot.getEntry(fromIndex);
                this.root = oldRoot.removed(fromIndex, this)
                    .inserted(toIndex, entry[1], entry[0], this)
                    .balanced(this);
            }
            return this;
        };
        STree.prototype.splice = function (start, deleteCount) {
            var newValues = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newValues[_i - 2] = arguments[_i];
            }
            var newRoot = this.root;
            if (start < 0) {
                start = newRoot.size + start;
            }
            start = Math.min(Math.max(0, start), newRoot.size);
            if (deleteCount === void 0) {
                deleteCount = newRoot.size - start;
            }
            var deleted = [];
            for (var i = start, n = start + deleteCount; i < n; i += 1) {
                deleted.push(newRoot.get(start));
                newRoot = newRoot.removed(start, this);
            }
            for (var i = 0; i < newValues.length; i += 1) {
                newRoot = newRoot.inserted(start + i, newValues[i], void 0, this).balanced(this);
            }
            this.root = newRoot;
            return deleted;
        };
        STree.prototype.drop = function (lower) {
            var oldRoot = this.root;
            if (lower > 0 && oldRoot.size > 0) {
                if (lower < oldRoot.size) {
                    this.root = oldRoot.drop(lower, this);
                }
                else {
                    this.root = STree.Page.empty();
                }
            }
            return this;
        };
        STree.prototype.take = function (upper) {
            var oldRoot = this.root;
            if (upper < oldRoot.size && oldRoot.size > 0) {
                if (upper > 0) {
                    this.root = oldRoot.take(upper, this);
                }
                else {
                    this.root = STree.Page.empty();
                }
            }
            return this;
        };
        STree.prototype.clear = function () {
            this.root = STree.Page.empty();
        };
        STree.prototype.forEach = function (callback, thisArg) {
            return this.root.forEach(callback, thisArg, 0, this);
        };
        STree.prototype.keys = function () {
            return this.root.keys();
        };
        STree.prototype.values = function () {
            return this.root.values();
        };
        STree.prototype.entries = function () {
            return this.root.entries();
        };
        STree.prototype.reverseKeys = function () {
            return this.root.reverseKeys();
        };
        STree.prototype.reverseValues = function () {
            return this.root.reverseValues();
        };
        STree.prototype.reverseEntries = function () {
            return this.root.reverseEntries();
        };
        STree.prototype.clone = function () {
            return this.copy(this.root);
        };
        STree.prototype.copy = function (root) {
            var tree = new STree(root);
            if (tree.identify !== this.identify) {
                tree.identify = this.identify;
            }
            if (tree.compare !== this.compare) {
                tree.compare = this.compare;
            }
            if (tree.pageSplitSize !== this.pageSplitSize) {
                tree.pageSplitSize = this.pageSplitSize;
            }
            return tree;
        };
        STree.prototype.lookup = function (id, start) {
            if (start === void 0) { start = 0; }
            var root = this.root;
            start = Math.min(Math.max(0, start), root.size - 1);
            var index = start;
            do {
                var entry = root.getEntry(index);
                if (entry && this.compare(entry[0], id) === 0) {
                    return index;
                }
                index = (index + 1) % root.size;
            } while (isFinite(index) && index !== start);
            return -1;
        };
        return STree;
    }(STreeContext));
    STree.prototype.pageSplitSize = 32;

    var STreePage = (function () {
        function STreePage() {
        }
        STreePage.prototype.keys = function () {
            return new KeysCursor(this.entries());
        };
        STreePage.prototype.values = function () {
            return new ValuesCursor(this.entries());
        };
        STreePage.prototype.reverseKeys = function () {
            return new KeysCursor(this.reverseEntries());
        };
        STreePage.prototype.reverseValues = function () {
            return new ValuesCursor(this.reverseEntries());
        };
        STreePage.empty = function () {
            if (!STreePage._empty) {
                STreePage._empty = new STree.Leaf([]);
            }
            return STreePage._empty;
        };
        return STreePage;
    }());
    STree.Page = STreePage;

    var STreeLeaf = (function (_super) {
        __extends(STreeLeaf, _super);
        function STreeLeaf(slots) {
            var _this = _super.call(this) || this;
            _this._slots = slots;
            return _this;
        }
        Object.defineProperty(STreeLeaf.prototype, "arity", {
            get: function () {
                return this._slots.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(STreeLeaf.prototype, "size", {
            get: function () {
                return this._slots.length;
            },
            enumerable: true,
            configurable: true
        });
        STreeLeaf.prototype.isEmpty = function () {
            return this._slots.length === 0;
        };
        STreeLeaf.prototype.get = function (index) {
            var slot = this._slots[index];
            if (slot) {
                return slot[1];
            }
            else {
                return void 0;
            }
        };
        STreeLeaf.prototype.getEntry = function (index) {
            return this._slots[index];
        };
        STreeLeaf.prototype.updated = function (index, newValue, tree) {
            if (index < 0 || index >= this._slots.length) {
                throw new RangeError("" + index);
            }
            return this.updatedItem(index, newValue);
        };
        STreeLeaf.prototype.updatedItem = function (index, newValue) {
            var oldItems = this._slots;
            var oldSlot = oldItems[index];
            if (newValue !== oldSlot[1]) {
                var newValues = oldItems.slice(0);
                newValues[index] = [oldSlot[0], newValue];
                return new STreeLeaf(newValues);
            }
            else {
                return this;
            }
        };
        STreeLeaf.prototype.inserted = function (index, newValue, id, tree) {
            if (index < 0 || index > this._slots.length) {
                throw new RangeError("" + index);
            }
            return this.insertedItem(index, newValue, id, tree);
        };
        STreeLeaf.prototype.insertedItem = function (index, newValue, id, tree) {
            if (id === void 0) {
                id = tree.identify(newValue);
            }
            var oldSlots = this._slots;
            var newSlots = new Array(oldSlots.length + 1);
            for (var i = 0; i < index; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            newSlots[index] = [id, newValue];
            for (var i = index; i < oldSlots.length; i += 1) {
                newSlots[i + 1] = oldSlots[i];
            }
            return new STreeLeaf(newSlots);
        };
        STreeLeaf.prototype.removed = function (index, tree) {
            if (index < 0 || index >= this._slots.length) {
                throw new RangeError("" + index);
            }
            if (this._slots.length > 1) {
                return this.removedSlot(index);
            }
            else {
                return STreePage.empty();
            }
        };
        STreeLeaf.prototype.removedSlot = function (index) {
            var oldSlots = this._slots;
            var newSlots = new Array(oldSlots.length - 1);
            for (var i = 0; i < index; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            for (var i = index; i < newSlots.length; i += 1) {
                newSlots[i] = oldSlots[i + 1];
            }
            return new STreeLeaf(newSlots);
        };
        STreeLeaf.prototype.drop = function (lower, tree) {
            var oldSlots = this._slots;
            if (lower > 0 && oldSlots.length > 0) {
                if (lower < oldSlots.length) {
                    var size = oldSlots.length - lower;
                    var newSlots = new Array(size);
                    for (var i = 0; i < size; i += 1) {
                        newSlots[i] = oldSlots[i + lower];
                    }
                    return new STreeLeaf(newSlots);
                }
                else {
                    return STreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        STreeLeaf.prototype.take = function (upper, tree) {
            var oldSlots = this._slots;
            if (upper < oldSlots.length && oldSlots.length > 0) {
                if (upper > 0) {
                    var newSlots = new Array(upper);
                    for (var i = 0; i < upper; i += 1) {
                        newSlots[i] = oldSlots[i];
                    }
                    return new STreeLeaf(newSlots);
                }
                else {
                    return STreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        STreeLeaf.prototype.balanced = function (tree) {
            var size = this._slots.length;
            if (size > 1 && tree.pageShouldSplit(this)) {
                return this.split(size >>> 1);
            }
            else {
                return this;
            }
        };
        STreeLeaf.prototype.split = function (index) {
            var newPages = new Array(2);
            var newLeftPage = this.splitLeft(index);
            var newRightPage = this.splitRight(index);
            newPages[0] = newLeftPage;
            newPages[1] = newRightPage;
            var newKnots = new Array(1);
            newKnots[0] = index;
            return new STree.Node(newPages, newKnots, this._slots.length);
        };
        STreeLeaf.prototype.splitLeft = function (index) {
            var oldSlots = this._slots;
            var newSlots = new Array(index);
            for (var i = 0; i < index; i += 1) {
                newSlots[i] = oldSlots[i];
            }
            return new STreeLeaf(newSlots);
        };
        STreeLeaf.prototype.splitRight = function (index) {
            var oldSlots = this._slots;
            var newSize = oldSlots.length - index;
            var newSlots = new Array(newSize);
            for (var i = 0; i < newSize; i += 1) {
                newSlots[i] = oldSlots[i + index];
            }
            return new STreeLeaf(newSlots);
        };
        STreeLeaf.prototype.forEach = function (callback, thisArg, offset, tree) {
            for (var i = 0; i < this._slots.length; i += 1) {
                var slot = this._slots[i];
                var result = callback.call(thisArg, slot[1], offset + i, tree, slot[0]);
                if (result !== void 0) {
                    return result;
                }
            }
            return void 0;
        };
        STreeLeaf.prototype.entries = function () {
            return Cursor.array(this._slots);
        };
        STreeLeaf.prototype.reverseEntries = function () {
            return Cursor.array(this._slots, this._slots.length);
        };
        return STreeLeaf;
    }(STreePage));
    STree.Leaf = STreeLeaf;

    var STreeNode = (function (_super) {
        __extends(STreeNode, _super);
        function STreeNode(pages, knots, size) {
            var _this = _super.call(this) || this;
            _this._pages = pages;
            if (knots === void 0 || size === void 0) {
                knots = new Array(pages.length - 1);
                size = 0;
                for (var i = 0, n = knots.length; i < n; i += 1) {
                    size += pages[i].size;
                    knots[i] = size;
                }
                size += pages[knots.length].size;
            }
            _this._knots = knots;
            _this._size = size;
            return _this;
        }
        Object.defineProperty(STreeNode.prototype, "arity", {
            get: function () {
                return this._pages.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(STreeNode.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: true,
            configurable: true
        });
        STreeNode.prototype.isEmpty = function () {
            return this._size === 0;
        };
        STreeNode.prototype.get = function (index) {
            var x = this.lookup(index);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var i = x === 0 ? index : index - this._knots[x - 1];
            return this._pages[x].get(i);
        };
        STreeNode.prototype.getEntry = function (index) {
            var x = this.lookup(index);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var i = x === 0 ? index : index - this._knots[x - 1];
            return this._pages[x].getEntry(i);
        };
        STreeNode.prototype.updated = function (index, newValue, tree) {
            var x = this.lookup(index);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var i = x === 0 ? index : index - this._knots[x - 1];
            var oldPage = this._pages[x];
            var newPage = oldPage.updated(i, newValue, tree);
            if (oldPage !== newPage) {
                if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                    return this.updatedPageSplit(x, newPage, oldPage);
                }
                else {
                    return this.updatedPage(x, newPage, oldPage);
                }
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.updatedPage = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = oldPages.slice(0);
            newPages[x] = newPage;
            var oldKnots = this._knots;
            var newKnots;
            var newSize;
            if (oldPages.length - 1 > 0) {
                newKnots = oldKnots.slice(0);
                if (x > 0) {
                    newSize = oldKnots[x - 1];
                }
                else {
                    newSize = 0;
                }
                for (var i = x; i < newKnots.length; i += 1) {
                    newSize += newPages[i].size;
                    newKnots[i] = newSize;
                }
                newSize += newPages[newKnots.length].size;
            }
            else {
                newKnots = [];
                newSize = 0;
            }
            return new STreeNode(newPages, newKnots, newSize);
        };
        STreeNode.prototype.updatedPageSplit = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = new Array(oldPages.length + 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
            var newRightPage = newPage.splitRight(newPage.arity >>> 1);
            newPages[x] = newLeftPage;
            newPages[x + 1] = newRightPage;
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i + 1] = oldPages[i];
            }
            return new STreeNode(newPages);
        };
        STreeNode.prototype.updatedPageMerge = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var midPages = newPage._pages;
            var newPages = new Array(oldPages.length + midPages.length - 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            for (var i = 0; i < midPages.length; i += 1) {
                newPages[i + x] = midPages[i];
            }
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i + midPages.length - 1] = oldPages[i];
            }
            return new STreeNode(newPages);
        };
        STreeNode.prototype.inserted = function (index, newValue, id, tree) {
            var x = this.lookup(index);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var subIndex = x === 0 ? index : index - this._knots[x - 1];
            var oldPage = this._pages[x];
            var newPage = oldPage.inserted(subIndex, newValue, id, tree);
            if (oldPage !== newPage) {
                if (tree.pageShouldSplit(newPage)) {
                    return this.updatedPageSplit(x, newPage, oldPage);
                }
                else {
                    return this.updatedPage(x, newPage, oldPage);
                }
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.removed = function (index, tree) {
            var x = this.lookup(index);
            if (x >= 0) {
                x += 1;
            }
            else {
                x = -(x + 1);
            }
            var subIndex = x === 0 ? index : index - this._knots[x - 1];
            var oldPage = this._pages[x];
            var newPage = oldPage.removed(subIndex, tree);
            if (oldPage !== newPage) {
                return this.replacedPage(x, newPage, oldPage, tree);
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.replacedPage = function (x, newPage, oldPage, tree) {
            if (!newPage.isEmpty()) {
                if (newPage instanceof STreeNode && tree.pageShouldMerge(newPage)) {
                    return this.updatedPageMerge(x, newPage, oldPage);
                }
                else {
                    return this.updatedPage(x, newPage, oldPage);
                }
            }
            else if (this._pages.length > 2) {
                return this.removedPage(x, newPage, oldPage);
            }
            else if (this._pages.length > 1) {
                if (x === 0) {
                    return this._pages[1];
                }
                else {
                    return this._pages[0];
                }
            }
            else {
                return STreePage.empty();
            }
        };
        STreeNode.prototype.removedPage = function (x, newPage, oldPage) {
            var oldPages = this._pages;
            var newPages = new Array(oldPages.length - 1);
            for (var i = 0; i < x; i += 1) {
                newPages[i] = oldPages[i];
            }
            for (var i = x + 1; i < oldPages.length; i += 1) {
                newPages[i - 1] = oldPages[i];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(oldKnots.length - 1);
            var newSize;
            if (x > 0) {
                for (var i = 0; i < x; i += 1) {
                    newKnots[i] = oldKnots[i];
                }
                newSize = oldKnots[x - 1];
            }
            else {
                newSize = 0;
            }
            for (var i = x; i < newKnots.length; i += 1) {
                newSize += newPages[i].size;
                newKnots[i] = newSize;
            }
            newSize += newPages[newKnots.length].size;
            return new STreeNode(newPages, newKnots, newSize);
        };
        STreeNode.prototype.drop = function (lower, tree) {
            if (lower > 0) {
                if (lower < this._size) {
                    var x = this.lookup(lower);
                    if (x >= 0) {
                        x += 1;
                    }
                    else {
                        x = -(x + 1);
                    }
                    lower = x === 0 ? lower : lower - this._knots[x - 1];
                    var oldPages = this._pages;
                    var n = oldPages.length - x;
                    if (n > 1) {
                        var newNode = void 0;
                        if (x > 0) {
                            var newPages = new Array(n);
                            for (var i = 0; i < n; i += 1) {
                                newPages[i] = oldPages[i + x];
                            }
                            newNode = new STreeNode(newPages);
                        }
                        else {
                            newNode = this;
                        }
                        if (lower > 0) {
                            var oldPage = oldPages[x];
                            var newPage = oldPage.drop(lower, tree);
                            return newNode.replacedPage(0, newPage, oldPage, tree);
                        }
                        else {
                            return newNode;
                        }
                    }
                    else {
                        return oldPages[x].drop(lower, tree);
                    }
                }
                else {
                    return STreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.take = function (upper, tree) {
            if (upper < this._size) {
                if (upper > 0) {
                    var x = this.lookup(upper);
                    if (x >= 0) {
                        x += 1;
                    }
                    else {
                        x = -(x + 1);
                    }
                    upper = x === 0 ? upper : upper - this._knots[x - 1];
                    var oldPages = this._pages;
                    var n = upper === 0 ? x : x + 1;
                    if (n > 1) {
                        var newNode = void 0;
                        if (x < oldPages.length) {
                            var newPages = new Array(n);
                            for (var i = 0; i < n; i += 1) {
                                newPages[i] = oldPages[i];
                            }
                            var newKnots = new Array(n - 1);
                            for (var i = 0; i < newKnots.length; i += 1) {
                                newKnots[i] = this._knots[i];
                            }
                            var newSize = newKnots[n - 2] + newPages[n - 1].size;
                            newNode = new STreeNode(newPages, newKnots, newSize);
                        }
                        else {
                            newNode = this;
                        }
                        if (upper > 0) {
                            var oldPage = oldPages[x];
                            var newPage = oldPage.take(upper, tree);
                            return newNode.replacedPage(x, newPage, oldPage, tree);
                        }
                        else {
                            return newNode;
                        }
                    }
                    else if (upper > 0) {
                        return oldPages[0].take(upper, tree);
                    }
                    else {
                        return oldPages[0];
                    }
                }
                else {
                    return STreePage.empty();
                }
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.balanced = function (tree) {
            if (this._pages.length > 1 && tree.pageShouldSplit(this)) {
                var x = this._knots.length >>> 1;
                return this.split(x);
            }
            else {
                return this;
            }
        };
        STreeNode.prototype.split = function (x) {
            var newPages = new Array(2);
            var newLeftPage = this.splitLeft(x);
            var newRightPage = this.splitRight(x);
            newPages[0] = newLeftPage;
            newPages[1] = newRightPage;
            var newKnots = new Array(1);
            newKnots[0] = newLeftPage._size;
            return new STreeNode(newPages, newKnots, this._size);
        };
        STreeNode.prototype.splitLeft = function (x) {
            var oldPages = this._pages;
            var newPages = new Array(x + 1);
            for (var i = 0; i < x + 1; i += 1) {
                newPages[i] = oldPages[i];
            }
            var oldKnots = this._knots;
            var newKnots = new Array(x);
            for (var i = 0; i < x; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            var newSize = 0;
            for (var i = 0; i <= x; i += 1) {
                newSize += newPages[i].size;
            }
            return new STreeNode(newPages, newKnots, newSize);
        };
        STreeNode.prototype.splitRight = function (x) {
            var oldPages = this._pages;
            var y = oldPages.length - (x + 1);
            var newPages = new Array(y);
            for (var i = 0; i < y; i += 1) {
                newPages[i] = oldPages[i + (x + 1)];
            }
            var newKnots = new Array(y - 1);
            var newSize;
            if (y > 0) {
                newSize = newPages[0].size;
                for (var i = 1; i < y; i += 1) {
                    newKnots[i - 1] = newSize;
                    newSize += newPages[i].size;
                }
            }
            else {
                newSize = 0;
            }
            return new STreeNode(newPages, newKnots, newSize);
        };
        STreeNode.prototype.forEach = function (callback, thisArg, offset, tree) {
            for (var i = 0; i < this._pages.length; i += 1) {
                var page = this._pages[i];
                var result = page.forEach(callback, thisArg, offset, tree);
                if (result !== void 0) {
                    return result;
                }
                offset += page.size;
            }
            return void 0;
        };
        STreeNode.prototype.entries = function () {
            return new STree.NodeCursor(this._pages);
        };
        STreeNode.prototype.reverseEntries = function () {
            return new STree.NodeCursor(this._pages, this._size, this._pages.length);
        };
        STreeNode.prototype.lookup = function (index) {
            var lo = 0;
            var hi = this._knots.length - 1;
            while (lo <= hi) {
                var mid = (lo + hi) >>> 1;
                if (index > this._knots[mid]) {
                    lo = mid + 1;
                }
                else if (index < this._knots[mid]) {
                    hi = mid - 1;
                }
                else {
                    return mid;
                }
            }
            return -(lo + 1);
        };
        return STreeNode;
    }(STreePage));
    STree.Node = STreeNode;

    var STreeNodeCursor = (function (_super) {
        __extends(STreeNodeCursor, _super);
        function STreeNodeCursor(pages, index, pageIndex, subCursor) {
            return _super.call(this, pages, index, pageIndex, subCursor) || this;
        }
        STreeNodeCursor.prototype.pageSize = function (page) {
            return page.size;
        };
        STreeNodeCursor.prototype.pageCursor = function (page) {
            return page.entries();
        };
        STreeNodeCursor.prototype.reversePageCursor = function (page) {
            return page.reverseEntries();
        };
        return STreeNodeCursor;
    }(NodeCursor));
    STree.NodeCursor = STreeNodeCursor;

    var Item = (function () {
        function Item() {
        }
        Item.prototype.updated = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.set(key, value);
            return record;
        };
        Item.prototype.updatedAttr = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.setAttr(key, value);
            return record;
        };
        Item.prototype.updatedSlot = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.setSlot(key, value);
            return record;
        };
        Item.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create(1 + arguments.length);
            record.push(this);
            record.push.apply(record, arguments);
            return record;
        };
        Item.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create(arguments.length + 1);
            record.push.apply(record, arguments);
            record.push(this);
            return record;
        };
        Item.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create();
            record.push(this);
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Item.prototype.lt = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) < 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.le = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) <= 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.eq = function (that) {
            that = Item.fromAny(that);
            return this.equals(that) ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.ne = function (that) {
            that = Item.fromAny(that);
            return !this.equals(that) ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.ge = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) >= 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.gt = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) > 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.invoke = function (args) {
            return Item.absent();
        };
        Item.prototype.filter = function (predicate) {
            var selector = Item.Selector.literal(this);
            return selector.filter.apply(selector, arguments);
        };
        Item.prototype.max = function (that) {
            return this.compareTo(that) >= 0 ? this : that;
        };
        Item.prototype.min = function (that) {
            return this.compareTo(that) <= 0 ? this : that;
        };
        Item.prototype.evaluate = function (interpreter) {
            return this;
        };
        Item.prototype.substitute = function (interpreter) {
            return this;
        };
        Item.prototype.cast = function (form, orElse) {
            var object = form.cast(this);
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        Item.prototype.coerce = function (form, orElse) {
            var object = form.cast(this);
            if (object === void 0) {
                object = form.unit();
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        Item.prototype.precedence = function () {
            return 11;
        };
        Item.prototype.forEach = function (callback, thisArg) {
            return callback.call(thisArg, this, 0);
        };
        Item.prototype.iterator = function () {
            return Cursor.unary(this);
        };
        Item.prototype.display = function (output) {
            this.debug(output);
        };
        Item.prototype.toString = function () {
            return Format.debug(this);
        };
        Item.empty = function () {
            return Item.Record.empty();
        };
        Item.extant = function () {
            return Item.Extant.extant();
        };
        Item.absent = function () {
            return Item.Absent.absent();
        };
        Item.fromAny = function (item) {
            if (item instanceof Item) {
                return item;
            }
            else {
                return Item.Value.fromAny(item);
            }
        };
        Item.globalScope = function () {
            if (!Item._globalScope) {
                Item._globalScope = Item.Record.create(1)
                    .slot("math", Item.MathModule.scope())
                    .commit();
            }
            return Item._globalScope;
        };
        return Item;
    }());

    var Field = (function (_super) {
        __extends(Field, _super);
        function Field() {
            return _super.call(this) || this;
        }
        Field.prototype.isDefined = function () {
            return true;
        };
        Field.prototype.isDistinct = function () {
            return true;
        };
        Field.prototype.toValue = function () {
            return this.value;
        };
        Field.prototype.tag = function () {
            return void 0;
        };
        Field.prototype.target = function () {
            return this.value;
        };
        Field.prototype.flattened = function () {
            return Item.Value.absent();
        };
        Field.prototype.unflattened = function () {
            return Item.Record.of(this);
        };
        Field.prototype.header = function (tag) {
            return Item.Value.absent();
        };
        Field.prototype.headers = function (tag) {
            return void 0;
        };
        Field.prototype.head = function () {
            return Item.absent();
        };
        Field.prototype.tail = function () {
            return Item.Record.empty();
        };
        Field.prototype.body = function () {
            return Item.Value.absent();
        };
        Object.defineProperty(Field.prototype, "length", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Field.prototype.has = function (key) {
            return false;
        };
        Field.prototype.get = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getAttr = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getSlot = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getField = function (key) {
            return void 0;
        };
        Field.prototype.getItem = function (index) {
            return Item.absent();
        };
        Field.prototype.deleted = function (key) {
            return this;
        };
        Field.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            return thenTerm;
        };
        Field.prototype.or = function (that) {
            return this;
        };
        Field.prototype.and = function (that) {
            that = Item.fromAny(that);
            return that;
        };
        Field.prototype.lambda = function (template) {
            return Item.Value.absent();
        };
        Field.prototype.stringValue = function (orElse) {
            return this.value.stringValue(orElse);
        };
        Field.prototype.numberValue = function (orElse) {
            return this.value.numberValue(orElse);
        };
        Field.prototype.booleanValue = function (orElse) {
            return this.value.booleanValue(orElse);
        };
        Field.of = function (key, value) {
            var name;
            if (typeof key === "string") {
                name = key;
            }
            else if (key instanceof Item.Text) {
                name = key.value;
            }
            if (name !== void 0 && name.charCodeAt(0) === 64) {
                arguments[0] = name.slice(1);
                return Item.Attr.of.apply(undefined, arguments);
            }
            else {
                return Item.Slot.of.apply(undefined, arguments);
            }
        };
        Field.fromAny = function (field) {
            if (field instanceof Field) {
                return field;
            }
            else if (field && typeof field === "object") {
                if (field.$key !== void 0) {
                    return Field.of(field.$key, field.$value);
                }
                else {
                    for (var key in field) {
                        return Field.of(key, field[key]);
                    }
                }
            }
            throw new TypeError("" + field);
        };
        Field.IMMUTABLE = 1 << 0;
        return Field;
    }(Item));
    Item.Field = Field;

    var InterpreterException = (function (_super) {
        __extends(InterpreterException, _super);
        function InterpreterException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = InterpreterException.prototype;
            return _this;
        }
        return InterpreterException;
    }(Error));

    var InterpreterSettings = (function () {
        function InterpreterSettings(maxScopeDepth) {
            this._maxScopeDepth = maxScopeDepth;
        }
        InterpreterSettings.prototype.maxScopeDepth = function (maxScopeDepth) {
            if (maxScopeDepth === void 0) {
                return this._maxScopeDepth;
            }
            else {
                return this.copy(maxScopeDepth);
            }
        };
        InterpreterSettings.prototype.copy = function (maxScopeDepth) {
            return new InterpreterSettings(maxScopeDepth);
        };
        InterpreterSettings.prototype.canEqual = function (that) {
            return that instanceof InterpreterSettings;
        };
        InterpreterSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InterpreterSettings) {
                return that.canEqual(this) && this._maxScopeDepth === that._maxScopeDepth;
            }
            return false;
        };
        InterpreterSettings.prototype.hashCode = function () {
            if (InterpreterSettings._hashSeed === void 0) {
                InterpreterSettings._hashSeed = Murmur3.seed(InterpreterSettings);
            }
            return Murmur3.mash(Murmur3.mix(InterpreterSettings._hashSeed, this._maxScopeDepth));
        };
        InterpreterSettings.prototype.debug = function (output) {
            output = output.write("new").write(32).write("InterpreterSettings")
                .write(40).debug(this._maxScopeDepth).write(41);
        };
        InterpreterSettings.prototype.toString = function () {
            return Format.debug(this);
        };
        InterpreterSettings.standard = function () {
            if (!InterpreterSettings._standard) {
                var maxScopeDepth = 1024;
                InterpreterSettings._standard = new InterpreterSettings(maxScopeDepth);
            }
            return InterpreterSettings._standard;
        };
        return InterpreterSettings;
    }());

    var Interpreter = (function () {
        function Interpreter(settings, scopeStack, scopeDepth) {
            if (settings === void 0) { settings = InterpreterSettings.standard(); }
            if (scopeStack === void 0) { scopeStack = null; }
            if (scopeDepth === void 0) { scopeDepth = 0; }
            this._settings = settings;
            this._scopeStack = scopeStack;
            this._scopeDepth = scopeDepth;
        }
        Interpreter.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = settings;
                return this;
            }
        };
        Interpreter.prototype.scopeDepth = function () {
            return this._scopeDepth;
        };
        Interpreter.prototype.peekScope = function () {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            return this._scopeStack[scopeDepth - 1];
        };
        Interpreter.prototype.getScope = function (index) {
            if (index < 0 || index >= this._scopeDepth) {
                throw new RangeError("" + index);
            }
            return this._scopeStack[index];
        };
        Interpreter.prototype.pushScope = function (scope) {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth >= this._settings._maxScopeDepth) {
                throw new InterpreterException("scope stack overflow");
            }
            var oldScopeStack = this._scopeStack;
            var newScopeStack;
            if (oldScopeStack === null || scopeDepth + 1 > oldScopeStack.length) {
                newScopeStack = new Array(Interpreter.expand(scopeDepth + 1));
                if (oldScopeStack != null) {
                    for (var i = 0; i < scopeDepth; i += 1) {
                        newScopeStack[i] = oldScopeStack[i];
                    }
                }
                this._scopeStack = newScopeStack;
            }
            else {
                newScopeStack = oldScopeStack;
            }
            newScopeStack[scopeDepth] = scope;
            this._scopeDepth = scopeDepth + 1;
        };
        Interpreter.prototype.popScope = function () {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            var scopeStack = this._scopeStack;
            var scope = scopeStack[scopeDepth - 1];
            scopeStack[scopeDepth - 1] = void 0;
            this._scopeDepth = scopeDepth - 1;
            return scope;
        };
        Interpreter.prototype.swapScope = function (newScope) {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            var scopeStack = this._scopeStack;
            var oldScope = scopeStack[scopeDepth - 1];
            scopeStack[scopeDepth - 1] = newScope;
            return oldScope;
        };
        Interpreter.prototype.willOperate = function (operator) {
        };
        Interpreter.prototype.didOperate = function (operator, result) {
        };
        Interpreter.prototype.willSelect = function (selector) {
        };
        Interpreter.prototype.didSelect = function (selector, result) {
        };
        Interpreter.prototype.willTransform = function (selector) {
        };
        Interpreter.prototype.didTransform = function (selector, result) {
        };
        Interpreter.of = function () {
            var objects = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                objects[_i] = arguments[_i];
            }
            var n = arguments.length;
            var scopes = new Array(Interpreter.expand(n));
            for (var i = 0; i < n; i += 1) {
                var scope = Item.fromAny(arguments[i]);
                scopes[i] = scope;
            }
            return new Interpreter(InterpreterSettings.standard(), scopes, n);
        };
        Interpreter.fromAny = function (interpreter, globalScope) {
            if (globalScope === void 0) { globalScope = Item.globalScope(); }
            if (!(interpreter instanceof Interpreter)) {
                var scope = interpreter;
                interpreter = new Interpreter();
                if (globalScope) {
                    interpreter.pushScope(globalScope);
                }
                if (scope !== void 0) {
                    interpreter.pushScope(Item.fromAny(scope));
                }
            }
            return interpreter;
        };
        Interpreter.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        return Interpreter;
    }());

    var Attr = (function (_super) {
        __extends(Attr, _super);
        function Attr(key, value, flags) {
            if (value === void 0) { value = Item.Value.extant(); }
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Attr.prototype.isConstant = function () {
            return this._key.isConstant() && this._value.isConstant();
        };
        Object.defineProperty(Attr.prototype, "name", {
            get: function () {
                return this._key.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attr.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attr.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Attr.prototype.setValue = function (newValue) {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var oldValue = this._value;
            this._value = newValue;
            return oldValue;
        };
        Attr.prototype.updatedValue = function (value) {
            return new Attr(this._key, value);
        };
        Attr.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseOr(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseOr(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseXor(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseXor(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseAnd(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseAnd(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.plus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.plus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.minus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.minus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.times(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.times(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.divide(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.divide(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.modulo(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.modulo(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.not = function () {
            var newValue = this._value.not();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseNot = function () {
            var newValue = this._value.bitwiseNot();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.negative = function () {
            var newValue = this._value.negative();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.positive = function () {
            var newValue = this._value.positive();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.inverse = function () {
            var newValue = this._value.inverse();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = this._value.evaluate(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                if (key instanceof Item.Text) {
                    return new Attr(key, value);
                }
                else {
                    return new Item.Slot(key, value);
                }
            }
            return Item.absent();
        };
        Attr.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.substitute(interpreter).toValue();
            var value = this._value.substitute(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                if (key instanceof Item.Text) {
                    return new Attr(key, value);
                }
                else {
                    return new Item.Slot(key, value);
                }
            }
            return Item.absent();
        };
        Attr.prototype.toAny = function () {
            var field = {};
            field["@" + this._key.value] = this._value.toAny();
            return field;
        };
        Attr.prototype.isAliased = function () {
            return false;
        };
        Attr.prototype.isMutable = function () {
            return (this._flags & Field.IMMUTABLE) === 0;
        };
        Attr.prototype.alias = function () {
            this._flags |= Field.IMMUTABLE;
        };
        Attr.prototype.branch = function () {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                return new Attr(this._key, this._value, this._flags & ~Field.IMMUTABLE);
            }
            else {
                return this;
            }
        };
        Attr.prototype.clone = function () {
            return new Attr(this._key.clone(), this._value.clone());
        };
        Attr.prototype.commit = function () {
            if ((this._flags & Field.IMMUTABLE) === 0) {
                this._flags |= Field.IMMUTABLE;
                this._value.commit();
            }
            return this;
        };
        Attr.prototype.typeOrder = function () {
            return 1;
        };
        Attr.prototype.compareTo = function (that) {
            if (that instanceof Attr) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._value.compareTo(that._value);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Attr.prototype.keyEquals = function (key) {
            if (typeof key === "string") {
                return this._key.value === key;
            }
            else if (key instanceof Field) {
                return this._key.equals(key.key);
            }
            else {
                return this._key.equals(key);
            }
        };
        Attr.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Attr) {
                return this._key.equals(that._key) && this._value.equals(that._value);
            }
            return false;
        };
        Attr.prototype.hashCode = function () {
            if (Attr._hashSeed === void 0) {
                Attr._hashSeed = Murmur3.seed(Attr);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Attr._hashSeed, this._key.hashCode()), this._value.hashCode()));
        };
        Attr.prototype.debug = function (output) {
            output = output.write("Attr").write(46).write("of").write(40).display(this.key);
            if (!(this.value instanceof Item.Extant)) {
                output = output.write(44).write(32).display(this.value);
            }
            output = output.write(41);
        };
        Attr.prototype.display = function (output) {
            this.debug(output);
        };
        Attr.of = function (key, value) {
            key = Item.Text.fromAny(key);
            value = (arguments.length >= 2 ? Item.Value.fromAny(value) : Item.Value.extant());
            return new Attr(key, value);
        };
        return Attr;
    }(Field));
    Item.Attr = Attr;

    var Slot = (function (_super) {
        __extends(Slot, _super);
        function Slot(key, value, flags) {
            if (value === void 0) { value = Item.Value.extant(); }
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._key = key.commit();
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Object.defineProperty(Slot.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Slot.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Slot.prototype.isConstant = function () {
            return this._key.isConstant() && this._value.isConstant();
        };
        Slot.prototype.setValue = function (newValue) {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var oldValue = this._value;
            this._value = newValue;
            return oldValue;
        };
        Slot.prototype.updatedValue = function (value) {
            return new Slot(this._key, value);
        };
        Slot.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseOr(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseOr(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseXor(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseXor(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseAnd(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseAnd(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.plus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.plus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.minus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.minus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.times(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.times(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.divide(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.divide(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.modulo(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.modulo(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.not = function () {
            var newValue = this._value.not();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseNot = function () {
            var newValue = this._value.bitwiseNot();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.negative = function () {
            var newValue = this._value.negative();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.positive = function () {
            var newValue = this._value.positive();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.inverse = function () {
            var newValue = this._value.inverse();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = this._value.evaluate(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                return new Slot(key, value);
            }
            return Item.absent();
        };
        Slot.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.substitute(interpreter).toValue();
            var value = this._value.substitute(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                return new Slot(key, value);
            }
            return Item.absent();
        };
        Slot.prototype.toAny = function () {
            var field = {};
            if (this._key instanceof Item.Text) {
                field[this._key.value] = this._value.toAny();
            }
            else {
                field.$key = this._key.toAny();
                field.$value = this._value.toAny();
            }
            return field;
        };
        Slot.prototype.isAliased = function () {
            return false;
        };
        Slot.prototype.isMutable = function () {
            return (this._flags & Field.IMMUTABLE) === 0;
        };
        Slot.prototype.alias = function () {
            this._flags |= Field.IMMUTABLE;
        };
        Slot.prototype.branch = function () {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                return new Slot(this._key, this._value, this._flags & ~Field.IMMUTABLE);
            }
            else {
                return this;
            }
        };
        Slot.prototype.clone = function () {
            return new Slot(this._key.clone(), this._value.clone());
        };
        Slot.prototype.commit = function () {
            if ((this._flags & Field.IMMUTABLE) === 0) {
                this._flags |= Field.IMMUTABLE;
                this._value.commit();
            }
            return this;
        };
        Slot.prototype.typeOrder = function () {
            return 2;
        };
        Slot.prototype.compareTo = function (that) {
            if (that instanceof Slot) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._value.compareTo(that._value);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Slot.prototype.keyEquals = function (key) {
            if (typeof key === "string" && this._key instanceof Item.Text) {
                return this._key.value === key;
            }
            else if (key instanceof Field) {
                return this._key.equals(key.key);
            }
            else {
                return this._key.equals(key);
            }
        };
        Slot.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Slot) {
                return this._key.equals(that._key) && this._value.equals(that._value);
            }
            return false;
        };
        Slot.prototype.hashCode = function () {
            if (Slot._hashSeed === void 0) {
                Slot._hashSeed = Murmur3.seed(Slot);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Slot._hashSeed, this._key.hashCode()), this._value.hashCode()));
        };
        Slot.prototype.debug = function (output) {
            output = output.write("Slot").write(46).write("of").write(40).display(this.key);
            if (!(this.value instanceof Item.Extant)) {
                output = output.write(44).write(32).display(this.value);
            }
            output = output.write(41);
        };
        Slot.prototype.display = function (output) {
            this.debug(output);
        };
        Slot.of = function (key, value) {
            key = Item.Value.fromAny(key);
            value = arguments.length >= 2 ? Item.Value.fromAny(value) : Item.Value.extant();
            return new Slot(key, value);
        };
        return Slot;
    }(Field));
    Item.Slot = Slot;

    var ValueBuilder = (function () {
        function ValueBuilder() {
            this._record = null;
            this._value = null;
        }
        ValueBuilder.prototype.push = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                var item = arguments[i];
                if (item instanceof Field) {
                    return this.pushField(item);
                }
                else if (item instanceof Value) {
                    return this.pushValue(item);
                }
                else {
                    throw new TypeError("" + item);
                }
            }
        };
        ValueBuilder.prototype.pushField = function (item) {
            if (this._record === null) {
                this._record = Item.Record.create();
                if (this._value !== null) {
                    this._record.push(this._value);
                    this._value = null;
                }
            }
            this._record.push(item);
        };
        ValueBuilder.prototype.pushValue = function (item) {
            if (this._record != null) {
                this._record.push(item);
            }
            else if (this._value == null) {
                this._value = item;
            }
            else {
                this._record = Item.Record.create();
                this._record.push(this._value);
                this._value = null;
                this._record.push(item);
            }
        };
        ValueBuilder.prototype.bind = function () {
            if (this._record !== null) {
                return this._record;
            }
            else if (this._value !== null) {
                return this._value;
            }
            else {
                return Value.absent();
            }
        };
        return ValueBuilder;
    }());

    var Value = (function (_super) {
        __extends(Value, _super);
        function Value() {
            return _super.call(this) || this;
        }
        Value.prototype.isDefined = function () {
            return true;
        };
        Value.prototype.isDistinct = function () {
            return true;
        };
        Object.defineProperty(Value.prototype, "key", {
            get: function () {
                return Value.absent();
            },
            enumerable: true,
            configurable: true
        });
        Value.prototype.toValue = function () {
            return this;
        };
        Value.prototype.tag = function () {
            return void 0;
        };
        Value.prototype.target = function () {
            return this;
        };
        Value.prototype.flattened = function () {
            return this;
        };
        Value.prototype.unflattened = function () {
            return Value.Record.of(this);
        };
        Value.prototype.header = function (tag) {
            return Value.absent();
        };
        Value.prototype.headers = function (tag) {
            return void 0;
        };
        Value.prototype.head = function () {
            return Item.absent();
        };
        Value.prototype.tail = function () {
            return Value.Record.empty();
        };
        Value.prototype.body = function () {
            return Value.extant();
        };
        Object.defineProperty(Value.prototype, "length", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Value.prototype.has = function (key) {
            return false;
        };
        Value.prototype.get = function (key) {
            return Value.absent();
        };
        Value.prototype.getAttr = function (key) {
            return Value.absent();
        };
        Value.prototype.getSlot = function (key) {
            return Value.absent();
        };
        Value.prototype.getField = function (key) {
            return void 0;
        };
        Value.prototype.getItem = function (index) {
            return Item.absent();
        };
        Value.prototype.deleted = function (key) {
            return this;
        };
        Value.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            return thenTerm;
        };
        Value.prototype.or = function (that) {
            return this;
        };
        Value.prototype.and = function (that) {
            that = Item.fromAny(that);
            return that;
        };
        Value.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseOr(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseOr(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseXor(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseXor(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseAnd(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseAnd(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.lt = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.LtOperator(this, that);
            }
            return _super.prototype.lt.call(this, that);
        };
        Value.prototype.le = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.LeOperator(this, that);
            }
            return _super.prototype.le.call(this, that);
        };
        Value.prototype.eq = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.EqOperator(this, that);
            }
            return _super.prototype.eq.call(this, that);
        };
        Value.prototype.ne = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.NeOperator(this, that);
            }
            return _super.prototype.ne.call(this, that);
        };
        Value.prototype.ge = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.GeOperator(this, that);
            }
            return _super.prototype.ge.call(this, that);
        };
        Value.prototype.gt = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.GtOperator(this, that);
            }
            return _super.prototype.gt.call(this, that);
        };
        Value.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.plus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.plus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.minus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.minus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.times(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.times(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.divide(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.divide(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.modulo(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.modulo(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.not = function () {
            return Value.absent();
        };
        Value.prototype.bitwiseNot = function () {
            return Value.absent();
        };
        Value.prototype.negative = function () {
            return Value.absent();
        };
        Value.prototype.positive = function () {
            return Value.absent();
        };
        Value.prototype.inverse = function () {
            return Value.absent();
        };
        Value.prototype.lambda = function (template) {
            return new Item.LambdaFunc(this, template);
        };
        Value.prototype.stringValue = function (orElse) {
            return orElse;
        };
        Value.prototype.numberValue = function (orElse) {
            return orElse;
        };
        Value.prototype.booleanValue = function (orElse) {
            return orElse;
        };
        Value.prototype.isAliased = function () {
            return false;
        };
        Value.prototype.isMutable = function () {
            return false;
        };
        Value.prototype.alias = function () {
        };
        Value.prototype.branch = function () {
            return this;
        };
        Value.prototype.clone = function () {
            return this;
        };
        Value.prototype.commit = function () {
            return this;
        };
        Value.prototype.keyEquals = function (key) {
            return false;
        };
        Value.builder = function () {
            return new ValueBuilder();
        };
        Value.empty = function () {
            return Value.Record.empty();
        };
        Value.extant = function () {
            return Value.Extant.extant();
        };
        Value.absent = function () {
            return Value.Absent.absent();
        };
        Value.fromAny = function (value) {
            if (value instanceof Value) {
                return value;
            }
            else if (value === void 0) {
                return Value.Absent.absent();
            }
            else if (value === null) {
                return Value.Extant.extant();
            }
            else if (typeof value === "boolean") {
                return Value.Bool.from(value);
            }
            else if (typeof value === "number") {
                return Value.Num.from(value);
            }
            else if (typeof value === "string") {
                return Value.Text.from(value);
            }
            else if (value instanceof Uint8Array) {
                return Value.Data.wrap(value);
            }
            else if (Array.isArray(value)) {
                return Value.Record.fromArray(value);
            }
            else if (typeof value === "object") {
                return Value.Record.fromObject(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        return Value;
    }(Item));
    Item.Value = Value;

    var RecordCursor = (function (_super) {
        __extends(RecordCursor, _super);
        function RecordCursor(record, lower, upper, index) {
            if (lower === void 0) { lower = 0; }
            if (upper === void 0) { upper = record.length; }
            if (index === void 0) { index = lower; }
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._lower = lower;
            _this._upper = upper;
            _this._index = index;
            _this._direction = 0;
            return _this;
        }
        RecordCursor.prototype.isEmpty = function () {
            return this._index >= this._upper;
        };
        RecordCursor.prototype.head = function () {
            this._direction = 0;
            if (this._index < this._upper) {
                return this._record.getItem(this._index);
            }
            else {
                throw new Error("empty");
            }
        };
        RecordCursor.prototype.step = function () {
            this._direction = 0;
            if (this._index < this._upper) {
                this._index += 1;
            }
            else {
                throw new Error("empty");
            }
        };
        RecordCursor.prototype.skip = function (count) {
            this._index = Math.min(Math.max(this._lower, this._index + count, this._upper));
        };
        RecordCursor.prototype.hasNext = function () {
            return this._index < this._upper;
        };
        RecordCursor.prototype.nextIndex = function () {
            return this._index - this._lower;
        };
        RecordCursor.prototype.next = function () {
            this._direction = 1;
            var index = this._index;
            if (index < this._upper) {
                this._index = index + 1;
                return { value: this._record.getItem(index), done: this._index === this._upper };
            }
            else {
                this._index = this._upper;
                return { done: true };
            }
        };
        RecordCursor.prototype.hasPrevious = function () {
            return this._index > this._lower;
        };
        RecordCursor.prototype.previousIndex = function () {
            return this._index - this._lower - 1;
        };
        RecordCursor.prototype.previous = function () {
            this._direction = -1;
            var index = this._index - 1;
            if (index >= this._lower) {
                this._index = index;
                return { value: this._record.getItem(index), done: index === this._lower };
            }
            else {
                this._index = 0;
                return { done: true };
            }
        };
        RecordCursor.prototype.set = function (newItem) {
            if (this._direction > 0) {
                this._record.setItem(this._index - 1, newItem);
            }
            else {
                this._record.setItem(this._index, newItem);
            }
        };
        RecordCursor.prototype.delete = function () {
            if (this._direction > 0) {
                this._index -= 1;
            }
            this._record.splice(this._index, 1);
            this._direction = 0;
        };
        return RecordCursor;
    }(Cursor));

    var Record = (function (_super) {
        __extends(Record, _super);
        function Record() {
            return _super.call(this) || this;
        }
        Record.prototype.isArray = function () {
            return this.fieldCount() === 0;
        };
        Record.prototype.isObject = function () {
            return this.valueCount() === 0;
        };
        Record.prototype.fieldCount = function () {
            var count = 0;
            this.forEach(function (member) {
                if (member instanceof Item.Field) {
                    count += 1;
                }
            }, this);
            return count;
        };
        Record.prototype.valueCount = function () {
            var count = 0;
            this.forEach(function (member) {
                if (member instanceof Value) {
                    count += 1;
                }
            }, this);
            return count;
        };
        Record.prototype.isConstant = function () {
            return this.forEach(function (member) {
                return member.isConstant() ? void 0 : false;
            }, this) === void 0;
        };
        Record.prototype.tag = function () {
            var item = this.head();
            if (item instanceof Item.Attr) {
                return item.key.value;
            }
            return void 0;
        };
        Record.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            this.forEach(function (item) {
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }, this);
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        Record.prototype.flattened = function () {
            if (this.isEmpty()) {
                return Value.extant();
            }
            else {
                var items = this.iterator();
                var head = items.head();
                items.step();
                if (items.isEmpty() && head instanceof Value) {
                    return head;
                }
                else {
                    return this.branch();
                }
            }
        };
        Record.prototype.unflattened = function () {
            return this;
        };
        Record.prototype.header = function (tag) {
            var head = this.head();
            if (head instanceof Item.Attr && head.key.value === tag) {
                return head.value;
            }
            else {
                return Value.absent();
            }
        };
        Record.prototype.headers = function (tag) {
            var head = this.head();
            if (head instanceof Item.Attr && head.key.value === tag) {
                var header = head.value;
                if (header instanceof Record) {
                    return header;
                }
                else {
                    return Record.of(header);
                }
            }
            return void 0;
        };
        Record.prototype.head = function () {
            return this.forEach(function (item) {
                return item;
            }, this) || Item.absent();
        };
        Record.prototype.tail = function () {
            var tail = Record.create();
            this.forEach(function (item, index) {
                if (index > 0) {
                    tail.push(item);
                }
            }, this);
            return tail;
        };
        Record.prototype.body = function () {
            var tail = this.tail();
            if (!tail.isEmpty()) {
                return tail.flattened();
            }
            else {
                return Value.absent();
            }
        };
        Record.prototype.has = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? true : void 0;
            }, this) || false;
        };
        Record.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            if (index < 0) {
                index = Math.max(0, this.length + index);
            }
            var i = this.forEach(function (member, i) {
                return i >= index && item.equals(member) ? i : void 0;
            }, this);
            return i !== void 0 ? i : -1;
        };
        Record.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var n = this.length;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = Math.min(index, n - 1);
            while (index >= 0) {
                if (item.equals(this.getItem(index))) {
                    return index;
                }
                index -= 1;
            }
            return -1;
        };
        Record.prototype.get = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getAttr = function (key) {
            key = Value.Text.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Attr && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getSlot = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Slot && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getField = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? item : void 0;
            }, this);
        };
        Record.prototype.set = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(item.updatedValue(newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Slot(key, newValue));
            return this;
        };
        Record.prototype.setAttr = function (key, newValue) {
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item instanceof Item.Attr && item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(new Item.Attr(key, newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Attr(key, newValue));
            return this;
        };
        Record.prototype.setSlot = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item instanceof Item.Slot && item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(new Item.Slot(key, newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Slot(key, newValue));
            return this;
        };
        Record.prototype.updated = function (key, value) {
            key = Value.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Field && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Slot(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Slot(key, value));
            return record;
        };
        Record.prototype.updatedAttr = function (key, value) {
            key = Value.Text.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Attr && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Attr(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Attr(key, value));
            return record;
        };
        Record.prototype.updatedSlot = function (key, value) {
            key = Value.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Slot && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Slot(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Slot(key, value));
            return record;
        };
        Record.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            record.push.apply(record, arguments);
            return record;
        };
        Record.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            record.splice.apply(record, Array.prototype.concat.apply([0, 0], arguments));
            return record;
        };
        Record.prototype.deleted = function (key) {
            var record = this.isMutable() ? this : this.branch();
            record.delete(key);
            return record;
        };
        Record.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Record.prototype.slice = function (lower, upper) {
            return this.subRecord.apply(this, arguments).branch();
        };
        Record.prototype.attr = function (key, value) {
            this.push(Item.Attr.of.apply(void 0, arguments));
            return this;
        };
        Record.prototype.slot = function (key, value) {
            this.push(Item.Slot.of.apply(void 0, arguments));
            return this;
        };
        Record.prototype.item = function (item) {
            this.push(item);
            return this;
        };
        Record.prototype.items = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            this.push.apply(this, arguments);
            return this;
        };
        Record.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var scope = Record.create();
            interpreter.pushScope(scope);
            var changed = false;
            this.forEach(function (oldItem) {
                var newItem = oldItem.evaluate(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }, this);
            interpreter.popScope();
            return changed ? scope : this;
        };
        Record.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var scope = Record.create();
            interpreter.pushScope(scope);
            var changed = false;
            this.forEach(function (oldItem) {
                var newItem = oldItem.substitute(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }, this);
            interpreter.popScope();
            return changed ? scope : this;
        };
        Record.prototype.stringValue = function (orElse) {
            var recordString = "";
            var defined = this.forEach(function (item) {
                if (item instanceof Value) {
                    var itemString = item.stringValue();
                    if (itemString !== void 0) {
                        recordString += itemString;
                        return;
                    }
                }
                return null;
            }, this) === void 0;
            return defined ? recordString : void 0;
        };
        Record.prototype.toAny = function () {
            if (!this.isEmpty() && this.isArray()) {
                return this.toArray();
            }
            else {
                return this.toObject();
            }
        };
        Record.prototype.toArray = function () {
            var array = new Array(this.length);
            this.forEach(function (item, index) {
                if (item instanceof Value) {
                    array[index] = item.toAny();
                }
                else if (item instanceof Item.Field) {
                    array[index] = {
                        $key: item.key.toAny(),
                        $value: item.value.toAny(),
                    };
                }
            }, this);
            return array;
        };
        Record.prototype.toObject = function () {
            var object = {};
            this.forEach(function (item, index) {
                if (item instanceof Item.Attr) {
                    object["@" + item.key.value] = item.value.toAny();
                }
                else if (item instanceof Item.Slot) {
                    if (item.key instanceof Value.Text) {
                        object[item.key.value] = item.value.toAny();
                    }
                    else {
                        object["$" + index] = {
                            $key: item.key.toAny(),
                            $value: item.value.toAny(),
                        };
                    }
                }
                else if (item instanceof Value) {
                    object["$" + index] = item.toAny();
                }
            }, this);
            return object;
        };
        Record.prototype.isAliased = function () {
            return false;
        };
        Record.prototype.isMutable = function () {
            return true;
        };
        Record.prototype.alias = function () {
        };
        Record.prototype.branch = function () {
            var branch = Record.create();
            this.forEach(function (item) {
                branch.push(item);
            }, this);
            return branch;
        };
        Record.prototype.clone = function () {
            var clone = Record.create();
            this.forEach(function (item) {
                clone.push(item.clone());
            }, this);
            return clone;
        };
        Record.prototype.commit = function () {
            return this;
        };
        Record.prototype.bind = function () {
            return this;
        };
        Record.prototype.subRecord = function (lower, upper) {
            var n = this.length;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            lower = Math.min(Math.max(0, lower), n);
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            var record = Value.Record.create();
            this.forEach(function (item, index) {
                if (index < lower) {
                    return;
                }
                else if (index < upper) {
                    record.push(item);
                    return;
                }
                else {
                    return null;
                }
            }, this);
            return record;
        };
        Record.prototype.iterator = function () {
            return new RecordCursor(this);
        };
        Record.prototype.typeOrder = function () {
            return 3;
        };
        Record.prototype.compareTo = function (that) {
            if (that instanceof Record) {
                var xs = this.iterator();
                var ys = that.iterator();
                var order = 0;
                do {
                    if (!xs.isEmpty() && !ys.isEmpty()) {
                        order = xs.head().compareTo(ys.head());
                        xs.step();
                        ys.step();
                    }
                    else {
                        break;
                    }
                } while (order === 0);
                if (order !== 0) {
                    return order;
                }
                else if (xs.isEmpty() && !ys.isEmpty()) {
                    return -1;
                }
                else if (!xs.isEmpty() && ys.isEmpty()) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Record.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Record) {
                var xs = this.iterator();
                var ys = that.iterator();
                while (!xs.isEmpty() && !ys.isEmpty()) {
                    if (!xs.head().equals(ys.head())) {
                        return false;
                    }
                    xs.step();
                    ys.step();
                }
                return xs.isEmpty() && ys.isEmpty();
            }
            return false;
        };
        Record.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                if (Record._hashSeed === void 0) {
                    Record._hashSeed = Murmur3.seed(Record);
                }
                var code_1 = Record._hashSeed;
                this.forEach(function (item) {
                    code_1 = Murmur3.mix(code_1, item.hashCode());
                }, this);
                this._hashCode = Murmur3.mash(code_1);
            }
            return this._hashCode;
        };
        Record.prototype.debug = function (output) {
            output = output.write("Record").write(46);
            if (this.isEmpty()) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("of").write(40);
                this.forEach(function (item, index) {
                    if (index !== 0) {
                        output = output.write(44).write(32);
                    }
                    output.display(item);
                }, this);
                output = output.write(41);
            }
        };
        Record.prototype.display = function (output) {
            this.debug(output);
        };
        Record.empty = function () {
            return Record.RecordMap.empty();
        };
        Record.create = function (initialCapacity) {
            return Record.RecordMap.create(initialCapacity);
        };
        Record.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Record.RecordMap.of.apply(void 0, arguments);
        };
        Record.fromAny = function (value) {
            if (value instanceof Record) {
                return value;
            }
            else if (Array.isArray(value)) {
                return Record.fromArray(value);
            }
            else if (value && typeof value === "object") {
                return Record.fromObject(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Record.fromArray = function (array) {
            var n = array.length || 0;
            var record = Record.create(n);
            for (var i = 0; i < n; i += 1) {
                record.push(Item.fromAny(array[i]));
            }
            return record;
        };
        Record.fromObject = function (object) {
            var record = Record.create();
            for (var key in object) {
                var value = object[key];
                if (key.charCodeAt(0) === 36) {
                    if (!value || typeof value !== "object" || !value.hasOwnProperty("$key")) {
                        record.push(Value.fromAny(value));
                    }
                    else {
                        record.push(Item.Field.of(value.$key, value.$value));
                    }
                }
                else {
                    record.push(Item.Field.of(key, value));
                }
            }
            return record;
        };
        Record.expand = function (n) {
            n = Math.max(8, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        Record.ALIASED = 1;
        Record.IMMUTABLE = 2;
        return Record;
    }(Value));
    Item.Record = Record;

    var RecordMap = (function (_super) {
        __extends(RecordMap, _super);
        function RecordMap(array, table, itemCount, fieldCount, flags) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._table = table;
            _this._itemCount = itemCount;
            _this._fieldCount = fieldCount;
            _this._flags = flags;
            return _this;
        }
        RecordMap.prototype.isEmpty = function () {
            return this._itemCount === 0;
        };
        Object.defineProperty(RecordMap.prototype, "length", {
            get: function () {
                return this._itemCount;
            },
            enumerable: true,
            configurable: true
        });
        RecordMap.prototype.fieldCount = function () {
            return this._fieldCount;
        };
        RecordMap.prototype.valueCount = function () {
            return this._itemCount - this._fieldCount;
        };
        RecordMap.prototype.isConstant = function () {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                if (!array[i].isConstant()) {
                    return false;
                }
            }
            return true;
        };
        RecordMap.prototype.tag = function () {
            if (this._fieldCount > 0) {
                var head = this._array[0];
                if (head instanceof Item.Attr) {
                    return head.key.value;
                }
            }
            return void 0;
        };
        RecordMap.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        RecordMap.prototype.head = function () {
            if (this._itemCount > 0) {
                return this._array[0];
            }
            return Item.absent();
        };
        RecordMap.prototype.tail = function () {
            var n = this._itemCount;
            if (n > 0) {
                return new Record.RecordMapView(this, 1, n);
            }
            else {
                return Record.empty();
            }
        };
        RecordMap.prototype.body = function () {
            var n = this._itemCount;
            if (n > 2) {
                return new Record.RecordMapView(this, 1, n).branch();
            }
            else if (n === 2) {
                var item = this._array[1];
                if (item instanceof Value) {
                    return item;
                }
                else {
                    return Record.of(item);
                }
            }
            return Value.absent();
        };
        RecordMap.prototype.has = function (key) {
            if (this._fieldCount !== 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return true;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return false;
        };
        RecordMap.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            var array = this._array;
            var n = this._itemCount;
            if (index < 0) {
                index = Math.max(0, n + index);
            }
            while (index < n) {
                if (item.equals(array[index])) {
                    return index;
                }
                index += 1;
            }
            return -1;
        };
        RecordMap.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var array = this._array;
            var n = this._itemCount;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = Math.min(index, n - 1);
            while (index >= 0) {
                if (item.equals(array[index])) {
                    return index;
                }
                index -= 1;
            }
            return -1;
        };
        RecordMap.prototype.get = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getAttr = function (key) {
            if (this._fieldCount > 0) {
                key = Value.Text.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field instanceof Item.Attr && field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getSlot = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field instanceof Item.Slot && field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getField = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return field;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return void 0;
        };
        RecordMap.prototype.getItem = function (index) {
            if (index instanceof Item.Num) {
                index = index.value;
            }
            var n = this._itemCount;
            if (index < 0) {
                index = n + index;
            }
            if (index >= 0 && index < n) {
                return this._array[index];
            }
            else {
                return Item.absent();
            }
        };
        RecordMap.prototype.set = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setMutable(key, newValue);
                    }
                    else {
                        this.updateMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = item.updatedValue(newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Slot(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_1 = table[i];
                if (field_1 !== void 0) {
                    if (field_1.key.equals(key)) {
                        if (field_1.isMutable()) {
                            field_1.setValue(newValue);
                            return;
                        }
                        else {
                            this.updateMutable(key, newValue);
                            return;
                        }
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Slot(key, newValue);
            this.pushMutable(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = item.updatedValue(newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Slot(key, newValue);
            this.pushMutable(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setAttr = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setAttrAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Attr(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setAttrMutable(key, newValue);
                    }
                    else {
                        this.updateAttrMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Attr(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setAttrAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = new Item.Attr(key, newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Attr(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setAttrMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_2 = table[i];
                if (field_2 !== void 0) {
                    if (field_2.key.equals(key)) {
                        if (field_2 instanceof Item.Attr && field_2.isMutable()) {
                            field_2.setValue(newValue);
                        }
                        else {
                            this.updateAttrMutable(key, newValue);
                        }
                        return;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Attr(key, newValue);
            this.push(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateAttrMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = new Item.Attr(key, newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Attr(key, newValue);
            this.push(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setSlot = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setSlotAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setSlotMutable(key, newValue);
                    }
                    else {
                        this.updateSlotMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setSlotAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = new Item.Slot(key, newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Slot(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setSlotMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_3 = table[i];
                if (field_3 !== void 0) {
                    if (field_3.key.equals(key)) {
                        if (field_3 instanceof Item.Slot && field_3.isMutable()) {
                            field_3.setValue(newValue);
                        }
                        else {
                            this.updateSlotMutable(key, newValue);
                        }
                        return;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Slot(key, newValue);
            this.push(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateSlotMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = new Item.Slot(key, newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Slot(key, newValue);
            this.push(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setItem = function (index, newItem) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            newItem = Item.fromAny(newItem);
            var n = this._itemCount;
            if (index < 0) {
                index = n + index;
            }
            if (index < 0 || index > n) {
                throw new RangeError("" + index);
            }
            if ((this._flags & Record.ALIASED) !== 0) {
                this.setItemAliased(index, newItem);
            }
            else {
                this.setItemMutable(index, newItem);
            }
            return this;
        };
        RecordMap.prototype.setItemAliased = function (index, newItem) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItem = oldArray[index];
            newArray[index] = newItem;
            this._array = newArray;
            this._table = null;
            if (newItem instanceof Item.Field) {
                if (!(oldItem instanceof Item.Field)) {
                    this._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._fieldCount -= 1;
            }
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setItemMutable = function (index, newItem) {
            var array = this._array;
            var oldItem = array[index];
            array[index] = newItem;
            if (newItem instanceof Item.Field) {
                this._table = null;
                if (!(oldItem instanceof Item.Field)) {
                    this._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._table = null;
                this._fieldCount -= 1;
            }
        };
        RecordMap.prototype.updated = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setMutable(key, newValue);
                    }
                    else {
                        record.updateMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.updatedAttr = function (key, newValue) {
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setAttrAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Attr(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setAttrMutable(key, newValue);
                    }
                    else {
                        record.updateAttrMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Attr(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.updatedSlot = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setSlotAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setSlotMutable(key, newValue);
                    }
                    else {
                        record.updateSlotMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._flags & Record.ALIASED) !== 0) {
                this.pushAliased.apply(this, arguments);
            }
            else {
                this.pushMutable.apply(this, arguments);
            }
            return this._itemCount;
        };
        RecordMap.prototype.pushAliased = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = arguments.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < m; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(arguments[i]);
                newArray[m] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._table = null;
            this._itemCount = m;
            this._fieldCount = n;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.pushMutable = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = arguments.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || m + k > oldArray.length) {
                newArray = new Array(Record.expand(m + k));
                if (oldArray !== null) {
                    for (var i = 0; i < m; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(arguments[i]);
                newArray[m] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                    this._table = null;
                }
            }
            this._array = newArray;
            this._itemCount = m;
            this._fieldCount = n;
        };
        RecordMap.prototype.splice = function (start, deleteCount) {
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var n = this._itemCount;
            if (start < 0) {
                start = n + start;
            }
            start = Math.min(Math.max(0, start), n);
            deleteCount = Math.min(Math.max(0, deleteCount), n - start);
            if ((this._flags & Record.ALIASED) !== 0) {
                return this.spliceAliased.apply(this, arguments);
            }
            else {
                return this.spliceMutable.apply(this, arguments);
            }
        };
        RecordMap.prototype.spliceAliased = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(m - deleteCount + k));
            for (var i = 0; i < start; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItems = [];
            for (var i = start; i < start + deleteCount; i += 1) {
                var oldItem = oldArray[i];
                oldItems.push(oldItem);
                m -= 1;
                if (oldItem instanceof Item.Field) {
                    n -= 1;
                }
            }
            for (var i = start; i < m; i += 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + start] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._table = null;
            this._itemCount = m;
            this._fieldCount = n;
            this._flags &= ~Record.ALIASED;
            return oldItems;
        };
        RecordMap.prototype.spliceMutable = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || m - deleteCount + k > oldArray.length) {
                newArray = new Array(Record.expand(m - deleteCount + k));
                if (oldArray !== null) {
                    for (var i = 0; i < start; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            var oldItems = [];
            for (var i = start; i < start + deleteCount; i += 1) {
                var oldItem = oldArray[i];
                oldItems.push(oldItem);
                m -= 1;
                if (oldItem instanceof Item.Field) {
                    n -= 1;
                }
            }
            if (k > deleteCount) {
                for (var i = m - 1; i >= start; i -= 1) {
                    newArray[i + k] = oldArray[i + deleteCount];
                }
            }
            else {
                for (var i = start; i < m; i += 1) {
                    newArray[i + k] = oldArray[i + deleteCount];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + start] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._itemCount = m;
            this._fieldCount = n;
            return oldItems;
        };
        RecordMap.prototype.delete = function (key) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            if ((this._flags & Record.ALIASED) !== 0) {
                return this.deleteAliased(key);
            }
            else {
                return this.deleteMutable(key);
            }
        };
        RecordMap.prototype.deleteAliased = function (key) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        newArray[i] = oldArray[j];
                    }
                    this._array = newArray;
                    this._table = null;
                    this._itemCount = n - 1;
                    this._fieldCount -= 1;
                    this._flags &= ~Record.ALIASED;
                    return item;
                }
                newArray[i] = item;
            }
            return Item.absent();
        };
        RecordMap.prototype.deleteMutable = function (key) {
            var n = this._itemCount;
            var array = this._array;
            for (var i = 0; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        array[i] = array[j];
                    }
                    array[n - 1] = void 0;
                    this._table = null;
                    this._itemCount = n - 1;
                    this._fieldCount -= 1;
                    return item;
                }
            }
            return Item.absent();
        };
        RecordMap.prototype.clear = function () {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            this._array = null;
            this._table = null;
            this._itemCount = 0;
            this._fieldCount = 0;
            this._flags = 0;
        };
        RecordMap.prototype.isAliased = function () {
            return (this._flags & Record.ALIASED) !== 0;
        };
        RecordMap.prototype.isMutable = function () {
            return (this._flags & Record.IMMUTABLE) === 0;
        };
        RecordMap.prototype.alias = function () {
            this._flags |= Record.ALIASED;
        };
        RecordMap.prototype.branch = function () {
            if ((this._flags & (Record.ALIASED | Record.IMMUTABLE)) === 0) {
                var array = this._array;
                for (var i = 0, n = this._itemCount; i < n; i += 1) {
                    array[i].alias();
                }
            }
            this._flags |= Record.ALIASED;
            return new RecordMap(this._array, this._table, this._itemCount, this._fieldCount, Record.ALIASED);
        };
        RecordMap.prototype.clone = function () {
            var itemCount = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(itemCount);
            for (var i = 0; i < itemCount; i += 1) {
                newArray[i] = oldArray[i].clone();
            }
            return new RecordMap(newArray, null, itemCount, this._fieldCount, 0);
        };
        RecordMap.prototype.commit = function () {
            if ((this._flags & Record.IMMUTABLE) === 0) {
                this._flags |= Record.IMMUTABLE;
                var array = this._array;
                for (var i = 0, n = this._itemCount; i < n; i += 1) {
                    array[i].commit();
                }
            }
            return this;
        };
        RecordMap.prototype.hashTable = function () {
            var n = this._fieldCount;
            var table = this._table;
            if (n !== 0 && this._table === null) {
                table = new Array(Record.expand(Math.max(n, n * 10 / 7)));
                var array = this._array;
                for (var i = 0, m = this._itemCount; i < m; i += 1) {
                    var item = array[i];
                    if (item instanceof Item.Field) {
                        RecordMap.put(table, item);
                    }
                }
                this._table = table;
            }
            return table;
        };
        RecordMap.put = function (table, field) {
            if (table !== null) {
                var n = table.length;
                var x = Math.abs(field.key.hashCode() % n);
                var i = x;
                do {
                    var item = table[i];
                    if (item !== void 0) {
                        if (field.key.equals(item.key)) {
                            table[i] = field;
                            return;
                        }
                    }
                    else {
                        table[i] = field;
                        return;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
                throw new Error();
            }
        };
        RecordMap.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var array = this._array;
            var n = this._itemCount;
            var scope = Record.create(n);
            interpreter.pushScope(scope);
            var changed = false;
            for (var i = 0; i < n; i += 1) {
                var oldItem = array[i];
                var newItem = oldItem.evaluate(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }
            interpreter.popScope();
            return changed ? scope : this;
        };
        RecordMap.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var array = this._array;
            var n = this._itemCount;
            var scope = Record.create(n);
            interpreter.pushScope(scope);
            var changed = false;
            for (var i = 0; i < n; i += 1) {
                var oldItem = array[i];
                var newItem = oldItem.substitute(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }
            interpreter.popScope();
            return changed ? scope : this;
        };
        RecordMap.prototype.subRecord = function (lower, upper) {
            var n = this._itemCount;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            if (lower < 0 || upper > n || lower > upper) {
                throw new RangeError(lower + ", " + upper);
            }
            return new Record.RecordMapView(this, lower, upper);
        };
        RecordMap.prototype.forEach = function (callback, thisArg) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var result = callback.call(thisArg, array[i], i);
                if (result !== void 0) {
                    return result;
                }
            }
            return;
        };
        RecordMap.empty = function () {
            if (!RecordMap._empty) {
                RecordMap._empty = new RecordMap(null, null, 0, 0, Record.ALIASED | Record.IMMUTABLE);
            }
            return RecordMap._empty;
        };
        RecordMap.create = function (initialCapacity) {
            if (initialCapacity === void 0) {
                return new RecordMap(null, null, 0, 0, Record.ALIASED);
            }
            else {
                return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);
            }
        };
        RecordMap.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var n = arguments.length;
            if (n === 0) {
                return new RecordMap(null, null, 0, 0, Record.ALIASED);
            }
            else {
                var array = new Array(n);
                var itemCount = 0;
                var fieldCount = 0;
                for (var i = 0; i < n; i += 1) {
                    var item = Item.fromAny(arguments[i]);
                    array[i] = item;
                    itemCount += 1;
                    if (item instanceof Item.Field) {
                        fieldCount += 1;
                    }
                }
                return new RecordMap(array, null, itemCount, fieldCount, 0);
            }
        };
        return RecordMap;
    }(Record));
    Item.RecordMap = RecordMap;

    var RecordMapView = (function (_super) {
        __extends(RecordMapView, _super);
        function RecordMapView(record, lower, upper) {
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._lower = lower;
            _this._upper = upper;
            return _this;
        }
        RecordMapView.prototype.isEmpty = function () {
            return this._lower === this._upper;
        };
        RecordMapView.prototype.isArray = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    return false;
                }
            }
            return true;
        };
        RecordMapView.prototype.isObject = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    return false;
                }
            }
            return true;
        };
        Object.defineProperty(RecordMapView.prototype, "length", {
            get: function () {
                return this._upper - this._lower;
            },
            enumerable: true,
            configurable: true
        });
        RecordMapView.prototype.fieldCount = function () {
            var array = this._record._array;
            var k = 0;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    k += 1;
                }
            }
            return k;
        };
        RecordMapView.prototype.valueCount = function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    k += 1;
                }
            }
            return k;
        };
        RecordMapView.prototype.isConstant = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (!array[i].isConstant()) {
                    return false;
                }
            }
            return true;
        };
        RecordMapView.prototype.tag = function () {
            if (this.length > 0) {
                var item = this._record._array[this._lower];
                if (item instanceof Item.Attr) {
                    return item.key.value;
                }
            }
            return void 0;
        };
        RecordMapView.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        RecordMapView.prototype.head = function () {
            if (this.length > 0) {
                return this._record._array[this._lower];
            }
            else {
                return Item.absent();
            }
        };
        RecordMapView.prototype.tail = function () {
            if (this.length > 0) {
                return new RecordMapView(this._record, this._lower + 1, this._upper);
            }
            else {
                return Record.empty();
            }
        };
        RecordMapView.prototype.body = function () {
            var n = this.length;
            if (n > 2) {
                return new RecordMapView(this._record, this._lower + 1, this._upper).branch();
            }
            else if (n === 2) {
                var item = this._record._array[this._lower + 1];
                if (item instanceof Value) {
                    return item;
                }
                else {
                    return Record.of(item);
                }
            }
            else {
                return Value.absent();
            }
        };
        RecordMapView.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            var array = this._record._array;
            var n = this.length;
            if (index < 0) {
                index = Math.max(0, n + index);
            }
            index = this._lower + index;
            while (index < this._upper) {
                if (item.equals(array[index])) {
                    return index - this._lower;
                }
                index += 1;
            }
            return -1;
        };
        RecordMapView.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var array = this._record._array;
            var n = this.length;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = this._lower + Math.min(index, n - 1);
            while (index >= this._lower) {
                if (item.equals(array[index])) {
                    return index - this._lower;
                }
                index -= 1;
            }
            return -1;
        };
        RecordMapView.prototype.getItem = function (index) {
            if (index instanceof Item.Num) {
                index = index.value;
            }
            var n = this.length;
            if (index < 0) {
                index = n + index;
            }
            if (index >= 0 && index < n) {
                return this._record._array[this._lower + index];
            }
            else {
                return Item.absent();
            }
        };
        RecordMapView.prototype.setItem = function (index, newItem) {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            newItem = Item.fromAny(newItem);
            var n = this.length;
            if (index < 0) {
                index = n + index;
            }
            if (index < 0 || index > n) {
                throw new RangeError("" + index);
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.setItemAliased(index, newItem);
            }
            else {
                this.setItemMutable(index, newItem);
            }
            return this;
        };
        RecordMapView.prototype.setItemAliased = function (index, newItem) {
            var n = this._record._itemCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItem = oldArray[this._lower + index];
            newArray[this._lower + index] = newItem;
            this._record._array = newArray;
            this._record._table = null;
            if (newItem instanceof Item.Field) {
                if (!(oldItem instanceof Item.Field)) {
                    this._record._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._record._fieldCount -= 1;
            }
            this._record._flags &= ~Record.ALIASED;
        };
        RecordMapView.prototype.setItemMutable = function (index, newItem) {
            var array = this._record._array;
            var oldItem = array[this._lower + index];
            array[this._lower + index] = newItem;
            if (newItem instanceof Item.Field) {
                this._record._table = null;
                if (!(oldItem instanceof Item.Field)) {
                    this._record._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._record._table = null;
                this._record._fieldCount -= 1;
            }
        };
        RecordMapView.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.pushAliased.apply(this, arguments);
            }
            else {
                this.pushMutable.apply(this, arguments);
            }
            return this.length;
        };
        RecordMapView.prototype.pushAliased = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < this._upper; i += 1) {
                    newArray[i] = oldArray[i];
                }
                for (var i = this._upper; i < m; i += 1) {
                    newArray[i + k] = oldArray[i];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + this._upper] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._record._array = newArray;
            this._record._table = null;
            this._record._itemCount = m;
            this._record._fieldCount = n;
            this._record._flags &= ~Record.ALIASED;
            this._upper += k;
        };
        RecordMapView.prototype.pushMutable = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var oldArray = this._record._array;
            var newArray;
            if (oldArray === null || m + k > oldArray.length) {
                newArray = new Array(Record.expand(m + k));
                if (oldArray !== null) {
                    for (var i = 0; i < this._upper; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = m - 1; i >= this._upper; i -= 1) {
                newArray[i + k] = oldArray[i];
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + this._upper] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                    this._record._table = null;
                }
            }
            this._record._array = newArray;
            this._record._itemCount = m;
            this._record._fieldCount = n;
            this._upper += k;
        };
        RecordMapView.prototype.splice = function (start, deleteCount) {
            var _a, _b;
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var n = this.length;
            if (start < 0) {
                start = n + start;
            }
            start = Math.min(Math.max(0, start), n);
            deleteCount = Math.min(Math.max(0, deleteCount), n - start);
            var deleted;
            if ((this._record._flags & Record.ALIASED) !== 0) {
                deleted = (_a = this._record).spliceAliased.apply(_a, [this._lower + start, deleteCount].concat(newItems));
            }
            else {
                deleted = (_b = this._record).spliceMutable.apply(_b, [this._lower + start, deleteCount].concat(newItems));
            }
            this._upper += newItems.length - deleted.length;
            return deleted;
        };
        RecordMapView.prototype.delete = function (key) {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            if ((this._record._flags & Record.ALIASED) !== 0) {
                return this.deleteAliased(key);
            }
            else {
                return this.deleteMutable(key);
            }
        };
        RecordMapView.prototype.deleteAliased = function (key) {
            var n = this._record._itemCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(n));
            for (var i = this._lower; i < this._upper; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        newArray[i] = oldArray[j];
                    }
                    this._record._array = newArray;
                    this._record._table = null;
                    this._record._itemCount = n - 1;
                    this._record._fieldCount -= 1;
                    this._record._flags &= ~Record.ALIASED;
                    this._upper -= 1;
                    return item;
                }
                newArray[i] = item;
            }
            return Item.absent();
        };
        RecordMapView.prototype.deleteMutable = function (key) {
            var n = this._record._itemCount;
            var array = this._record._array;
            for (var i = this._lower; i < this._upper; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        array[i] = array[j];
                    }
                    array[n - 1] = void 0;
                    this._record._table = null;
                    this._record._itemCount -= 1;
                    this._record._fieldCount -= 1;
                    this._upper -= 1;
                    return item;
                }
            }
            return Item.absent();
        };
        RecordMapView.prototype.clear = function () {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.clearAliased();
            }
            else {
                this.clearMutable();
            }
        };
        RecordMapView.prototype.clearAliased = function () {
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var l = m - this.length;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(l));
            var i = 0;
            while (i < this._lower) {
                newArray[i] = oldArray[i];
                i += 1;
            }
            while (i < this._upper) {
                if (oldArray[i] instanceof Item.Field) {
                    n -= 1;
                }
                i += 1;
            }
            i = this._lower;
            var j = this._upper;
            while (j < m) {
                newArray[i] = oldArray[j];
                i += 1;
                j += 1;
            }
            this._record._array = newArray;
            this._record._table = null;
            this._record._itemCount = l;
            this._record._fieldCount = n;
            this._record._flags &= ~Record.ALIASED;
            this._upper = this._lower;
        };
        RecordMapView.prototype.clearMutable = function () {
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var array = this._record._array;
            var i = this._lower;
            while (i < this._upper) {
                if (array[i] instanceof Item.Field) {
                    n -= 1;
                }
                i += 1;
            }
            i = this._lower;
            var j = this._upper;
            while (j < m) {
                var item = array[j];
                if (item instanceof Item.Field) {
                    this._record._table = null;
                }
                array[i] = item;
                i += 1;
                j += 1;
            }
            this._record._itemCount = i;
            this._record._fieldCount = n;
            while (i < m) {
                array[i] = void 0;
                i += 1;
            }
            this._upper = this._lower;
        };
        RecordMapView.prototype.isAliased = function () {
            return (this._record._flags & Record.ALIASED) !== 0;
        };
        RecordMapView.prototype.isMutable = function () {
            return (this._record._flags & Record.IMMUTABLE) === 0;
        };
        RecordMapView.prototype.alias = function () {
            this._record._flags |= Record.ALIASED;
        };
        RecordMapView.prototype.branch = function () {
            var m = this.length;
            var n = 0;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m));
            var i = this._lower;
            var j = 0;
            while (j < m) {
                var item = oldArray[i];
                newArray[j] = item;
                if (item instanceof Item.Field) {
                    n += 1;
                }
                i += 1;
                j += 1;
            }
            return new RecordMap(newArray, null, m, n, 0);
        };
        RecordMapView.prototype.clone = function () {
            var m = this.length;
            var n = 0;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m));
            var i = this._lower;
            var j = 0;
            while (j < m) {
                var item = oldArray[i];
                newArray[j] = item.clone();
                if (item instanceof Item.Field) {
                    n += 1;
                }
                i += 1;
                j += 1;
            }
            return new RecordMap(newArray, null, m, n, 0);
        };
        RecordMapView.prototype.commit = function () {
            this._record.commit();
            return this;
        };
        RecordMapView.prototype.subRecord = function (lower, upper) {
            var n = this.length;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            if (lower < 0 || upper > n || lower > upper) {
                throw new RangeError(lower + ", " + upper);
            }
            return new RecordMapView(this._record, this._lower + lower, this._upper + upper);
        };
        RecordMapView.prototype.forEach = function (callback, thisArg) {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var result = callback.call(thisArg, array[i], i);
                if (result !== void 0) {
                    return result;
                }
            }
            return;
        };
        return RecordMapView;
    }(Record));
    Item.RecordMapView = RecordMapView;

    var DataOutput = (function (_super) {
        __extends(DataOutput, _super);
        function DataOutput(data, settings) {
            var _this = _super.call(this) || this;
            _this._data = data;
            _this._settings = settings;
            return _this;
        }
        DataOutput.prototype.isCont = function () {
            return true;
        };
        DataOutput.prototype.isFull = function () {
            return false;
        };
        DataOutput.prototype.isDone = function () {
            return false;
        };
        DataOutput.prototype.isError = function () {
            return false;
        };
        DataOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        DataOutput.prototype.write = function (b) {
            if (typeof b === "number") {
                this._data.addByte(b);
                return this;
            }
            else {
                throw new TypeError("" + b);
            }
        };
        DataOutput.prototype.writeln = function (string) {
            throw new TypeError("" + string);
        };
        DataOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        DataOutput.prototype.bind = function () {
            return this._data;
        };
        DataOutput.prototype.clone = function () {
            return new DataOutput(this._data.branch(), this._settings);
        };
        return DataOutput;
    }(Output));

    var Data = (function (_super) {
        __extends(Data, _super);
        function Data(array, size, flags) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._size = size;
            _this._flags = flags;
            return _this;
        }
        Data.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Data.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: true,
            configurable: true
        });
        Data.prototype.getByte = function (index) {
            if (index < 0 || index >= this.size) {
                throw new RangeError("" + index);
            }
            return this._array[index];
        };
        Data.prototype.setByte = function (index, value) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            else if (index < 0 || index >= this._size) {
                throw new RangeError("" + index);
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.setByteAliased(index, value);
            }
            else {
                return this.setByteMutable(index, value);
            }
        };
        Data.prototype.setByteAliased = function (index, value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n));
            newArray.set(oldArray, 0);
            newArray[index] = value;
            this._array = newArray;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.setByteMutable = function (index, value) {
            this._array[index] = value;
            return this;
        };
        Data.prototype.addByte = function (value) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.addByteAliased(value);
            }
            else {
                return this.addByteMutable(value);
            }
        };
        Data.prototype.addByteAliased = function (value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n + 1));
            if (oldArray != null) {
                newArray.set(oldArray, 0);
            }
            newArray[n] = value;
            this._array = newArray;
            this._size = n + 1;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.addByteMutable = function (value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || n + 1 > oldArray.length) {
                newArray = new Uint8Array(Data.expand(n + 1));
                if (oldArray !== null) {
                    newArray.set(oldArray, 0);
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray[n] = value;
            this._size = n + 1;
            return this;
        };
        Data.prototype.addData = function (data) {
            var array = data._array;
            if (array !== null) {
                var size = data._size;
                if (array.length > size) {
                    array = array.slice(0, size);
                }
                return this.addUint8Array(array);
            }
            else {
                return this;
            }
        };
        Data.prototype.addUint8Array = function (array) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.addUint8ArrayAliased(array);
            }
            else {
                return this.addUint8ArrayMutable(array);
            }
        };
        Data.prototype.addUint8ArrayAliased = function (array) {
            var size = array.length;
            if (size === 0) {
                return this;
            }
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n + size));
            if (oldArray !== null) {
                newArray.set(oldArray, 0);
            }
            newArray.set(array, n);
            this._array = newArray;
            this._size = n + size;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.addUint8ArrayMutable = function (array) {
            var size = array.length;
            if (size === 0) {
                return this;
            }
            var n = this.size;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || n + size > oldArray.length) {
                newArray = new Uint8Array(Data.expand(n + size));
                if (oldArray !== null) {
                    newArray.set(oldArray, 0);
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray.set(array, n);
            this._size = n + size;
            return this;
        };
        Data.prototype.clear = function () {
            if ((this._flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            this._array = null;
            this._size = 0;
            this._flags = Data.ALIASED;
        };
        Data.prototype.toUint8Array = function () {
            var oldArray = this._array;
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                return oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);
            }
            else if ((flags & Data.ALIASED) !== 0 || this._size !== oldArray.length) {
                var newArray = oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);
                this._array = newArray;
                this._flags &= ~Data.ALIASED;
                return newArray;
            }
            else {
                return oldArray;
            }
        };
        Data.prototype.asUint8Array = function () {
            var array;
            if (this._array && this._size > 0) {
                array = this._array;
                if (array.length !== this._size) {
                    array = new Uint8Array(array.buffer, array.byteOffset, this._size);
                }
            }
            else {
                array = void 0;
            }
            return array;
        };
        Data.prototype.toAny = function () {
            return this.toUint8Array();
        };
        Data.prototype.isAliased = function () {
            return (this._flags & Data.ALIASED) !== 0;
        };
        Data.prototype.isMutable = function () {
            return (this._flags & Data.IMMUTABLE) === 0;
        };
        Data.prototype.branch = function () {
            this._flags |= Data.ALIASED;
            return new Data(this._array, this._size, Data.ALIASED);
        };
        Data.prototype.clone = function () {
            return this.branch();
        };
        Data.prototype.commit = function () {
            this._flags |= Data.IMMUTABLE;
            return this;
        };
        Data.prototype.writeBase16 = function (output, base16) {
            if (base16 === void 0) { base16 = Base16.uppercase(); }
            var array = this._array;
            var size = this._size;
            if (array !== null && size !== 0) {
                if (array.length !== size) {
                    array = array.slice(0, size);
                }
                return base16.writeUint8Array(array, output);
            }
            else {
                return Writer.done();
            }
        };
        Data.prototype.toBase16 = function (base16) {
            if (base16 === void 0) { base16 = Base16.uppercase(); }
            var output = Unicode.stringOutput();
            this.writeBase16(output, base16);
            return output.bind();
        };
        Data.prototype.writeBase64 = function (output, base64) {
            if (base64 === void 0) { base64 = Base64.standard(); }
            var array = this._array;
            var size = this._size;
            if (array !== null && size !== 0) {
                if (array.length !== size) {
                    array = array.slice(0, size);
                }
                return base64.writeUint8Array(array, output);
            }
            else {
                return Writer.done();
            }
        };
        Data.prototype.toBase64 = function (base64) {
            if (base64 === void 0) { base64 = Base64.standard(); }
            var output = Unicode.stringOutput();
            this.writeBase64(output, base64);
            return output.bind();
        };
        Data.prototype.typeOrder = function () {
            return 4;
        };
        Data.prototype.compareTo = function (that) {
            if (that instanceof Data) {
                var xs = this._array;
                var ys = that._array;
                var xn = this._size;
                var yn = that._size;
                var order = 0;
                var i = 0;
                do {
                    if (i < xn && i < yn) {
                        order = xs[i] - ys[i];
                        i += 1;
                    }
                    else {
                        break;
                    }
                } while (order === 0);
                if (order > 0) {
                    return 1;
                }
                else if (order < 0) {
                    return -1;
                }
                else if (xn > yn) {
                    return 1;
                }
                else if (xn < yn) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Data.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Data) {
                var xs = this._array;
                var ys = that._array;
                var xn = this._size;
                if (xn !== that._size) {
                    return false;
                }
                for (var i = 0; i < xn; i += 1) {
                    if (xs[i] !== ys[i]) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        };
        Data.prototype.hashCode = function () {
            if (Data._hashSeed === void 0) {
                Data._hashSeed = Murmur3.seed(Data);
            }
            return Murmur3.mash(Murmur3.mix(Data._hashSeed, this._array || new Uint8Array(0)));
        };
        Data.prototype.debug = function (output) {
            output = output.write("Data").write(46);
            if (this._size === 0) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("base16").write(40).write(34);
                this.writeBase16(output);
                output = output.write(34).write(41);
            }
        };
        Data.prototype.display = function (output) {
            this.debug(output);
        };
        Data.output = function (data) {
            if (!(data instanceof Data)) {
                data = Data.create(data);
            }
            return new DataOutput(data, OutputSettings.standard());
        };
        Data.empty = function () {
            if (Data._empty == null) {
                Data._empty = new Data(null, 0, Data.ALIASED | Data.IMMUTABLE);
            }
            return Data._empty;
        };
        Data.create = function (initialCapacity) {
            if (initialCapacity === void 0) {
                return new Data(null, 0, Data.ALIASED);
            }
            else {
                return new Data(new Uint8Array(initialCapacity), 0, 0);
            }
        };
        Data.wrap = function (value) {
            return new Data(value, value.length, Data.ALIASED);
        };
        Data.fromBase16 = function (input) {
            if (typeof input === "string") {
                input = Unicode.stringInput(input);
            }
            return Base16.parse(input, Data.output()).bind();
        };
        Data.fromBase64 = function (input, base64) {
            if (base64 === void 0) { base64 = Base64.standard(); }
            if (typeof input === "string") {
                input = Unicode.stringInput(input);
            }
            return base64.parse(input, Data.output()).bind();
        };
        Data.fromAny = function (value) {
            if (value instanceof Data) {
                return value;
            }
            else if (value instanceof Uint8Array) {
                return Data.wrap(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Data.random = function (size) {
            var array = new Uint8Array(size);
            Random.fillBytes(array);
            return Data.wrap(array);
        };
        Data.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        Data.ALIASED = 1 << 0;
        Data.IMMUTABLE = 1 << 1;
        return Data;
    }(Value));
    Item.Data = Data;

    var TextOutput = (function (_super) {
        __extends(TextOutput, _super);
        function TextOutput(string, settings) {
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._settings = settings;
            return _this;
        }
        TextOutput.prototype.isCont = function () {
            return true;
        };
        TextOutput.prototype.isFull = function () {
            return false;
        };
        TextOutput.prototype.isDone = function () {
            return false;
        };
        TextOutput.prototype.isError = function () {
            return false;
        };
        TextOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        TextOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                if ((token >= 0x0000 && token <= 0xd7ff)
                    || (token >= 0xe000 && token <= 0xffff)) {
                    token = String.fromCharCode(token);
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    var u = token - 0x10000;
                    token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));
                }
                else {
                    token = "\ufffd";
                }
            }
            this._string += token;
            return this;
        };
        TextOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        TextOutput.prototype.bind = function () {
            return Text$1.from(this._string);
        };
        TextOutput.prototype.clone = function () {
            return new TextOutput(this._string, this._settings);
        };
        TextOutput.prototype.toString = function () {
            return this._string;
        };
        return TextOutput;
    }(Output));

    var Text$1 = (function (_super) {
        __extends(Text, _super);
        function Text(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        Text.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Text.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "size", {
            get: function () {
                return this._value.length;
            },
            enumerable: true,
            configurable: true
        });
        Text.prototype.stringValue = function (orElse) {
            return this._value;
        };
        Text.prototype.numberValue = function (orElse) {
            try {
                return Item.Num.from(this._value).numberValue();
            }
            catch (error) {
                return orElse;
            }
        };
        Text.prototype.booleanValue = function (orElse) {
            if (this._value === "true") {
                return true;
            }
            else if (this._value === "false") {
                return false;
            }
            else {
                return orElse;
            }
        };
        Text.prototype.toAny = function () {
            return this._value;
        };
        Text.prototype.valueOf = function () {
            return this._value;
        };
        Text.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Text) {
                return Text.from(this._value + that._value);
            }
            return _super.prototype.plus.call(this, that);
        };
        Text.prototype.branch = function () {
            return this;
        };
        Text.prototype.clone = function () {
            return this;
        };
        Text.prototype.commit = function () {
            return this;
        };
        Text.prototype.typeOrder = function () {
            return 5;
        };
        Text.prototype.compareTo = function (that) {
            if (that instanceof Text) {
                var order = this._value.localeCompare(that._value);
                return order < 0 ? -1 : order > 0 ? 1 : 0;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Text.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Text) {
                return this._value === that._value;
            }
            return false;
        };
        Text.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this._value);
            }
            return this._hashCode;
        };
        Text.prototype.debug = function (output) {
            output = output.write("Text").write(46);
            if (this._value.length === 0) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("from").write(40).debug(this._value).write(41);
            }
        };
        Text.prototype.display = function (output) {
            Format.debug(this._value, output);
        };
        Text.prototype.toString = function () {
            return this._value;
        };
        Text.output = function (settings) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            return new TextOutput("", settings);
        };
        Text.empty = function () {
            if (!Text._empty) {
                Text._empty = new Text("");
            }
            return Text._empty;
        };
        Text.from = function (value) {
            var n = value.length;
            if (n === 0) {
                return Text.empty();
            }
            else {
                var text = new Text(value);
                if (n <= 64) {
                    text = Text.cache().put(text);
                }
                return text;
            }
        };
        Text.fromAny = function (value) {
            if (value instanceof Text) {
                return value;
            }
            else if (typeof value === "string") {
                return Text.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Text.cache = function () {
            if (Text._cache == null) {
                var cacheSize = 128;
                Text._cache = new HashGenCacheSet(cacheSize);
            }
            return Text._cache;
        };
        return Text;
    }(Value));
    Item.Text = Text$1;

    var Num = (function (_super) {
        __extends(Num, _super);
        function Num(value, flags) {
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Num.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Num.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Num.prototype.isNaN = function () {
            return isNaN(this._value);
        };
        Num.prototype.isInfinite = function () {
            return !isNaN(this._value) && !isFinite(this._value);
        };
        Num.prototype.isUint32 = function () {
            return (this._flags & Num.UINT32) !== 0;
        };
        Num.prototype.isUint64 = function () {
            return (this._flags & Num.UINT64) !== 0;
        };
        Num.prototype.stringValue = function (orElse) {
            return "" + this._value;
        };
        Num.prototype.numberValue = function (orElse) {
            return this._value;
        };
        Num.prototype.booleanValue = function (orElse) {
            return !!this._value;
        };
        Num.prototype.toAny = function () {
            return this._value;
        };
        Num.prototype.valueOf = function () {
            return this._value;
        };
        Num.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value | that._value) >>> 0);
            }
            return _super.prototype.bitwiseOr.call(this, that);
        };
        Num.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value ^ that._value) >>> 0);
            }
            return _super.prototype.bitwiseXor.call(this, that);
        };
        Num.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value & that._value) >>> 0);
            }
            return _super.prototype.bitwiseAnd.call(this, that);
        };
        Num.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value + that._value);
            }
            return _super.prototype.plus.call(this, that);
        };
        Num.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value - that._value);
            }
            return _super.prototype.minus.call(this, that);
        };
        Num.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value * that._value);
            }
            return _super.prototype.times.call(this, that);
        };
        Num.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value / that._value);
            }
            return _super.prototype.divide.call(this, that);
        };
        Num.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value % that._value);
            }
            return _super.prototype.modulo.call(this, that);
        };
        Num.prototype.bitwiseNot = function () {
            return Num.from(~this._value >>> 0);
        };
        Num.prototype.negative = function () {
            return Num.from(-this._value);
        };
        Num.prototype.positive = function () {
            return this;
        };
        Num.prototype.inverse = function () {
            return Num.from(1 / this._value);
        };
        Num.prototype.abs = function () {
            return Num.from(Math.abs(this._value));
        };
        Num.prototype.ceil = function () {
            return Num.from(Math.ceil(this._value));
        };
        Num.prototype.floor = function () {
            return Num.from(Math.floor(this._value));
        };
        Num.prototype.round = function () {
            return Num.from(Math.round(this._value));
        };
        Num.prototype.sqrt = function () {
            return Num.from(Math.sqrt(this._value));
        };
        Num.prototype.pow = function (that) {
            that = Num.fromAny(that);
            return Num.from(Math.pow(this._value, that._value));
        };
        Num.prototype.max = function (that) {
            return this.compareTo(that) >= 0 ? this : that;
        };
        Num.prototype.min = function (that) {
            return this.compareTo(that) <= 0 ? this : that;
        };
        Num.prototype.typeOrder = function () {
            return 6;
        };
        Num.prototype.compareTo = function (that) {
            if (that instanceof Num) {
                var x = this._value;
                var y = that._value;
                return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Num.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Num) {
                var x = this._value;
                var y = that._value;
                return x === y || isNaN(x) && isNaN(y);
            }
            return false;
        };
        Num.prototype.hashCode = function () {
            return Murmur3.hash(this._value);
        };
        Num.prototype.debug = function (output) {
            output = output.write("Num").write(46).write("from")
                .write(40).display(this).write(41);
        };
        Num.prototype.display = function (output) {
            Format.displayNumber(this._value, output);
        };
        Num.positiveZero = function () {
            if (Num._positiveZero === void 0) {
                Num._positiveZero = new Num(0);
            }
            return Num._positiveZero;
        };
        Num.negativeZero = function () {
            if (Num._negativeZero === void 0) {
                Num._negativeZero = new Num(-0);
            }
            return Num._negativeZero;
        };
        Num.positiveOne = function () {
            if (Num._positiveOne === void 0) {
                Num._positiveOne = new Num(1);
            }
            return Num._positiveOne;
        };
        Num.negativeOne = function () {
            if (Num._negativeOne === void 0) {
                Num._negativeOne = new Num(-1);
            }
            return Num._negativeOne;
        };
        Num.nan = function () {
            if (Num._nan === void 0) {
                Num._nan = new Num(NaN);
            }
            return Num._nan;
        };
        Num.uint32 = function (value) {
            return new Num(value, Num.UINT32);
        };
        Num.uint64 = function (value) {
            return new Num(value, Num.UINT64);
        };
        Num.from = function (value) {
            if (typeof value === "number") {
                if (value === 0) {
                    if (1 / value === -Infinity) {
                        return Num.negativeZero();
                    }
                    else {
                        return Num.positiveZero();
                    }
                }
                else if (value === 1) {
                    return Num.positiveOne();
                }
                else if (value === -1) {
                    return Num.negativeOne();
                }
                else if (isNaN(value)) {
                    return Num.nan();
                }
                else {
                    return Num.cache().put(new Num(value));
                }
            }
            else if (typeof value === "string") {
                if (value === "NaN") {
                    return Num.nan();
                }
                else {
                    var num = +value;
                    if (isFinite(num)) {
                        return Num.from(num);
                    }
                }
                throw new Error(value);
            }
            throw new TypeError("" + value);
        };
        Num.fromAny = function (value) {
            if (value instanceof Num) {
                return value;
            }
            else if (typeof value === "number") {
                return Num.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Num.cache = function () {
            if (Num._cache == null) {
                var cacheSize = 16;
                Num._cache = new HashGenCacheSet(cacheSize);
            }
            return Num._cache;
        };
        Num.TYPE_MASK = 0x3;
        Num.UINT32 = 1;
        Num.UINT64 = 2;
        return Num;
    }(Value));
    Item.Num = Num;

    var Bool = (function (_super) {
        __extends(Bool, _super);
        function Bool(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        Bool.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Bool.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Bool.prototype.stringValue = function (orElse) {
            return this._value ? "true" : "false";
        };
        Bool.prototype.booleanValue = function (orElse) {
            return this._value;
        };
        Bool.prototype.toAny = function () {
            return this._value;
        };
        Bool.prototype.valueOf = function () {
            return this._value;
        };
        Bool.prototype.conditional = function (thenTerm, elseTerm) {
            return this._value ? Item.fromAny(thenTerm) : Item.fromAny(elseTerm);
        };
        Bool.prototype.or = function (that) {
            return this._value ? this : Item.fromAny(that);
        };
        Bool.prototype.and = function (that) {
            return this._value ? Item.fromAny(that) : this;
        };
        Bool.prototype.not = function () {
            return Bool.from(!this._value);
        };
        Bool.prototype.typeOrder = function () {
            return 7;
        };
        Bool.prototype.compareTo = function (that) {
            if (that instanceof Bool) {
                if (this._value && !that._value) {
                    return -1;
                }
                else if (!this._value && that._value) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Bool.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Bool) {
                return this._value === that._value;
            }
            return false;
        };
        Bool.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this._value ? "true" : "false");
            }
            return this._hashCode;
        };
        Bool.prototype.debug = function (output) {
            output = output.write("Bool").write(46).write("from")
                .write(40).write(this._value ? "true" : "false").write(41);
        };
        Bool.prototype.display = function (output) {
            output = output.write(this._value ? "true" : "false");
        };
        Bool.from = function (value) {
            return value ? Bool.True : Bool.False;
        };
        Bool.fromAny = function (value) {
            if (value instanceof Bool) {
                return value;
            }
            else if (typeof value === "boolean") {
                return Bool.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Bool.True = new Bool(true);
        Bool.False = new Bool(false);
        return Bool;
    }(Value));
    Item.Bool = Bool;

    var Expression = (function (_super) {
        __extends(Expression, _super);
        function Expression() {
            return _super.call(this) || this;
        }
        Expression.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            elseTerm = Item.fromAny(elseTerm);
            return new Item.ConditionalOperator(this, thenTerm, elseTerm);
        };
        Expression.prototype.or = function (that) {
            that = Item.fromAny(that);
            return new Item.OrOperator(this, that);
        };
        Expression.prototype.and = function (that) {
            that = Item.fromAny(that);
            return new Item.AndOperator(this, that);
        };
        Expression.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseOrOperator(this, that);
        };
        Expression.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseXorOperator(this, that);
        };
        Expression.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseAndOperator(this, that);
        };
        Expression.prototype.lt = function (that) {
            that = Item.fromAny(that);
            return new Item.LtOperator(this, that);
        };
        Expression.prototype.le = function (that) {
            that = Item.fromAny(that);
            return new Item.LeOperator(this, that);
        };
        Expression.prototype.eq = function (that) {
            that = Item.fromAny(that);
            return new Item.EqOperator(this, that);
        };
        Expression.prototype.ne = function (that) {
            that = Item.fromAny(that);
            return new Item.NeOperator(this, that);
        };
        Expression.prototype.ge = function (that) {
            that = Item.fromAny(that);
            return new Item.GeOperator(this, that);
        };
        Expression.prototype.gt = function (that) {
            that = Item.fromAny(that);
            return new Item.GtOperator(this, that);
        };
        Expression.prototype.plus = function (that) {
            that = Item.fromAny(that);
            return new Item.PlusOperator(this, that);
        };
        Expression.prototype.minus = function (that) {
            that = Item.fromAny(that);
            return new Item.MinusOperator(this, that);
        };
        Expression.prototype.times = function (that) {
            that = Item.fromAny(that);
            return new Item.TimesOperator(this, that);
        };
        Expression.prototype.divide = function (that) {
            that = Item.fromAny(that);
            return new Item.DivideOperator(this, that);
        };
        Expression.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            return new Item.ModuloOperator(this, that);
        };
        Expression.prototype.not = function () {
            return new Item.NotOperator(this);
        };
        Expression.prototype.bitwiseNot = function () {
            return new Item.BitwiseNotOperator(this);
        };
        Expression.prototype.negative = function () {
            return new Item.NegativeOperator(this);
        };
        Expression.prototype.positive = function () {
            return new Item.PositiveOperator(this);
        };
        Expression.prototype.inverse = function () {
            return new Item.DivideOperator(Item.Num.positiveOne(), this);
        };
        Expression.prototype.toAny = function () {
            return this;
        };
        return Expression;
    }(Value));
    Item.Expression = Expression;

    var Operator = (function (_super) {
        __extends(Operator, _super);
        function Operator() {
            return _super.call(this) || this;
        }
        return Operator;
    }(Expression));
    Item.Operator = Operator;

    var Selector = (function (_super) {
        __extends(Selector, _super);
        function Selector() {
            return _super.call(this) || this;
        }
        Selector.prototype.isConstant = function () {
            return false;
        };
        Selector.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var selected = Item.Record.create();
            this.forSelected(interpreter, function (interpreter) {
                var scope = interpreter.peekScope();
                if (scope) {
                    selected.push(scope);
                }
            }, this);
            return selected.isEmpty() ? Item.absent() : selected.flattened();
        };
        Selector.prototype.get = function (key) {
            key = Value.fromAny(key);
            return this.andThen(new Item.GetSelector(key, Selector.identity()));
        };
        Selector.prototype.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return this.andThen(new Item.GetAttrSelector(key, Selector.identity()));
        };
        Selector.prototype.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return this.andThen(new Item.GetItemSelector(index, Selector.identity()));
        };
        Selector.prototype.keys = function () {
            return this.andThen(Selector.keys());
        };
        Selector.prototype.values = function () {
            return this.andThen(Selector.values());
        };
        Selector.prototype.children = function () {
            return this.andThen(Selector.children());
        };
        Selector.prototype.descendants = function () {
            return this.andThen(Selector.descendants());
        };
        Selector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return new Item.FilterSelector(this, Selector.identity());
            }
            else {
                predicate = Item.fromAny(predicate);
                return this.andThen(predicate.filter());
            }
        };
        Selector.prototype.invoke = function (args) {
            return new Item.InvokeOperator(this, args);
        };
        Selector.prototype.precedence = function () {
            return 11;
        };
        Selector.prototype.debug = function (output) {
            output = output.write("Selector").write(46).write("identity").write(40).write(41);
            this.debugThen(output);
        };
        Selector.identity = function () {
            return Selector._identity;
        };
        Selector.get = function (key) {
            key = Value.fromAny(key);
            return new Item.GetSelector(key, Selector.identity());
        };
        Selector.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return new Item.GetAttrSelector(key, Selector.identity());
        };
        Selector.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return new Item.GetItemSelector(index, Selector.identity());
        };
        Selector.keys = function () {
            if (!Selector._keys) {
                Selector._keys = new Item.KeysSelector(Selector.identity());
            }
            return Selector._keys;
        };
        Selector.values = function () {
            if (!Selector._values) {
                Selector._values = new Item.ValuesSelector(Selector.identity());
            }
            return Selector._values;
        };
        Selector.children = function () {
            if (!Selector._children) {
                Selector._children = new Item.ChildrenSelector(Selector.identity());
            }
            return Selector._children;
        };
        Selector.descendants = function () {
            if (!Selector._descendants) {
                Selector._descendants = new Item.DescendantsSelector(Selector.identity());
            }
            return Selector._descendants;
        };
        Selector.literal = function (item) {
            item = Item.fromAny(item);
            if (!(item instanceof Selector)) {
                item = new Item.LiteralSelector(item, Selector.identity());
            }
            return item;
        };
        return Selector;
    }(Expression));
    Item.Selector = Selector;

    var Func = (function (_super) {
        __extends(Func, _super);
        function Func() {
            return _super.call(this) || this;
        }
        Func.prototype.expand = function (args, interpreter, operator) {
            return void 0;
        };
        Func.prototype.isConstant = function () {
            return false;
        };
        return Func;
    }(Expression));
    Item.Func = Func;

    var Extant = (function (_super) {
        __extends(Extant, _super);
        function Extant() {
            return _super.call(this) || this;
        }
        Extant.prototype.isDefined = function () {
            return true;
        };
        Extant.prototype.isDistinct = function () {
            return false;
        };
        Extant.prototype.isConstant = function () {
            return true;
        };
        Extant.prototype.unflattened = function () {
            return Value.Record.empty();
        };
        Extant.prototype.not = function () {
            return Value.absent();
        };
        Extant.prototype.stringValue = function (orElse) {
            return "";
        };
        Extant.prototype.booleanValue = function (orElse) {
            return true;
        };
        Extant.prototype.toAny = function () {
            return null;
        };
        Extant.prototype.typeOrder = function () {
            return 98;
        };
        Extant.prototype.compareTo = function (that) {
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Extant.prototype.equals = function (that) {
            return this === that;
        };
        Extant.prototype.hashCode = function () {
            if (Extant._hashSeed === void 0) {
                Extant._hashSeed = Murmur3.seed(Extant);
            }
            return Extant._hashSeed;
        };
        Extant.prototype.debug = function (output) {
            output = output.write("Value").write(46).write("extant").write(40).write(41);
        };
        Extant.prototype.display = function (output) {
            output = output.write("null");
        };
        Extant.extant = function () {
            return Extant._extant;
        };
        Extant.fromAny = function (value) {
            if (value instanceof Extant) {
                return value;
            }
            else if (value === null) {
                return Extant.extant();
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Extant._extant = new Extant();
        return Extant;
    }(Value));
    Item.Extant = Extant;

    var Absent = (function (_super) {
        __extends(Absent, _super);
        function Absent() {
            return _super.call(this) || this;
        }
        Absent.prototype.isDefined = function () {
            return false;
        };
        Absent.prototype.isDistinct = function () {
            return false;
        };
        Absent.prototype.isConstant = function () {
            return true;
        };
        Absent.prototype.unflattened = function () {
            return Value.Record.empty();
        };
        Absent.prototype.updated = function (key, value) {
            return Value.Record.of(Item.Slot.of(key, value));
        };
        Absent.prototype.updatedAttr = function (key, value) {
            return Value.Record.of(Item.Attr.of(key, value));
        };
        Absent.prototype.updatedSlot = function (key, value) {
            return Value.Record.of(Item.Slot.of(key, value));
        };
        Absent.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Value.Record.of(items);
        };
        Absent.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Value.Record.of(items);
        };
        Absent.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Value.Record.create();
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Absent.prototype.cond = function (thenTerm, elseTerm) {
            return Item.fromAny(elseTerm);
        };
        Absent.prototype.or = function (that) {
            return Item.fromAny(that);
        };
        Absent.prototype.and = function (that) {
            return this;
        };
        Absent.prototype.not = function () {
            return Value.extant();
        };
        Absent.prototype.booleanValue = function (orElse) {
            return false;
        };
        Absent.prototype.toAny = function () {
            return void 0;
        };
        Absent.prototype.forEach = function (callback, thisArg) {
            return void 0;
        };
        Absent.prototype.iterator = function () {
            return Cursor.empty();
        };
        Absent.prototype.typeOrder = function () {
            return 99;
        };
        Absent.prototype.compareTo = function (that) {
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Absent.prototype.equals = function (that) {
            return this === that;
        };
        Absent.prototype.hashCode = function () {
            if (Absent._hashSeed === void 0) {
                Absent._hashSeed = Murmur3.seed(Absent);
            }
            return Absent._hashSeed;
        };
        Absent.prototype.debug = function (output) {
            output = output.write("Value").write(46).write("absent").write(40).write(41);
        };
        Absent.prototype.display = function (output) {
            output = output.write("undefined");
        };
        Absent.absent = function () {
            return Absent._absent;
        };
        Absent.fromAny = function (value) {
            if (value instanceof Absent) {
                return value;
            }
            else if (value === void 0) {
                return Absent.absent();
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Absent._absent = new Absent();
        return Absent;
    }(Value));
    Item.Absent = Absent;

    var FormException = (function (_super) {
        __extends(FormException, _super);
        function FormException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = FormException.prototype;
            return _this;
        }
        return FormException;
    }(Error));

    var Form = (function () {
        function Form() {
        }
        Form.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return void 0;
            }
            else if (tag !== void 0) {
                return new Form.TagForm(tag, this);
            }
            else {
                return this;
            }
        };
        Form.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return void 0;
            }
            else if (unit !== void 0) {
                return new Form.UnitForm(unit, this);
            }
            else {
                return this;
            }
        };
        Form.forString = function () {
            if (!Form._stringForm) {
                Form._stringForm = new Form.StringForm("");
            }
            return Form._stringForm;
        };
        Form.forNumber = function () {
            if (!Form._numberForm) {
                Form._numberForm = new Form.NumberForm(0);
            }
            return Form._numberForm;
        };
        Form.forBoolean = function () {
            if (!Form._booleanForm) {
                Form._booleanForm = new Form.BooleanForm(false);
            }
            return Form._booleanForm;
        };
        Form.forAny = function () {
            if (!Form._anyForm) {
                Form._anyForm = new Form.AnyForm(void 0);
            }
            return Form._anyForm;
        };
        Form.forItem = function () {
            if (!Form._itemForm) {
                Form._itemForm = new Form.ItemForm(Item.absent());
            }
            return Form._itemForm;
        };
        Form.forValue = function () {
            if (!Form._valueForm) {
                Form._valueForm = new Form.ValueForm(Value.absent());
            }
            return Form._valueForm;
        };
        return Form;
    }());

    var BinaryOperator = (function (_super) {
        __extends(BinaryOperator, _super);
        function BinaryOperator(operand1, operand2) {
            var _this = _super.call(this) || this;
            _this._operand1 = operand1;
            _this._operand2 = operand2;
            return _this;
        }
        BinaryOperator.prototype.operand1 = function () {
            return this._operand1;
        };
        BinaryOperator.prototype.operand2 = function () {
            return this._operand2;
        };
        BinaryOperator.prototype.isConstant = function () {
            return this._operand1.isConstant() && this._operand2.isConstant();
        };
        return BinaryOperator;
    }(Operator));
    Item.BinaryOperator = BinaryOperator;

    var UnaryOperator = (function (_super) {
        __extends(UnaryOperator, _super);
        function UnaryOperator(operand) {
            var _this = _super.call(this) || this;
            _this._operand = operand;
            return _this;
        }
        UnaryOperator.prototype.operand = function () {
            return this._operand;
        };
        UnaryOperator.prototype.isConstant = function () {
            return this._operand.isConstant();
        };
        return UnaryOperator;
    }(Operator));
    Item.UnaryOperator = UnaryOperator;

    var ConditionalOperator = (function (_super) {
        __extends(ConditionalOperator, _super);
        function ConditionalOperator(ifTerm, thenTerm, elseTerm) {
            var _this = _super.call(this) || this;
            _this._ifTerm = ifTerm.commit();
            _this._thenTerm = thenTerm.commit();
            _this._elseTerm = elseTerm.commit();
            return _this;
        }
        ConditionalOperator.prototype.ifTerm = function () {
            return this._ifTerm;
        };
        ConditionalOperator.prototype.thenTerm = function () {
            return this._thenTerm;
        };
        ConditionalOperator.prototype.elseTerm = function () {
            return this._elseTerm;
        };
        ConditionalOperator.prototype.isConstant = function () {
            return this._ifTerm.isConstant() && this._thenTerm.isConstant()
                && this._elseTerm.isConstant();
        };
        ConditionalOperator.prototype.precedence = function () {
            return 2;
        };
        ConditionalOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var ifTerm = this._ifTerm.evaluate(interpreter);
            if (ifTerm.booleanValue(false)) {
                var theTerm = this._thenTerm.evaluate(interpreter);
                result = theTerm;
            }
            else {
                var elseTerm = this._elseTerm.evaluate(interpreter);
                result = elseTerm;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        ConditionalOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var ifTerm = this._ifTerm.substitute(interpreter);
            var thenTerm = this._thenTerm.substitute(interpreter);
            var elseTerm = this._elseTerm.substitute(interpreter);
            return new ConditionalOperator(ifTerm, thenTerm, elseTerm);
        };
        ConditionalOperator.prototype.typeOrder = function () {
            return 20;
        };
        ConditionalOperator.prototype.compareTo = function (that) {
            if (that instanceof ConditionalOperator) {
                var order = this._ifTerm.compareTo(that._ifTerm);
                if (order === 0) {
                    order = this._thenTerm.compareTo(that._thenTerm);
                    if (order === 0) {
                        order = this._elseTerm.compareTo(that._elseTerm);
                    }
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ConditionalOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ConditionalOperator) {
                return this._ifTerm.equals(that._ifTerm) && this._thenTerm.equals(that._thenTerm)
                    && this._elseTerm.equals(that._elseTerm);
            }
            return false;
        };
        ConditionalOperator.prototype.hashCode = function () {
            if (ConditionalOperator._hashSeed === void 0) {
                ConditionalOperator._hashSeed = Murmur3.seed(ConditionalOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(ConditionalOperator._hashSeed, this._ifTerm.hashCode()), this._thenTerm.hashCode()), this._elseTerm.hashCode()));
        };
        ConditionalOperator.prototype.debug = function (output) {
            output.debug(this._ifTerm).write(46).write("conditional").write(40)
                .debug(this._thenTerm).write(44).write(32)
                .debug(this._elseTerm).write(41);
        };
        ConditionalOperator.prototype.clone = function () {
            return new ConditionalOperator(this._ifTerm.clone(), this._thenTerm.clone(), this._elseTerm.clone());
        };
        return ConditionalOperator;
    }(Operator));
    Item.ConditionalOperator = ConditionalOperator;

    var OrOperator = (function (_super) {
        __extends(OrOperator, _super);
        function OrOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        OrOperator.prototype.operator = function () {
            return "||";
        };
        OrOperator.prototype.precedence = function () {
            return 3;
        };
        OrOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var argument1 = this._operand1.evaluate(interpreter);
            if (argument1.booleanValue(false)) {
                result = argument1;
            }
            else {
                var argument2 = this._operand2.evaluate(interpreter);
                result = argument2;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        OrOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.or(argument2);
        };
        OrOperator.prototype.typeOrder = function () {
            return 21;
        };
        OrOperator.prototype.compareTo = function (that) {
            if (that instanceof OrOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        OrOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof OrOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        OrOperator.prototype.hashCode = function () {
            if (OrOperator._hashSeed === void 0) {
                OrOperator._hashSeed = Murmur3.seed(OrOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(OrOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        OrOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("or").write(40)
                .debug(this._operand2).write(41);
        };
        OrOperator.prototype.clone = function () {
            return new OrOperator(this._operand1.clone(), this._operand2.clone());
        };
        return OrOperator;
    }(BinaryOperator));
    Item.OrOperator = OrOperator;

    var AndOperator = (function (_super) {
        __extends(AndOperator, _super);
        function AndOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        AndOperator.prototype.operator = function () {
            return "&&";
        };
        AndOperator.prototype.precedence = function () {
            return 4;
        };
        AndOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var argument1 = this._operand1.evaluate(interpreter);
            if (argument1.booleanValue(false)) {
                var argument2 = this._operand2.evaluate(interpreter);
                result = argument2;
            }
            else {
                result = argument1;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        AndOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.and(argument2);
        };
        AndOperator.prototype.typeOrder = function () {
            return 22;
        };
        AndOperator.prototype.compareTo = function (that) {
            if (that instanceof AndOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        AndOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof AndOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        AndOperator.prototype.hashCode = function () {
            if (AndOperator._hashSeed === void 0) {
                AndOperator._hashSeed = Murmur3.seed(AndOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(AndOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        AndOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("and").write(40)
                .debug(this._operand2).write(41);
        };
        AndOperator.prototype.clone = function () {
            return new AndOperator(this._operand1.clone(), this._operand2.clone());
        };
        return AndOperator;
    }(BinaryOperator));
    Item.AndOperator = AndOperator;

    var BitwiseOrOperator = (function (_super) {
        __extends(BitwiseOrOperator, _super);
        function BitwiseOrOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseOrOperator.prototype.operator = function () {
            return "|";
        };
        BitwiseOrOperator.prototype.precedence = function () {
            return 5;
        };
        BitwiseOrOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseOr(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseOrOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseOr(argument2);
        };
        BitwiseOrOperator.prototype.typeOrder = function () {
            return 23;
        };
        BitwiseOrOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseOrOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseOrOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseOrOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseOrOperator.prototype.hashCode = function () {
            if (BitwiseOrOperator._hashSeed === void 0) {
                BitwiseOrOperator._hashSeed = Murmur3.seed(BitwiseOrOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(BitwiseOrOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseOrOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseOr").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseOrOperator.prototype.clone = function () {
            return new BitwiseOrOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseOrOperator;
    }(BinaryOperator));
    Item.BitwiseOrOperator = BitwiseOrOperator;

    var BitwiseXorOperator = (function (_super) {
        __extends(BitwiseXorOperator, _super);
        function BitwiseXorOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseXorOperator.prototype.operator = function () {
            return "^";
        };
        BitwiseXorOperator.prototype.precedence = function () {
            return 6;
        };
        BitwiseXorOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseXor(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseXorOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseXor(argument2);
        };
        BitwiseXorOperator.prototype.typeOrder = function () {
            return 24;
        };
        BitwiseXorOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseXorOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseXorOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseXorOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseXorOperator.prototype.hashCode = function () {
            if (BitwiseXorOperator._hashSeed === void 0) {
                BitwiseXorOperator._hashSeed = Murmur3.seed(BitwiseXorOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(BitwiseXorOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseXorOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseXor").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseXorOperator.prototype.clone = function () {
            return new BitwiseXorOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseXorOperator;
    }(BinaryOperator));
    Item.BitwiseXorOperator = BitwiseXorOperator;

    var BitwiseAndOperator = (function (_super) {
        __extends(BitwiseAndOperator, _super);
        function BitwiseAndOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseAndOperator.prototype.operator = function () {
            return "&";
        };
        BitwiseAndOperator.prototype.precedence = function () {
            return 7;
        };
        BitwiseAndOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseAnd(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseAndOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseAnd(argument2);
        };
        BitwiseAndOperator.prototype.typeOrder = function () {
            return 25;
        };
        BitwiseAndOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseAndOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseAndOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseAndOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseAndOperator.prototype.hashCode = function () {
            if (BitwiseAndOperator._hashSeed === void 0) {
                BitwiseAndOperator._hashSeed = Murmur3.seed(BitwiseAndOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(BitwiseAndOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseAndOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseAnd").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseAndOperator.prototype.clone = function () {
            return new BitwiseAndOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseAndOperator;
    }(BinaryOperator));
    Item.BitwiseAndOperator = BitwiseAndOperator;

    var LtOperator = (function (_super) {
        __extends(LtOperator, _super);
        function LtOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        LtOperator.prototype.operator = function () {
            return "<";
        };
        LtOperator.prototype.precedence = function () {
            return 0;
        };
        LtOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.lt(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        LtOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.lt(argument2);
        };
        LtOperator.prototype.typeOrder = function () {
            return 26;
        };
        LtOperator.prototype.compareTo = function (that) {
            if (that instanceof LtOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LtOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LtOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        LtOperator.prototype.hashCode = function () {
            if (LtOperator._hashSeed === void 0) {
                LtOperator._hashSeed = Murmur3.seed(LtOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(LtOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        LtOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("lt").write(40)
                .debug(this._operand2).write(41);
        };
        LtOperator.prototype.clone = function () {
            return new LtOperator(this._operand1.clone(), this._operand2.clone());
        };
        return LtOperator;
    }(BinaryOperator));
    Item.LtOperator = LtOperator;

    var LeOperator = (function (_super) {
        __extends(LeOperator, _super);
        function LeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        LeOperator.prototype.operator = function () {
            return "<=";
        };
        LeOperator.prototype.precedence = function () {
            return 0;
        };
        LeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.le(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        LeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.le(argument2);
        };
        LeOperator.prototype.typeOrder = function () {
            return 27;
        };
        LeOperator.prototype.compareTo = function (that) {
            if (that instanceof LeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        LeOperator.prototype.hashCode = function () {
            if (LeOperator._hashSeed === void 0) {
                LeOperator._hashSeed = Murmur3.seed(LeOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(LeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        LeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("le").write(40)
                .debug(this._operand2).write(41);
        };
        LeOperator.prototype.clone = function () {
            return new LeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return LeOperator;
    }(BinaryOperator));
    Item.LeOperator = LeOperator;

    var EqOperator = (function (_super) {
        __extends(EqOperator, _super);
        function EqOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        EqOperator.prototype.operator = function () {
            return "==";
        };
        EqOperator.prototype.precedence = function () {
            return 0;
        };
        EqOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.eq(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        EqOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.eq(argument2);
        };
        EqOperator.prototype.typeOrder = function () {
            return 28;
        };
        EqOperator.prototype.compareTo = function (that) {
            if (that instanceof EqOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        EqOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof EqOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        EqOperator.prototype.hashCode = function () {
            if (EqOperator._hashSeed === void 0) {
                EqOperator._hashSeed = Murmur3.seed(EqOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(EqOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        EqOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("eq").write(40)
                .debug(this._operand2).write(41);
        };
        EqOperator.prototype.clone = function () {
            return new EqOperator(this._operand1.clone(), this._operand2.clone());
        };
        return EqOperator;
    }(BinaryOperator));
    Item.EqOperator = EqOperator;

    var NeOperator = (function (_super) {
        __extends(NeOperator, _super);
        function NeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        NeOperator.prototype.operator = function () {
            return "!=";
        };
        NeOperator.prototype.precedence = function () {
            return 0;
        };
        NeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.ne(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        NeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.ne(argument2);
        };
        NeOperator.prototype.typeOrder = function () {
            return 29;
        };
        NeOperator.prototype.compareTo = function (that) {
            if (that instanceof NeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        NeOperator.prototype.hashCode = function () {
            if (NeOperator._hashSeed === void 0) {
                NeOperator._hashSeed = Murmur3.seed(NeOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(NeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        NeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("ne").write(40)
                .debug(this._operand2).write(41);
        };
        NeOperator.prototype.clone = function () {
            return new NeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return NeOperator;
    }(BinaryOperator));
    Item.NeOperator = NeOperator;

    var GeOperator = (function (_super) {
        __extends(GeOperator, _super);
        function GeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        GeOperator.prototype.operator = function () {
            return ">=";
        };
        GeOperator.prototype.precedence = function () {
            return 0;
        };
        GeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.ge(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        GeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.ge(argument2);
        };
        GeOperator.prototype.typeOrder = function () {
            return 30;
        };
        GeOperator.prototype.compareTo = function (that) {
            if (that instanceof GeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        GeOperator.prototype.hashCode = function () {
            if (GeOperator._hashSeed === void 0) {
                GeOperator._hashSeed = Murmur3.seed(GeOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(GeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        GeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("ge").write(40)
                .debug(this._operand2).write(41);
        };
        GeOperator.prototype.clone = function () {
            return new GeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return GeOperator;
    }(BinaryOperator));
    Item.GeOperator = GeOperator;

    var GtOperator = (function (_super) {
        __extends(GtOperator, _super);
        function GtOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        GtOperator.prototype.operator = function () {
            return ">";
        };
        GtOperator.prototype.precedence = function () {
            return 0;
        };
        GtOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.gt(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        GtOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.gt(argument2);
        };
        GtOperator.prototype.typeOrder = function () {
            return 31;
        };
        GtOperator.prototype.compareTo = function (that) {
            if (that instanceof GtOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GtOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GtOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        GtOperator.prototype.hashCode = function () {
            if (GtOperator._hashSeed === void 0) {
                GtOperator._hashSeed = Murmur3.seed(GtOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(GtOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        GtOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("gt").write(40)
                .debug(this._operand2).write(41);
        };
        GtOperator.prototype.clone = function () {
            return new GtOperator(this._operand1.clone(), this._operand2.clone());
        };
        return GtOperator;
    }(BinaryOperator));
    Item.GtOperator = GtOperator;

    var PlusOperator = (function (_super) {
        __extends(PlusOperator, _super);
        function PlusOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        PlusOperator.prototype.operator = function () {
            return "+";
        };
        PlusOperator.prototype.precedence = function () {
            return 8;
        };
        PlusOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.plus(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        PlusOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.plus(argument2);
        };
        PlusOperator.prototype.typeOrder = function () {
            return 32;
        };
        PlusOperator.prototype.compareTo = function (that) {
            if (that instanceof PlusOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        PlusOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PlusOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        PlusOperator.prototype.hashCode = function () {
            if (PlusOperator._hashSeed === void 0) {
                PlusOperator._hashSeed = Murmur3.seed(PlusOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(PlusOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        PlusOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("plus").write(40)
                .debug(this._operand2).write(41);
        };
        PlusOperator.prototype.clone = function () {
            return new PlusOperator(this._operand1.clone(), this._operand2.clone());
        };
        return PlusOperator;
    }(BinaryOperator));
    Item.PlusOperator = PlusOperator;

    var MinusOperator = (function (_super) {
        __extends(MinusOperator, _super);
        function MinusOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        MinusOperator.prototype.operator = function () {
            return "-";
        };
        MinusOperator.prototype.precedence = function () {
            return 8;
        };
        MinusOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.minus(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        MinusOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.minus(argument2);
        };
        MinusOperator.prototype.typeOrder = function () {
            return 33;
        };
        MinusOperator.prototype.compareTo = function (that) {
            if (that instanceof MinusOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        MinusOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof MinusOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        MinusOperator.prototype.hashCode = function () {
            if (MinusOperator._hashSeed === void 0) {
                MinusOperator._hashSeed = Murmur3.seed(MinusOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(MinusOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        MinusOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("minus").write(40)
                .debug(this._operand2).write(41);
        };
        MinusOperator.prototype.clone = function () {
            return new MinusOperator(this._operand1.clone(), this._operand2.clone());
        };
        return MinusOperator;
    }(BinaryOperator));
    Item.MinusOperator = MinusOperator;

    var TimesOperator = (function (_super) {
        __extends(TimesOperator, _super);
        function TimesOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        TimesOperator.prototype.operator = function () {
            return "*";
        };
        TimesOperator.prototype.precedence = function () {
            return 9;
        };
        TimesOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.times(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        TimesOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.times(argument2);
        };
        TimesOperator.prototype.typeOrder = function () {
            return 34;
        };
        TimesOperator.prototype.compareTo = function (that) {
            if (that instanceof TimesOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        TimesOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TimesOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        TimesOperator.prototype.hashCode = function () {
            if (TimesOperator._hashSeed === void 0) {
                TimesOperator._hashSeed = Murmur3.seed(TimesOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(TimesOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        TimesOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("times").write(40)
                .debug(this._operand2).write(41);
        };
        TimesOperator.prototype.clone = function () {
            return new TimesOperator(this._operand1.clone(), this._operand2.clone());
        };
        return TimesOperator;
    }(BinaryOperator));
    Item.TimesOperator = TimesOperator;

    var DivideOperator = (function (_super) {
        __extends(DivideOperator, _super);
        function DivideOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        DivideOperator.prototype.operator = function () {
            return "/";
        };
        DivideOperator.prototype.precedence = function () {
            return 9;
        };
        DivideOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.divide(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        DivideOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.divide(argument2);
        };
        DivideOperator.prototype.typeOrder = function () {
            return 35;
        };
        DivideOperator.prototype.compareTo = function (that) {
            if (that instanceof DivideOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        DivideOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DivideOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        DivideOperator.prototype.hashCode = function () {
            if (DivideOperator._hashSeed === void 0) {
                DivideOperator._hashSeed = Murmur3.seed(DivideOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(DivideOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        DivideOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("divide").write(40)
                .debug(this._operand2).write(41);
        };
        DivideOperator.prototype.clone = function () {
            return new DivideOperator(this._operand1.clone(), this._operand2.clone());
        };
        return DivideOperator;
    }(BinaryOperator));
    Item.DivideOperator = DivideOperator;

    var ModuloOperator = (function (_super) {
        __extends(ModuloOperator, _super);
        function ModuloOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        ModuloOperator.prototype.operator = function () {
            return "%";
        };
        ModuloOperator.prototype.precedence = function () {
            return 9;
        };
        ModuloOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.modulo(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        ModuloOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.modulo(argument2);
        };
        ModuloOperator.prototype.typeOrder = function () {
            return 36;
        };
        ModuloOperator.prototype.compareTo = function (that) {
            if (that instanceof ModuloOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ModuloOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ModuloOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        ModuloOperator.prototype.hashCode = function () {
            if (ModuloOperator._hashSeed === void 0) {
                ModuloOperator._hashSeed = Murmur3.seed(ModuloOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(ModuloOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        ModuloOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("modulo").write(40)
                .debug(this._operand2).write(41);
        };
        ModuloOperator.prototype.clone = function () {
            return new ModuloOperator(this._operand1.clone(), this._operand2.clone());
        };
        return ModuloOperator;
    }(BinaryOperator));
    Item.ModuloOperator = ModuloOperator;

    var NotOperator = (function (_super) {
        __extends(NotOperator, _super);
        function NotOperator(operand) {
            return _super.call(this, operand) || this;
        }
        NotOperator.prototype.operator = function () {
            return "!";
        };
        NotOperator.prototype.precedence = function () {
            return 10;
        };
        NotOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.not();
        };
        NotOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.not();
        };
        NotOperator.prototype.typeOrder = function () {
            return 37;
        };
        NotOperator.prototype.compareTo = function (that) {
            if (that instanceof NotOperator) {
                return this._operand.compareTo(that._operand);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NotOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NotOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        NotOperator.prototype.hashCode = function () {
            if (NotOperator._hashSeed === void 0) {
                NotOperator._hashSeed = Murmur3.seed(NotOperator);
            }
            return Murmur3.mash(Murmur3.mix(NotOperator._hashSeed, this._operand.hashCode()));
        };
        NotOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("not").write(40).write(41);
        };
        NotOperator.prototype.clone = function () {
            return new NotOperator(this._operand.clone());
        };
        return NotOperator;
    }(UnaryOperator));
    Item.NotOperator = NotOperator;

    var BitwiseNotOperator = (function (_super) {
        __extends(BitwiseNotOperator, _super);
        function BitwiseNotOperator(operand) {
            return _super.call(this, operand) || this;
        }
        BitwiseNotOperator.prototype.operator = function () {
            return "~";
        };
        BitwiseNotOperator.prototype.precedence = function () {
            return 10;
        };
        BitwiseNotOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.bitwiseNot();
        };
        BitwiseNotOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.bitwiseNot();
        };
        BitwiseNotOperator.prototype.typeOrder = function () {
            return 38;
        };
        BitwiseNotOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseNotOperator) {
                return this._operand.compareTo(that._operand);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseNotOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseNotOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        BitwiseNotOperator.prototype.hashCode = function () {
            if (BitwiseNotOperator._hashSeed === void 0) {
                BitwiseNotOperator._hashSeed = Murmur3.seed(BitwiseNotOperator);
            }
            return Murmur3.mash(Murmur3.mix(BitwiseNotOperator._hashSeed, this._operand.hashCode()));
        };
        BitwiseNotOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("bitwiseNot").write(40).write(41);
        };
        BitwiseNotOperator.prototype.clone = function () {
            return new BitwiseNotOperator(this._operand.clone());
        };
        return BitwiseNotOperator;
    }(UnaryOperator));
    Item.BitwiseNotOperator = BitwiseNotOperator;

    var NegativeOperator = (function (_super) {
        __extends(NegativeOperator, _super);
        function NegativeOperator(operand) {
            return _super.call(this, operand) || this;
        }
        NegativeOperator.prototype.operator = function () {
            return "-";
        };
        NegativeOperator.prototype.precedence = function () {
            return 10;
        };
        NegativeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.negative();
        };
        NegativeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.negative();
        };
        NegativeOperator.prototype.typeOrder = function () {
            return 39;
        };
        NegativeOperator.prototype.compareTo = function (that) {
            if (that instanceof NegativeOperator) {
                return this._operand.compareTo(that._operand);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NegativeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NegativeOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        NegativeOperator.prototype.hashCode = function () {
            if (NegativeOperator._hashSeed === void 0) {
                NegativeOperator._hashSeed = Murmur3.seed(NegativeOperator);
            }
            return Murmur3.mash(Murmur3.mix(NegativeOperator._hashSeed, this._operand.hashCode()));
        };
        NegativeOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("negative").write(40).write(41);
        };
        NegativeOperator.prototype.clone = function () {
            return new NegativeOperator(this._operand.clone());
        };
        return NegativeOperator;
    }(UnaryOperator));
    Item.NegativeOperator = NegativeOperator;

    var PositiveOperator = (function (_super) {
        __extends(PositiveOperator, _super);
        function PositiveOperator(operand) {
            return _super.call(this, operand) || this;
        }
        PositiveOperator.prototype.operator = function () {
            return "+";
        };
        PositiveOperator.prototype.precedence = function () {
            return 10;
        };
        PositiveOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.positive();
        };
        PositiveOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.positive();
        };
        PositiveOperator.prototype.typeOrder = function () {
            return 40;
        };
        PositiveOperator.prototype.compareTo = function (that) {
            if (that instanceof PositiveOperator) {
                return this._operand.compareTo(that._operand);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        PositiveOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PositiveOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        PositiveOperator.prototype.hashCode = function () {
            if (PositiveOperator._hashSeed === void 0) {
                PositiveOperator._hashSeed = Murmur3.seed(PositiveOperator);
            }
            return Murmur3.mash(Murmur3.mix(PositiveOperator._hashSeed, this._operand.hashCode()));
        };
        PositiveOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("positive").write(40).write(41);
        };
        PositiveOperator.prototype.clone = function () {
            return new PositiveOperator(this._operand.clone());
        };
        return PositiveOperator;
    }(UnaryOperator));
    Item.PositiveOperator = PositiveOperator;

    var InvokeOperator = (function (_super) {
        __extends(InvokeOperator, _super);
        function InvokeOperator(func, args) {
            var _this = _super.call(this) || this;
            _this._func = func;
            _this._args = args.commit();
            return _this;
        }
        InvokeOperator.prototype.func = function () {
            return this._func;
        };
        InvokeOperator.prototype.args = function () {
            return this._args;
        };
        InvokeOperator.prototype.state = function () {
            return this._state;
        };
        InvokeOperator.prototype.setState = function (state) {
            this._state = state;
        };
        InvokeOperator.prototype.isConstant = function () {
            return this._func.isConstant() && this._args.isConstant();
        };
        InvokeOperator.prototype.precedence = function () {
            return 11;
        };
        InvokeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var func = this._func.evaluate(interpreter);
            if (func instanceof Item.Func) {
                return func.invoke(this._args, interpreter, this);
            }
            return Item.absent();
        };
        InvokeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var func = this._func.evaluate(interpreter);
            if (func instanceof Item.Func) {
                var result = func.expand(this._args, interpreter, this);
                if (result) {
                    return result;
                }
            }
            var args = this._args.substitute(interpreter).toValue();
            return new InvokeOperator(this._func, args);
        };
        InvokeOperator.prototype.typeOrder = function () {
            return 41;
        };
        InvokeOperator.prototype.compareTo = function (that) {
            if (that instanceof InvokeOperator) {
                var order = this._func.compareTo(that._func);
                if (order === 0) {
                    order = this._args.compareTo(that._args);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        InvokeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InvokeOperator) {
                return this._func.equals(that._func) && this._args.equals(that._args);
            }
            return false;
        };
        InvokeOperator.prototype.hashCode = function () {
            if (InvokeOperator._hashSeed === void 0) {
                InvokeOperator._hashSeed = Murmur3.seed(InvokeOperator);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(InvokeOperator._hashSeed, this._func.hashCode()), this._args.hashCode()));
        };
        InvokeOperator.prototype.debug = function (output) {
            output.debug(this._func).write(46).write("invoke").write(40)
                .debug(this._args).write(41);
        };
        InvokeOperator.prototype.clone = function () {
            return new InvokeOperator(this._func.clone(), this._args.clone());
        };
        return InvokeOperator;
    }(Operator));
    Item.InvokeOperator = InvokeOperator;

    var IdentitySelector = (function (_super) {
        __extends(IdentitySelector, _super);
        function IdentitySelector() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentitySelector.prototype.then = function () {
            return this;
        };
        IdentitySelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var oldScope = interpreter.popScope();
                var newScope = oldScope.evaluate(interpreter);
                interpreter.pushScope(newScope);
                selected = callback.call(thisArg, interpreter);
                interpreter.swapScope(oldScope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        IdentitySelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            return transform.call(thisArg, interpreter);
        };
        IdentitySelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            return interpreter.peekScope().substitute(interpreter);
        };
        IdentitySelector.prototype.get = function (key) {
            key = Value.fromAny(key);
            return new Item.GetSelector(key, this);
        };
        IdentitySelector.prototype.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return new Item.GetAttrSelector(key, this);
        };
        IdentitySelector.prototype.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return new Item.GetItemSelector(index, this);
        };
        IdentitySelector.prototype.andThen = function (then) {
            return then;
        };
        IdentitySelector.prototype.keys = function () {
            return Selector.keys();
        };
        IdentitySelector.prototype.values = function () {
            return Selector.values();
        };
        IdentitySelector.prototype.children = function () {
            return Selector.children();
        };
        IdentitySelector.prototype.descendants = function () {
            return Selector.descendants();
        };
        IdentitySelector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return new Item.FilterSelector(this, this);
            }
            else {
                predicate = Item.fromAny(predicate);
                return predicate.filter();
            }
        };
        IdentitySelector.prototype.typeOrder = function () {
            return 10;
        };
        IdentitySelector.prototype.compareTo = function (that) {
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        IdentitySelector.prototype.equals = function (that) {
            return this === that;
        };
        IdentitySelector.prototype.hashCode = function () {
            if (IdentitySelector._hashSeed === void 0) {
                IdentitySelector._hashSeed = Murmur3.seed(IdentitySelector);
            }
            return IdentitySelector._hashSeed;
        };
        IdentitySelector.prototype.debugThen = function (output) {
        };
        IdentitySelector.prototype.clone = function () {
            return this;
        };
        return IdentitySelector;
    }(Selector));
    Item.IdentitySelector = IdentitySelector;
    Selector._identity = new IdentitySelector();

    var GetSelector = (function (_super) {
        __extends(GetSelector, _super);
        function GetSelector(key, then) {
            var _this = _super.call(this) || this;
            _this._key = key.commit();
            _this._then = then;
            return _this;
        }
        GetSelector.prototype.accessor = function () {
            return this._key;
        };
        GetSelector.prototype.then = function () {
            return this._then;
        };
        GetSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            interpreter.willSelect(this);
            var key = this._key.evaluate(interpreter).toValue();
            var selected = GetSelector.forSelected(key, this._then, interpreter, callback, thisArg);
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetSelector.forSelected = function (key, then, interpreter, callback, thisArg) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field) {
                        interpreter.pushScope(field.toValue());
                        selected = then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetSelector.forSelected(key, then, interpreter, callback, thisArg);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            var key = this._key.evaluate(interpreter).toValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var oldField = scope.getField(key);
                    if (oldField) {
                        interpreter.pushScope(oldField.toValue());
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem instanceof Item.Field) {
                            if (key.equals(newItem.key)) {
                                scope.set(key, newItem.toValue());
                            }
                            else {
                                scope.delete(key);
                                scope.push(newItem);
                            }
                        }
                        else if (newItem.isDefined()) {
                            scope.set(key, newItem.toValue());
                        }
                        else {
                            scope.delete(key);
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = GetSelector.substitute(key, this._then, interpreter);
            if (value) {
                return value;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetSelector(this._key, then);
        };
        GetSelector.substitute = function (key, then, interpreter) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field) {
                        selected = field.toValue().substitute(interpreter);
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetSelector.substitute(key, then, interpreter);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetSelector.prototype.andThen = function (then) {
            return new GetSelector(this._key, this._then.andThen(then));
        };
        GetSelector.prototype.typeOrder = function () {
            return 12;
        };
        GetSelector.prototype.compareTo = function (that) {
            if (that instanceof GetSelector) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetSelector) {
                return this._key.equals(that._key) && this._then.equals(that._then);
            }
            return false;
        };
        GetSelector.prototype.hashCode = function () {
            if (GetSelector._hashSeed === void 0) {
                GetSelector._hashSeed = Murmur3.seed(GetSelector);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(GetSelector._hashSeed, this._key.hashCode()), this._then.hashCode()));
        };
        GetSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("get").write(40).debug(this._key).write(41);
            this._then.debugThen(output);
        };
        GetSelector.prototype.clone = function () {
            return new GetSelector(this._key.clone(), this._then.clone());
        };
        return GetSelector;
    }(Selector));
    Item.GetSelector = GetSelector;

    var GetAttrSelector = (function (_super) {
        __extends(GetAttrSelector, _super);
        function GetAttrSelector(key, then) {
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._then = then;
            return _this;
        }
        GetAttrSelector.prototype.accessor = function () {
            return this._key;
        };
        GetAttrSelector.prototype.then = function () {
            return this._then;
        };
        GetAttrSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            interpreter.willSelect(this);
            var key = this._key;
            var selected = GetAttrSelector.forSelected(key, this._then, interpreter, callback);
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetAttrSelector.forSelected = function (key, then, interpreter, callback, thisArg) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field instanceof Attr) {
                        interpreter.pushScope(field.toValue());
                        selected = then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetAttrSelector.forSelected(key, then, interpreter, callback, thisArg);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetAttrSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            var key = this._key;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var oldField = scope.getField(key);
                    if (oldField instanceof Item.Attr) {
                        interpreter.pushScope(oldField.toValue());
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem instanceof Item.Field) {
                            if (key.equals(newItem.key)) {
                                scope.setAttr(key, newItem.toValue());
                            }
                            else {
                                scope.delete(key);
                                scope.push(newItem);
                            }
                        }
                        else if (newItem.isDefined()) {
                            scope.setAttr(key, newItem.toValue());
                        }
                        else {
                            scope.delete(key);
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetAttrSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key;
            var value = GetAttrSelector.substitute(key, this._then, interpreter);
            if (value) {
                return value;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetAttrSelector(this._key, then);
        };
        GetAttrSelector.substitute = function (key, then, interpreter) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field instanceof Item.Attr) {
                        selected = field.toValue().substitute(interpreter);
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetAttrSelector.substitute(key, then, interpreter);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetAttrSelector.prototype.andThen = function (then) {
            return new GetAttrSelector(this._key, this._then.andThen(then));
        };
        GetAttrSelector.prototype.typeOrder = function () {
            return 13;
        };
        GetAttrSelector.prototype.compareTo = function (that) {
            if (that instanceof GetAttrSelector) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetAttrSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetAttrSelector) {
                return this._key.equals(that._key) && this._then.equals(that._then);
            }
            return false;
        };
        GetAttrSelector.prototype.hashCode = function () {
            if (GetAttrSelector._hashSeed === void 0) {
                GetAttrSelector._hashSeed = Murmur3.seed(GetAttrSelector);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(GetAttrSelector._hashSeed, this._key.hashCode()), this._then.hashCode()));
        };
        GetAttrSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("getAttr").write(40).debug(this._key).write(41);
            this._then.debugThen(output);
        };
        GetAttrSelector.prototype.clone = function () {
            return new GetAttrSelector(this._key.clone(), this._then.clone());
        };
        return GetAttrSelector;
    }(Selector));
    Item.GetAttrSelector = GetAttrSelector;

    var GetItemSelector = (function (_super) {
        __extends(GetItemSelector, _super);
        function GetItemSelector(index, then) {
            var _this = _super.call(this) || this;
            _this._index = index;
            _this._then = then;
            return _this;
        }
        GetItemSelector.prototype.accessor = function () {
            return this._index;
        };
        GetItemSelector.prototype.then = function () {
            return this._then;
        };
        GetItemSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            var index = this._index.numberValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record && index < scope.length) {
                    var item = scope.getItem(index);
                    interpreter.pushScope(item);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetItemSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var index = this._index.numberValue();
                if (scope instanceof Item.Record && index < scope.length) {
                    var oldItem = scope.getItem(index);
                    interpreter.pushScope(oldItem);
                    var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                    if (newItem.isDefined()) {
                        scope.setItem(index, newItem);
                    }
                    else {
                        scope.splice(index, 1);
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetItemSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var index = this._index.numberValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var selected = void 0;
                if (scope instanceof Item.Record && index < scope.length) {
                    var item = scope.getItem(index);
                    selected = item.substitute(interpreter);
                }
                interpreter.pushScope(scope);
                if (selected) {
                    return selected;
                }
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetItemSelector(this._index, then);
        };
        GetItemSelector.prototype.andThen = function (then) {
            return new GetItemSelector(this._index, this._then.andThen(then));
        };
        GetItemSelector.prototype.typeOrder = function () {
            return 14;
        };
        GetItemSelector.prototype.compareTo = function (that) {
            if (that instanceof GetItemSelector) {
                var order = this._index.compareTo(that._index);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetItemSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetItemSelector) {
                return this._index.equals(that._index) && this._then.equals(that._then);
            }
            return false;
        };
        GetItemSelector.prototype.hashCode = function () {
            if (GetItemSelector._hashSeed === void 0) {
                GetItemSelector._hashSeed = Murmur3.seed(GetItemSelector);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(GetItemSelector._hashSeed, this._index.hashCode()), this._then.hashCode()));
        };
        GetItemSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("getItem").write(40).debug(this._index).write(41);
            this._then.debugThen(output);
        };
        GetItemSelector.prototype.clone = function () {
            return new GetItemSelector(this._index, this._then.clone());
        };
        return GetItemSelector;
    }(Selector));
    Item.GetItemSelector = GetItemSelector;

    var KeysSelector = (function (_super) {
        __extends(KeysSelector, _super);
        function KeysSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        KeysSelector.prototype.then = function () {
            return this._then;
        };
        KeysSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            interpreter.pushScope(child.key);
                            selected = this._then.forSelected(interpreter, callback, thisArg);
                            interpreter.popScope();
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    interpreter.pushScope(scope.key);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        KeysSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            var oldKey = child.key;
                            interpreter.pushScope(oldKey);
                            var newKey = this._then.mapSelected(interpreter, transform, thisArg).toValue();
                            interpreter.popScope();
                            if (newKey.isDefined()) {
                                if (oldKey !== newKey) {
                                    if (scope instanceof Item.Attr && newKey instanceof Item.Text) {
                                        children.set(Item.Attr.of(newKey, scope.toValue()));
                                    }
                                    else {
                                        children.set(Item.Slot.of(newKey, scope.toValue()));
                                    }
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    var oldKey = scope.key;
                    interpreter.pushScope(oldKey);
                    var newKey = this._then.mapSelected(interpreter, transform, thisArg).toValue();
                    interpreter.popScope();
                    if (newKey.isDefined()) {
                        if (oldKey !== newKey) {
                            if (scope instanceof Item.Attr && newKey instanceof Item.Text) {
                                scope = Item.Attr.of(newKey, scope.toValue());
                            }
                            else {
                                scope = Item.Slot.of(newKey, scope.toValue());
                            }
                        }
                    }
                    else {
                        scope = Item.absent();
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        KeysSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new KeysSelector(then);
        };
        KeysSelector.prototype.andThen = function (then) {
            return new KeysSelector(this._then.andThen(then));
        };
        KeysSelector.prototype.typeOrder = function () {
            return 15;
        };
        KeysSelector.prototype.compareTo = function (that) {
            if (that instanceof KeysSelector) {
                return this._then.compareTo(that._then);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        KeysSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof KeysSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        KeysSelector.prototype.hashCode = function () {
            if (KeysSelector._hashSeed === void 0) {
                KeysSelector._hashSeed = Murmur3.seed(KeysSelector);
            }
            return Murmur3.mash(Murmur3.mix(KeysSelector._hashSeed, this._then.hashCode()));
        };
        KeysSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("keys").write(40).write(41);
            this._then.debugThen(output);
        };
        KeysSelector.prototype.clone = function () {
            return new KeysSelector(this._then.clone());
        };
        return KeysSelector;
    }(Selector));
    Item.KeysSelector = KeysSelector;

    var ValuesSelector = (function (_super) {
        __extends(ValuesSelector, _super);
        function ValuesSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        ValuesSelector.prototype.then = function () {
            return this._then;
        };
        ValuesSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child.toValue());
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                else {
                    interpreter.pushScope(scope.toValue());
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        ValuesSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            var oldValue = child.toValue();
                            interpreter.pushScope(oldValue);
                            var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                            interpreter.popScope();
                            if (newItem.isDefined()) {
                                if (newItem instanceof Item.Field) {
                                    children.set(newItem);
                                }
                                else if (newItem !== oldValue) {
                                    children.set(child.updatedValue(newItem.toValue()));
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                        else {
                            interpreter.pushScope(child.toValue());
                            var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                            interpreter.popScope();
                            if (newItem.isDefined()) {
                                if (child !== newItem) {
                                    children.set(newItem);
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    var oldValue = scope.toValue();
                    interpreter.pushScope(oldValue);
                    var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                    if (newItem.isDefined()) {
                        if (newItem instanceof Item.Field) {
                            scope = newItem;
                        }
                        else if (newItem !== oldValue) {
                            scope = scope.updatedValue(newItem.toValue());
                        }
                    }
                    else {
                        scope = Item.absent();
                    }
                }
                else {
                    interpreter.pushScope(scope);
                    scope = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        ValuesSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new ValuesSelector(then);
        };
        ValuesSelector.prototype.andThen = function (then) {
            return new ValuesSelector(this._then.andThen(then));
        };
        ValuesSelector.prototype.typeOrder = function () {
            return 16;
        };
        ValuesSelector.prototype.compareTo = function (that) {
            if (that instanceof ValuesSelector) {
                return this._then.compareTo(that._then);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ValuesSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ValuesSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        ValuesSelector.prototype.hashCode = function () {
            if (ValuesSelector._hashSeed === void 0) {
                ValuesSelector._hashSeed = Murmur3.seed(ValuesSelector);
            }
            return Murmur3.mash(Murmur3.mix(ValuesSelector._hashSeed, this._then.hashCode()));
        };
        ValuesSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("values").write(40).write(41);
            this._then.debugThen(output);
        };
        ValuesSelector.prototype.clone = function () {
            return new ValuesSelector(this._then.clone());
        };
        return ValuesSelector;
    }(Selector));
    Item.ValuesSelector = ValuesSelector;

    var ChildrenSelector = (function (_super) {
        __extends(ChildrenSelector, _super);
        function ChildrenSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        ChildrenSelector.prototype.then = function () {
            return this._then;
        };
        ChildrenSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child);
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        ChildrenSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var oldChild = children.next().value;
                        interpreter.pushScope(oldChild);
                        var newChild = this._then.mapSelected(interpreter, transform);
                        interpreter.popScope();
                        if (newChild.isDefined()) {
                            if (newChild !== oldChild) {
                                children.set(newChild);
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        ChildrenSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new ChildrenSelector(then);
        };
        ChildrenSelector.prototype.andThen = function (then) {
            return new ChildrenSelector(this._then.andThen(then));
        };
        ChildrenSelector.prototype.typeOrder = function () {
            return 17;
        };
        ChildrenSelector.prototype.compareTo = function (that) {
            if (that instanceof ChildrenSelector) {
                return this._then.compareTo(that._then);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ChildrenSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ChildrenSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        ChildrenSelector.prototype.hashCode = function () {
            if (ChildrenSelector._hashSeed === void 0) {
                ChildrenSelector._hashSeed = Murmur3.seed(ChildrenSelector);
            }
            return Murmur3.mash(Murmur3.mix(ChildrenSelector._hashSeed, this._then.hashCode()));
        };
        ChildrenSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("children").write(40).write(41);
            this._then.debugThen(output);
        };
        ChildrenSelector.prototype.clone = function () {
            return new ChildrenSelector(this._then.clone());
        };
        return ChildrenSelector;
    }(Selector));
    Item.ChildrenSelector = ChildrenSelector;

    var DescendantsSelector = (function (_super) {
        __extends(DescendantsSelector, _super);
        function DescendantsSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        DescendantsSelector.prototype.then = function () {
            return this._then;
        };
        DescendantsSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child);
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        if (selected === void 0) {
                            this.forSelected(interpreter, callback, thisArg);
                        }
                        interpreter.popScope();
                    }
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        DescendantsSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var oldChild = children.next().value;
                        interpreter.pushScope(oldChild);
                        var newChild = this._then.mapSelected(interpreter, transform, thisArg);
                        if (newChild.isDefined()) {
                            newChild = this.mapSelected(interpreter, transform, thisArg);
                        }
                        interpreter.popScope();
                        if (newChild.isDefined()) {
                            if (newChild !== oldChild) {
                                children.set(newChild);
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        DescendantsSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new DescendantsSelector(then);
        };
        DescendantsSelector.prototype.andThen = function (then) {
            return new DescendantsSelector(this._then.andThen(then));
        };
        DescendantsSelector.prototype.typeOrder = function () {
            return 18;
        };
        DescendantsSelector.prototype.compareTo = function (that) {
            if (that instanceof DescendantsSelector) {
                return this._then.compareTo(that._then);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        DescendantsSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DescendantsSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        DescendantsSelector.prototype.hashCode = function () {
            if (DescendantsSelector._hashSeed === void 0) {
                DescendantsSelector._hashSeed = Murmur3.seed(DescendantsSelector);
            }
            return Murmur3.mash(Murmur3.mix(DescendantsSelector._hashSeed, this._then.hashCode()));
        };
        DescendantsSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("descendants").write(40).write(41);
            this._then.debugThen(output);
        };
        DescendantsSelector.prototype.clone = function () {
            return new DescendantsSelector(this._then.clone());
        };
        return DescendantsSelector;
    }(Selector));
    Item.DescendantsSelector = DescendantsSelector;

    var FilterSelector = (function (_super) {
        __extends(FilterSelector, _super);
        function FilterSelector(predicate, then) {
            var _this = _super.call(this) || this;
            _this._predicate = predicate;
            _this._then = then;
            return _this;
        }
        FilterSelector.prototype.predicate = function () {
            return this._predicate;
        };
        FilterSelector.prototype.then = function () {
            return this._then;
        };
        FilterSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                if (this.filterSelected(interpreter)) {
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                }
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        FilterSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                if (this.filterSelected(interpreter)) {
                    result = this._then.mapSelected(interpreter, transform, thisArg);
                }
                else {
                    result = interpreter.peekScope().toValue();
                }
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        FilterSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var predicate = this._predicate.substitute(interpreter);
            if (!(predicate instanceof Selector)) {
                predicate = this._predicate;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new FilterSelector(predicate, then);
        };
        FilterSelector.prototype.filterSelected = function (interpreter) {
            return this._predicate.forSelected(interpreter, this.selected, this) !== void 0;
        };
        FilterSelector.prototype.selected = function (interpreter) {
            return null;
        };
        FilterSelector.prototype.andThen = function (then) {
            return new FilterSelector(this._predicate, this._then.andThen(then));
        };
        FilterSelector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return this;
            }
            else {
                predicate = Item.fromAny(predicate);
                return this.andThen(predicate.filter());
            }
        };
        FilterSelector.prototype.typeOrder = function () {
            return 19;
        };
        FilterSelector.prototype.compareTo = function (that) {
            if (that instanceof FilterSelector) {
                var order = this._predicate.compareTo(that._predicate);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        FilterSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof FilterSelector) {
                return this._predicate.equals(that._predicate) && this._then.equals(that._then);
            }
            return false;
        };
        FilterSelector.prototype.hashCode = function () {
            if (FilterSelector._hashSeed === void 0) {
                FilterSelector._hashSeed = Murmur3.seed(FilterSelector);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(FilterSelector._hashSeed, this._predicate.hashCode()), this._then.hashCode()));
        };
        FilterSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("filter").write(40).debug(this._predicate).write(41);
            this._then.debugThen(output);
        };
        FilterSelector.prototype.clone = function () {
            return new FilterSelector(this._predicate.clone(), this._then.clone());
        };
        return FilterSelector;
    }(Selector));
    Item.FilterSelector = FilterSelector;

    var LiteralSelector = (function (_super) {
        __extends(LiteralSelector, _super);
        function LiteralSelector(item, then) {
            var _this = _super.call(this) || this;
            _this._item = item.commit();
            _this._then = then;
            return _this;
        }
        LiteralSelector.prototype.item = function () {
            return this._item;
        };
        LiteralSelector.prototype.then = function () {
            return this._then;
        };
        LiteralSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var literal = this._item.evaluate(interpreter);
                if (literal.isDefined()) {
                    interpreter.pushScope(literal);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        LiteralSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var literal = this._item.evaluate(interpreter);
                if (literal.isDefined()) {
                    interpreter.pushScope(literal);
                    literal = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                }
                result = literal;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        LiteralSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var item = this._item.substitute(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new LiteralSelector(item, then);
        };
        LiteralSelector.prototype.andThen = function (then) {
            return new LiteralSelector(this._item, this._then.andThen(then));
        };
        LiteralSelector.prototype.precedence = function () {
            return this._item.precedence();
        };
        LiteralSelector.prototype.typeOrder = function () {
            return 11;
        };
        LiteralSelector.prototype.compareTo = function (that) {
            if (that instanceof LiteralSelector) {
                var order = this._item.compareTo(that._item);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LiteralSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LiteralSelector) {
                return this._item.equals(that._item) && this._then.equals(that._then);
            }
            return false;
        };
        LiteralSelector.prototype.hashCode = function () {
            if (LiteralSelector._hashSeed === void 0) {
                LiteralSelector._hashSeed = Murmur3.seed(LiteralSelector);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(LiteralSelector._hashSeed, this._item.hashCode()), this._then.hashCode()));
        };
        LiteralSelector.prototype.debug = function (output) {
            output = output.write("Selector").write(46).write("literal").write(40)
                .debug(this._item).write(41);
            this._then.debugThen(output);
        };
        LiteralSelector.prototype.debugThen = function (output) {
        };
        LiteralSelector.prototype.clone = function () {
            return new LiteralSelector(this._item.clone(), this._then.clone());
        };
        return LiteralSelector;
    }(Selector));
    Item.LiteralSelector = LiteralSelector;

    var LambdaFunc = (function (_super) {
        __extends(LambdaFunc, _super);
        function LambdaFunc(bindings, template) {
            var _this = _super.call(this) || this;
            _this._bindings = bindings;
            _this._template = template;
            return _this;
        }
        LambdaFunc.prototype.bindings = function () {
            return this._bindings;
        };
        LambdaFunc.prototype.template = function () {
            return this._template;
        };
        LambdaFunc.prototype.precedence = function () {
            return 1;
        };
        LambdaFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var bindings = this._bindings;
            var arity = Math.max(1, bindings.length);
            var params = Item.Record.create(arity);
            var i = 0;
            var j = 0;
            while (i < arity) {
                var binding = bindings instanceof Item.Record ? bindings.getItem(i) : i === 0 ? bindings : Item.absent();
                var arg = args instanceof Item.Record ? args.getItem(j).toValue() : j === 0 ? args : Item.Value.absent();
                if (binding instanceof Item.Text && arg.isDistinct()) {
                    params.push(Item.Slot.of(binding, arg));
                    j += 1;
                }
                else if (binding instanceof Item.Slot) {
                    if (arg.isDistinct()) {
                        params.push(binding.updatedValue(arg));
                    }
                    else {
                        params.push(binding);
                    }
                    j += 1;
                }
                i += 1;
            }
            interpreter.pushScope(params);
            var result = this._template.evaluate(interpreter);
            interpreter.popScope();
            return result;
        };
        LambdaFunc.prototype.typeOrder = function () {
            return 50;
        };
        LambdaFunc.prototype.compareTo = function (that) {
            if (that instanceof LambdaFunc) {
                var order = this._bindings.compareTo(that._bindings);
                if (order === 0) {
                    order = this._template.compareTo(that._template);
                }
                return order;
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LambdaFunc.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LambdaFunc) {
                return this._bindings.equals(that._bindings) && this._template.equals(that._template);
            }
            return false;
        };
        LambdaFunc.prototype.hashCode = function () {
            if (LambdaFunc._hashSeed === void 0) {
                LambdaFunc._hashSeed = Murmur3.seed(LambdaFunc);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(LambdaFunc._hashSeed, this._bindings.hashCode()), this._template.hashCode()));
        };
        LambdaFunc.prototype.debug = function (output) {
            output.debug(this.bindings).write(46).write("lambda").write(40)
                .debug(this.template).write(41);
        };
        return LambdaFunc;
    }(Func));
    Item.LambdaFunc = LambdaFunc;

    var BridgeFunc = (function (_super) {
        __extends(BridgeFunc, _super);
        function BridgeFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BridgeFunc.prototype.typeOrder = function () {
            return 51;
        };
        BridgeFunc.prototype.compareTo = function (that) {
            if (that instanceof BridgeFunc) {
                return Objects.compare(this.__proto__.constructor.name, that.__proto__.constructor.name);
            }
            return Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BridgeFunc.prototype.equals = function (that) {
            return this === that;
        };
        BridgeFunc.prototype.hashCode = function () {
            return Murmur3.seed(this.__proto__.constructor);
        };
        BridgeFunc.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name);
        };
        return BridgeFunc;
    }(Func));
    Item.BridgeFunc = BridgeFunc;

    var MathModule = (function () {
        function MathModule() {
        }
        MathModule.max = function () {
            if (!MathModule._max) {
                MathModule._max = new MaxFunc();
            }
            return MathModule._max;
        };
        MathModule.min = function () {
            if (!MathModule._min) {
                MathModule._min = new MinFunc();
            }
            return MathModule._min;
        };
        MathModule.abs = function () {
            if (!MathModule._abs) {
                MathModule._abs = new AbsFunc();
            }
            return MathModule._abs;
        };
        MathModule.ceil = function () {
            if (!MathModule._ceil) {
                MathModule._ceil = new CeilFunc();
            }
            return MathModule._ceil;
        };
        MathModule.floor = function () {
            if (!MathModule._floor) {
                MathModule._floor = new FloorFunc();
            }
            return MathModule._floor;
        };
        MathModule.round = function () {
            if (!MathModule._round) {
                MathModule._round = new RoundFunc();
            }
            return MathModule._round;
        };
        MathModule.sqrt = function () {
            if (!MathModule._sqrt) {
                MathModule._sqrt = new SqrtFunc();
            }
            return MathModule._sqrt;
        };
        MathModule.pow = function () {
            if (!MathModule._pow) {
                MathModule._pow = new PowFunc();
            }
            return MathModule._pow;
        };
        MathModule.rate = function () {
            if (!MathModule._rate) {
                MathModule._rate = new RateFunc();
            }
            return MathModule._rate;
        };
        MathModule.random = function () {
            if (!MathModule._random) {
                MathModule._random = new RandomFunc();
            }
            return MathModule._random;
        };
        MathModule.scope = function () {
            if (!MathModule._scope) {
                MathModule._scope = Item.Record.create(10)
                    .slot("max", MathModule.max())
                    .slot("min", MathModule.min())
                    .slot("abs", MathModule.abs())
                    .slot("ceil", MathModule.ceil())
                    .slot("floor", MathModule.floor())
                    .slot("round", MathModule.round())
                    .slot("pow", MathModule.pow())
                    .slot("sqrt", MathModule.sqrt())
                    .slot("rate", MathModule.rate())
                    .slot("random", MathModule.random())
                    .commit();
            }
            return MathModule._scope;
        };
        return MathModule;
    }());
    Item.MathModule = MathModule;
    var MaxFunc = (function (_super) {
        __extends(MaxFunc, _super);
        function MaxFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaxFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x;
            var y;
            if (args.length >= 2) {
                x = args.getItem(0).evaluate(interpreter);
                y = args.getItem(1).evaluate(interpreter);
            }
            else {
                x = args.evaluate(interpreter);
            }
            if (y !== void 0) {
                return x.max(y);
            }
            else if (operator) {
                y = operator.state();
                var max = y !== void 0 ? x.max(y) : x;
                operator.setState(max);
                return max;
            }
            return Item.absent();
        };
        MaxFunc.prototype.expand = function (args, interpreter, operator) {
            if (args.length === 1) {
                args = args.evaluate(interpreter).toValue();
                return this.invoke(args, interpreter, operator);
            }
            return void 0;
        };
        return MaxFunc;
    }(BridgeFunc));
    var MinFunc = (function (_super) {
        __extends(MinFunc, _super);
        function MinFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x;
            var y;
            if (args.length >= 2) {
                x = args.getItem(0).evaluate(interpreter);
                y = args.getItem(1).evaluate(interpreter);
            }
            else {
                x = args.evaluate(interpreter);
            }
            if (y !== void 0) {
                return x.min(y);
            }
            else if (operator) {
                y = operator.state();
                var min = y !== void 0 ? x.min(y) : x;
                operator.setState(min);
                return min;
            }
            return Item.absent();
        };
        MinFunc.prototype.expand = function (args, interpreter, operator) {
            if (args.length === 1) {
                args = args.evaluate(interpreter).toValue();
                return this.invoke(args, interpreter, operator);
            }
            return void 0;
        };
        return MinFunc;
    }(BridgeFunc));
    var AbsFunc = (function (_super) {
        __extends(AbsFunc, _super);
        function AbsFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbsFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.abs();
            }
            return Item.absent();
        };
        return AbsFunc;
    }(BridgeFunc));
    var CeilFunc = (function (_super) {
        __extends(CeilFunc, _super);
        function CeilFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CeilFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.ceil();
            }
            return Item.absent();
        };
        return CeilFunc;
    }(BridgeFunc));
    var FloorFunc = (function (_super) {
        __extends(FloorFunc, _super);
        function FloorFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FloorFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.floor();
            }
            return Item.absent();
        };
        return FloorFunc;
    }(BridgeFunc));
    var RoundFunc = (function (_super) {
        __extends(RoundFunc, _super);
        function RoundFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RoundFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.round();
            }
            return Item.absent();
        };
        return RoundFunc;
    }(BridgeFunc));
    var SqrtFunc = (function (_super) {
        __extends(SqrtFunc, _super);
        function SqrtFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SqrtFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.sqrt();
            }
            return Item.absent();
        };
        return SqrtFunc;
    }(BridgeFunc));
    var PowFunc = (function (_super) {
        __extends(PowFunc, _super);
        function PowFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PowFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x = args.getItem(0).evaluate(interpreter);
            var y = args.getItem(1).evaluate(interpreter);
            if (x instanceof Item.Num && y instanceof Item.Num) {
                return x.pow(y);
            }
            return Item.absent();
        };
        return PowFunc;
    }(BridgeFunc));
    var RateFunc = (function (_super) {
        __extends(RateFunc, _super);
        function RateFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RateFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var value;
            var period;
            if (args.length >= 2) {
                value = args.getItem(0).evaluate(interpreter).numberValue(NaN);
                period = args.getItem(1).evaluate(interpreter).numberValue(1000);
            }
            else {
                value = args.evaluate(interpreter).numberValue(NaN);
                period = 1000;
            }
            if (isFinite(value) && operator) {
                var state = operator.state();
                if (state === void 0) {
                    state = { v0: value, t0: Date.now(), dv: 0, dt: 0 };
                    operator.setState(state);
                }
                else {
                    var t1 = Date.now();
                    var dt = t1 - state.t0;
                    if (dt > period && t1 > state.t0 || dt > 2 * period) {
                        var dv = value - state.v0;
                        state.v0 = value;
                        state.t0 = t1;
                        state.dv = dv;
                        state.dt = dt;
                    }
                    operator.setState(state);
                    if (state.dt !== 0) {
                        var rate = period * state.dv / state.dt;
                        return Item.Num.from(rate);
                    }
                }
            }
            return Item.absent();
        };
        RateFunc.prototype.expand = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            return this.invoke(args, interpreter, operator);
        };
        return RateFunc;
    }(BridgeFunc));
    var RandomFunc = (function (_super) {
        __extends(RandomFunc, _super);
        function RandomFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RandomFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            var lower = args.length >= 1 ? args.getItem(0).numberValue(0.0) : 0.0;
            var upper = args.length >= 2 ? args.getItem(1).numberValue(lower + 1.0) : lower + 1.0;
            var value = lower + Math.random() * (upper - lower);
            return Item.Num.from(value);
        };
        return RandomFunc;
    }(BridgeFunc));

    var TagForm = (function (_super) {
        __extends(TagForm, _super);
        function TagForm(tag, form) {
            var _this = _super.call(this) || this;
            _this._tag = tag;
            _this._form = form;
            return _this;
        }
        TagForm.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return this._tag;
            }
            else if (tag !== void 0) {
                return new TagForm(tag, this._form);
            }
            else {
                return this._form;
            }
        };
        TagForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._form.unit();
            }
            else {
                return new TagForm(this._tag, this._form.unit(unit));
            }
        };
        TagForm.prototype.mold = function (object, item) {
            item = this._form.mold(object, item);
            if (!item.header(this._tag).isDefined()) {
                item = item.prepended(Attr.of(this._tag));
            }
            return item;
        };
        TagForm.prototype.cast = function (item, object) {
            if (item.header(this._tag).isDefined()) {
                return this._form.cast(item, object);
            }
            else if (item.keyEquals(this._tag)) {
                return this._form.cast(item.toValue(), object);
            }
            return void 0;
        };
        return TagForm;
    }(Form));
    Form.TagForm = TagForm;

    var UnitForm = (function (_super) {
        __extends(UnitForm, _super);
        function UnitForm(unit, form) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            _this._form = form;
            return _this;
        }
        UnitForm.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return this._form.tag();
            }
            else {
                return new UnitForm(this._unit, this._form.tag(tag));
            }
        };
        UnitForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._form.unit();
            }
            else if (unit !== void 0) {
                return new UnitForm(unit, this._form);
            }
            else {
                return this._form;
            }
        };
        UnitForm.prototype.mold = function (object, item) {
            return this._form.mold.apply(this._form, arguments);
        };
        UnitForm.prototype.cast = function (item, object) {
            return this._form.cast.apply(this._form, arguments);
        };
        return UnitForm;
    }(Form));
    Form.UnitForm = UnitForm;

    var StringForm = (function (_super) {
        __extends(StringForm, _super);
        function StringForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        StringForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new StringForm(unit);
            }
        };
        StringForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Text$1.from(object);
            }
            else {
                return item.concat(Text$1.from(object));
            }
        };
        StringForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.stringValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return StringForm;
    }(Form));
    Form.StringForm = StringForm;

    var NumberForm = (function (_super) {
        __extends(NumberForm, _super);
        function NumberForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        NumberForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new NumberForm(unit);
            }
        };
        NumberForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Num.from(object);
            }
            else {
                return item.concat(Num.from(object));
            }
        };
        NumberForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.numberValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return NumberForm;
    }(Form));
    Form.NumberForm = NumberForm;

    var BooleanForm = (function (_super) {
        __extends(BooleanForm, _super);
        function BooleanForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        BooleanForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new BooleanForm(unit);
            }
        };
        BooleanForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Bool.from(object);
            }
            else {
                return item.concat(Bool.from(object));
            }
        };
        BooleanForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.booleanValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return BooleanForm;
    }(Form));
    Form.BooleanForm = BooleanForm;

    var AnyForm = (function (_super) {
        __extends(AnyForm, _super);
        function AnyForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        AnyForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new AnyForm(unit);
            }
        };
        AnyForm.prototype.mold = function (object, item) {
            object = Item.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        AnyForm.prototype.cast = function (item, object) {
            return item.toAny();
        };
        return AnyForm;
    }(Form));
    Form.AnyForm = AnyForm;

    var ItemForm = (function (_super) {
        __extends(ItemForm, _super);
        function ItemForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit ? unit.commit() : unit;
            return _this;
        }
        ItemForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ItemForm(unit);
            }
        };
        ItemForm.prototype.mold = function (object, item) {
            object = Item.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        ItemForm.prototype.cast = function (item, object) {
            return item;
        };
        return ItemForm;
    }(Form));
    Form.ItemForm = ItemForm;

    var ValueForm = (function (_super) {
        __extends(ValueForm, _super);
        function ValueForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit ? unit.commit() : unit;
            return _this;
        }
        ValueForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ValueForm(unit);
            }
        };
        ValueForm.prototype.mold = function (object, item) {
            object = Value.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        ValueForm.prototype.cast = function (item, object) {
            return item.toValue();
        };
        return ValueForm;
    }(Form));
    Form.ValueForm = ValueForm;

    var ValueCursor = (function (_super) {
        __extends(ValueCursor, _super);
        function ValueCursor(cursor, form) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            _this._form = form;
            return _this;
        }
        ValueCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        ValueCursor.prototype.head = function () {
            var value = this._cursor.head();
            return value.coerce(this._form);
        };
        ValueCursor.prototype.step = function () {
            this._cursor.step();
        };
        ValueCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        ValueCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        ValueCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        ValueCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value.coerce(this._form), done: done };
        };
        ValueCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        ValueCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        ValueCursor.prototype.previous = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value.coerce(this._form), done: done };
        };
        ValueCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return ValueCursor;
    }(Cursor));

    var ValueEntryCursor = (function (_super) {
        __extends(ValueEntryCursor, _super);
        function ValueEntryCursor(cursor, keyForm, valueForm) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            _this._keyForm = keyForm;
            _this._valueForm = valueForm;
            return _this;
        }
        ValueEntryCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        ValueEntryCursor.prototype.head = function () {
            var pair = this._cursor.head();
            return [pair[0].coerce(this._keyForm), pair[1].coerce(this._valueForm)];
        };
        ValueEntryCursor.prototype.step = function () {
            this._cursor.step();
        };
        ValueEntryCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        ValueEntryCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        ValueEntryCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        ValueEntryCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
        };
        ValueEntryCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        ValueEntryCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        ValueEntryCursor.prototype.previous = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
        };
        ValueEntryCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return ValueEntryCursor;
    }(Cursor));

    var Inlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var inlet = object;
                return typeof inlet.input === "function"
                    && typeof inlet.bindInput === "function"
                    && typeof inlet.unbindInput === "function";
            }
            return false;
        },
    };

    var Outlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return typeof outlet.outputIterator === "function"
                    && typeof outlet.bindOutput === "function"
                    && typeof outlet.unbindOutput === "function";
            }
            return false;
        },
        MemoizeValueCombinator: void 0,
        MapValueCombinator: void 0,
        WatchValueCombinator: void 0,
    };

    (function (KeyEffect) {
        KeyEffect[KeyEffect["Update"] = 0] = "Update";
        KeyEffect[KeyEffect["Remove"] = 1] = "Remove";
    })(exports.KeyEffect || (exports.KeyEffect = {}));

    var MapInlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var inlet = object;
                return Inlet.is(inlet)
                    && typeof inlet.invalidateOutputKey === "function"
                    && typeof inlet.reconcileOutputKey === "function";
            }
            return false;
        },
    };

    var MapOutlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return Outlet.is(outlet)
                    && typeof outlet.keyIterator === "function"
                    && typeof outlet.outlet === "function";
            }
            return false;
        },
        MemoizeMapCombinator: void 0,
        FilterFieldsCombinator: void 0,
        MapFieldValuesCombinator: void 0,
        ReduceFieldsCombinator: void 0,
        WatchFieldsCombinator: void 0,
    };

    var StreamletException = (function (_super) {
        __extends(StreamletException, _super);
        function StreamletException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = StreamletException.prototype;
            return _this;
        }
        return StreamletException;
    }(Error));

    var StreamletScope = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var scope = object;
                return typeof scope.streamletScope === "function"
                    && typeof scope.streamletContext === "function"
                    && typeof scope.outlet === "function";
            }
            return false;
        },
    };

    var Streamlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var streamlet = object;
                return typeof streamlet.streamletScope === "function"
                    && typeof streamlet.setStreamletScope === "function"
                    && typeof streamlet.streamletContext === "function"
                    && typeof streamlet.setStreamletContext === "function";
            }
            return false;
        },
    };

    var AbstractInlet = (function () {
        function AbstractInlet() {
            this._input = null;
            this._version = -1;
        }
        AbstractInlet.prototype.input = function () {
            return this._input;
        };
        AbstractInlet.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractInlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractInlet.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        AbstractInlet.prototype.disconnectOutputs = function () {
        };
        AbstractInlet.prototype.invalidateOutput = function () {
            if (this._version >= 0) {
                this.willInvalidateOutput();
                this._version = -1;
                this.onInvalidateOutput();
                this.didInvalidateOutput();
            }
        };
        AbstractInlet.prototype.reconcileOutput = function (version) {
            if (this._version < 0) {
                this.willReconcileOutput(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcileOutput(version);
                this.didReconcileOutput(version);
            }
        };
        AbstractInlet.prototype.willInvalidateOutput = function () {
        };
        AbstractInlet.prototype.onInvalidateOutput = function () {
        };
        AbstractInlet.prototype.didInvalidateOutput = function () {
        };
        AbstractInlet.prototype.willReconcileOutput = function (version) {
        };
        AbstractInlet.prototype.onReconcileOutput = function (version) {
        };
        AbstractInlet.prototype.didReconcileOutput = function (version) {
        };
        return AbstractInlet;
    }());

    var AbstractOutlet = (function () {
        function AbstractOutlet() {
            this._outputs = null;
            this._version = -1;
        }
        AbstractOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            for (var i = 0, n = oldOutputs !== null ? oldOutputs.length : 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractOutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractOutlet.prototype.disconnectOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        AbstractOutlet.prototype.disconnectInputs = function () {
        };
        AbstractOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidateInput();
            }
        };
        AbstractOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcileInput(version);
            }
        };
        AbstractOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractOutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractOutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractOutlet;
    }());

    var AbstractInoutlet = (function () {
        function AbstractInoutlet() {
            this._input = null;
            this._outputs = null;
            this._version = -1;
        }
        AbstractInoutlet.prototype.input = function () {
            return this._input;
        };
        AbstractInoutlet.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractInoutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractInoutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractInoutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractInoutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractInoutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractInoutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractInoutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractInoutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractInoutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractInoutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        AbstractInoutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractInoutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractInoutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcile(version);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractInoutlet.prototype.willInvalidate = function () {
        };
        AbstractInoutlet.prototype.onInvalidate = function () {
        };
        AbstractInoutlet.prototype.didInvalidate = function () {
        };
        AbstractInoutlet.prototype.willReconcile = function (version) {
        };
        AbstractInoutlet.prototype.onReconcile = function (version) {
        };
        AbstractInoutlet.prototype.didReconcile = function (version) {
        };
        AbstractInoutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractInoutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractInoutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractInoutlet;
    }());

    var KeyOutlet = (function (_super) {
        __extends(KeyOutlet, _super);
        function KeyOutlet(input, key) {
            var _this = _super.call(this) || this;
            _this._input = input;
            _this._key = key;
            return _this;
        }
        KeyOutlet.prototype.input = function () {
            return this._input;
        };
        KeyOutlet.prototype.key = function () {
            return this._key;
        };
        KeyOutlet.prototype.get = function () {
            return this._input.get(this._key);
        };
        return KeyOutlet;
    }(AbstractOutlet));

    var AbstractMapInlet = (function () {
        function AbstractMapInlet() {
            this._input = null;
            this._effects = new BTree();
            this._version = -1;
        }
        AbstractMapInlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInlet.prototype.unbindInput = function () {
            if (this._input != null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInlet.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        AbstractMapInlet.prototype.disconnectOutputs = function () {
        };
        AbstractMapInlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInlet.prototype.invalidateOutput = function () {
            if (this._version >= 0) {
                this.willInvalidateOutput();
                this._version = -1;
                this.onInvalidateOutput();
                this.didInvalidateOutput();
            }
        };
        AbstractMapInlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInlet.prototype.reconcileOutput = function (version) {
            if (this._version < 0) {
                this.willReconcileOutput(version);
                this._effects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileOutput(version);
                this.didReconcileOutput(version);
            }
        };
        AbstractMapInlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.willInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.onInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.didInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.willReconcileOutput = function (version) {
        };
        AbstractMapInlet.prototype.onReconcileOutput = function (version) {
        };
        AbstractMapInlet.prototype.didReconcileOutput = function (version) {
        };
        return AbstractMapInlet;
    }());

    var AbstractMapOutlet = (function () {
        function AbstractMapOutlet() {
            this._effects = new BTree();
            this._outlets = new BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapOutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractMapOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapOutlet.prototype.disconnectOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        AbstractMapOutlet.prototype.disconnectInputs = function () {
        };
        AbstractMapOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractMapOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidateInput();
            }
        };
        AbstractMapOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileInputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    this.onReconcileInputKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, effect, version);
                }
            }
        };
        AbstractMapOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._effects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcileInput(version);
            }
        };
        AbstractMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapOutlet;
    }());

    var AbstractMapInoutlet = (function () {
        function AbstractMapInoutlet() {
            this._input = null;
            this._effects = new BTree();
            this._outlets = new BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInoutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInoutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInoutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInoutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null && this._outlets.isEmpty()) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInoutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapInoutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractMapInoutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInoutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInoutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInoutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outlets = this._outlets;
                if (outlets.isEmpty()) {
                    this._outlets = new BTree();
                    outlets.forEach(function (key, keyOutlet) {
                        keyOutlet.disconnectOutputs();
                    }, this);
                }
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInoutlet.prototype.invalidateOutputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        AbstractMapInoutlet.prototype.invalidateInputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        AbstractMapInoutlet.prototype.invalidateKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateKey(key, effect);
            }
        };
        AbstractMapInoutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInoutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInoutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidate();
            }
        };
        AbstractMapInoutlet.prototype.reconcileOutputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        AbstractMapInoutlet.prototype.reconcileInputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        AbstractMapInoutlet.prototype.reconcileKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileKey(key, effect, version);
                }
            }
        };
        AbstractMapInoutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInoutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInoutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._effects.forEach(function (key) {
                    this.reconcileKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInoutlet.prototype.willInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.onInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.didInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.willReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.onReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.didReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapInoutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapInoutlet;
    }());

    var AbstractMapInletOutlet = (function () {
        function AbstractMapInletOutlet() {
            this._input = null;
            this._effects = new BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInletOutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInletOutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInletOutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInletOutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInletOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractMapInletOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInletOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInletOutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInletOutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInletOutlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    output.invalidateOutput();
                }
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInletOutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInletOutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInletOutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        AbstractMapInletOutlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInletOutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletOutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletOutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._effects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInletOutlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletOutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletOutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractMapInletOutlet;
    }());

    var AbstractMapInletMapOutlet = (function () {
        function AbstractMapInletMapOutlet() {
            this._input = null;
            this._outputEffects = new BTree();
            this._inputEffects = new BTree();
            this._outlets = new BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInletMapOutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInletMapOutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInletMapOutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInletMapOutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null && this._outlets.isEmpty()) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapInletMapOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractMapInletMapOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInletMapOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outlets = this._outlets;
                if (outlets.isEmpty()) {
                    this._outlets = new BTree();
                    outlets.forEach(function (key, keyOutlet) {
                        keyOutlet.disconnectOutputs();
                    }, this);
                }
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldOutputEffects = this._outputEffects;
            if (oldOutputEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._outputEffects = oldOutputEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldInputEffects = this._inputEffects;
            if (oldInputEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._inputEffects = oldInputEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInletMapOutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInletMapOutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidate();
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldOutputEffects = this._outputEffects;
                var effect = oldOutputEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._outputEffects = oldOutputEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldInputEffects = this._inputEffects;
                var oldEffect = oldInputEffects.get(key);
                if (oldEffect !== void 0) {
                    var newEffect = this.willReconcileInputKey(key, oldEffect, version);
                    if (oldEffect !== newEffect) {
                        this.invalidateInputKey(key, newEffect);
                    }
                    this._inputEffects = oldInputEffects.removed(key);
                    this.onReconcileInputKey(key, newEffect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, newEffect, version);
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletMapOutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletMapOutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._outputEffects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._inputEffects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInletMapOutlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
            return effect;
        };
        AbstractMapInletMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapInletMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapInletMapOutlet;
    }());

    var OutletInlet = (function (_super) {
        __extends(OutletInlet, _super);
        function OutletInlet(outlet) {
            var _this = _super.call(this) || this;
            _this._outlet = outlet;
            return _this;
        }
        OutletInlet.prototype.outlet = function () {
            return this._outlet;
        };
        OutletInlet.prototype.onInvalidateOutput = function () {
            this._outlet.invalidateInput();
        };
        OutletInlet.prototype.onReconcileOutput = function (version) {
            this._outlet.reconcileInput(version);
        };
        return OutletInlet;
    }(AbstractInlet));

    var OutletMapInlet = (function (_super) {
        __extends(OutletMapInlet, _super);
        function OutletMapInlet(outlet) {
            var _this = _super.call(this) || this;
            _this._outlet = outlet;
            return _this;
        }
        OutletMapInlet.prototype.outlet = function () {
            return this._outlet;
        };
        OutletMapInlet.prototype.onInvalidateOutputKey = function (key, effect) {
            this._outlet.invalidateInput();
        };
        OutletMapInlet.prototype.onInvalidateOutput = function () {
            this._outlet.invalidateInput();
        };
        OutletMapInlet.prototype.onReconcileOutputKey = function (key, effect, version) {
            this._outlet.reconcileInput(version);
        };
        OutletMapInlet.prototype.onReconcileOutput = function (version) {
            this._outlet.reconcileInput(version);
        };
        return OutletMapInlet;
    }(AbstractMapInlet));

    var ValueInput = (function (_super) {
        __extends(ValueInput, _super);
        function ValueInput(state) {
            var _this = _super.call(this) || this;
            _this._state = state;
            return _this;
        }
        ValueInput.prototype.get = function () {
            return this._state;
        };
        ValueInput.prototype.set = function (newState) {
            var oldState = this._state;
            this._state = newState;
            this.invalidateInput();
            return oldState;
        };
        return ValueInput;
    }(AbstractOutlet));

    var ValueOutput = (function (_super) {
        __extends(ValueOutput, _super);
        function ValueOutput(state) {
            var _this = _super.call(this) || this;
            _this._state = state;
            return _this;
        }
        ValueOutput.prototype.get = function () {
            return this._state;
        };
        ValueOutput.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                this._state = this._input.get();
            }
        };
        return ValueOutput;
    }(AbstractInlet));

    var MapInput = (function (_super) {
        __extends(MapInput, _super);
        function MapInput(state) {
            if (state === void 0) { state = new BTree(); }
            var _this = _super.call(this) || this;
            _this._state = state;
            state.forEach(function (key) {
                this._effects = this._effects.updated(key, 0);
            }, _this);
            return _this;
        }
        MapInput.prototype.has = function (key) {
            return this._state.has(key);
        };
        MapInput.prototype.get = function (key) {
            if (key === void 0) {
                return this._state;
            }
            else {
                return this._state.get(key);
            }
        };
        MapInput.prototype.set = function (key, newValue) {
            var oldValue = this._state.get(key);
            this._state = this._state.updated(key, newValue);
            this.invalidateInputKey(key, 0);
            return oldValue;
        };
        MapInput.prototype.delete = function (key) {
            var oldState = this._state;
            var newState = oldState.removed(key);
            if (oldState !== newState) {
                this._state = newState;
                this.invalidateInputKey(key, 1);
            }
            return this;
        };
        MapInput.prototype.keyIterator = function () {
            return this._state.keys();
        };
        return MapInput;
    }(AbstractMapOutlet));

    var MapOutput = (function (_super) {
        __extends(MapOutput, _super);
        function MapOutput() {
            var _this = _super.call(this) || this;
            _this._state = new BTree();
            return _this;
        }
        MapOutput.prototype.get = function () {
            return this._state;
        };
        MapOutput.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._state = this._state.updated(key, value);
                    }
                    else {
                        this._state = this._state.removed(key);
                    }
                }
            }
            else if (effect === 1) {
                this._state = this._state.removed(key);
            }
        };
        return MapOutput;
    }(AbstractMapInlet));

    var MemoizeValueCombinator = (function (_super) {
        __extends(MemoizeValueCombinator, _super);
        function MemoizeValueCombinator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MemoizeValueCombinator.prototype.get = function () {
            return this._state;
        };
        MemoizeValueCombinator.prototype.onReconcile = function (version) {
            if (this._input !== null) {
                this._state = this._input.get();
            }
        };
        MemoizeValueCombinator.prototype.memoize = function () {
            return this;
        };
        return MemoizeValueCombinator;
    }(AbstractInoutlet));
    Outlet.MemoizeValueCombinator = MemoizeValueCombinator;

    var MemoizeMapCombinator = (function (_super) {
        __extends(MemoizeMapCombinator, _super);
        function MemoizeMapCombinator() {
            var _this = _super.call(this) || this;
            _this._cache = new BTree();
            return _this;
        }
        MemoizeMapCombinator.prototype.has = function (key) {
            return this._cache.has(key);
        };
        MemoizeMapCombinator.prototype.get = function (key) {
            if (key === void 0) {
                if (this._state === void 0 && this._input != null) {
                    this._state = this._input.get();
                }
                return this._state;
            }
            else {
                return this._cache.get(key);
            }
        };
        MemoizeMapCombinator.prototype.keyIterator = function () {
            return this._cache.keys();
        };
        MemoizeMapCombinator.prototype.onReconcileKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._cache = this._cache.updated(key, value);
                    }
                    else {
                        this._cache = this._cache.removed(key);
                    }
                }
            }
            else if (effect === 1) {
                this._cache = this._cache.removed(key);
            }
        };
        MemoizeMapCombinator.prototype.onReconcile = function (version) {
            this._state = void 0;
        };
        MemoizeMapCombinator.prototype.memoize = function () {
            return this;
        };
        return MemoizeMapCombinator;
    }(AbstractMapInoutlet));
    MapOutlet.MemoizeMapCombinator = MemoizeMapCombinator;

    var FilterFieldsOperator = (function (_super) {
        __extends(FilterFieldsOperator, _super);
        function FilterFieldsOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterFieldsOperator.prototype.has = function (key) {
            if (this._input !== null) {
                var value = this._input.get(key);
                return value !== void 0 && this.evaluate(key, value);
            }
            return false;
        };
        FilterFieldsOperator.prototype.get = function (key) {
            if (key === void 0) {
                var output = new BTree();
                var keys = this.keyIterator();
                do {
                    var next = keys.next();
                    if (!next.done) {
                        var key_1 = next.value;
                        var value = this._input.get(key_1);
                        if (value !== void 0 && this.evaluate(key_1, value)) {
                            output.set(key_1, value);
                        }
                        continue;
                    }
                    break;
                } while (true);
                return output;
            }
            else {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0 && this.evaluate(key, value)) {
                        return value;
                    }
                }
                return void 0;
            }
        };
        FilterFieldsOperator.prototype.keyIterator = function () {
            if (this._input !== null) {
                return this._input.keyIterator();
            }
            else {
                return Cursor.empty();
            }
        };
        FilterFieldsOperator.prototype.onInvalidateOutputKey = function (key, effect) {
            this.invalidateInputKey(key, effect);
        };
        FilterFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            this.reconcileInputKey(key, version);
        };
        FilterFieldsOperator.prototype.willReconcileInputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value === void 0 || !this.evaluate(key, value)) {
                        return 1;
                    }
                }
            }
            return effect;
        };
        return FilterFieldsOperator;
    }(AbstractMapInletMapOutlet));

    var FilterFieldsCombinator = (function (_super) {
        __extends(FilterFieldsCombinator, _super);
        function FilterFieldsCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        FilterFieldsCombinator.prototype.evaluate = function (key, value) {
            return this._func(key, value);
        };
        return FilterFieldsCombinator;
    }(FilterFieldsOperator));
    MapOutlet.FilterFieldsCombinator = FilterFieldsCombinator;

    var MapValueOperator = (function (_super) {
        __extends(MapValueOperator, _super);
        function MapValueOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MapValueOperator.prototype.get = function () {
            if (this._input !== null) {
                return this.evaluate(this._input.get());
            }
            else {
                return void 0;
            }
        };
        return MapValueOperator;
    }(AbstractInoutlet));

    var MapValueCombinator = (function (_super) {
        __extends(MapValueCombinator, _super);
        function MapValueCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        MapValueCombinator.prototype.evaluate = function (value) {
            if (value !== void 0) {
                return this._func(value);
            }
            else {
                return void 0;
            }
        };
        return MapValueCombinator;
    }(MapValueOperator));
    Outlet.MapValueCombinator = MapValueCombinator;

    var MapFieldValuesOperator = (function (_super) {
        __extends(MapFieldValuesOperator, _super);
        function MapFieldValuesOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MapFieldValuesOperator.prototype.has = function (key) {
            if (this._input !== null) {
                return this._input.has(key);
            }
            else {
                return false;
            }
        };
        MapFieldValuesOperator.prototype.get = function (key) {
            if (key === void 0) {
                var output = new BTree();
                var keys = this.keyIterator();
                do {
                    var next = keys.next();
                    if (!next.done) {
                        var key_1 = next.value;
                        var value = this.evaluate(key_1, this._input.get(key_1));
                        if (value !== void 0) {
                            output.set(key_1, value);
                        }
                        continue;
                    }
                    break;
                } while (true);
                return output;
            }
            else {
                if (this._input !== null) {
                    return this.evaluate(key, this._input.get(key));
                }
                else {
                    return void 0;
                }
            }
        };
        MapFieldValuesOperator.prototype.keyIterator = function () {
            if (this._input !== null) {
                return this._input.keyIterator();
            }
            else {
                return Cursor.empty();
            }
        };
        return MapFieldValuesOperator;
    }(AbstractMapInoutlet));

    var MapFieldValuesCombinator = (function (_super) {
        __extends(MapFieldValuesCombinator, _super);
        function MapFieldValuesCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        MapFieldValuesCombinator.prototype.evaluate = function (key, value) {
            if (value !== void 0) {
                return this._func(key, value);
            }
            else {
                return void 0;
            }
        };
        return MapFieldValuesCombinator;
    }(MapFieldValuesOperator));
    MapOutlet.MapFieldValuesCombinator = MapFieldValuesCombinator;

    var ReduceFieldsOperator = (function (_super) {
        __extends(ReduceFieldsOperator, _super);
        function ReduceFieldsOperator() {
            var _this = _super.call(this) || this;
            _this._state = new BTree();
            return _this;
        }
        ReduceFieldsOperator.prototype.get = function () {
            return this._state.reduced(this.identity(), this.accumulate.bind(this), this.combine.bind(this));
        };
        ReduceFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._state.set(key, value);
                    }
                    else {
                        this._state.delete(key);
                    }
                }
            }
            else if (effect === 1) {
                this._state.delete(key);
            }
        };
        return ReduceFieldsOperator;
    }(AbstractMapInletOutlet));

    var ReduceFieldsCombinator = (function (_super) {
        __extends(ReduceFieldsCombinator, _super);
        function ReduceFieldsCombinator(identity, accumulator, combiner) {
            var _this = _super.call(this) || this;
            _this._identity = identity;
            _this._accumulator = accumulator;
            _this._combiner = combiner;
            return _this;
        }
        ReduceFieldsCombinator.prototype.get = function () {
            return this._state.reduced(this._identity, this._accumulator, this._combiner);
        };
        ReduceFieldsCombinator.prototype.identity = function () {
            return this._identity;
        };
        ReduceFieldsCombinator.prototype.accumulate = function (result, value) {
            return this._accumulator(result, value);
        };
        ReduceFieldsCombinator.prototype.combine = function (result, value) {
            return this._combiner(result, value);
        };
        return ReduceFieldsCombinator;
    }(ReduceFieldsOperator));
    MapOutlet.ReduceFieldsCombinator = ReduceFieldsCombinator;

    var WatchValueOperator = (function (_super) {
        __extends(WatchValueOperator, _super);
        function WatchValueOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WatchValueOperator.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                this.evaluate(this._input.get());
            }
        };
        return WatchValueOperator;
    }(AbstractInlet));

    var WatchValueCombinator = (function (_super) {
        __extends(WatchValueCombinator, _super);
        function WatchValueCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        WatchValueCombinator.prototype.evaluate = function (value) {
            if (value !== void 0) {
                return this._func(value);
            }
        };
        return WatchValueCombinator;
    }(WatchValueOperator));
    Outlet.WatchValueCombinator = WatchValueCombinator;

    var WatchFieldsOperator = (function (_super) {
        __extends(WatchFieldsOperator, _super);
        function WatchFieldsOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WatchFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    this.evaluate(key, this._input.get(key));
                }
                else {
                    this.evaluate(key, void 0);
                }
            }
            else if (effect === 1) {
                this.evaluate(key, void 0);
            }
        };
        return WatchFieldsOperator;
    }(AbstractMapInlet));

    var WatchFieldsCombinator = (function (_super) {
        __extends(WatchFieldsCombinator, _super);
        function WatchFieldsCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        WatchFieldsCombinator.prototype.evaluate = function (key, value) {
            if (value !== void 0) {
                return this._func(key, value);
            }
        };
        return WatchFieldsCombinator;
    }(WatchFieldsOperator));
    MapOutlet.WatchFieldsCombinator = WatchFieldsCombinator;

    var StreamletInlet = (function (_super) {
        __extends(StreamletInlet, _super);
        function StreamletInlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletInlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletInlet.prototype.willInvalidateOutput = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateInlet) {
                streamlet.willInvalidateInlet(this);
            }
        };
        StreamletInlet.prototype.didInvalidateOutput = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateInlet) {
                streamlet.didInvalidateInlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletInlet.prototype.willReconcileOutput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileInlet) {
                streamlet.willReconcileInlet(this, version);
            }
        };
        StreamletInlet.prototype.didReconcileOutput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileInlet) {
                streamlet.didReconcileInlet(this, version);
            }
            else {
                streamlet.reconcile(version);
            }
        };
        return StreamletInlet;
    }(AbstractInlet));

    var StreamletOutlet = (function (_super) {
        __extends(StreamletOutlet, _super);
        function StreamletOutlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletOutlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletOutlet.prototype.get = function () {
            var streamlet = this._streamlet;
            if (streamlet.getOutput) {
                return streamlet.getOutput(this);
            }
            return void 0;
        };
        StreamletOutlet.prototype.willInvalidateInput = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateOutlet) {
                streamlet.willInvalidateOutlet(this);
            }
        };
        StreamletOutlet.prototype.didInvalidateInput = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateOutlet) {
                streamlet.didInvalidateOutlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletOutlet.prototype.willReconcileInput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileOutlet) {
                streamlet.willReconcileOutlet(this, version);
            }
        };
        StreamletOutlet.prototype.didReconcileInput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileOutlet) {
                streamlet.didReconcileOutlet(this, version);
            }
        };
        return StreamletOutlet;
    }(AbstractOutlet));

    var StreamletInoutlet = (function (_super) {
        __extends(StreamletInoutlet, _super);
        function StreamletInoutlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletInoutlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletInoutlet.prototype.get = function () {
            var streamlet = this._streamlet;
            if (streamlet.getOutput) {
                var output = streamlet.getOutput(this);
                if (output !== void 0) {
                    return output;
                }
            }
            if (this._input !== null) {
                return this._input.get();
            }
            return void 0;
        };
        StreamletInoutlet.prototype.willInvalidate = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateOutlet) {
                streamlet.willInvalidateOutlet(this);
            }
        };
        StreamletInoutlet.prototype.didInvalidate = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateOutlet) {
                streamlet.didInvalidateOutlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletInoutlet.prototype.willUpdate = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileOutlet) {
                streamlet.willReconcileOutlet(this, version);
            }
        };
        StreamletInoutlet.prototype.didUpdate = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileOutlet) {
                streamlet.didReconcileOutlet(this, version);
            }
        };
        return StreamletInoutlet;
    }(AbstractInoutlet));

    var InletDescriptor = (function () {
        function InletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return InletDescriptor;
    }());
    var OutletDescriptor = (function () {
        function OutletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return OutletDescriptor;
    }());
    var InoutletDescriptor = (function () {
        function InoutletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return InoutletDescriptor;
    }());
    var AbstractStreamlet = (function () {
        function AbstractStreamlet(scope) {
            if (scope === void 0) { scope = null; }
            this.scope = scope;
            this._version = -1;
        }
        AbstractStreamlet.prototype.streamletClass = function () {
            return this.__proto__;
        };
        AbstractStreamlet.prototype.streamletScope = function () {
            return this.scope;
        };
        AbstractStreamlet.prototype.setStreamletScope = function (scope) {
            this.scope = scope;
        };
        AbstractStreamlet.prototype.streamletContext = function () {
            if (this.context) {
                return this.context;
            }
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractStreamlet.prototype.setStreamletContext = function (context) {
            this.context = context;
        };
        AbstractStreamlet.prototype.inlet = function (key) {
            if (key === void 0) {
                return new StreamletInlet(this);
            }
            else {
                return AbstractStreamlet.reflectInletKey(key, this, this.streamletClass());
            }
        };
        AbstractStreamlet.prototype.bindInput = function (key, input) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.bindInput(input);
        };
        AbstractStreamlet.prototype.unbindInput = function (key) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.unbindInput();
        };
        AbstractStreamlet.prototype.outlet = function (key) {
            if (key === void 0) {
                return new StreamletOutlet(this);
            }
            else if (typeof key === "string") {
                return AbstractStreamlet.reflectOutletKey(key, this, this.streamletClass());
            }
            else {
                return key;
            }
        };
        AbstractStreamlet.prototype.inoutlet = function () {
            return new StreamletInoutlet(this);
        };
        AbstractStreamlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                this.onInvalidateOutlets();
                this.didInvalidate();
            }
        };
        AbstractStreamlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                this.onReconcileInlets(version);
                this.onReconcile(version);
                this.onReconcileOutlets(version);
                this.didReconcile(version);
            }
        };
        AbstractStreamlet.prototype.getInput = function (inlet, orElse) {
            if (typeof inlet === "string") {
                inlet = this.inlet(inlet);
            }
            var object;
            if (inlet !== null) {
                var input = inlet.input();
                if (input !== null) {
                    object = input.get();
                }
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractStreamlet.prototype.getOutput = function (outlet) {
            return void 0;
        };
        AbstractStreamlet.prototype.disconnectInputs = function () {
            AbstractStreamlet.disconnectInputs(this, this.streamletClass());
        };
        AbstractStreamlet.disconnectInputs = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_1 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_1];
                        if (inletDescriptor instanceof InletDescriptor) {
                            var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                            inlet.disconnectInputs();
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                            inoutlet.disconnectInputs();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.disconnectOutputs = function () {
            AbstractStreamlet.disconnectOutputs(this, this.streamletClass());
        };
        AbstractStreamlet.disconnectOutputs = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_2 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_2];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.disconnectOutputs();
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.disconnectOutputs();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.willInvalidateInlet = function (inlet) {
        };
        AbstractStreamlet.prototype.didInvalidateInlet = function (inlet) {
            this.invalidate();
        };
        AbstractStreamlet.prototype.willReconcileInlet = function (inlet, version) {
        };
        AbstractStreamlet.prototype.didReconcileInlet = function (inlet, version) {
            this.reconcile(version);
        };
        AbstractStreamlet.prototype.willInvalidateOutlet = function (outlet) {
        };
        AbstractStreamlet.prototype.didInvalidateOutlet = function (outlet) {
        };
        AbstractStreamlet.prototype.willReconcileOutlet = function (outlet, version) {
        };
        AbstractStreamlet.prototype.didReconcileOutlet = function (outlet, version) {
        };
        AbstractStreamlet.prototype.willInvalidate = function () {
        };
        AbstractStreamlet.prototype.onInvalidate = function () {
        };
        AbstractStreamlet.prototype.onInvalidateOutlets = function () {
            AbstractStreamlet.invalidateOutlets(this, this.streamletClass());
        };
        AbstractStreamlet.invalidateOutlets = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_3 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_3];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.invalidateInput();
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.invalidateInput();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.didInvalidate = function () {
        };
        AbstractStreamlet.prototype.willReconcile = function (version) {
        };
        AbstractStreamlet.prototype.onReconcileInlets = function (version) {
            AbstractStreamlet.reconcileInlets(version, this, this.streamletClass());
        };
        AbstractStreamlet.reconcileInlets = function (version, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_4 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_4];
                        if (inletDescriptor instanceof InletDescriptor) {
                            var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                            inlet.reconcileOutput(version);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                            inoutlet.reconcileOutput(version);
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.onReconcile = function (version) {
        };
        AbstractStreamlet.prototype.onReconcileOutlets = function (version) {
            AbstractStreamlet.reconcileOutlets(version, this, this.streamletClass());
        };
        AbstractStreamlet.reconcileOutlets = function (version, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_5 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_5];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.reconcileInput(version);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.reconcileInput(version);
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.didReconcile = function (version) {
        };
        AbstractStreamlet.reflectEachInlet = function (streamlet, streamletClass, callback, thisArg) {
            var index = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_6 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_6];
                        var inlet = void 0;
                        if (inletDescriptor instanceof InletDescriptor) {
                            inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            inlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        }
                        else {
                            inlet = null;
                        }
                        var result = callback.call(thisArg, inlet, inletDescriptor.name, index);
                        if (result !== void 0) {
                            return result;
                        }
                        index += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return void 0;
        };
        AbstractStreamlet.reflectEachOutlet = function (streamlet, streamletClass, callback, thisArg) {
            var index = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_7 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_7];
                        var outlet = void 0;
                        if (outletDescriptor instanceof OutletDescriptor) {
                            outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            outlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        }
                        else {
                            outlet = null;
                        }
                        var result = callback.call(thisArg, outlet, outletDescriptor.name, index);
                        if (result !== void 0) {
                            return result;
                        }
                        index += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return void 0;
        };
        AbstractStreamlet.reflectInletCount = function (streamletClass) {
            var count = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var _ in streamletClass._inlets) {
                        count += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return count;
        };
        AbstractStreamlet.reflectOutletCount = function (streamletClass) {
            var count = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var _ in streamletClass._outlets) {
                        count += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return count;
        };
        AbstractStreamlet.reflectInletIndex = function (index, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_8 in streamletClass._inlets) {
                        if (index === 0) {
                            var inletDescriptor = streamletClass._inlets[name_8];
                            if (inletDescriptor instanceof InletDescriptor) {
                                return [inletDescriptor.name, AbstractStreamlet.reflectInletField(streamlet, inletDescriptor)];
                            }
                            else if (inletDescriptor instanceof InoutletDescriptor) {
                                return [inletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor)];
                            }
                            else {
                                return null;
                            }
                        }
                        index -= 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectOutletIndex = function (index, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_9 in streamletClass._outlets) {
                        if (index === 0) {
                            var outletDescriptor = streamletClass._outlets[name_9];
                            if (outletDescriptor instanceof OutletDescriptor) {
                                return [outletDescriptor.name, AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor)];
                            }
                            else if (outletDescriptor instanceof InoutletDescriptor) {
                                return [outletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor)];
                            }
                            else {
                                return null;
                            }
                        }
                        index -= 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectInletKey = function (key, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    var inletDescriptor = streamletClass._inlets[key];
                    if (inletDescriptor !== void 0) {
                        if (inletDescriptor instanceof InletDescriptor) {
                            return AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            return AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        }
                        else {
                            return null;
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectOutletKey = function (key, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    var outletDescriptor = streamletClass._outlets[key];
                    if (outletDescriptor !== void 0) {
                        if (outletDescriptor instanceof OutletDescriptor) {
                            return AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            return AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        }
                        else {
                            return null;
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectInletField = function (streamlet, inletDescriptor) {
            if (inletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueInletField(streamlet, inletDescriptor.key);
            }
            else if (inletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapInletField(streamlet, inletDescriptor.key);
            }
            else {
                throw new TypeError(inletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueInletField = function (streamlet, key) {
            var inlet = streamlet[key];
            if (!inlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    inlet = streamlet.inlet();
                }
                else {
                    inlet = new StreamletInlet(streamlet);
                }
                streamlet[key] = inlet;
            }
            return inlet;
        };
        AbstractStreamlet.reflectMapInletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.reflectOutletField = function (streamlet, outletDescriptor) {
            if (outletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueOutletField(streamlet, outletDescriptor.key);
            }
            else if (outletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapOutletField(streamlet, outletDescriptor.key);
            }
            else {
                throw new TypeError(outletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueOutletField = function (streamlet, key) {
            var outlet = streamlet[key];
            if (!outlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    outlet = streamlet.outlet();
                }
                else {
                    outlet = new StreamletOutlet(streamlet);
                }
                streamlet[key] = outlet;
            }
            return outlet;
        };
        AbstractStreamlet.reflectMapOutletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.reflectInoutletField = function (streamlet, inoutletDescriptor) {
            if (inoutletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueInoutletField(streamlet, inoutletDescriptor.key);
            }
            else if (inoutletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapInoutletField(streamlet, inoutletDescriptor.key);
            }
            else {
                throw new TypeError(inoutletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueInoutletField = function (streamlet, key) {
            var inoutlet = streamlet[key];
            if (!inoutlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    inoutlet = streamlet.inoutlet();
                }
                else {
                    inoutlet = new StreamletInoutlet(streamlet);
                }
                streamlet[key] = inoutlet;
            }
            return inoutlet;
        };
        AbstractStreamlet.reflectMapInoutletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.init = function (streamletClass) {
            if (!streamletClass.hasOwnProperty("_inlets")) {
                streamletClass._inlets = {};
            }
            if (!streamletClass.hasOwnProperty("_outlets")) {
                streamletClass._outlets = {};
            }
            if (!streamletClass.hasOwnProperty("_inoutlets")) {
                streamletClass._inoutlets = {};
            }
        };
        AbstractStreamlet.decorateInlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var inletDescriptor = new InletDescriptor(key, name, type);
            target._inlets[name] = inletDescriptor;
        };
        AbstractStreamlet.decorateOutlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var outletDescriptor = new OutletDescriptor(key, name, type);
            target._outlets[name] = outletDescriptor;
        };
        AbstractStreamlet.decorateInoutlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var inoutletDescriptor = new InoutletDescriptor(key, name, type);
            target._inlets[name] = inoutletDescriptor;
            target._outlets[name] = inoutletDescriptor;
            target._inoutlets[name] = inoutletDescriptor;
        };
        return AbstractStreamlet;
    }());

    function In(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateInlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateInlet({}, target, key);
        }
    }

    function Out(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateOutlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateOutlet({}, target, key);
        }
    }

    function Inout(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateInoutlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateInoutlet({}, target, key);
        }
    }

    var RecordOutlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return MapOutlet.is(outlet) && StreamletScope.is(outlet);
            }
            return false;
        },
        Streamlet: void 0,
        Model: void 0,
        Scope: void 0,
        Dataflow: void 0,
    };

    var AbstractRecordOutlet = (function (_super) {
        __extends(AbstractRecordOutlet, _super);
        function AbstractRecordOutlet() {
            var _this = _super.call(this) || this;
            _this._effects = new BTree();
            _this._outlets = new BTree();
            _this._outputs = null;
            _this._version = -1;
            return _this;
        }
        AbstractRecordOutlet.prototype.streamletScope = function () {
            return null;
        };
        AbstractRecordOutlet.prototype.streamletContext = function () {
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractRecordOutlet.prototype.hasOwn = function (key) {
            return this.has(key);
        };
        AbstractRecordOutlet.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                return _super.prototype.get.call(this, key);
            }
        };
        AbstractRecordOutlet.prototype.outlet = function (key) {
            if (typeof key === "string") {
                key = Text$1.from(key);
            }
            if (!this.hasOwn(key)) {
                var scope = this.streamletScope();
                if (RecordOutlet.is(scope) && scope.has(key)) {
                    return scope.outlet(key);
                }
            }
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
                this.invalidateInputKey(key, 0);
            }
            return outlet;
        };
        AbstractRecordOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        AbstractRecordOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractRecordOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractRecordOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var oldOutputs = this._outputs;
            if (oldOutputs !== null) {
                this._outputs = null;
                for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                    oldOutputs[i].unbindInput();
                }
            }
        };
        AbstractRecordOutlet.prototype.disconnectOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
            this.forEach(function (member) {
                if (member instanceof Field) {
                    member = member.toValue();
                }
                if (member instanceof AbstractRecordOutlet) {
                    member.disconnectOutputs();
                }
                else if (member instanceof RecordOutlet.Streamlet) {
                    member.disconnectOutputs();
                }
                else if (RecordOutlet.is(member)) {
                    member.disconnectOutputs();
                }
            }, this);
        };
        AbstractRecordOutlet.prototype.disconnectInputs = function () {
        };
        AbstractRecordOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractRecordOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidateInput();
            }
        };
        AbstractRecordOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileInputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    this.onReconcileInputKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, effect, version);
                }
            }
        };
        AbstractRecordOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._effects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.forEach(function (member) {
                    if (member instanceof Field) {
                        member = member.toValue();
                    }
                    if (member instanceof AbstractRecordOutlet) {
                        member.reconcileInput(version);
                    }
                    else if (member instanceof RecordOutlet.Streamlet) {
                        member.reconcile(version);
                    }
                    else if (RecordOutlet.is(member)) {
                        member.reconcileInput(version);
                    }
                }, this);
                this.didReconcileInput(version);
            }
        };
        AbstractRecordOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.memoize = function () {
            var combinator = new MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractRecordOutlet.prototype.filter = function (func) {
            if (typeof func !== "function") {
                return _super.prototype.filter.call(this, func);
            }
            else {
                var combinator = new FilterFieldsCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractRecordOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractRecordOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractRecordOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractRecordOutlet;
    }(Record));

    var RecordStreamlet = (function (_super) {
        __extends(RecordStreamlet, _super);
        function RecordStreamlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordStreamlet.prototype.isConstant = function () {
            return false;
        };
        RecordStreamlet.prototype.streamletClass = function () {
            return this.__proto__;
        };
        RecordStreamlet.prototype.compile = function () {
            AbstractStreamlet.reflectEachInlet(this, this.streamletClass(), function (inlet, name) {
                if (inlet.input() === null) {
                    this.compileInlet(inlet, name);
                }
            }, this);
        };
        RecordStreamlet.prototype.compileInlet = function (inlet, name) {
            var scope = this.streamletScope();
            if (scope !== null) {
                var input = scope.outlet(name);
                if (input !== null) {
                    inlet.bindInput(input);
                }
            }
        };
        return RecordStreamlet;
    }(Record));
    RecordOutlet.Streamlet = RecordStreamlet;

    var AbstractRecordStreamlet = (function (_super) {
        __extends(AbstractRecordStreamlet, _super);
        function AbstractRecordStreamlet(scope) {
            if (scope === void 0) { scope = null; }
            var _this = _super.call(this) || this;
            _this.scope = scope;
            _this.context = null;
            _this._version = -1;
            return _this;
        }
        AbstractRecordStreamlet.prototype.streamletScope = function () {
            return this.scope;
        };
        AbstractRecordStreamlet.prototype.setStreamletScope = function (scope) {
            this.scope = scope;
        };
        AbstractRecordStreamlet.prototype.streamletContext = function () {
            if (this.context) {
                return this.context;
            }
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractRecordStreamlet.prototype.setStreamletContext = function (context) {
            this.context = context;
        };
        AbstractRecordStreamlet.prototype.isEmpty = function () {
            return this.length !== 0;
        };
        Object.defineProperty(AbstractRecordStreamlet.prototype, "length", {
            get: function () {
                return AbstractStreamlet.reflectOutletCount(this.streamletClass());
            },
            enumerable: true,
            configurable: true
        });
        AbstractRecordStreamlet.prototype.has = function (key) {
            if (key instanceof Text$1) {
                key = key.value;
            }
            else if (typeof key !== "string") {
                return false;
            }
            var outlet = this.outlet(key);
            return outlet !== null;
        };
        AbstractRecordStreamlet.prototype.get = function (key) {
            if (key instanceof Text$1) {
                key = key.value;
            }
            else if (typeof key !== "string") {
                return Value.absent();
            }
            var outlet = this.outlet(key);
            if (outlet !== null) {
                var output = outlet.get();
                if (output !== void 0) {
                    return output;
                }
            }
            return Value.absent();
        };
        AbstractRecordStreamlet.prototype.getAttr = function (key) {
            return Value.absent();
        };
        AbstractRecordStreamlet.prototype.getSlot = function (key) {
            return this.get(key);
        };
        AbstractRecordStreamlet.prototype.getField = function (key) {
            if (typeof key === "string") {
                key = Text$1.from(key);
            }
            else if (!(key instanceof Text$1)) {
                return void 0;
            }
            var value = this.get(key);
            if (value.isDefined()) {
                return Slot.of(key, value);
            }
            return void 0;
        };
        AbstractRecordStreamlet.prototype.getItem = function (index) {
            if (index instanceof Num) {
                index = index.value;
            }
            var entry = AbstractStreamlet.reflectOutletIndex(index, this, this.streamletClass());
            if (entry !== null) {
                var name_1 = entry[0];
                var output = entry[1].get();
                if (output === void 0) {
                    output = Value.extant();
                }
                return Slot.of(name_1, output);
            }
            return Item.absent();
        };
        AbstractRecordStreamlet.prototype.set = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setAttr = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setSlot = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setItem = function (index, item) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.push = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.splice = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.delete = function (key) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.clear = function () {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.forEach = function (callback, thisArg) {
            return AbstractStreamlet.reflectEachOutlet(this, this.streamletClass(), function (outlet, name, index) {
                var output = outlet.get();
                if (output !== void 0) {
                    var result = callback.call(thisArg, output, index);
                    if (result !== void 0) {
                        return result;
                    }
                }
            }, this);
        };
        AbstractRecordStreamlet.prototype.inlet = function (key) {
            if (key === void 0) {
                return new StreamletInlet(this);
            }
            else {
                return AbstractStreamlet.reflectInletKey(key, this, this.streamletClass());
            }
        };
        AbstractRecordStreamlet.prototype.bindInput = function (key, input) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.bindInput(input);
        };
        AbstractRecordStreamlet.prototype.unbindInput = function (key) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.unbindInput();
        };
        AbstractRecordStreamlet.prototype.outlet = function (key) {
            if (key === void 0) {
                return new StreamletOutlet(this);
            }
            else if (typeof key === "string") {
                return AbstractStreamlet.reflectOutletKey(key, this, this.streamletClass());
            }
            else {
                return key;
            }
        };
        AbstractRecordStreamlet.prototype.inoutlet = function () {
            return new StreamletInoutlet(this);
        };
        AbstractRecordStreamlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                this.onInvalidateOutlets();
                this.didInvalidate();
            }
        };
        AbstractRecordStreamlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                this.onReconcileInlets(version);
                this.onReconcile(version);
                this.onReconcileOutlets(version);
                this.didReconcile(version);
            }
        };
        AbstractRecordStreamlet.prototype.getInput = function (inlet, orElse) {
            if (typeof inlet === "string") {
                inlet = this.inlet(inlet);
            }
            var object;
            if (inlet !== null) {
                var input = inlet.input();
                if (input !== null) {
                    object = input.get();
                }
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.castInput = function (inlet, form, orElse) {
            var input = this.getInput(inlet);
            var object;
            if (input !== void 0) {
                object = form.cast(input);
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.coerceInput = function (inlet, form, orElse) {
            var input = this.getInput(inlet);
            var object;
            if (input !== void 0) {
                object = form.cast(input);
            }
            if (object === void 0) {
                object = form.unit();
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.getOutput = function (outlet) {
            return void 0;
        };
        AbstractRecordStreamlet.prototype.disconnectInputs = function () {
            AbstractStreamlet.disconnectInputs(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.disconnectOutputs = function () {
            AbstractStreamlet.disconnectOutputs(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.willInvalidateInlet = function (inlet) {
        };
        AbstractRecordStreamlet.prototype.didInvalidateInlet = function (inlet) {
            this.invalidate();
        };
        AbstractRecordStreamlet.prototype.willReconcileInlet = function (inlet, version) {
        };
        AbstractRecordStreamlet.prototype.didReconcileInlet = function (inlet, version) {
            this.reconcile(version);
        };
        AbstractRecordStreamlet.prototype.willInvalidateOutlet = function (outlet) {
        };
        AbstractRecordStreamlet.prototype.didInvalidateOutlet = function (outlet) {
        };
        AbstractRecordStreamlet.prototype.willReconcileOutlet = function (outlet, version) {
        };
        AbstractRecordStreamlet.prototype.didReconcileOutlet = function (outlet, version) {
        };
        AbstractRecordStreamlet.prototype.willInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.onInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.didInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.onInvalidateOutlets = function () {
            AbstractStreamlet.invalidateOutlets(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.willReconcile = function (version) {
        };
        AbstractRecordStreamlet.prototype.onReconcileInlets = function (version) {
            AbstractStreamlet.reconcileInlets(version, this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.onReconcile = function (version) {
        };
        AbstractRecordStreamlet.prototype.onReconcileOutlets = function (version) {
            AbstractStreamlet.reconcileOutlets(version, this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.didReconcile = function (version) {
        };
        return AbstractRecordStreamlet;
    }(RecordStreamlet));

    var RecordFieldUpdater = (function (_super) {
        __extends(RecordFieldUpdater, _super);
        function RecordFieldUpdater(record, key) {
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._key = key;
            return _this;
        }
        RecordFieldUpdater.prototype.onInvalidateOutput = function () {
            if (RecordOutlet.is(this._record)) {
                this._record.invalidateInputKey(this._key, 0);
            }
        };
        RecordFieldUpdater.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                var value = this._input.get();
                if (value !== void 0) {
                    this._record.set(this._key, value);
                }
                else {
                    this._record.delete(this._key);
                }
            }
        };
        return RecordFieldUpdater;
    }(AbstractInlet));

    var Transmuter = (function () {
        function Transmuter() {
        }
        Transmuter.system = function () {
            return null;
        };
        return Transmuter;
    }());

    var RecordModel = (function (_super) {
        __extends(RecordModel, _super);
        function RecordModel(state) {
            if (state === void 0) { state = Record.create(); }
            var _this = _super.call(this) || this;
            _this._state = state;
            _this._fieldUpdaters = new BTree();
            return _this;
        }
        RecordModel.prototype.isEmpty = function () {
            return this._state.isEmpty();
        };
        RecordModel.prototype.isArray = function () {
            return this._state.isArray();
        };
        RecordModel.prototype.isObject = function () {
            return this._state.isObject();
        };
        Object.defineProperty(RecordModel.prototype, "length", {
            get: function () {
                return this._state.length;
            },
            enumerable: true,
            configurable: true
        });
        RecordModel.prototype.fieldCount = function () {
            return this._state.fieldCount();
        };
        RecordModel.prototype.valueCount = function () {
            return this._state.valueCount();
        };
        RecordModel.prototype.has = function (key) {
            if (this._state.has(key)) {
                return true;
            }
            else {
                var scope = this.streamletScope();
                return scope instanceof Record ? scope.has(key) : false;
            }
        };
        RecordModel.prototype.hasOwn = function (key) {
            return this._state.has(key);
        };
        RecordModel.prototype.indexOf = function (item, index) {
            return this._state.indexOf(item, index);
        };
        RecordModel.prototype.lastIndexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            return this._state.lastIndexOf(item, index);
        };
        RecordModel.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                key = Value.fromAny(key);
                var value = this._state.get(key);
                if (!value.isDefined()) {
                    var scope = this.streamletScope();
                    if (scope instanceof Record) {
                        value = scope.get(key);
                    }
                }
                return value;
            }
        };
        RecordModel.prototype.getAttr = function (key) {
            key = Text$1.fromAny(key);
            var value = this._state.getAttr(key);
            if (!value.isDefined()) {
                var scope = this.streamletScope();
                if (scope instanceof Record) {
                    value = scope.getAttr(key);
                }
            }
            return value;
        };
        RecordModel.prototype.getSlot = function (key) {
            key = Value.fromAny(key);
            var value = this._state.getSlot(key);
            if (!value.isDefined()) {
                var scope = this.streamletScope();
                if (scope instanceof Record) {
                    value = scope.getSlot(key);
                }
            }
            return value;
        };
        RecordModel.prototype.getField = function (key) {
            key = Value.fromAny(key);
            var field = this._state.getField(key);
            if (field === void 0) {
                var scope = this.streamletScope();
                if (scope instanceof Record) {
                    field = scope.getField(key);
                }
            }
            return field;
        };
        RecordModel.prototype.getItem = function (index) {
            return this._state.getItem(index);
        };
        RecordModel.prototype.bindValue = function (key, expr) {
            var fieldUpdater = new RecordFieldUpdater(this, key);
            var valueInput = RecordOutlet.Dataflow.compile(expr, this);
            fieldUpdater.bindInput(valueInput);
            this._fieldUpdaters = this._fieldUpdaters.updated(key, fieldUpdater);
        };
        RecordModel.prototype.set = function (key, newValue) {
            key = Value.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof Record && scope.has(key)) {
                    scope.set(key, newValue);
                }
                else {
                    this._state.set(key, newValue);
                }
            }
            else {
                this._state.set(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setAttr = function (key, newValue) {
            key = Text$1.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof Record && scope.has(key)) {
                    scope.setAttr(key, newValue);
                }
                else {
                    this._state.setAttr(key, newValue);
                }
            }
            else {
                this._state.setAttr(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setSlot = function (key, newValue) {
            key = Value.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof Record && scope.has(key)) {
                    scope.setSlot(key, newValue);
                }
                else {
                    this._state.setSlot(key, newValue);
                }
            }
            else {
                this._state.setSlot(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setItem = function (index, newItem) {
            var oldItem = this._state.getItem(index);
            newItem = Item.fromAny(newItem);
            this._state.setItem(index, newItem);
            if (oldItem instanceof Field && newItem instanceof Field) {
                if (oldItem.key.equals(newItem.key)) {
                    this.invalidateInputKey(oldItem.key, 0);
                }
                else {
                    this.invalidateInputKey(oldItem.key, 1);
                    this.invalidateInputKey(newItem.key, 0);
                }
            }
            else if (oldItem instanceof Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
            else if (newItem instanceof Field) {
                this.invalidateInputKey(newItem.key, 0);
            }
            else {
                this.invalidateInput();
            }
            return this;
        };
        RecordModel.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var i = this._state.length;
            var n = this._state.push.apply(this._state, arguments);
            while (i < n) {
                var newItem = this._state.get(i);
                if (newItem instanceof Field) {
                    this.invalidateInputKey(newItem.key, 0);
                }
                i += 1;
            }
            return n;
        };
        RecordModel.prototype.splice = function (start, deleteCount) {
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var n = this._state.length;
            if (start < 0) {
                start = n + start;
            }
            start = Math.max(0, start);
            deleteCount = Math.max(0, deleteCount);
            var deleted = this._state.splice.apply(this._state, arguments);
            for (var i = 0; i < deleted.length; i += 1) {
                var oldItem = deleted[i];
                if (oldItem instanceof Field) {
                    this.invalidateInputKey(oldItem.key, 1);
                }
            }
            for (var i = start; i < start + newItems.length; i += 1) {
                var newItem = this._state.get(i);
                if (newItem instanceof Field) {
                    this.invalidateInputKey(newItem.key, 0);
                }
            }
            return deleted;
        };
        RecordModel.prototype.delete = function (key) {
            var oldItem = this._state.delete(key);
            if (oldItem instanceof Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
            return oldItem;
        };
        RecordModel.prototype.clear = function () {
            var oldState = this._state.branch();
            this._state.clear();
            oldState.forEach(function (oldItem) {
                if (oldItem instanceof Field) {
                    this.invalidateInputKey(oldItem.key, 1);
                }
            }, this);
        };
        RecordModel.prototype.forEach = function (callback, thisArg) {
            return this._state.forEach(callback, thisArg);
        };
        RecordModel.prototype.keyIterator = function () {
            throw new Error();
        };
        RecordModel.prototype.disconnectInputs = function () {
            var fieldUpdaters = this._fieldUpdaters;
            if (!fieldUpdaters.isEmpty()) {
                this._fieldUpdaters = new BTree();
                fieldUpdaters.forEach(function (key, inlet) {
                    inlet.disconnectInputs();
                }, this);
            }
        };
        RecordModel.prototype.memoize = function () {
            return this;
        };
        RecordModel.prototype.materialize = function (record) {
            record.forEach(function (item) {
                this.materializeItem(item);
            }, this);
        };
        RecordModel.prototype.materializeItem = function (item) {
            if (item instanceof Field) {
                this.materializeField(item);
            }
            else {
                this.materializeValue(item);
            }
        };
        RecordModel.prototype.materializeField = function (field) {
            var value = field.value;
            if (value instanceof RecordStreamlet) {
                value.setStreamletScope(this);
                this._state.push(field);
            }
            else if (value instanceof Record) {
                var child = new RecordOutlet.Scope(this);
                child.materialize(value);
                this._state.push(field.updatedValue(child));
            }
            else {
                this._state.push(field);
            }
        };
        RecordModel.prototype.materializeValue = function (value) {
            if (value instanceof RecordStreamlet) {
                value.setStreamletScope(this);
                this._state.push(value);
            }
            else if (value instanceof Record) {
                var child = new RecordOutlet.Scope(this);
                child.materialize(value);
                this._state.push(child);
            }
            else {
                this._state.push(value);
            }
        };
        RecordModel.prototype.compile = function (record) {
            record.forEach(function (item, index) {
                this.compileItem(item, index);
            }, this);
        };
        RecordModel.prototype.compileItem = function (item, index) {
            if (item instanceof Field) {
                this.compileField(item, index);
            }
            else {
                this.compileValue(item, index);
            }
        };
        RecordModel.prototype.compileField = function (field, index) {
            var key = field.key;
            var value = field.value;
            if (!key.isConstant()) ;
            else if (!value.isConstant()) {
                if (value instanceof RecordStreamlet) {
                    value.compile();
                    this.invalidateInputKey(key, 0);
                }
                else if (value instanceof Record) {
                    this._state.getItem(index).toValue().compile(value);
                    this.invalidateInputKey(key, 0);
                }
                else {
                    field.setValue(Value.extant());
                    this.bindValue(key, value);
                }
            }
            else {
                this.invalidateInputKey(key, 0);
            }
        };
        RecordModel.prototype.compileValue = function (value, index) {
            if (value instanceof RecordStreamlet) {
                value.compile();
            }
            else if (value instanceof Record) {
                this._state.getItem(index).compile(value);
            }
            else if (!value.isConstant()) ;
        };
        RecordModel.prototype.transmute = function (transmuter) {
            if (transmuter === void 0) { transmuter = Transmuter.system(); }
            this.forEach(function (oldItem, index) {
                var newItem = this.transmuteItem(oldItem, transmuter);
                if (oldItem !== newItem) {
                    this.setItem(index, newItem);
                }
            }, this);
        };
        RecordModel.prototype.transmuteItem = function (item, transmuter) {
            if (item instanceof Field) {
                return this.transmuteField(item, transmuter);
            }
            else {
                return this.transmuteValue(item, transmuter);
            }
        };
        RecordModel.prototype.transmuteField = function (field, transmuter) {
            var oldValue = field.value;
            var newValue = this.transmuteValue(oldValue, transmuter);
            if (oldValue !== newValue) {
                return field.updatedValue(newValue);
            }
            else {
                return field;
            }
        };
        RecordModel.prototype.transmuteValue = function (oldValue, transmuter) {
            if (oldValue instanceof RecordModel) {
                var newValue = this.transmuteModel(oldValue);
                if (oldValue === newValue && transmuter) {
                    newValue = transmuter.transmute(oldValue);
                }
                return newValue;
            }
            else {
                return oldValue;
            }
        };
        RecordModel.prototype.transmuteModel = function (model) {
            var scope = this.streamletScope();
            if (scope instanceof RecordModel) {
                return scope.transmuteModel(model);
            }
            else {
                return model;
            }
        };
        RecordModel.from = function (record) {
            var model = new RecordModel();
            model.materialize(record);
            model.compile(record);
            return model;
        };
        RecordModel.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return RecordModel.from(Record.of.apply(void 0, arguments));
        };
        RecordModel.globalScope = function () {
            var model = new RecordModel();
            model.materializeField(Slot.of("math", MathModule.scope().branch()));
            return model;
        };
        return RecordModel;
    }(AbstractRecordOutlet));
    RecordOutlet.Model = RecordModel;

    var RecordScope = (function (_super) {
        __extends(RecordScope, _super);
        function RecordScope(scope, state) {
            var _this = _super.call(this, state) || this;
            _this.scope = scope;
            return _this;
        }
        RecordScope.prototype.streamletScope = function () {
            return this.scope;
        };
        RecordScope.from = function (record) {
            var scope = new RecordScope(RecordScope.globalScope());
            scope.materialize(record);
            scope.compile(record);
            return scope;
        };
        RecordScope.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return RecordScope.from(Record.of.apply(void 0, arguments));
        };
        return RecordScope;
    }(RecordModel));
    RecordOutlet.Scope = RecordScope;

    var GetOutlet = (function (_super) {
        __extends(GetOutlet, _super);
        function GetOutlet() {
            var _this = _super.call(this) || this;
            _this._keyInlet = new OutletInlet(_this);
            _this._mapInlet = new OutletMapInlet(_this);
            return _this;
        }
        GetOutlet.prototype.keyInlet = function () {
            return this._keyInlet;
        };
        GetOutlet.prototype.mapInlet = function () {
            return this._mapInlet;
        };
        GetOutlet.prototype.get = function () {
            var keyInput = this._keyInlet.input();
            if (keyInput !== null) {
                var key = keyInput.get();
                if (key !== void 0) {
                    var mapInput = this._mapInlet.input();
                    if (mapInput !== null) {
                        var value = mapInput.get(key);
                        if (value !== void 0) {
                            return value;
                        }
                    }
                }
            }
            return Value.absent();
        };
        return GetOutlet;
    }(AbstractOutlet));

    var BinaryOutlet = (function (_super) {
        __extends(BinaryOutlet, _super);
        function BinaryOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new OutletInlet(_this);
            _this._operand2Inlet = new OutletInlet(_this);
            return _this;
        }
        BinaryOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        BinaryOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        BinaryOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var operand2Input = this._operand2Inlet.input();
            if (operand1Input !== null && operand2Input !== null) {
                var argument1 = operand1Input.get();
                var argument2 = operand2Input.get();
                if (argument1 !== void 0 && argument2 !== void 0) {
                    var result = this.evaluate(argument1, argument2);
                    return result.toValue();
                }
            }
            return Value.absent();
        };
        return BinaryOutlet;
    }(AbstractOutlet));

    var UnaryOutlet = (function (_super) {
        __extends(UnaryOutlet, _super);
        function UnaryOutlet() {
            var _this = _super.call(this) || this;
            _this._operandInlet = new OutletInlet(_this);
            return _this;
        }
        UnaryOutlet.prototype.operandInlet = function () {
            return this._operandInlet;
        };
        UnaryOutlet.prototype.get = function () {
            var operandInput = this._operandInlet.input();
            if (operandInput !== null) {
                var argument = operandInput.get();
                if (argument !== void 0) {
                    var result = this.evaluate(argument);
                    return result.toValue();
                }
            }
            return Value.absent();
        };
        return UnaryOutlet;
    }(AbstractOutlet));

    var ConditionalOutlet = (function (_super) {
        __extends(ConditionalOutlet, _super);
        function ConditionalOutlet() {
            var _this = _super.call(this) || this;
            _this._ifInlet = new OutletInlet(_this);
            _this._thenInlet = new OutletInlet(_this);
            _this._elseInlet = new OutletInlet(_this);
            return _this;
        }
        ConditionalOutlet.prototype.ifInlet = function () {
            return this._ifInlet;
        };
        ConditionalOutlet.prototype.thenInlet = function () {
            return this._thenInlet;
        };
        ConditionalOutlet.prototype.elseInlet = function () {
            return this._elseInlet;
        };
        ConditionalOutlet.prototype.get = function () {
            var ifInput = this._ifInlet.input();
            if (ifInput !== null) {
                var ifTerm = ifInput.get();
                if (ifTerm !== void 0) {
                    if (ifTerm.booleanValue(false)) {
                        var thenInput = this._thenInlet.input();
                        if (thenInput !== null) {
                            var thenTerm = thenInput.get();
                            if (thenTerm !== void 0) {
                                return thenTerm;
                            }
                        }
                    }
                    else {
                        var elseInput = this._elseInlet.input();
                        if (elseInput !== null) {
                            var elseTerm = elseInput.get();
                            if (elseTerm !== void 0) {
                                return elseTerm;
                            }
                        }
                    }
                }
            }
            return Value.absent();
        };
        return ConditionalOutlet;
    }(AbstractOutlet));

    var OrOutlet = (function (_super) {
        __extends(OrOutlet, _super);
        function OrOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new OutletInlet(_this);
            _this._operand2Inlet = new OutletInlet(_this);
            return _this;
        }
        OrOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        OrOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        OrOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var argument1 = operand1Input !== null ? operand1Input.get() : void 0;
            if (argument1 !== void 0 && argument1.booleanValue(false)) {
                return argument1;
            }
            var operand2Input = this._operand2Inlet.input();
            var argument2 = operand2Input !== null ? operand2Input.get() : void 0;
            if (argument2 !== void 0) {
                return argument2;
            }
            return Value.absent();
        };
        return OrOutlet;
    }(AbstractOutlet));

    var AndOutlet = (function (_super) {
        __extends(AndOutlet, _super);
        function AndOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new OutletInlet(_this);
            _this._operand2Inlet = new OutletInlet(_this);
            return _this;
        }
        AndOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        AndOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        AndOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var argument1 = operand1Input !== null ? operand1Input.get() : void 0;
            if (argument1 !== void 0) {
                if (argument1.booleanValue(false)) {
                    var operand2Input = this._operand2Inlet.input();
                    var argument2 = operand2Input !== null ? operand2Input.get() : void 0;
                    if (argument2 !== void 0) {
                        return argument2;
                    }
                }
                return argument1;
            }
            return Value.absent();
        };
        return AndOutlet;
    }(AbstractOutlet));

    var BitwiseOrOutlet = (function (_super) {
        __extends(BitwiseOrOutlet, _super);
        function BitwiseOrOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseOrOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseOr(argument2);
        };
        return BitwiseOrOutlet;
    }(BinaryOutlet));

    var BitwiseXorOutlet = (function (_super) {
        __extends(BitwiseXorOutlet, _super);
        function BitwiseXorOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseXorOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseXor(argument2);
        };
        return BitwiseXorOutlet;
    }(BinaryOutlet));

    var BitwiseAndOutlet = (function (_super) {
        __extends(BitwiseAndOutlet, _super);
        function BitwiseAndOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseAndOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseAnd(argument2);
        };
        return BitwiseAndOutlet;
    }(BinaryOutlet));

    var LtOutlet = (function (_super) {
        __extends(LtOutlet, _super);
        function LtOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LtOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.lt(argument2);
        };
        return LtOutlet;
    }(BinaryOutlet));

    var LeOutlet = (function (_super) {
        __extends(LeOutlet, _super);
        function LeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.le(argument2);
        };
        return LeOutlet;
    }(BinaryOutlet));

    var EqOutlet = (function (_super) {
        __extends(EqOutlet, _super);
        function EqOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EqOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.eq(argument2);
        };
        return EqOutlet;
    }(BinaryOutlet));

    var NeOutlet = (function (_super) {
        __extends(NeOutlet, _super);
        function NeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.ne(argument2);
        };
        return NeOutlet;
    }(BinaryOutlet));

    var GeOutlet = (function (_super) {
        __extends(GeOutlet, _super);
        function GeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.ge(argument2);
        };
        return GeOutlet;
    }(BinaryOutlet));

    var GtOutlet = (function (_super) {
        __extends(GtOutlet, _super);
        function GtOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GtOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.gt(argument2);
        };
        return GtOutlet;
    }(BinaryOutlet));

    var PlusOutlet = (function (_super) {
        __extends(PlusOutlet, _super);
        function PlusOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PlusOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.plus(argument2);
        };
        return PlusOutlet;
    }(BinaryOutlet));

    var MinusOutlet = (function (_super) {
        __extends(MinusOutlet, _super);
        function MinusOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinusOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.minus(argument2);
        };
        return MinusOutlet;
    }(BinaryOutlet));

    var TimesOutlet = (function (_super) {
        __extends(TimesOutlet, _super);
        function TimesOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimesOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.times(argument2);
        };
        return TimesOutlet;
    }(BinaryOutlet));

    var DivideOutlet = (function (_super) {
        __extends(DivideOutlet, _super);
        function DivideOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DivideOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.divide(argument2);
        };
        return DivideOutlet;
    }(BinaryOutlet));

    var ModuloOutlet = (function (_super) {
        __extends(ModuloOutlet, _super);
        function ModuloOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModuloOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.modulo(argument2);
        };
        return ModuloOutlet;
    }(BinaryOutlet));

    var NotOutlet = (function (_super) {
        __extends(NotOutlet, _super);
        function NotOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NotOutlet.prototype.evaluate = function (argument) {
            return argument.not();
        };
        return NotOutlet;
    }(UnaryOutlet));

    var BitwiseNotOutlet = (function (_super) {
        __extends(BitwiseNotOutlet, _super);
        function BitwiseNotOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseNotOutlet.prototype.evaluate = function (argument) {
            return argument.bitwiseNot();
        };
        return BitwiseNotOutlet;
    }(UnaryOutlet));

    var NegativeOutlet = (function (_super) {
        __extends(NegativeOutlet, _super);
        function NegativeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NegativeOutlet.prototype.evaluate = function (argument) {
            return argument.negative();
        };
        return NegativeOutlet;
    }(UnaryOutlet));

    var PositiveOutlet = (function (_super) {
        __extends(PositiveOutlet, _super);
        function PositiveOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PositiveOutlet.prototype.evaluate = function (argument) {
            return argument.positive();
        };
        return PositiveOutlet;
    }(UnaryOutlet));

    var InvokeOutlet = (function (_super) {
        __extends(InvokeOutlet, _super);
        function InvokeOutlet(scope) {
            var _this = _super.call(this) || this;
            _this._scope = scope;
            _this._funcInlet = new OutletInlet(_this);
            _this._argsInlet = new OutletInlet(_this);
            return _this;
        }
        InvokeOutlet.prototype.funcInlet = function () {
            return this._funcInlet;
        };
        InvokeOutlet.prototype.argsInlet = function () {
            return this._argsInlet;
        };
        InvokeOutlet.prototype.get = function () {
            var funcInput = this._funcInlet.input();
            var argsInput = this._argsInlet.input();
            if (funcInput !== null && argsInput !== null) {
                var func = funcInput.get();
                if (func instanceof Func) {
                    var args = argsInput.get();
                    if (args !== void 0) {
                        var interpreter = new Interpreter();
                        interpreter.pushScope(this._scope);
                        var result = func.invoke(args, interpreter, void 0);
                        return result.toValue();
                    }
                }
            }
            return Value.absent();
        };
        return InvokeOutlet;
    }(AbstractOutlet));

    var Dataflow = (function () {
        function Dataflow() {
        }
        Dataflow.compile = function (expr, scope) {
            if (scope instanceof KeyOutlet) {
                var value = scope.get();
                if (Outlet.is(value)) {
                    scope = value;
                }
            }
            if (expr.isConstant()) {
                return new ValueInput(expr);
            }
            else if (expr instanceof Selector) {
                return Dataflow.compileSelector(expr, scope);
            }
            else if (expr instanceof Operator) {
                return Dataflow.compileOperator(expr, scope);
            }
            throw new TypeError("" + expr);
        };
        Dataflow.compileSelector = function (selector, scope) {
            if (selector instanceof IdentitySelector) {
                return Dataflow.compileIdentitySelector(scope);
            }
            else if (selector instanceof GetSelector) {
                return Dataflow.compileGetSelector(selector, scope);
            }
            else if (selector instanceof GetAttrSelector) {
                return Dataflow.compileGetAttrSelector(selector, scope);
            }
            else if (selector instanceof GetItemSelector) {
                return Dataflow.compileGetItemSelector(selector, scope);
            }
            else if (selector instanceof KeysSelector) {
                return Dataflow.compileKeysSelector(scope);
            }
            else if (selector instanceof ValuesSelector) {
                return Dataflow.compileValuesSelector(scope);
            }
            else if (selector instanceof ChildrenSelector) {
                return Dataflow.compileChildrenSelector(scope);
            }
            else if (selector instanceof DescendantsSelector) {
                return Dataflow.compileDescendantsSelector(scope);
            }
            else if (selector instanceof FilterSelector) {
                return Dataflow.compileFilterSelector(selector, scope);
            }
            throw new TypeError("" + selector);
        };
        Dataflow.compileIdentitySelector = function (scope) {
            return scope;
        };
        Dataflow.compileGetSelector = function (selector, scope) {
            var key = selector.accessor();
            if (key.isConstant()) {
                if (RecordOutlet.is(scope)) {
                    var outlet = scope.outlet(key);
                    if (outlet !== null) {
                        return Dataflow.compile(selector.then(), outlet);
                    }
                }
                else if (StreamletScope.is(scope)) {
                    var name_1 = key.stringValue(void 0);
                    if (name_1 !== void 0) {
                        var outlet = scope.outlet(name_1);
                        if (outlet !== null) {
                            return Dataflow.compile(selector.then(), outlet);
                        }
                    }
                }
            }
            else {
                var getOutlet = new GetOutlet();
                var outlet = Dataflow.compile(key, scope);
                getOutlet.keyInlet().bindInput(outlet);
                getOutlet.mapInlet().bindInput(scope);
                return getOutlet;
            }
            return null;
        };
        Dataflow.compileGetAttrSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileGetItemSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileKeysSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileValuesSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileChildrenSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileDescendantsSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileFilterSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileOperator = function (operator, scope) {
            if (operator instanceof ConditionalOperator) {
                return Dataflow.compileConditionalOperator(operator, scope);
            }
            else if (operator instanceof BinaryOperator) {
                return Dataflow.compileBinaryOperator(operator, scope);
            }
            else if (operator instanceof UnaryOperator) {
                return Dataflow.compileUnaryOperator(operator, scope);
            }
            else if (operator instanceof InvokeOperator) {
                return Dataflow.compileInvokeOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileConditionalOperator = function (operator, scope) {
            var outlet = new ConditionalOutlet();
            var ifTerm = operator.ifTerm().toValue();
            var thenTerm = operator.thenTerm().toValue();
            var elseTerm = operator.elseTerm().toValue();
            var ifOutlet = Dataflow.compile(ifTerm, scope);
            var thenOutlet = Dataflow.compile(thenTerm, scope);
            var elseOutlet = Dataflow.compile(elseTerm, scope);
            outlet.ifInlet().bindInput(ifOutlet);
            outlet.thenInlet().bindInput(thenOutlet);
            outlet.elseInlet().bindInput(elseOutlet);
            return outlet;
        };
        Dataflow.compileBinaryOperator = function (operator, scope) {
            if (operator instanceof OrOperator) {
                return Dataflow.compileOrOperator(operator, scope);
            }
            else if (operator instanceof AndOperator) {
                return Dataflow.compileAndOperator(operator, scope);
            }
            else if (operator instanceof BitwiseOrOperator) {
                return Dataflow.compileBitwiseOrOperator(operator, scope);
            }
            else if (operator instanceof BitwiseXorOperator) {
                return Dataflow.compileBitwiseXorOperator(operator, scope);
            }
            else if (operator instanceof BitwiseAndOperator) {
                return Dataflow.compileBitwiseAndOperator(operator, scope);
            }
            else if (operator instanceof LtOperator) {
                return Dataflow.compileLtOperator(operator, scope);
            }
            else if (operator instanceof LeOperator) {
                return Dataflow.compileLeOperator(operator, scope);
            }
            else if (operator instanceof EqOperator) {
                return Dataflow.compileEqOperator(operator, scope);
            }
            else if (operator instanceof NeOperator) {
                return Dataflow.compileNeOperator(operator, scope);
            }
            else if (operator instanceof GeOperator) {
                return Dataflow.compileGeOperator(operator, scope);
            }
            else if (operator instanceof GtOperator) {
                return Dataflow.compileGtOperator(operator, scope);
            }
            else if (operator instanceof PlusOperator) {
                return Dataflow.compilePlusOperator(operator, scope);
            }
            else if (operator instanceof MinusOperator) {
                return Dataflow.compileMinusOperator(operator, scope);
            }
            else if (operator instanceof TimesOperator) {
                return Dataflow.compileTimesOperator(operator, scope);
            }
            else if (operator instanceof DivideOperator) {
                return Dataflow.compileDivideOperator(operator, scope);
            }
            else if (operator instanceof ModuloOperator) {
                return Dataflow.compileModuloOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileBinaryOutlet = function (operator, outlet, scope) {
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileOrOperator = function (operator, scope) {
            var outlet = new OrOutlet();
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileAndOperator = function (operator, scope) {
            var outlet = new AndOutlet();
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileBitwiseOrOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseOrOutlet(), scope);
        };
        Dataflow.compileBitwiseXorOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseXorOutlet(), scope);
        };
        Dataflow.compileBitwiseAndOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseAndOutlet(), scope);
        };
        Dataflow.compileLtOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new LtOutlet(), scope);
        };
        Dataflow.compileLeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new LeOutlet(), scope);
        };
        Dataflow.compileEqOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new EqOutlet(), scope);
        };
        Dataflow.compileNeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new NeOutlet(), scope);
        };
        Dataflow.compileGeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new GeOutlet(), scope);
        };
        Dataflow.compileGtOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new GtOutlet(), scope);
        };
        Dataflow.compilePlusOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new PlusOutlet(), scope);
        };
        Dataflow.compileMinusOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new MinusOutlet(), scope);
        };
        Dataflow.compileTimesOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new TimesOutlet(), scope);
        };
        Dataflow.compileDivideOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new DivideOutlet(), scope);
        };
        Dataflow.compileModuloOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new ModuloOutlet(), scope);
        };
        Dataflow.compileUnaryOperator = function (operator, scope) {
            if (operator instanceof NotOperator) {
                return Dataflow.compileNotOperator(operator, scope);
            }
            else if (operator instanceof BitwiseNotOperator) {
                return Dataflow.compileBitwiseNotOperator(operator, scope);
            }
            else if (operator instanceof NegativeOperator) {
                return Dataflow.compileNegativeOperator(operator, scope);
            }
            else if (operator instanceof PositiveOperator) {
                return Dataflow.compilePositiveOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileUnaryOutlet = function (operator, outlet, scope) {
            var operand = operator.operand().toValue();
            var operandOutlet = Dataflow.compile(operand, scope);
            outlet.operandInlet().bindInput(operandOutlet);
            return outlet;
        };
        Dataflow.compileNotOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new NotOutlet(), scope);
        };
        Dataflow.compileBitwiseNotOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new BitwiseNotOutlet(), scope);
        };
        Dataflow.compileNegativeOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new NegativeOutlet(), scope);
        };
        Dataflow.compilePositiveOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new PositiveOutlet(), scope);
        };
        Dataflow.compileInvokeOperator = function (operator, scope) {
            var func = operator.func();
            var args = operator.args();
            var invokeOutlet = new InvokeOutlet(scope);
            var funcOutlet = Dataflow.compile(func, scope);
            var argsOutlet = Dataflow.compile(args, scope);
            invokeOutlet.funcInlet().bindInput(funcOutlet);
            invokeOutlet.argsInlet().bindInput(argsOutlet);
            return invokeOutlet;
        };
        return Dataflow;
    }());
    RecordOutlet.Dataflow = Dataflow;

    var BlockParser = (function (_super) {
        __extends(BlockParser, _super);
        function BlockParser(recon, builder, keyParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._keyParser = keyParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        BlockParser.prototype.feed = function (input) {
            return BlockParser.parse(input, this._recon, this._builder, this._keyParser, this._valueParser, this._step);
        };
        BlockParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            block: do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 33 || c === 34 || c === 36 || c === 37
                            || c === 39 || c === 40 || c === 43 || c === 45
                            || c >= 48 && c <= 57 || c === 64
                            || c === 91 || c === 123 || c === 126
                            || Recon.isIdentStartChar(c)) {
                            builder = builder || recon.valueBuilder();
                            step = 2;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 7;
                        }
                        else {
                            if (builder) {
                                return Parser.done(builder.bind());
                            }
                            else {
                                return Parser.done(recon.absent());
                            }
                        }
                    }
                    else if (input.isDone()) {
                        if (builder) {
                            return Parser.done(builder.bind());
                        }
                        else {
                            return Parser.done(recon.absent());
                        }
                    }
                }
                if (step === 2) {
                    if (!keyParser) {
                        keyParser = recon.parseBlockExpression(input);
                    }
                    while (keyParser.isCont() && !input.isEmpty()) {
                        keyParser = keyParser.feed(input);
                    }
                    if (keyParser.isDone()) {
                        step = 3;
                    }
                    else if (keyParser.isError()) {
                        return keyParser;
                    }
                }
                if (step === 3) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 58) {
                            input = input.step();
                            step = 4;
                        }
                        else {
                            builder.push(recon.item(keyParser.bind()));
                            keyParser = void 0;
                            step = 6;
                        }
                    }
                    else if (input.isDone()) {
                        builder.push(recon.item(keyParser.bind()));
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 4) {
                    while (input.isCont() && Recon.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        step = 5;
                    }
                    else if (input.isDone()) {
                        builder.push(recon.slot(keyParser.bind()));
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 5) {
                    if (!valueParser) {
                        valueParser = recon.parseBlockExpression(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                        keyParser = void 0;
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 6) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 44 || c === 59 || Recon.isNewline(c)) {
                            input = input.step();
                            step = 1;
                            continue;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 7;
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 7) {
                    while (input.isCont()) {
                        c = input.head();
                        if (!Recon.isNewline(c)) {
                            input = input.step();
                        }
                        else {
                            step = 1;
                            continue block;
                        }
                    }
                    if (input.isDone()) {
                        step = 1;
                        continue;
                    }
                }
                break;
            } while (true);
            return new BlockParser(recon, builder, keyParser, valueParser, step);
        };
        return BlockParser;
    }(Parser));

    var AttrParser = (function (_super) {
        __extends(AttrParser, _super);
        function AttrParser(recon, keyParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._keyParser = keyParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        AttrParser.prototype.feed = function (input) {
            return AttrParser.parse(input, this._recon, this._keyParser, this._valueParser, this._step);
        };
        AttrParser.parse = function (input, recon, keyParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 64) {
                        input = input.step();
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(64, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(64, input));
                }
            }
            if (step === 2) {
                if (!keyParser) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 34 || c === 39) {
                            keyParser = recon.parseString(input);
                        }
                        else if (Recon.isIdentStartChar(c)) {
                            keyParser = recon.parseIdent(input);
                        }
                        else {
                            return Parser.error(Diagnostic.expected("attribute name", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected("attribute name", input));
                    }
                }
                else {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser) {
                    if (keyParser.isDone()) {
                        step = 3;
                    }
                    else if (keyParser.isError()) {
                        return keyParser.asError();
                    }
                }
            }
            if (step === 3) {
                if (input.isCont() && input.head() === 40) {
                    input = input.step();
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(recon.attr(keyParser.bind()));
                }
            }
            if (step === 4) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 41) {
                        input = input.step();
                        return Parser.done(recon.attr(keyParser.bind()));
                    }
                    else {
                        step = 5;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            if (step === 5) {
                if (!valueParser) {
                    valueParser = recon.parseBlock(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 6) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 41) {
                        input = input.step();
                        return Parser.done(recon.attr(keyParser.bind(), valueParser.bind()));
                    }
                    else {
                        return Parser.error(Diagnostic.expected(")", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new AttrParser(recon, keyParser, valueParser, step);
        };
        return AttrParser;
    }(Parser));

    var BlockItemParser = (function (_super) {
        __extends(BlockItemParser, _super);
        function BlockItemParser(recon, builder, fieldParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._fieldParser = fieldParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        BlockItemParser.prototype.feed = function (input) {
            return BlockItemParser.parse(input, this._recon, this._builder, this._fieldParser, this._valueParser, this._step);
        };
        BlockItemParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 64) {
                            fieldParser = recon.parseAttr(input);
                            step = 2;
                        }
                        else if (c === 123) {
                            builder = builder || recon.recordBuilder();
                            valueParser = recon.parseRecord(input, builder);
                            step = 5;
                        }
                        else if (c === 91) {
                            builder = builder || recon.recordBuilder();
                            valueParser = recon.parseMarkup(input, builder);
                            step = 5;
                        }
                        else if (Recon.isIdentStartChar(c)) {
                            valueParser = recon.parseIdent(input);
                            step = 4;
                        }
                        else if (c === 34 || c === 39) {
                            valueParser = recon.parseString(input);
                            step = 4;
                        }
                        else if (c === 45 || c >= 48 && c <= 57) {
                            valueParser = recon.parseNumber(input);
                            step = 4;
                        }
                        else if (c === 37) {
                            valueParser = recon.parseData(input);
                            step = 4;
                        }
                        else if (c === 36) {
                            valueParser = recon.parseSelector(input);
                            step = 4;
                        }
                        else if (!builder) {
                            return Parser.done(recon.extant());
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                    else if (input.isDone()) {
                        if (!builder) {
                            return Parser.done(recon.extant());
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                }
                if (step === 2) {
                    while (fieldParser.isCont() && !input.isEmpty()) {
                        fieldParser = fieldParser.feed(input);
                    }
                    if (fieldParser.isDone()) {
                        builder = builder || recon.valueBuilder();
                        builder.push(fieldParser.bind());
                        fieldParser = void 0;
                        step = 3;
                    }
                    else if (fieldParser.isError()) {
                        return fieldParser.asError();
                    }
                }
                if (step === 3) {
                    while (input.isCont() && Recon.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        step = 1;
                        continue;
                    }
                    else if (input.isDone()) {
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 4) {
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        builder = builder || recon.valueBuilder();
                        builder.push(recon.item(valueParser.bind()));
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 5) {
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 6) {
                    while (input.isCont() && Recon.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (input.head() === 64) {
                            step = 1;
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.done(builder.bind());
                    }
                }
                break;
            } while (true);
            return new BlockItemParser(recon, builder, fieldParser, valueParser, step);
        };
        return BlockItemParser;
    }(Parser));

    var InlineItemParser = (function (_super) {
        __extends(InlineItemParser, _super);
        function InlineItemParser(recon, builder, fieldParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._fieldParser = fieldParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        InlineItemParser.prototype.feed = function (input) {
            return InlineItemParser.parse(input, this._recon, this._builder, this._fieldParser, this._valueParser, this._step);
        };
        InlineItemParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 64) {
                        fieldParser = recon.parseAttr(input);
                        step = 2;
                    }
                    else if (c === 123) {
                        if (builder) {
                            valueParser = recon.parseRecord(input, builder);
                            step = 5;
                        }
                        else {
                            valueParser = recon.parseRecord(input);
                            step = 4;
                        }
                    }
                    else if (c === 91) {
                        if (builder) {
                            valueParser = recon.parseMarkup(input, builder);
                            step = 5;
                        }
                        else {
                            valueParser = recon.parseMarkup(input);
                            step = 4;
                        }
                    }
                    else if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                while (fieldParser.isCont() && !input.isEmpty()) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = void 0;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 123) {
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else if (c === 91) {
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(builder.bind());
                }
            }
            if (step === 4) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    return Parser.done(builder.bind());
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 5) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    return Parser.done(builder.bind());
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            return new InlineItemParser(recon, builder, fieldParser, valueParser, step);
        };
        return InlineItemParser;
    }(Parser));

    var RecordParser = (function (_super) {
        __extends(RecordParser, _super);
        function RecordParser(recon, builder, keyParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._keyParser = keyParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        RecordParser.prototype.feed = function (input) {
            return RecordParser.parse(input, this._recon, this._builder, this._keyParser, this._valueParser, this._step);
        };
        RecordParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 123) {
                        input = input.step();
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(123, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(123, input));
                }
            }
            block: do {
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        builder = builder || recon.recordBuilder();
                        if (c === 125) {
                            input = input.step();
                            return Parser.done(builder.bind());
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 8;
                        }
                        else {
                            step = 3;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(125, input));
                    }
                }
                if (step === 3) {
                    if (!keyParser) {
                        keyParser = recon.parseBlockExpression(input);
                    }
                    while (keyParser.isCont() && !input.isEmpty()) {
                        keyParser = keyParser.feed(input);
                    }
                    if (keyParser.isDone()) {
                        step = 4;
                    }
                    else if (keyParser.isError()) {
                        return keyParser;
                    }
                }
                if (step === 4) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 58) {
                            input = input.step();
                            step = 5;
                        }
                        else {
                            builder.push(recon.item(keyParser.bind()));
                            keyParser = void 0;
                            step = 7;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(125, input));
                    }
                }
                if (step === 5) {
                    while (input.isCont() && Recon.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        step = 6;
                    }
                    else if (input.isDone()) {
                        builder.push(recon.slot(keyParser.bind()));
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 6) {
                    if (!valueParser) {
                        valueParser = recon.parseBlockExpression(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                        keyParser = void 0;
                        valueParser = void 0;
                        step = 7;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 7) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 44 || c === 59 || Recon.isNewline(c)) {
                            input = input.step();
                            step = 2;
                            continue;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 8;
                        }
                        else if (c === 125) {
                            input = input.step();
                            return Parser.done(builder.bind());
                        }
                        else {
                            return Parser.error(Diagnostic.expected("'}', ';', ',', or newline", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(125, input));
                    }
                }
                if (step === 8) {
                    while (input.isCont()) {
                        c = input.head();
                        if (!Recon.isNewline(c)) {
                            input = input.step();
                        }
                        else {
                            step = 2;
                            continue block;
                        }
                    }
                    if (input.isDone()) {
                        step = 2;
                        continue;
                    }
                }
                break;
            } while (true);
            return new RecordParser(recon, builder, keyParser, valueParser, step);
        };
        return RecordParser;
    }(Parser));

    var MarkupParser = (function (_super) {
        __extends(MarkupParser, _super);
        function MarkupParser(recon, builder, textOutput, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._textOutput = textOutput;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        MarkupParser.prototype.feed = function (input) {
            return MarkupParser.parse(input, this._recon, this._builder, this._textOutput, this._valueParser, this._step);
        };
        MarkupParser.parse = function (input, recon, builder, textOutput, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 91) {
                        input = input.step();
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(91, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(91, input));
                }
            }
            do {
                if (step === 2) {
                    while (input.isCont()) {
                        c = input.head();
                        if (c !== 64 && c !== 91 && c !== 92 && c !== 93
                            && c !== 123 && c !== 125) {
                            input = input.step();
                            textOutput = textOutput || recon.textOutput();
                            textOutput.write(c);
                        }
                        else {
                            break;
                        }
                    }
                    if (input.isCont()) {
                        if (c === 93) {
                            input = input.step();
                            builder = builder || recon.recordBuilder();
                            if (textOutput) {
                                builder.push(recon.item(textOutput.bind()));
                            }
                            return Parser.done(builder.bind());
                        }
                        else if (c === 64) {
                            builder = builder || recon.recordBuilder();
                            if (textOutput) {
                                builder.push(recon.item(textOutput.bind()));
                                textOutput = void 0;
                            }
                            valueParser = recon.parseInlineItem(input);
                            step = 3;
                        }
                        else if (c === 123) {
                            builder = builder || recon.recordBuilder();
                            if (textOutput) {
                                builder.push(recon.item(textOutput.bind()));
                                textOutput = void 0;
                            }
                            valueParser = recon.parseRecord(input, builder);
                            step = 4;
                        }
                        else if (c === 91) {
                            builder = builder || recon.recordBuilder();
                            if (textOutput) {
                                builder.push(recon.item(textOutput.bind()));
                                textOutput = void 0;
                            }
                            valueParser = recon.parseMarkup(input, builder);
                            step = 4;
                        }
                        else if (c === 92) {
                            input = input.step();
                            step = 5;
                        }
                        else {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 3) {
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        builder.push(recon.item(valueParser.bind()));
                        valueParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 4) {
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        valueParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (valueParser.isError()) {
                        return valueParser;
                    }
                }
                if (step === 5) {
                    if (input.isCont()) {
                        c = input.head();
                        textOutput = textOutput || recon.textOutput();
                        if (c === 34 || c === 36 || c === 39 || c === 47
                            || c === 64 || c === 91 || c === 92 || c === 93
                            || c === 123 || c === 125) {
                            input = input.step();
                            textOutput.write(c);
                            step = 2;
                        }
                        else if (c === 98) {
                            input = input.step();
                            textOutput.write(8);
                            step = 2;
                        }
                        else if (c === 102) {
                            input = input.step();
                            textOutput.write(12);
                            step = 2;
                        }
                        else if (c === 110) {
                            input = input.step();
                            textOutput.write(10);
                            step = 2;
                        }
                        else if (c === 114) {
                            input = input.step();
                            textOutput.write(13);
                            step = 2;
                        }
                        else if (c === 116) {
                            input = input.step();
                            textOutput.write(9);
                            step = 2;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("escape character", input));
                        }
                        continue;
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected("escape character", input));
                    }
                }
                break;
            } while (true);
            return new MarkupParser(recon, builder, textOutput, valueParser, step);
        };
        return MarkupParser;
    }(Parser));

    var DataParser = (function (_super) {
        __extends(DataParser, _super);
        function DataParser(recon, base64Parser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._base64Parser = base64Parser;
            _this._step = step;
            return _this;
        }
        DataParser.prototype.feed = function (input) {
            return DataParser.parse(input, this._recon, this._base64Parser, this._step);
        };
        DataParser.parse = function (input, recon, base64Parser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(37, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(37, input));
                }
            }
            if (step === 2) {
                if (!base64Parser) {
                    base64Parser = Base64.standard().parse(input, recon.dataOutput());
                }
                while (base64Parser.isCont() && !input.isEmpty()) {
                    base64Parser = base64Parser.feed(input);
                }
                if (base64Parser.isDone()) {
                    return base64Parser;
                }
                else if (base64Parser.isError()) {
                    return base64Parser;
                }
            }
            return new DataParser(recon, base64Parser, step);
        };
        return DataParser;
    }(Parser));

    var IdentParser = (function (_super) {
        __extends(IdentParser, _super);
        function IdentParser(recon, output, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._output = output;
            _this._step = step;
            return _this;
        }
        IdentParser.prototype.feed = function (input) {
            return IdentParser.parse(input, this._recon, this._output, this._step);
        };
        IdentParser.parse = function (input, recon, output, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (Recon.isIdentStartChar(c)) {
                        input = input.step();
                        output = output || recon.textOutput();
                        output = output.write(c);
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("identifier", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("identifier", input));
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Recon.isIdentChar(c))) {
                    input = input.step();
                    output.write(c);
                }
                if (!input.isEmpty()) {
                    return Parser.done(recon.ident(output.bind()));
                }
            }
            return new IdentParser(recon, output, step);
        };
        return IdentParser;
    }(Parser));

    var StringParser = (function (_super) {
        __extends(StringParser, _super);
        function StringParser(recon, output, quote, code, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._output = output;
            _this._quote = quote;
            _this._code = code;
            _this._step = step;
            return _this;
        }
        StringParser.prototype.feed = function (input) {
            return StringParser.parse(input, this._recon, this._output, this._quote, this._code, this._step);
        };
        StringParser.parse = function (input, recon, output, quote, code, step) {
            if (quote === void 0) { quote = 0; }
            if (code === void 0) { code = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 34 || c === 39 && (quote === c || quote === 0)) {
                        input = input.step();
                        output = output || recon.textOutput();
                        quote = c;
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("string", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("string", input));
                }
            }
            string: do {
                if (step === 2) {
                    while (input.isCont()) {
                        c = input.head();
                        if (c >= 0x20 && c !== quote && c !== 92) {
                            input = input.step();
                            output.write(c);
                        }
                        else {
                            break;
                        }
                    }
                    if (input.isCont()) {
                        if (c === quote) {
                            input = input.step();
                            return Parser.done(output.bind());
                        }
                        else if (c === 92) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(quote, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(quote, input));
                    }
                }
                if (step === 3) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 34 || c === 36 || c === 39 || c === 47
                            || c === 64 || c === 91 || c === 92 || c === 93
                            || c === 123 || c === 125) {
                            input = input.step();
                            output.write(c);
                            step = 2;
                            continue;
                        }
                        else if (c === 98) {
                            input = input.step();
                            output.write(8);
                            step = 2;
                            continue;
                        }
                        else if (c === 102) {
                            input = input.step();
                            output.write(12);
                            step = 2;
                            continue;
                        }
                        else if (c === 110) {
                            input = input.step();
                            output.write(10);
                            step = 2;
                            continue;
                        }
                        else if (c === 114) {
                            input = input.step();
                            output.write(13);
                            step = 2;
                            continue;
                        }
                        else if (c === 116) {
                            input = input.step();
                            output.write(9);
                            step = 2;
                            continue;
                        }
                        else if (c === 117) {
                            input = input.step();
                            step = 4;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("escape character", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected("escape character", input));
                    }
                }
                if (step >= 4) {
                    do {
                        if (input.isCont()) {
                            c = input.head();
                            if (Base16.isDigit(c)) {
                                input = input.step();
                                code = 16 * code + Base16.decodeDigit(c);
                                if (step <= 6) {
                                    step += 1;
                                    continue;
                                }
                                else {
                                    output.write(code);
                                    code = 0;
                                    step = 2;
                                    continue string;
                                }
                            }
                            else {
                                return Parser.error(Diagnostic.expected("hex digit", input));
                            }
                        }
                        else if (input.isDone()) {
                            return Parser.error(Diagnostic.expected("hex digit", input));
                        }
                        break;
                    } while (true);
                }
                break;
            } while (true);
            return new StringParser(recon, output, quote, code, step);
        };
        return StringParser;
    }(Parser));

    var NumberParser = (function (_super) {
        __extends(NumberParser, _super);
        function NumberParser(recon, sign, value, mode, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._sign = sign;
            _this._value = value;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        NumberParser.prototype.feed = function (input) {
            return NumberParser.parse(input, this._recon, this._sign, this._value, this._mode, this._step);
        };
        NumberParser.parse = function (input, recon, sign, value, mode, step) {
            if (sign === void 0) { sign = 1; }
            if (value === void 0) { value = 0; }
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 45) {
                        input = input.step();
                        sign = -1;
                    }
                    step = 2;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 48) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c >= 49 && c <= 57) {
                        input = input.step();
                        value = sign * (c - 48);
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        var newValue = 10 * value + sign * (c - 48);
                        if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {
                            value = newValue;
                            input = input.step();
                        }
                        else {
                            return Parser.error(Diagnostic.message("integer overflow", input));
                        }
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    step = 4;
                }
                else if (input.isDone()) {
                    return Parser.done(recon.num(value));
                }
            }
            if (step === 4) {
                if (input.isCont()) {
                    c = input.head();
                    if (mode > 0 && c === 46 || mode > 1 && (c === 69 || c === 101)) {
                        var output = Unicode.stringOutput();
                        if (sign < 0 && value === 0) {
                            output = output.write(45).write(48);
                        }
                        else {
                            output = output.write("" + value);
                        }
                        return DecimalParser.parse(input, recon, output, mode);
                    }
                    else if (c === 120 && sign > 0 && value === 0) {
                        input = input.step();
                        return HexadecimalParser.parse(input, recon);
                    }
                    else {
                        return Parser.done(recon.num(value));
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(recon.num(value));
                }
            }
            return new NumberParser(recon, sign, value, mode, step);
        };
        NumberParser.parseInteger = function (input, recon) {
            return NumberParser.parse(input, recon, void 0, void 0, 0);
        };
        NumberParser.parseDecimal = function (input, recon) {
            return NumberParser.parse(input, recon, void 0, void 0, 1);
        };
        return NumberParser;
    }(Parser));
    var DecimalParser = (function (_super) {
        __extends(DecimalParser, _super);
        function DecimalParser(recon, output, mode, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._output = output;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        DecimalParser.prototype.feed = function (input) {
            return DecimalParser.parse(input, this._recon, this._output, this._mode, this._step);
        };
        DecimalParser.parse = function (input, recon, output, mode, step) {
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 46) {
                        input = input.step();
                        output = output.write(c);
                        step = 2;
                    }
                    else if (mode > 1 && (c === 69 || c === 101)) {
                        input = input.step();
                        output = output.write(c);
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("decimal or exponent", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("decimal or exponent", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    if (mode > 1) {
                        step = 4;
                    }
                    else {
                        return Parser.done(recon.num(output.bind()));
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(recon.num(output.bind()));
                }
            }
            if (step === 4) {
                c = input.head();
                if (c === 69 || c === 101) {
                    input = input.step();
                    output = output.write(c);
                    step = 5;
                }
                else {
                    return Parser.done(recon.num(output.bind()));
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 43 || c === 45) {
                        input = input.step();
                        output = output.write(c);
                    }
                    step = 6;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 6) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 7;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 7) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (!input.isEmpty()) {
                    return Parser.done(recon.num(output.bind()));
                }
            }
            return new DecimalParser(recon, output, mode, step);
        };
        return DecimalParser;
    }(Parser));
    var HexadecimalParser = (function (_super) {
        __extends(HexadecimalParser, _super);
        function HexadecimalParser(recon, value, size) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._value = value;
            _this._size = size;
            return _this;
        }
        HexadecimalParser.prototype.feed = function (input) {
            return HexadecimalParser.parse(input, this._recon, this._value, this._size);
        };
        HexadecimalParser.parse = function (input, recon, value, size) {
            if (value === void 0) { value = 0; }
            if (size === void 0) { size = 0; }
            var c = 0;
            while (input.isCont()) {
                c = input.head();
                if (Base16.isDigit(c)) {
                    input = input.step();
                    value = 16 * value + Base16.decodeDigit(c);
                    size += 1;
                }
                else {
                    break;
                }
            }
            if (!input.isEmpty()) {
                if (size > 0) {
                    if (size <= 8) {
                        return Parser.done(recon.uint32(value));
                    }
                    else {
                        return Parser.done(recon.uint64(value));
                    }
                }
                else {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            return new HexadecimalParser(recon, value, size);
        };
        return HexadecimalParser;
    }(Parser));

    var LambdaFuncParser = (function (_super) {
        __extends(LambdaFuncParser, _super);
        function LambdaFuncParser(recon, builder, bindingsParser, templateParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._bindingsParser = bindingsParser;
            _this._templateParser = templateParser;
            _this._step = step;
            return _this;
        }
        LambdaFuncParser.prototype.feed = function (input) {
            return LambdaFuncParser.parse(input, this._recon, this._builder, this._bindingsParser, this._templateParser, this._step);
        };
        LambdaFuncParser.parse = function (input, recon, builder, bindingsParser, templateParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!bindingsParser) {
                    bindingsParser = recon.parseConditionalOperator(input, builder);
                }
                while (bindingsParser.isCont() && !input.isEmpty()) {
                    bindingsParser = bindingsParser.feed(input);
                }
                if (bindingsParser.isDone()) {
                    step = 2;
                }
                else if (bindingsParser.isError()) {
                    return bindingsParser.asError();
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 62) {
                        input = input.step();
                        step = 3;
                    }
                    else {
                        return bindingsParser;
                    }
                }
                else if (input.isDone()) {
                    return bindingsParser;
                }
            }
            if (step === 3) {
                if (!templateParser) {
                    templateParser = recon.parseConditionalOperator(input);
                }
                while (templateParser.isCont() && !input.isEmpty()) {
                    templateParser = templateParser.feed(input);
                }
                if (templateParser.isDone()) {
                    var bindings = bindingsParser.bind();
                    var template = templateParser.bind();
                    return Parser.done(recon.lambda(bindings, template));
                }
                else if (templateParser.isError()) {
                    return templateParser.asError();
                }
            }
            return new LambdaFuncParser(recon, builder, bindingsParser, templateParser, step);
        };
        return LambdaFuncParser;
    }(Parser));

    var ConditionalOperatorParser = (function (_super) {
        __extends(ConditionalOperatorParser, _super);
        function ConditionalOperatorParser(recon, builder, ifParser, thenParser, elseParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._ifParser = ifParser;
            _this._thenParser = thenParser;
            _this._elseParser = elseParser;
            _this._step = step;
            return _this;
        }
        ConditionalOperatorParser.prototype.feed = function (input) {
            return ConditionalOperatorParser.parse(input, this._recon, this._builder, this._ifParser, this._thenParser, this._elseParser, this._step);
        };
        ConditionalOperatorParser.parse = function (input, recon, builder, ifParser, thenParser, elseParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!ifParser) {
                    ifParser = recon.parseOrOperator(input, builder);
                }
                while (ifParser.isCont() && !input.isEmpty()) {
                    ifParser = ifParser.feed(input);
                }
                if (ifParser.isDone()) {
                    step = 2;
                }
                else if (ifParser.isError()) {
                    return ifParser.asError();
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 63) {
                        input = input.step();
                        step = 3;
                    }
                    else {
                        return ifParser;
                    }
                }
                else if (input.isDone()) {
                    return ifParser;
                }
            }
            if (step === 3) {
                if (!thenParser) {
                    thenParser = recon.parseConditionalOperator(input, builder);
                }
                while (thenParser.isCont() && !input.isEmpty()) {
                    thenParser = thenParser.feed(input);
                }
                if (thenParser.isDone()) {
                    step = 4;
                }
                else if (thenParser.isError()) {
                    return thenParser.asError();
                }
            }
            if (step === 4) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 58) {
                        input = input.step();
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(58, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(58, input));
                }
            }
            if (step === 5) {
                if (!elseParser) {
                    elseParser = recon.parseConditionalOperator(input, builder);
                }
                while (elseParser.isCont() && !input.isEmpty()) {
                    elseParser = elseParser.feed(input);
                }
                if (elseParser.isDone()) {
                    var ifTerm = ifParser.bind();
                    var thenTerm = thenParser.bind();
                    var elseTerm = elseParser.bind();
                    return Parser.done(recon.conditional(ifTerm, thenTerm, elseTerm));
                }
                else if (elseParser.isError()) {
                    return elseParser.asError();
                }
            }
            return new ConditionalOperatorParser(recon, builder, ifParser, thenParser, elseParser, step);
        };
        return ConditionalOperatorParser;
    }(Parser));

    var OrOperatorParser = (function (_super) {
        __extends(OrOperatorParser, _super);
        function OrOperatorParser(recon, builder, lhsParser, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        OrOperatorParser.prototype.feed = function (input) {
            return OrOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
        };
        OrOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseAndOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 124) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (!rhsParser) {
                        rhsParser = recon.parseAndOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        lhsParser = Parser.done(recon.or(lhs, rhs));
                        rhsParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new OrOperatorParser(recon, builder, lhsParser, rhsParser, step);
        };
        return OrOperatorParser;
    }(Parser));

    var AndOperatorParser = (function (_super) {
        __extends(AndOperatorParser, _super);
        function AndOperatorParser(recon, builder, lhsParser, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        AndOperatorParser.prototype.feed = function (input) {
            return AndOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
        };
        AndOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseBitwiseOrOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 38) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (!rhsParser) {
                        rhsParser = recon.parseBitwiseOrOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        lhsParser = Parser.done(recon.and(lhs, rhs));
                        rhsParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new AndOperatorParser(recon, builder, lhsParser, rhsParser, step);
        };
        return AndOperatorParser;
    }(Parser));

    var BitwiseOrOperatorParser = (function (_super) {
        __extends(BitwiseOrOperatorParser, _super);
        function BitwiseOrOperatorParser(recon, builder, lhsParser, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        BitwiseOrOperatorParser.prototype.feed = function (input) {
            return BitwiseOrOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
        };
        BitwiseOrOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseBitwiseXorOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 124) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 124) {
                            return lhsParser;
                        }
                        else {
                            step = 4;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 4) {
                    if (!rhsParser) {
                        rhsParser = recon.parseBitwiseXorOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        lhsParser = Parser.done(recon.bitwiseOr(lhs, rhs));
                        rhsParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new BitwiseOrOperatorParser(recon, builder, lhsParser, rhsParser, step);
        };
        return BitwiseOrOperatorParser;
    }(Parser));

    var BitwiseXorOperatorParser = (function (_super) {
        __extends(BitwiseXorOperatorParser, _super);
        function BitwiseXorOperatorParser(recon, builder, lhsParser, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        BitwiseXorOperatorParser.prototype.feed = function (input) {
            return BitwiseXorOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
        };
        BitwiseXorOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseBitwiseAndOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 94) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (!rhsParser) {
                        rhsParser = recon.parseBitwiseAndOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        lhsParser = Parser.done(recon.bitwiseXor(lhs, rhs));
                        rhsParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new BitwiseXorOperatorParser(recon, builder, lhsParser, rhsParser, step);
        };
        return BitwiseXorOperatorParser;
    }(Parser));

    var BitwiseAndOperatorParser = (function (_super) {
        __extends(BitwiseAndOperatorParser, _super);
        function BitwiseAndOperatorParser(recon, builder, lhsParser, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        BitwiseAndOperatorParser.prototype.feed = function (input) {
            return BitwiseAndOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
        };
        BitwiseAndOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseComparisonOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 38) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 38) {
                            return lhsParser;
                        }
                        else {
                            step = 4;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 4) {
                    if (!rhsParser) {
                        rhsParser = recon.parseComparisonOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        lhsParser = Parser.done(recon.bitwiseAnd(lhs, rhs));
                        rhsParser = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new BitwiseAndOperatorParser(recon, builder, lhsParser, rhsParser, step);
        };
        return BitwiseAndOperatorParser;
    }(Parser));

    var ComparisonOperatorParser = (function (_super) {
        __extends(ComparisonOperatorParser, _super);
        function ComparisonOperatorParser(recon, builder, lhsParser, operator, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._operator = operator;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        ComparisonOperatorParser.prototype.feed = function (input) {
            return ComparisonOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._operator, this._rhsParser, this._step);
        };
        ComparisonOperatorParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseAttrExpression(input, builder);
                }
                while (lhsParser.isCont() && !input.isEmpty()) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 33) {
                        input = input.step();
                        step = 3;
                    }
                    else if (c === 60) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c === 62) {
                        input = input.step();
                        step = 5;
                    }
                    else if (c === 61) {
                        input = input.step();
                        step = 6;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 61) {
                        input = input.step();
                        operator = "!=";
                        step = 7;
                    }
                    else {
                        operator = "!";
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 4) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 61) {
                        input = input.step();
                        operator = "<=";
                        step = 7;
                    }
                    else {
                        operator = "<";
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 61) {
                        input = input.step();
                        operator = ">=";
                        step = 7;
                    }
                    else {
                        operator = ">";
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 6) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 61) {
                        input = input.step();
                        operator = "==";
                        step = 7;
                    }
                    else if (c === 62) {
                        return lhsParser;
                    }
                    else {
                        operator = "=";
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 7) {
                if (!rhsParser) {
                    rhsParser = recon.parseAttrExpression(input, builder);
                }
                while (rhsParser.isCont() && !input.isEmpty()) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    if (operator === "<") {
                        return Parser.done(recon.lt(lhs, rhs));
                    }
                    else if (operator === "<=") {
                        return Parser.done(recon.le(lhs, rhs));
                    }
                    else if (operator === "==") {
                        return Parser.done(recon.eq(lhs, rhs));
                    }
                    else if (operator === "!=") {
                        return Parser.done(recon.ne(lhs, rhs));
                    }
                    else if (operator === ">=") {
                        return Parser.done(recon.ge(lhs, rhs));
                    }
                    else if (operator === ">") {
                        return Parser.done(recon.gt(lhs, rhs));
                    }
                    else {
                        return Parser.error(Diagnostic.message(operator, input));
                    }
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            return new ComparisonOperatorParser(recon, builder, lhsParser, operator, rhsParser, step);
        };
        return ComparisonOperatorParser;
    }(Parser));

    var AttrExpressionParser = (function (_super) {
        __extends(AttrExpressionParser, _super);
        function AttrExpressionParser(recon, builder, fieldParser, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._fieldParser = fieldParser;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        AttrExpressionParser.prototype.feed = function (input) {
            return AttrExpressionParser.parse(input, this._recon, this._builder, this._fieldParser, this._valueParser, this._step);
        };
        AttrExpressionParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 64) {
                            step = 2;
                        }
                        else if (c === 123 || c === 91) {
                            builder = builder || recon.recordBuilder();
                            step = 5;
                        }
                        else if (c === 40) {
                            step = 4;
                        }
                        else if (c === 33 || c === 34 || c === 36 || c === 37
                            || c === 39 || c === 43 || c === 45
                            || c >= 48 && c <= 57 || c === 126
                            || Recon.isIdentStartChar(c)) {
                            step = 3;
                        }
                        else if (!builder) {
                            return Parser.done(recon.extant());
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                    else if (input.isDone()) {
                        if (!builder) {
                            return Parser.done(recon.extant());
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                }
                if (step === 2) {
                    if (!fieldParser) {
                        fieldParser = recon.parseAttr(input);
                    }
                    while (fieldParser.isCont() && !input.isEmpty()) {
                        fieldParser = fieldParser.feed(input);
                    }
                    if (fieldParser.isDone()) {
                        builder = builder || recon.recordBuilder();
                        builder.push(fieldParser.bind());
                        fieldParser = void 0;
                        step = 1;
                        continue;
                    }
                    else if (fieldParser.isError()) {
                        return fieldParser.asError();
                    }
                }
                if (step === 3) {
                    if (!valueParser) {
                        valueParser = recon.parseAdditiveOperator(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        builder = builder || recon.valueBuilder();
                        builder.push(recon.item(valueParser.bind()));
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 4) {
                    if (!valueParser) {
                        valueParser = recon.parseAdditiveOperator(input, builder);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        if (!builder) {
                            builder = recon.valueBuilder();
                            builder.push(recon.item(valueParser.bind()));
                        }
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 5) {
                    if (!valueParser) {
                        valueParser = recon.parseAdditiveOperator(input, builder);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        valueParser = void 0;
                        step = 6;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 6) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 64) {
                            step = 1;
                            continue;
                        }
                        else {
                            return Parser.done(builder.bind());
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.done(builder.bind());
                    }
                }
                break;
            } while (true);
            return new AttrExpressionParser(recon, builder, fieldParser, valueParser, step);
        };
        return AttrExpressionParser;
    }(Parser));

    var AdditiveOperatorParser = (function (_super) {
        __extends(AdditiveOperatorParser, _super);
        function AdditiveOperatorParser(recon, builder, lhsParser, operator, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._operator = operator;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        AdditiveOperatorParser.prototype.feed = function (input) {
            return AdditiveOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._operator, this._rhsParser, this._step);
        };
        AdditiveOperatorParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parseMultiplicativeOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 43) {
                            input = input.step();
                            operator = "+";
                            step = 3;
                        }
                        else if (c === 45) {
                            input = input.step();
                            operator = "-";
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (!rhsParser) {
                        rhsParser = recon.parseMultiplicativeOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        if (operator === "+") {
                            lhsParser = Parser.done(recon.plus(lhs, rhs));
                        }
                        else if (operator === "-") {
                            lhsParser = Parser.done(recon.minus(lhs, rhs));
                        }
                        else {
                            return Parser.error(Diagnostic.message(operator, input));
                        }
                        rhsParser = void 0;
                        operator = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new AdditiveOperatorParser(recon, builder, lhsParser, operator, rhsParser, step);
        };
        return AdditiveOperatorParser;
    }(Parser));

    var MultiplicativeOperatorParser = (function (_super) {
        __extends(MultiplicativeOperatorParser, _super);
        function MultiplicativeOperatorParser(recon, builder, lhsParser, operator, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._lhsParser = lhsParser;
            _this._operator = operator;
            _this._rhsParser = rhsParser;
            _this._step = step;
            return _this;
        }
        MultiplicativeOperatorParser.prototype.feed = function (input) {
            return MultiplicativeOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._operator, this._rhsParser, this._step);
        };
        MultiplicativeOperatorParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    if (!lhsParser) {
                        lhsParser = recon.parsePrefixOperator(input, builder);
                    }
                    while (lhsParser.isCont() && !input.isEmpty()) {
                        lhsParser = lhsParser.feed(input);
                    }
                    if (lhsParser.isDone()) {
                        step = 2;
                    }
                    else if (lhsParser.isError()) {
                        return lhsParser.asError();
                    }
                }
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 42) {
                            input = input.step();
                            operator = "*";
                            step = 3;
                        }
                        else if (c === 47) {
                            input = input.step();
                            operator = "/";
                            step = 3;
                        }
                        else if (c === 37) {
                            input = input.step();
                            operator = "%";
                            step = 3;
                        }
                        else {
                            return lhsParser;
                        }
                    }
                    else if (input.isDone()) {
                        return lhsParser;
                    }
                }
                if (step === 3) {
                    if (!rhsParser) {
                        rhsParser = recon.parsePrefixOperator(input, builder);
                    }
                    while (rhsParser.isCont() && !input.isEmpty()) {
                        rhsParser = rhsParser.feed(input);
                    }
                    if (rhsParser.isDone()) {
                        var lhs = lhsParser.bind();
                        var rhs = rhsParser.bind();
                        if (operator === "*") {
                            lhsParser = Parser.done(recon.times(lhs, rhs));
                        }
                        else if (operator === "/") {
                            lhsParser = Parser.done(recon.divide(lhs, rhs));
                        }
                        else if (operator === "%") {
                            lhsParser = Parser.done(recon.modulo(lhs, rhs));
                        }
                        else {
                            return Parser.error(Diagnostic.message(operator, input));
                        }
                        rhsParser = void 0;
                        operator = void 0;
                        step = 2;
                        continue;
                    }
                    else if (rhsParser.isError()) {
                        return rhsParser.asError();
                    }
                }
                break;
            } while (true);
            return new MultiplicativeOperatorParser(recon, builder, lhsParser, operator, rhsParser, step);
        };
        return MultiplicativeOperatorParser;
    }(Parser));

    var PrefixOperatorParser = (function (_super) {
        __extends(PrefixOperatorParser, _super);
        function PrefixOperatorParser(recon, builder, operator, rhsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._operator = operator;
            _this._operandParser = rhsParser;
            _this._step = step;
            return _this;
        }
        PrefixOperatorParser.prototype.feed = function (input) {
            return PrefixOperatorParser.parse(input, this._recon, this._builder, this._operator, this._operandParser, this._step);
        };
        PrefixOperatorParser.parse = function (input, recon, builder, operator, rhsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 33) {
                        input = input.step();
                        operator = "!";
                    }
                    else if (c === 126) {
                        input = input.step();
                        operator = "~";
                    }
                    else if (c === 45) {
                        input = input.step();
                        operator = "-";
                    }
                    else if (c === 43) {
                        input = input.step();
                        operator = "+";
                    }
                    else {
                        return recon.parseInvokeOperator(input, builder);
                    }
                    step = 2;
                }
                else if (input.isDone()) {
                    return recon.parseInvokeOperator(input, builder);
                }
            }
            if (step === 2) {
                if (!rhsParser) {
                    rhsParser = recon.parsePrefixOperator(input, builder);
                }
                while (rhsParser.isCont() && !input.isEmpty()) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var operand = rhsParser.bind();
                    if (!recon.isDistinct(operand)) {
                        return Parser.error(Diagnostic.expected("value", input));
                    }
                    else if (operator === "!") {
                        return Parser.done(recon.not(operand));
                    }
                    else if (operator === "~") {
                        return Parser.done(recon.bitwiseNot(operand));
                    }
                    else if (operator === "-") {
                        return Parser.done(recon.negative(operand));
                    }
                    else if (operator === "+") {
                        return Parser.done(recon.positive(operand));
                    }
                    else {
                        return Parser.error(Diagnostic.message(operator, input));
                    }
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            return new PrefixOperatorParser(recon, builder, operator, rhsParser, step);
        };
        return PrefixOperatorParser;
    }(Parser));

    var InvokeOperatorParser = (function (_super) {
        __extends(InvokeOperatorParser, _super);
        function InvokeOperatorParser(recon, builder, exprParser, argsParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._exprParser = exprParser;
            _this._argsParser = argsParser;
            _this._step = step;
            return _this;
        }
        InvokeOperatorParser.prototype.feed = function (input) {
            return InvokeOperatorParser.parse(input, this._recon, this._builder, this._exprParser, this._argsParser, this._step);
        };
        InvokeOperatorParser.parse = function (input, recon, builder, exprParser, argsParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!exprParser) {
                    exprParser = recon.parsePrimary(input, builder);
                }
                while (exprParser.isCont() && !input.isEmpty()) {
                    exprParser = exprParser.feed(input);
                }
                if (exprParser.isDone()) {
                    step = 2;
                }
                else if (exprParser.isError()) {
                    return exprParser.asError();
                }
            }
            do {
                if (step === 2) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 40) {
                            input = input.step();
                            step = 3;
                        }
                        else {
                            return exprParser;
                        }
                    }
                    else if (input.isDone()) {
                        return exprParser;
                    }
                }
                if (step === 3) {
                    while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 41) {
                            input = input.step();
                            var expr = exprParser.bind();
                            exprParser = Parser.done(recon.invoke(expr, recon.extant()));
                            step = 2;
                            continue;
                        }
                        else {
                            step = 4;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(41, input));
                    }
                }
                if (step === 4) {
                    if (!argsParser) {
                        argsParser = recon.parseBlock(input);
                    }
                    while (argsParser.isCont() && !input.isEmpty()) {
                        argsParser = argsParser.feed(input);
                    }
                    if (argsParser.isDone()) {
                        step = 5;
                    }
                    else if (argsParser.isError()) {
                        return argsParser.asError();
                    }
                }
                if (step === 5) {
                    while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 41) {
                            input = input.step();
                            var expr = exprParser.bind();
                            var args = argsParser.bind();
                            exprParser = Parser.done(recon.invoke(expr, args));
                            argsParser = void 0;
                            step = 2;
                            continue;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(41, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(41, input));
                    }
                }
                break;
            } while (true);
            return new InvokeOperatorParser(recon, builder, exprParser, argsParser, step);
        };
        return InvokeOperatorParser;
    }(Parser));

    var PrimaryParser = (function (_super) {
        __extends(PrimaryParser, _super);
        function PrimaryParser(recon, builder, exprParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._exprParser = exprParser;
            _this._step = step;
            return _this;
        }
        PrimaryParser.prototype.feed = function (input) {
            return PrimaryParser.parse(input, this._recon, this._builder, this._exprParser, this._step);
        };
        PrimaryParser.parse = function (input, recon, builder, exprParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 40) {
                        input = input.step();
                        step = 3;
                    }
                    else {
                        step = 2;
                    }
                }
                else if (input.isDone()) {
                    step = 2;
                }
            }
            if (step === 2) {
                if (!exprParser) {
                    exprParser = recon.parseLiteral(input, builder);
                }
                while (exprParser.isCont() && !input.isEmpty()) {
                    exprParser = exprParser.feed(input);
                }
                if (exprParser.isDone()) {
                    return exprParser;
                }
                else if (exprParser.isError()) {
                    return exprParser.asError();
                }
            }
            if (step === 3) {
                if (!exprParser) {
                    exprParser = recon.parseBlockExpression(input, builder);
                }
                while (exprParser.isCont() && !input.isEmpty()) {
                    exprParser = exprParser.feed(input);
                }
                if (exprParser.isDone()) {
                    step = 4;
                }
                else if (exprParser.isError()) {
                    return exprParser.asError();
                }
            }
            do {
                if (step === 4) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 44) {
                            input = input.step();
                            if (exprParser) {
                                if (!builder) {
                                    builder = recon.recordBuilder();
                                    builder.push(recon.item(exprParser.bind()));
                                }
                                exprParser = void 0;
                            }
                            step = 5;
                        }
                        else if (c === 41) {
                            input = input.step();
                            if (exprParser) {
                                return exprParser;
                            }
                            else {
                                return Parser.done(builder.bind());
                            }
                        }
                        else {
                            return Parser.error(Diagnostic.expected(41, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(41, input));
                    }
                }
                if (step === 5) {
                    if (!exprParser) {
                        exprParser = recon.parseBlockExpression(input, builder);
                    }
                    while (exprParser.isCont() && !input.isEmpty()) {
                        exprParser = exprParser.feed(input);
                    }
                    if (exprParser.isDone()) {
                        exprParser = void 0;
                        step = 4;
                        continue;
                    }
                    else if (exprParser.isError()) {
                        return exprParser.asError();
                    }
                }
                break;
            } while (true);
            return new PrimaryParser(recon, builder, exprParser, step);
        };
        return PrimaryParser;
    }(Parser));

    var LiteralParser = (function (_super) {
        __extends(LiteralParser, _super);
        function LiteralParser(recon, builder, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        LiteralParser.prototype.feed = function (input) {
            return LiteralParser.parse(input, this._recon, this._builder, this._valueParser, this._step);
        };
        LiteralParser.parse = function (input, recon, builder, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 40) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseRecord(input, builder);
                        step = 3;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseMarkup(input, builder);
                        step = 3;
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        valueParser = recon.parseIdent(input);
                        step = 2;
                    }
                    else if (c === 34 || c === 39) {
                        valueParser = recon.parseString(input);
                        step = 2;
                    }
                    else if (c === 45 || c >= 48 && c <= 57) {
                        valueParser = recon.parseNumber(input);
                        step = 2;
                    }
                    else if (c === 37) {
                        valueParser = recon.parseData(input);
                        step = 2;
                    }
                    else if (c === 36) {
                        valueParser = recon.parseSelector(input);
                        step = 2;
                    }
                    else if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    return Parser.done(builder.bind());
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 3) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    return Parser.done(builder.bind());
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpression(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 5;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 41) {
                        input = input.step();
                        builder = builder || recon.valueBuilder();
                        builder.push(recon.item(valueParser.bind()));
                        return Parser.done(builder.bind());
                    }
                    else {
                        return Parser.error(Diagnostic.expected(41, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(41, input));
                }
            }
            return new LiteralParser(recon, builder, valueParser, step);
        };
        return LiteralParser;
    }(Parser));

    var SelectorParser = (function (_super) {
        __extends(SelectorParser, _super);
        function SelectorParser(recon, builder, selector, valueParser, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._builder = builder;
            _this._selector = selector;
            _this._valueParser = valueParser;
            _this._step = step;
            return _this;
        }
        SelectorParser.prototype.feed = function (input) {
            return SelectorParser.parse(input, this._recon, this._builder, this._selector, this._valueParser, this._step);
        };
        SelectorParser.parse = function (input, recon, builder, selector, valueParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 36) {
                    input = input.step();
                    selector = selector || recon.selector();
                    step = 2;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(36, input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 91) {
                        input = input.step();
                        step = 8;
                    }
                    else if (c === 64) {
                        input = input.step();
                        step = 7;
                    }
                    else if (c === 58) {
                        input = input.step();
                        step = 6;
                    }
                    else if (c === 42) {
                        input = input.step();
                        step = 5;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 4;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            do {
                if (step === 3) {
                    if (!valueParser) {
                        valueParser = recon.parseLiteral(input, recon.valueBuilder());
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        selector = recon.get(selector, valueParser.bind());
                        valueParser = void 0;
                        step = 10;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 4) {
                    if (!valueParser) {
                        valueParser = recon.parseInteger(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        selector = recon.value(recon.getItem(selector, valueParser.bind()));
                        valueParser = void 0;
                        step = 10;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 5) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 58) {
                            input = input.step();
                            selector = recon.keys(selector);
                            step = 10;
                        }
                        else if (c === 42) {
                            input = input.step();
                            selector = recon.descendants(selector);
                            step = 10;
                        }
                        else {
                            selector = recon.children(selector);
                            step = 10;
                        }
                    }
                    else if (input.isDone()) {
                        selector = recon.children(selector);
                        step = 10;
                    }
                }
                if (step === 6) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 42) {
                            input = input.step();
                            selector = recon.values(selector);
                            step = 10;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(42, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(42, input));
                    }
                }
                if (step === 7) {
                    if (!valueParser) {
                        valueParser = recon.parseIdent(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        selector = recon.getAttr(selector, valueParser.bind());
                        valueParser = void 0;
                        step = 10;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 8) {
                    if (!valueParser) {
                        valueParser = recon.parseBlockExpression(input);
                    }
                    while (valueParser.isCont() && !input.isEmpty()) {
                        valueParser = valueParser.feed(input);
                    }
                    if (valueParser.isDone()) {
                        step = 9;
                    }
                    else if (valueParser.isError()) {
                        return valueParser.asError();
                    }
                }
                if (step === 9) {
                    while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        if (c === 93) {
                            input = input.step();
                            selector = recon.filter(selector, valueParser.bind());
                            valueParser = void 0;
                            step = 10;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(93, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(93, input));
                    }
                }
                if (step === 10) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 91) {
                            input = input.step();
                            step = 8;
                            continue;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 4;
                            continue;
                        }
                        else if (c === 46) {
                            input = input.step();
                            step = 11;
                        }
                        else if (builder) {
                            builder.push(recon.item(selector));
                            return Parser.done(builder.bind());
                        }
                        else {
                            return Parser.done(selector);
                        }
                    }
                    else if (input.isDone()) {
                        if (builder) {
                            builder.push(recon.item(selector));
                            return Parser.done(builder.bind());
                        }
                        else {
                            return Parser.done(selector);
                        }
                    }
                }
                if (step === 11) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 64) {
                            input = input.step();
                            step = 7;
                            continue;
                        }
                        else if (c === 58) {
                            input = input.step();
                            step = 6;
                            continue;
                        }
                        else if (c === 42) {
                            input = input.step();
                            step = 5;
                            continue;
                        }
                        else {
                            step = 3;
                            continue;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                break;
            } while (true);
            return new SelectorParser(recon, builder, selector, valueParser, step);
        };
        return SelectorParser;
    }(Parser));

    var ReconParser = (function () {
        function ReconParser() {
        }
        ReconParser.prototype.parseBlock = function (input) {
            return BlockParser.parse(input, this);
        };
        ReconParser.prototype.parseAttr = function (input) {
            return AttrParser.parse(input, this);
        };
        ReconParser.prototype.parseBlockItem = function (input) {
            return BlockItemParser.parse(input, this);
        };
        ReconParser.prototype.parseInlineItem = function (input) {
            return InlineItemParser.parse(input, this);
        };
        ReconParser.prototype.parseRecord = function (input, builder) {
            return RecordParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseMarkup = function (input, builder) {
            return MarkupParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseData = function (input) {
            return DataParser.parse(input, this);
        };
        ReconParser.prototype.parseIdent = function (input) {
            return IdentParser.parse(input, this);
        };
        ReconParser.prototype.parseString = function (input) {
            return StringParser.parse(input, this);
        };
        ReconParser.prototype.parseNumber = function (input) {
            return NumberParser.parse(input, this);
        };
        ReconParser.prototype.parseInteger = function (input) {
            return NumberParser.parseInteger(input, this);
        };
        ReconParser.prototype.parseBlockExpression = function (input, builder) {
            return this.parseLambdaFunc(input, builder);
        };
        ReconParser.prototype.parseLambdaFunc = function (input, builder) {
            return LambdaFuncParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseConditionalOperator = function (input, builder) {
            return ConditionalOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseOrOperator = function (input, builder) {
            return OrOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseAndOperator = function (input, builder) {
            return AndOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseBitwiseOrOperator = function (input, builder) {
            return BitwiseOrOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseBitwiseXorOperator = function (input, builder) {
            return BitwiseXorOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseBitwiseAndOperator = function (input, builder) {
            return BitwiseAndOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseComparisonOperator = function (input, builder) {
            return ComparisonOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseAttrExpression = function (input, builder) {
            return AttrExpressionParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseAdditiveOperator = function (input, builder) {
            return AdditiveOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseMultiplicativeOperator = function (input, builder) {
            return MultiplicativeOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parsePrefixOperator = function (input, builder) {
            return PrefixOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseInvokeOperator = function (input, builder) {
            return InvokeOperatorParser.parse(input, this, builder);
        };
        ReconParser.prototype.parsePrimary = function (input, builder) {
            return PrimaryParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseLiteral = function (input, builder) {
            return LiteralParser.parse(input, this, builder);
        };
        ReconParser.prototype.parseSelector = function (input, builder) {
            return SelectorParser.parse(input, this, builder);
        };
        ReconParser.prototype.blockParser = function () {
            return new BlockParser(this);
        };
        ReconParser.prototype.parseBlockString = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Recon.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = this.parseBlock(input);
            if (parser.isDone()) {
                while (input.isCont() && Recon.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        ReconParser.prototype.parseNumberString = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Recon.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = this.parseNumber(input);
            if (parser.isDone()) {
                while (input.isCont() && Recon.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return ReconParser;
    }());

    var ReconStructureParser = (function (_super) {
        __extends(ReconStructureParser, _super);
        function ReconStructureParser() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReconStructureParser.prototype.isDistinct = function (value) {
            return value.isDistinct();
        };
        ReconStructureParser.prototype.item = function (value) {
            return value;
        };
        ReconStructureParser.prototype.value = function (item) {
            return item.toValue();
        };
        ReconStructureParser.prototype.attr = function (key, value) {
            return Attr.of.apply(Attr, arguments);
        };
        ReconStructureParser.prototype.slot = function (key, value) {
            return Slot.of.apply(Slot, arguments);
        };
        ReconStructureParser.prototype.valueBuilder = function () {
            return Value.builder();
        };
        ReconStructureParser.prototype.recordBuilder = function () {
            return Record.create();
        };
        ReconStructureParser.prototype.dataOutput = function () {
            return Data.output();
        };
        ReconStructureParser.prototype.textOutput = function () {
            return Text$1.output();
        };
        ReconStructureParser.prototype.ident = function (value) {
            if (value instanceof Text$1) {
                var string = value.stringValue();
                if (string === "true") {
                    return Bool.from(true);
                }
                else if (string === "false") {
                    return Bool.from(false);
                }
            }
            return value;
        };
        ReconStructureParser.prototype.num = function (value) {
            if (typeof value === "number") {
                return Num.from(value);
            }
            else if (typeof value === "string") {
                return Num.from(+value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        ReconStructureParser.prototype.uint32 = function (value) {
            return Num.uint32(value);
        };
        ReconStructureParser.prototype.uint64 = function (value) {
            return Num.uint64(value);
        };
        ReconStructureParser.prototype.bool = function (value) {
            return Bool.from(value);
        };
        ReconStructureParser.prototype.selector = function () {
            return Selector.identity();
        };
        ReconStructureParser.prototype.extant = function () {
            return Value.extant();
        };
        ReconStructureParser.prototype.absent = function () {
            return Value.absent();
        };
        ReconStructureParser.prototype.conditional = function (ifTerm, thenTerm, elseTerm) {
            return ifTerm.conditional(thenTerm, elseTerm);
        };
        ReconStructureParser.prototype.or = function (lhs, rhs) {
            return lhs.or(rhs);
        };
        ReconStructureParser.prototype.and = function (lhs, rhs) {
            return lhs.and(rhs);
        };
        ReconStructureParser.prototype.bitwiseOr = function (lhs, rhs) {
            return lhs.bitwiseOr(rhs);
        };
        ReconStructureParser.prototype.bitwiseXor = function (lhs, rhs) {
            return lhs.bitwiseXor(rhs);
        };
        ReconStructureParser.prototype.bitwiseAnd = function (lhs, rhs) {
            return lhs.bitwiseAnd(rhs);
        };
        ReconStructureParser.prototype.lt = function (lhs, rhs) {
            return lhs.lt(rhs);
        };
        ReconStructureParser.prototype.le = function (lhs, rhs) {
            return lhs.le(rhs);
        };
        ReconStructureParser.prototype.eq = function (lhs, rhs) {
            return lhs.eq(rhs);
        };
        ReconStructureParser.prototype.ne = function (lhs, rhs) {
            return lhs.ne(rhs);
        };
        ReconStructureParser.prototype.ge = function (lhs, rhs) {
            return lhs.ge(rhs);
        };
        ReconStructureParser.prototype.gt = function (lhs, rhs) {
            return lhs.gt(rhs);
        };
        ReconStructureParser.prototype.plus = function (lhs, rhs) {
            return lhs.plus(rhs);
        };
        ReconStructureParser.prototype.minus = function (lhs, rhs) {
            return lhs.minus(rhs);
        };
        ReconStructureParser.prototype.times = function (lhs, rhs) {
            return lhs.times(rhs);
        };
        ReconStructureParser.prototype.divide = function (lhs, rhs) {
            return lhs.divide(rhs);
        };
        ReconStructureParser.prototype.modulo = function (lhs, rhs) {
            return lhs.modulo(rhs);
        };
        ReconStructureParser.prototype.not = function (rhs) {
            return rhs.not();
        };
        ReconStructureParser.prototype.bitwiseNot = function (rhs) {
            return rhs.bitwiseNot();
        };
        ReconStructureParser.prototype.negative = function (rhs) {
            return rhs.negative();
        };
        ReconStructureParser.prototype.positive = function (rhs) {
            return rhs.positive();
        };
        ReconStructureParser.prototype.invoke = function (func, args) {
            return func.invoke(args).toValue();
        };
        ReconStructureParser.prototype.lambda = function (bindings, template) {
            return bindings.lambda(template);
        };
        ReconStructureParser.prototype.get = function (selector, key) {
            return selector.get(key);
        };
        ReconStructureParser.prototype.getAttr = function (selector, key) {
            return selector.getAttr(key);
        };
        ReconStructureParser.prototype.getItem = function (selector, index) {
            return selector.getItem(index);
        };
        ReconStructureParser.prototype.children = function (selector) {
            return Selector.literal(selector).children();
        };
        ReconStructureParser.prototype.descendants = function (selector) {
            return Selector.literal(selector).descendants();
        };
        ReconStructureParser.prototype.keys = function (selector) {
            return Selector.literal(selector).keys();
        };
        ReconStructureParser.prototype.values = function (selector) {
            return Selector.literal(selector).values();
        };
        ReconStructureParser.prototype.filter = function (selector, predicate) {
            return selector.filter(predicate);
        };
        return ReconStructureParser;
    }(ReconParser));

    var AttrWriter = (function (_super) {
        __extends(AttrWriter, _super);
        function AttrWriter(recon, key, value, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._key = key;
            _this._value = value;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        AttrWriter.prototype.pull = function (output) {
            return AttrWriter.write(output, this._recon, this._key, this._value, this._part, this._step);
        };
        AttrWriter.sizeOf = function (recon, key, value) {
            var size = 0;
            size += 1;
            size += recon.sizeOfValue(key);
            if (!recon.isExtant(recon.item(value))) {
                size += 1;
                size += recon.sizeOfBlockValue(value);
                size += 1;
            }
            return size;
        };
        AttrWriter.write = function (output, recon, key, value, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(64);
                step = 2;
            }
            if (step === 2) {
                if (!part) {
                    part = recon.writeValue(key, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    if (recon.isExtant(recon.item(value))) {
                        return Writer.done();
                    }
                    else {
                        step = 3;
                    }
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 3 && output.isCont()) {
                output = output.write(40);
                step = 4;
            }
            if (step === 4) {
                if (!part) {
                    part = recon.writeBlockValue(value, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 5;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 5 && output.isCont()) {
                output = output.write(41);
                return Writer.done();
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new AttrWriter(recon, key, value, part, step);
        };
        return AttrWriter;
    }(Writer));

    var SlotWriter = (function (_super) {
        __extends(SlotWriter, _super);
        function SlotWriter(recon, key, value, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._key = key;
            _this._value = value;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        SlotWriter.prototype.pull = function (output) {
            return SlotWriter.write(output, this._recon, this._key, this._value, this._part, this._step);
        };
        SlotWriter.sizeOf = function (recon, key, value) {
            var size = 0;
            size += recon.sizeOfValue(key);
            size += 1;
            if (!recon.isExtant(recon.item(value))) {
                size += recon.sizeOfValue(value);
            }
            return size;
        };
        SlotWriter.write = function (output, recon, key, value, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (!part) {
                    part = recon.writeValue(key, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 2;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 2 && output.isCont()) {
                output = output.write(58);
                if (recon.isExtant(recon.item(value))) {
                    return Writer.done();
                }
                else {
                    step = 3;
                }
            }
            if (step === 3) {
                if (!part) {
                    part = recon.writeValue(value, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    return Writer.done();
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new SlotWriter(recon, key, value, part, step);
        };
        return SlotWriter;
    }(Writer));

    var BlockWriter = (function (_super) {
        __extends(BlockWriter, _super);
        function BlockWriter(recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._items = items;
            _this._inBlock = inBlock;
            _this._inMarkup = inMarkup;
            _this._inBraces = inBraces;
            _this._inBrackets = inBrackets;
            _this._first = first;
            _this._markupSafe = markupSafe;
            _this._item = item;
            _this._next = next;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        BlockWriter.prototype.pull = function (output) {
            return BlockWriter.write(output, this._recon, this._items, this._inBlock, this._inMarkup, this._inBraces, this._inBrackets, this._first, this._markupSafe, this._item, this._next, this._part, this._step);
        };
        BlockWriter.sizeOf = function (recon, items, inBlock, inMarkup) {
            var size = 0;
            var inBraces = false;
            var inBrackets = false;
            var first = true;
            var markupSafe = true;
            var next;
            while (next || items.hasNext()) {
                var item = void 0;
                if (!next) {
                    item = items.next().value;
                }
                else {
                    item = next;
                    next = void 0;
                }
                if (items.hasNext()) {
                    next = items.next().value;
                }
                if (recon.isExpression(item)) {
                    markupSafe = false;
                }
                if (inBrackets && recon.isAttr(item)) {
                    if (inBraces) {
                        size += 1;
                        inBraces = false;
                    }
                    size += 1;
                    inBrackets = false;
                }
                if (recon.isAttr(item)) {
                    if (inBraces) {
                        size += 1;
                        inBraces = false;
                    }
                    else if (inBrackets) {
                        size += 1;
                        inBrackets = false;
                    }
                    size += recon.sizeOfItem(item);
                    first = false;
                }
                else if (inBrackets && recon.isText(item)) {
                    if (inBraces) {
                        size += 1;
                        inBraces = false;
                    }
                    size += recon.sizeOfMarkupText(item);
                }
                else if (inBraces) {
                    if (!first) {
                        size += 1;
                    }
                    else {
                        first = false;
                    }
                    size += BlockWriter.sizeOfBlockItem(recon, item);
                }
                else if (inBrackets) {
                    if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {
                        size += recon.sizeOfBlock(recon.items(item), false, true);
                        if (next && recon.isText(next)) {
                            size += recon.sizeOfMarkupText(next);
                            next = void 0;
                        }
                        else if (next && !recon.isAttr(next)) {
                            size += 1;
                            inBraces = true;
                            first = true;
                        }
                        else {
                            size += 1;
                            inBrackets = false;
                        }
                    }
                    else {
                        size += 1;
                        size += recon.sizeOfItem(item);
                        inBraces = true;
                        first = false;
                    }
                }
                else if (markupSafe && recon.isText(item) && next && !recon.isField(next)
                    && !recon.isText(next) && !recon.isBool(next)) {
                    size += 1;
                    size += recon.sizeOfMarkupText(item);
                    inBrackets = true;
                }
                else if (inBlock && !inBraces) {
                    if (!first) {
                        size += 1;
                    }
                    else {
                        first = false;
                    }
                    size += BlockWriter.sizeOfBlockItem(recon, item);
                }
                else if (inMarkup && recon.isText(item) && !next) {
                    size += 1;
                    size += recon.sizeOfMarkupText(item);
                    size += 1;
                }
                else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)
                    && (!first && !next || next && recon.isAttr(next))) {
                    if (!first && (recon.isText(item) && recon.isIdent(item)
                        || recon.isNum(item) || recon.isBool(item))) {
                        size += 1;
                    }
                    size += recon.sizeOfItem(item);
                }
                else {
                    size += 1;
                    size += recon.sizeOfItem(item);
                    inBraces = true;
                    first = false;
                }
            }
            if (inBraces) {
                size += 1;
            }
            if (inBrackets) {
                size += 1;
            }
            return size;
        };
        BlockWriter.sizeOfBlockItem = function (recon, item) {
            var size = 0;
            if (recon.isField(item)) {
                size += recon.sizeOfSlot(recon.key(item), recon.value(item));
            }
            else {
                size += recon.sizeOfItem(item);
            }
            return size;
        };
        BlockWriter.write = function (output, recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step) {
            if (inBraces === void 0) { inBraces = false; }
            if (inBrackets === void 0) { inBrackets = false; }
            if (first === void 0) { first = true; }
            if (markupSafe === void 0) { markupSafe = true; }
            if (step === void 0) { step = 1; }
            do {
                if (step === 1) {
                    if (!next && !items.hasNext()) {
                        step = 10;
                        break;
                    }
                    else {
                        if (!next) {
                            item = items.next().value;
                        }
                        else {
                            item = next;
                            next = void 0;
                        }
                        if (items.hasNext()) {
                            next = items.next().value;
                        }
                        if (recon.isExpression(item)) {
                            markupSafe = false;
                        }
                        step = 2;
                    }
                }
                if (step === 2 && output.isCont()) {
                    if (inBrackets && recon.isAttr(item)) {
                        if (inBraces) {
                            output = output.write(125);
                            inBraces = false;
                        }
                        step = 3;
                    }
                    else {
                        step = 4;
                    }
                }
                if (step === 3 && output.isCont()) {
                    output = output.write(93);
                    inBrackets = false;
                    step = 4;
                }
                if (step === 4 && output.isCont()) {
                    if (recon.isAttr(item)) {
                        if (inBraces) {
                            output = output.write(125);
                            inBraces = false;
                        }
                        else if (inBrackets) {
                            output = output.write(93);
                            inBrackets = false;
                        }
                        part = recon.writeItem(item, output);
                        first = false;
                        step = 7;
                    }
                    else if (inBrackets && recon.isText(item)) {
                        if (inBraces) {
                            output = output.write(125);
                            inBraces = false;
                        }
                        part = recon.writeMarkupText(item, output);
                        step = 7;
                    }
                    else if (inBraces) {
                        if (!first) {
                            output = output.write(44);
                        }
                        else {
                            first = false;
                        }
                        part = BlockWriter.writeBlockItem(output, recon, item);
                        step = 7;
                    }
                    else if (inBrackets) {
                        if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {
                            part = recon.writeBlock(recon.items(item), output, false, true);
                            step = 5;
                        }
                        else {
                            output = output.write(123);
                            part = recon.writeItem(item, output);
                            inBraces = true;
                            first = false;
                            step = 7;
                        }
                    }
                    else if (markupSafe && recon.isText(item) && next && !recon.isField(next)
                        && !recon.isText(next) && !recon.isBool(next)) {
                        output = output.write(91);
                        part = recon.writeMarkupText(item, output);
                        inBrackets = true;
                        step = 7;
                    }
                    else if (inBlock && !inBraces) {
                        if (!first) {
                            output = output.write(44);
                        }
                        else {
                            first = false;
                        }
                        part = BlockWriter.writeBlockItem(output, recon, item);
                        step = 7;
                    }
                    else if (inMarkup && recon.isText(item) && !next) {
                        output = output.write(91);
                        part = recon.writeMarkupText(item, output);
                        step = 8;
                    }
                    else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)
                        && (!first && !next || next && recon.isAttr(next))) {
                        if (!first && (recon.isText(item) && recon.isIdent(item)
                            || recon.isNum(item) || recon.isBool(item))) {
                            output = output.write(32);
                        }
                        part = recon.writeItem(item, output);
                        step = 7;
                    }
                    else {
                        output = output.write(123);
                        part = recon.writeItem(item, output);
                        inBraces = true;
                        first = false;
                        step = 7;
                    }
                }
                if (step === 5) {
                    part = part.pull(output);
                    if (part.isDone()) {
                        part = void 0;
                        step = 6;
                    }
                    else if (part.isError()) {
                        return part.asError();
                    }
                }
                if (step === 6 && output.isCont()) {
                    if (next && recon.isText(next)) {
                        part = recon.writeMarkupText(next, output);
                        next = void 0;
                        step = 7;
                    }
                    else if (next && !recon.isAttr(next)) {
                        output = output.write(123);
                        inBraces = true;
                        first = true;
                        step = 1;
                        continue;
                    }
                    else {
                        output = output.write(93);
                        inBrackets = false;
                        step = 1;
                        continue;
                    }
                }
                if (step === 7) {
                    part = part.pull(output);
                    if (part.isDone()) {
                        part = void 0;
                        step = 1;
                        continue;
                    }
                    else if (part.isError()) {
                        return part.asError();
                    }
                }
                if (step === 8) {
                    part = part.pull(output);
                    if (part.isDone()) {
                        part = void 0;
                        step = 9;
                    }
                    else if (part.isError()) {
                        return part.asError();
                    }
                }
                if (step === 9 && output.isCont()) {
                    output = output.write(93);
                    step = 1;
                    continue;
                }
                break;
            } while (true);
            if (step === 10) {
                if (inBraces) {
                    if (output.isCont()) {
                        output = output.write(125);
                        step = 11;
                    }
                }
                else {
                    step = 11;
                }
            }
            if (step === 11) {
                if (inBrackets) {
                    if (output.isCont()) {
                        output = output.write(93);
                        return Writer.done();
                    }
                }
                else {
                    return Writer.done();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new BlockWriter(recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step);
        };
        BlockWriter.writeBlockItem = function (output, recon, item) {
            if (recon.isField(item)) {
                return recon.writeSlot(recon.key(item), recon.value(item), output);
            }
            else {
                return recon.writeItem(item, output);
            }
        };
        return BlockWriter;
    }(Writer));

    var PrimaryWriter = (function (_super) {
        __extends(PrimaryWriter, _super);
        function PrimaryWriter(recon, items, inParens, first, item, next, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._items = items;
            _this._inParens = inParens;
            _this._first = first;
            _this._item = item;
            _this._next = next;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        PrimaryWriter.prototype.pull = function (output) {
            return PrimaryWriter.write(output, this._recon, this._items, this._inParens, this._first, this._item, this._next, this._part, this._step);
        };
        PrimaryWriter.sizeOf = function (recon, items) {
            var size = 0;
            var inParens = false;
            var first = true;
            var next;
            while (next || items.hasNext()) {
                var item = void 0;
                if (!next) {
                    item = items.next().value;
                }
                else {
                    item = next;
                    next = void 0;
                }
                if (items.hasNext()) {
                    next = items.next().value;
                }
                if (!inParens && !first) {
                    size += 1;
                }
                if (recon.isAttr(item)) {
                    if (inParens) {
                        size += 1;
                        inParens = false;
                    }
                    size += recon.sizeOfItem(item);
                    first = false;
                }
                else if (inParens) {
                    if (!first) {
                        size += 1;
                    }
                    else {
                        first = false;
                    }
                    size += recon.sizeOfBlockItem(item);
                }
                else if (recon.isValue(item) && !recon.isRecord(item)
                    && (!first && !next || next && recon.isAttr(next))) {
                    size += recon.sizeOfItem(item);
                }
                else {
                    size += 1;
                    size += recon.sizeOfItem(item);
                    inParens = true;
                    first = false;
                }
            }
            if (inParens) {
                size += 1;
            }
            return size;
        };
        PrimaryWriter.write = function (output, recon, items, inParens, first, item, next, part, step) {
            if (inParens === void 0) { inParens = false; }
            if (first === void 0) { first = true; }
            if (step === void 0) { step = 1; }
            do {
                if (step === 1) {
                    if (!next && !items.hasNext()) {
                        step = 5;
                        break;
                    }
                    else {
                        if (!next) {
                            item = items.next().value;
                        }
                        else {
                            item = next;
                            next = void 0;
                        }
                        if (items.hasNext()) {
                            next = items.next().value;
                        }
                        step = 2;
                    }
                }
                if (step === 2 && output.isCont()) {
                    if (!inParens && !first) {
                        output = output.write(32);
                    }
                    step = 3;
                }
                if (step === 3 && output.isCont()) {
                    if (recon.isAttr(item)) {
                        if (inParens) {
                            output = output.write(41);
                            inParens = false;
                        }
                        part = recon.writeItem(item, output);
                        first = false;
                        step = 4;
                    }
                    else if (inParens) {
                        if (!first) {
                            output = output.write(44);
                        }
                        else {
                            first = false;
                        }
                        part = recon.writeBlockItem(item, output);
                        step = 4;
                    }
                    else if (recon.isValue(item) && !recon.isRecord(item)
                        && (!first && !next || next && recon.isAttr(next))) {
                        part = recon.writeItem(item, output);
                        step = 4;
                    }
                    else {
                        output = output.write(40);
                        part = recon.writeItem(item, output);
                        inParens = true;
                        first = false;
                        step = 4;
                    }
                }
                if (step === 4) {
                    part = part.pull(output);
                    if (part.isDone()) {
                        part = void 0;
                        step = 1;
                        continue;
                    }
                    else if (part.isError()) {
                        return part.asError();
                    }
                }
                break;
            } while (true);
            if (step === 5) {
                if (inParens) {
                    if (output.isCont()) {
                        output = output.write(41);
                        return Writer.done();
                    }
                }
                else {
                    return Writer.done();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new PrimaryWriter(recon, items, inParens, first, item, next, part, step);
        };
        return PrimaryWriter;
    }(Writer));

    var MarkupTextWriter = (function (_super) {
        __extends(MarkupTextWriter, _super);
        function MarkupTextWriter(text, index, escape, step) {
            var _this = _super.call(this) || this;
            _this._text = text;
            _this._index = index;
            _this._escape = escape;
            _this._step = step;
            return _this;
        }
        MarkupTextWriter.prototype.pull = function (output) {
            return MarkupTextWriter.write(output, this._text, this._index, this._escape, this._step);
        };
        MarkupTextWriter.sizeOf = function (text) {
            var size = 0;
            for (var i = 0, n = text.length; i < n; i = text.offsetByCodePoints(i, 1)) {
                var c = text.codePointAt(i);
                if (c === void 0) {
                    c = text.charCodeAt(i);
                }
                if (c === 36 || c === 64 || c === 91 || c === 92
                    || c === 93 || c === 123 || c === 125 || c === 8
                    || c === 12 || c === 10 || c === 13 || c === 9) {
                    size += 2;
                }
                else if (c < 0x20) {
                    size += 6;
                }
                else {
                    size += Utf8.sizeOf(c);
                }
            }
            return size;
        };
        MarkupTextWriter.write = function (output, text, index, escape, step) {
            if (index === void 0) { index = 0; }
            if (escape === void 0) { escape = 0; }
            if (step === void 0) { step = 1; }
            var length = text.length;
            while (output.isCont()) {
                if (step === 1) {
                    if (index < length) {
                        var c = text.codePointAt(index);
                        if (c === void 0) {
                            c = text.charCodeAt(index);
                        }
                        index = text.offsetByCodePoints(index, 1);
                        if (c === 36 || c === 64 || c === 91 || c === 92
                            || c === 93 || c === 123 || c === 125) {
                            output = output.write(92);
                            escape = c;
                            step = 2;
                        }
                        else if (c === 8) {
                            output = output.write(92);
                            escape = 98;
                            step = 2;
                        }
                        else if (c === 12) {
                            output = output.write(92);
                            escape = 102;
                            step = 2;
                        }
                        else if (c === 10) {
                            output = output.write(92);
                            escape = 110;
                            step = 2;
                        }
                        else if (c === 13) {
                            output = output.write(92);
                            escape = 114;
                            step = 2;
                        }
                        else if (c === 9) {
                            output = output.write(92);
                            escape = 116;
                            step = 2;
                        }
                        else if (c < 0x20) {
                            output = output.write(92);
                            escape = c;
                            step = 3;
                        }
                        else {
                            output = output.write(c);
                        }
                    }
                    else {
                        return Writer.done();
                    }
                }
                else if (step === 2) {
                    output = output.write(escape);
                    escape = 0;
                    step = 1;
                }
                else if (step === 3) {
                    output = output.write(117);
                    step = 4;
                }
                else if (step === 4) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 12) & 0xf));
                    step = 5;
                }
                else if (step === 5) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 8) & 0xf));
                    step = 6;
                }
                else if (step === 6) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 4) & 0xf));
                    step = 7;
                }
                else if (step === 7) {
                    output = output.write(Base16.uppercase().encodeDigit(escape & 0xf));
                    escape = 0;
                    step = 1;
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new MarkupTextWriter(text, index, escape, step);
        };
        return MarkupTextWriter;
    }(Writer));

    var DataWriter = (function (_super) {
        __extends(DataWriter, _super);
        function DataWriter(array, part, step) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        DataWriter.prototype.pull = function (output) {
            return DataWriter.write(output, this._array, this._part, this._step);
        };
        DataWriter.sizeOf = function (length) {
            return 1 + ((Math.floor(length * 4 / 3) + 3) & ~3);
        };
        DataWriter.write = function (output, array, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(37);
                step = 2;
            }
            if (step === 2) {
                if (!part) {
                    part = Base64.standard().writeUint8Array(array, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    return Writer.done();
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new DataWriter(array, part, step);
        };
        return DataWriter;
    }(Writer));

    var IdentWriter = (function (_super) {
        __extends(IdentWriter, _super);
        function IdentWriter(ident, index) {
            var _this = _super.call(this) || this;
            _this._ident = ident;
            _this._index = index;
            return _this;
        }
        IdentWriter.prototype.pull = function (output) {
            return IdentWriter.write(output, this._ident, this._index);
        };
        IdentWriter.sizeOf = function (ident) {
            return Utf8.sizeOf(ident);
        };
        IdentWriter.write = function (output, ident, index) {
            if (index === void 0) { index = 0; }
            var c;
            var length = ident.length;
            if (length === 0) {
                return Writer.error(new WriterException("empty identifier"));
            }
            if (index === 0 && output.isCont()) {
                c = ident.codePointAt(0);
                if (c === void 0) {
                    c = ident.charCodeAt(0);
                }
                if (Recon.isIdentStartChar(c)) {
                    output = output.write(c);
                    index = ident.offsetByCodePoints(0, 1);
                }
            }
            while (index < length && output.isCont()) {
                c = ident.codePointAt(index);
                if (c === void 0) {
                    c = ident.charCodeAt(index);
                }
                if (Recon.isIdentChar(c)) {
                    output = output.write(c);
                    index = ident.offsetByCodePoints(index, 1);
                }
                else {
                    return Writer.error(new WriterException("invalid identifier"));
                }
            }
            if (index >= length) {
                return Writer.done();
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new IdentWriter(ident, index);
        };
        return IdentWriter;
    }(Writer));

    var StringWriter$1 = (function (_super) {
        __extends(StringWriter, _super);
        function StringWriter(string, index, escape, step) {
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._index = index;
            _this._escape = escape;
            _this._step = step;
            return _this;
        }
        StringWriter.prototype.pull = function (output) {
            return StringWriter.write(output, this._string, this._index, this._escape, this._step);
        };
        StringWriter.sizeOf = function (string) {
            var size = 0;
            size += 1;
            for (var i = 0, n = string.length; i < n; i = string.offsetByCodePoints(i, 1)) {
                var c = string.codePointAt(i);
                if (c === void 0) {
                    c = string.charCodeAt(i);
                }
                if (c === 34 || c === 92 || c === 8 || c === 12
                    || c === 10 || c === 13 || c === 9) {
                    size += 2;
                }
                else if (c < 0x20) {
                    size += 6;
                }
                else {
                    size += Utf8.sizeOf(c);
                }
            }
            size += 1;
            return size;
        };
        StringWriter.write = function (output, string, index, escape, step) {
            if (index === void 0) { index = 0; }
            if (escape === void 0) { escape = 0; }
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(34);
                step = 2;
            }
            var length = string.length;
            while (step >= 2 && step <= 8 && output.isCont()) {
                if (step === 2) {
                    if (index < length) {
                        var c = string.codePointAt(index);
                        if (c === void 0) {
                            c = string.charCodeAt(index);
                        }
                        index = string.offsetByCodePoints(index, 1);
                        if (c === 34 || c === 92) {
                            output = output.write(92);
                            escape = c;
                            step = 3;
                        }
                        else if (c === 8) {
                            output = output.write(92);
                            escape = 98;
                            step = 3;
                        }
                        else if (c === 12) {
                            output = output.write(92);
                            escape = 102;
                            step = 3;
                        }
                        else if (c === 10) {
                            output = output.write(92);
                            escape = 110;
                            step = 3;
                        }
                        else if (c === 13) {
                            output = output.write(92);
                            escape = 114;
                            step = 3;
                        }
                        else if (c === 9) {
                            output = output.write(92);
                            escape = 116;
                            step = 3;
                        }
                        else if (c < 0x20) {
                            output = output.write('\\');
                            escape = c;
                            step = 4;
                        }
                        else {
                            output = output.write(c);
                        }
                    }
                    else {
                        step = 9;
                        break;
                    }
                }
                else if (step === 3) {
                    output = output.write(escape);
                    escape = 0;
                    step = 2;
                }
                else if (step === 4) {
                    output = output.write(117);
                    step = 5;
                }
                else if (step === 5) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 12) & 0xf));
                    step = 6;
                }
                else if (step === 6) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 8) & 0xf));
                    step = 7;
                }
                else if (step === 7) {
                    output = output.write(Base16.uppercase().encodeDigit((escape >>> 4) & 0xf));
                    step = 8;
                }
                else if (step === 8) {
                    output = output.write(Base16.uppercase().encodeDigit(escape & 0xf));
                    escape = 0;
                    step = 2;
                }
            }
            if (step === 9 && output.isCont()) {
                output = output.write(34);
                return Writer.done();
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new StringWriter(string, index, escape, step);
        };
        return StringWriter;
    }(Writer));

    var LambdaFuncWriter = (function (_super) {
        __extends(LambdaFuncWriter, _super);
        function LambdaFuncWriter(recon, bindings, template, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._bindings = bindings;
            _this._template = template;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        LambdaFuncWriter.prototype.pull = function (output) {
            return LambdaFuncWriter.write(output, this._recon, this._bindings, this._template, this._part, this._step);
        };
        LambdaFuncWriter.sizeOf = function (recon, bindings, template) {
            var size = 0;
            size += recon.sizeOfPrimary(bindings);
            size += 4;
            size += recon.sizeOfValue(template);
            return size;
        };
        LambdaFuncWriter.write = function (output, recon, bindings, template, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (!part) {
                    part = recon.writePrimary(bindings, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 2;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 2 && output.isCont()) {
                output = output.write(32);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(61);
                step = 4;
            }
            if (step === 4 && output.isCont()) {
                output = output.write(62);
                step = 5;
            }
            if (step === 5 && output.isCont()) {
                output = output.write(32);
                step = 6;
            }
            if (step === 6) {
                if (part == null) {
                    part = recon.writeValue(template, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    return Writer.done();
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new LambdaFuncWriter(recon, bindings, template, part, step);
        };
        return LambdaFuncWriter;
    }(Writer));

    var ConditionalOperatorWriter = (function (_super) {
        __extends(ConditionalOperatorWriter, _super);
        function ConditionalOperatorWriter(recon, ifTerm, thenTerm, elseTerm, precedence, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._ifTerm = ifTerm;
            _this._thenTerm = thenTerm;
            _this._elseTerm = elseTerm;
            _this._precedence = precedence;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        ConditionalOperatorWriter.prototype.pull = function (output) {
            return ConditionalOperatorWriter.write(output, this._recon, this._ifTerm, this._thenTerm, this._elseTerm, this._precedence, this._part, this._step);
        };
        ConditionalOperatorWriter.sizeOf = function (recon, ifTerm, thenTerm, elseTerm, precedence) {
            var size = 0;
            if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
                size += 1;
                size += recon.sizeOfItem(ifTerm);
                size += 1;
            }
            else {
                size += recon.sizeOfItem(ifTerm);
            }
            size += 3;
            size += recon.sizeOfItem(thenTerm);
            size += 3;
            size += recon.sizeOfItem(elseTerm);
            return size;
        };
        ConditionalOperatorWriter.write = function (output, recon, ifTerm, thenTerm, elseTerm, precedence, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
                    if (output.isCont()) {
                        output = output.write(40);
                        step = 2;
                    }
                }
                else {
                    step = 2;
                }
            }
            if (step === 2) {
                if (!part) {
                    part = recon.writeItem(ifTerm, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 3;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 3) {
                if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
                    if (output.isCont()) {
                        output = output.write(41);
                        step = 4;
                    }
                }
                else {
                    step = 4;
                }
            }
            if (step === 4 && output.isCont()) {
                output = output.write(32);
                step = 5;
            }
            if (step === 5 && output.isCont()) {
                output = output.write(63);
                step = 6;
            }
            if (step === 6 && output.isCont()) {
                output = output.write(32);
                step = 7;
            }
            if (step === 7) {
                if (!part) {
                    part = recon.writeItem(thenTerm, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 8;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 8 && output.isCont()) {
                output = output.write(32);
                step = 9;
            }
            if (step === 9 && output.isCont()) {
                output = output.write(58);
                step = 10;
            }
            if (step === 10 && output.isCont()) {
                output = output.write(32);
                step = 11;
            }
            if (step === 11) {
                if (!part) {
                    part = recon.writeItem(elseTerm, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    return Writer.done();
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new ConditionalOperatorWriter(recon, ifTerm, thenTerm, elseTerm, precedence, part, step);
        };
        return ConditionalOperatorWriter;
    }(Writer));

    var InfixOperatorWriter = (function (_super) {
        __extends(InfixOperatorWriter, _super);
        function InfixOperatorWriter(recon, lhs, operator, rhs, precedence, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._lhs = lhs;
            _this._operator = operator;
            _this._rhs = rhs;
            _this._precedence = precedence;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        InfixOperatorWriter.prototype.pull = function (output) {
            return InfixOperatorWriter.write(output, this._recon, this._lhs, this._operator, this._rhs, this._precedence, this._part, this._step);
        };
        InfixOperatorWriter.sizeOf = function (recon, lhs, operator, rhs, precedence) {
            var size = 0;
            if (recon.precedence(lhs) < precedence) {
                size += 1;
                size += recon.sizeOfItem(lhs);
                size += 1;
            }
            else {
                size += recon.sizeOfItem(lhs);
            }
            size += 1;
            size += Utf8.sizeOf(operator);
            size += 1;
            if (recon.precedence(rhs) < precedence) {
                size += 1;
                size += recon.sizeOfItem(rhs);
                size += 1;
            }
            else {
                size += recon.sizeOfItem(rhs);
            }
            return size;
        };
        InfixOperatorWriter.write = function (output, recon, lhs, operator, rhs, precedence, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (recon.precedence(lhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(40);
                        step = 2;
                    }
                }
                else {
                    step = 2;
                }
            }
            if (step === 2) {
                if (!part) {
                    part = recon.writeItem(lhs, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 3;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 3) {
                if (recon.precedence(lhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(41);
                        step = 4;
                    }
                }
                else {
                    step = 4;
                }
            }
            if (step === 4 && output.isCont()) {
                output = output.write(32);
                step = 5;
            }
            if (step === 5) {
                if (!part) {
                    part = Unicode.writeString(operator, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 6;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 6 && output.isCont()) {
                output = output.write(32);
                step = 7;
            }
            if (step === 7) {
                if (recon.precedence(rhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(40);
                        step = 8;
                    }
                }
                else {
                    step = 8;
                }
            }
            if (step === 8) {
                if (!part) {
                    part = recon.writeItem(rhs, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 9;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 9) {
                if (recon.precedence(rhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(41);
                        return Writer.done();
                    }
                }
                else {
                    return Writer.done();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new InfixOperatorWriter(recon, lhs, operator, rhs, precedence, part, step);
        };
        return InfixOperatorWriter;
    }(Writer));

    var PrefixOperatorWriter = (function (_super) {
        __extends(PrefixOperatorWriter, _super);
        function PrefixOperatorWriter(recon, operator, rhs, precedence, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._operator = operator;
            _this._rhs = rhs;
            _this._precedence = precedence;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        PrefixOperatorWriter.prototype.pull = function (output) {
            return PrefixOperatorWriter.write(output, this._recon, this._operator, this._rhs, this._precedence, this._part, this._step);
        };
        PrefixOperatorWriter.sizeOf = function (recon, operator, rhs, precedence) {
            var size = 0;
            size += Utf8.sizeOf(operator);
            if (recon.precedence(rhs) < precedence) {
                size += 1;
                size += recon.sizeOfItem(rhs);
                size += 1;
            }
            else {
                size += recon.sizeOfItem(rhs);
            }
            return size;
        };
        PrefixOperatorWriter.write = function (output, recon, operator, rhs, precedence, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (!part) {
                    part = Unicode.writeString(operator, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 2;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 2) {
                if (recon.precedence(rhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(40);
                        step = 3;
                    }
                }
                else {
                    step = 3;
                }
            }
            if (step === 3) {
                if (!part) {
                    part = recon.writeItem(rhs, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 4;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 4) {
                if (recon.precedence(rhs) < precedence) {
                    if (output.isCont()) {
                        output = output.write(41);
                        return Writer.done();
                    }
                }
                else {
                    return Writer.done();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new PrefixOperatorWriter(recon, operator, rhs, precedence, part, step);
        };
        return PrefixOperatorWriter;
    }(Writer));

    var InvokeOperatorWriter = (function (_super) {
        __extends(InvokeOperatorWriter, _super);
        function InvokeOperatorWriter(recon, func, args, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._func = func;
            _this._args = args;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        InvokeOperatorWriter.prototype.pull = function (output) {
            return InvokeOperatorWriter.write(output, this._recon, this._func, this._args, this._part, this._step);
        };
        InvokeOperatorWriter.sizeOf = function (recon, func, args) {
            var size = 0;
            size += recon.sizeOfValue(func);
            size += 1;
            size += recon.sizeOfBlockValue(args);
            size += 1;
            return size;
        };
        InvokeOperatorWriter.write = function (output, recon, func, args, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (!part) {
                    part = recon.writeValue(func, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 2;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 2 && output.isCont()) {
                output = output.write(40);
                step = 3;
            }
            if (step === 3) {
                if (!part) {
                    part = recon.writeBlockValue(args, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 4;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 4 && output.isCont()) {
                output = output.write(41);
                return Writer.done();
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new InvokeOperatorWriter(recon, func, args, part, step);
        };
        return InvokeOperatorWriter;
    }(Writer));

    var LiteralSelectorWriter = (function (_super) {
        __extends(LiteralSelectorWriter, _super);
        function LiteralSelectorWriter(recon, item, then, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._item = item;
            _this._then = then;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        LiteralSelectorWriter.prototype.pull = function (output) {
            return LiteralSelectorWriter.write(output, this._recon, this._item, this._then, this._part, this._step);
        };
        LiteralSelectorWriter.sizeOf = function (recon, item, then) {
            var size = 0;
            if (recon.precedence(item) < recon.precedence(recon.item(then))) {
                size += 1;
                size += recon.sizeOfItem(item);
                size += 1;
            }
            else {
                size += recon.sizeOfItem(item);
            }
            size += recon.sizeOfThen(then);
            return size;
        };
        LiteralSelectorWriter.write = function (output, recon, item, then, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (recon.precedence(item) < recon.precedence(recon.item(then))) {
                    if (output.isCont()) {
                        output = output.write(40);
                        step = 2;
                    }
                }
                else {
                    step = 2;
                }
            }
            if (step === 2) {
                if (!part) {
                    part = recon.writeItem(item, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 3;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 3) {
                if (recon.precedence(item) < recon.precedence(recon.item(then))) {
                    if (output.isCont()) {
                        output = output.write(41);
                        step = 4;
                    }
                }
                else {
                    step = 4;
                }
            }
            if (step === 4) {
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new LiteralSelectorWriter(recon, item, then, part, step);
        };
        return LiteralSelectorWriter;
    }(Writer));

    var GetSelectorWriter = (function (_super) {
        __extends(GetSelectorWriter, _super);
        function GetSelectorWriter(recon, key, then, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._key = key;
            _this._then = then;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        GetSelectorWriter.prototype.pull = function (output) {
            return GetSelectorWriter.write(output, this._recon, this._key, this._then, this._part, this._step);
        };
        GetSelectorWriter.sizeOf = function (recon, key, then) {
            var size = 1;
            if (recon.isRecord(recon.item(key))) {
                size += 1;
                size += recon.sizeOfBlockValue(key);
                size += 1;
            }
            else {
                size += recon.sizeOfValue(key);
            }
            size += recon.sizeOfThen(then);
            return size;
        };
        GetSelectorWriter.write = function (output, recon, key, then, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3) {
                if (recon.isRecord(recon.item(key))) {
                    if (output.isCont()) {
                        output = output.write(123);
                        step = 4;
                    }
                }
                else {
                    step = 4;
                }
            }
            if (step === 4) {
                if (!part) {
                    if (recon.isRecord(recon.item(key))) {
                        part = recon.writeBlockValue(key, output);
                    }
                    else {
                        part = recon.writeValue(key, output);
                    }
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 5;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 5) {
                if (recon.isRecord(recon.item(key))) {
                    if (output.isCont()) {
                        output = output.write(125);
                        step = 6;
                    }
                }
                else {
                    step = 6;
                }
            }
            if (step === 6) {
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new GetSelectorWriter(recon, key, then, part, step);
        };
        GetSelectorWriter.writeThen = function (output, recon, key, then) {
            return GetSelectorWriter.write(output, recon, key, then, void 0, 2);
        };
        return GetSelectorWriter;
    }(Writer));

    var GetAttrSelectorWriter = (function (_super) {
        __extends(GetAttrSelectorWriter, _super);
        function GetAttrSelectorWriter(recon, key, then, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._key = key;
            _this._then = then;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        GetAttrSelectorWriter.prototype.pull = function (output) {
            return GetAttrSelectorWriter.write(output, this._recon, this._key, this._then, this._part, this._step);
        };
        GetAttrSelectorWriter.sizeOf = function (recon, key, then) {
            var size = 2;
            size += recon.sizeOfValue(key);
            size += recon.sizeOfThen(then);
            return size;
        };
        GetAttrSelectorWriter.write = function (output, recon, key, then, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(64);
                step = 4;
            }
            if (step === 4) {
                if (!part) {
                    part = recon.writeValue(key, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    return recon.writeThen(then, output);
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new GetAttrSelectorWriter(recon, key, then, part, step);
        };
        GetAttrSelectorWriter.writeThen = function (output, recon, key, then) {
            return GetAttrSelectorWriter.write(output, recon, key, then, void 0, 2);
        };
        return GetAttrSelectorWriter;
    }(Writer));

    var GetItemSelectorWriter = (function (_super) {
        __extends(GetItemSelectorWriter, _super);
        function GetItemSelectorWriter(recon, index, then, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._index = index;
            _this._then = then;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        GetItemSelectorWriter.prototype.pull = function (output) {
            return GetItemSelectorWriter.write(output, this._recon, this._index, this._then, this._part, this._step);
        };
        GetItemSelectorWriter.sizeOf = function (recon, index, then) {
            var size = 2;
            size += recon.sizeOfValue(index);
            size += recon.sizeOfThen(then);
            return size;
        };
        GetItemSelectorWriter.sizeOfThen = function (recon, index, then) {
            var size = 1;
            size += recon.sizeOfValue(index);
            size += recon.sizeOfThen(then);
            return size;
        };
        GetItemSelectorWriter.write = function (output, recon, index, then, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 2;
            }
            if (step === 2 && output.isCont()) {
                output = output.write(35);
                step = 3;
            }
            if (step === 3) {
                if (!part) {
                    part = recon.writeValue(index, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    return recon.writeThen(then, output);
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new GetItemSelectorWriter(recon, index, then, part, step);
        };
        GetItemSelectorWriter.writeThen = function (output, recon, index, then) {
            return GetItemSelectorWriter.write(output, recon, index, then, void 0, 2);
        };
        return GetItemSelectorWriter;
    }(Writer));

    var KeysSelectorWriter = (function (_super) {
        __extends(KeysSelectorWriter, _super);
        function KeysSelectorWriter(recon, then, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._then = then;
            _this._step = step;
            return _this;
        }
        KeysSelectorWriter.prototype.pull = function (output) {
            return KeysSelectorWriter.write(output, this._recon, this._then, this._step);
        };
        KeysSelectorWriter.sizeOf = function (recon, then) {
            var size = 3;
            size += recon.sizeOfThen(then);
            return size;
        };
        KeysSelectorWriter.write = function (output, recon, then, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(42);
                step = 4;
            }
            if (step === 4 && output.isCont()) {
                output = output.write(58);
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new KeysSelectorWriter(recon, then, step);
        };
        KeysSelectorWriter.writeThen = function (output, recon, then) {
            return KeysSelectorWriter.write(output, recon, then, 2);
        };
        return KeysSelectorWriter;
    }(Writer));

    var ValuesSelectorWriter = (function (_super) {
        __extends(ValuesSelectorWriter, _super);
        function ValuesSelectorWriter(recon, then, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._then = then;
            _this._step = step;
            return _this;
        }
        ValuesSelectorWriter.prototype.pull = function (output) {
            return ValuesSelectorWriter.write(output, this._recon, this._then, this._step);
        };
        ValuesSelectorWriter.sizeOf = function (recon, then) {
            var size = 3;
            size += recon.sizeOfThen(then);
            return size;
        };
        ValuesSelectorWriter.write = function (output, recon, then, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(58);
                step = 4;
            }
            if (step === 4 && output.isCont()) {
                output = output.write(42);
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new ValuesSelectorWriter(recon, then, step);
        };
        ValuesSelectorWriter.writeThen = function (output, recon, then) {
            return ValuesSelectorWriter.write(output, recon, then, 2);
        };
        return ValuesSelectorWriter;
    }(Writer));

    var ChildrenSelectorWriter = (function (_super) {
        __extends(ChildrenSelectorWriter, _super);
        function ChildrenSelectorWriter(recon, then, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._then = then;
            _this._step = step;
            return _this;
        }
        ChildrenSelectorWriter.prototype.pull = function (output) {
            return ChildrenSelectorWriter.write(output, this._recon, this._then, this._step);
        };
        ChildrenSelectorWriter.sizeOf = function (recon, then) {
            var size = 2;
            size += recon.sizeOfThen(then);
            return size;
        };
        ChildrenSelectorWriter.write = function (output, recon, then, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(42);
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new ChildrenSelectorWriter(recon, then, step);
        };
        ChildrenSelectorWriter.writeThen = function (output, recon, then) {
            return ChildrenSelectorWriter.write(output, recon, then, 2);
        };
        return ChildrenSelectorWriter;
    }(Writer));

    var DescendantsSelectorWriter = (function (_super) {
        __extends(DescendantsSelectorWriter, _super);
        function DescendantsSelectorWriter(recon, then, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._then = then;
            _this._step = step;
            return _this;
        }
        DescendantsSelectorWriter.prototype.pull = function (output) {
            return DescendantsSelectorWriter.write(output, this._recon, this._then, this._step);
        };
        DescendantsSelectorWriter.sizeOf = function (recon, then) {
            var size = 3;
            size += recon.sizeOfThen(then);
            return size;
        };
        DescendantsSelectorWriter.write = function (output, recon, then, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 3;
            }
            else if (step === 2 && output.isCont()) {
                output = output.write(46);
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                output = output.write(42);
                step = 4;
            }
            if (step === 4 && output.isCont()) {
                output = output.write(42);
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new DescendantsSelectorWriter(recon, then, step);
        };
        DescendantsSelectorWriter.writeThen = function (output, recon, then) {
            return DescendantsSelectorWriter.write(output, recon, then, 2);
        };
        return DescendantsSelectorWriter;
    }(Writer));

    var FilterSelectorWriter = (function (_super) {
        __extends(FilterSelectorWriter, _super);
        function FilterSelectorWriter(recon, predicate, then, part, step) {
            var _this = _super.call(this) || this;
            _this._recon = recon;
            _this._predicate = predicate;
            _this._then = then;
            _this._part = part;
            _this._step = step;
            return _this;
        }
        FilterSelectorWriter.prototype.pull = function (output) {
            return FilterSelectorWriter.write(output, this._recon, this._predicate, this._then, this._part, this._step);
        };
        FilterSelectorWriter.sizeOf = function (recon, predicate, then) {
            var size = 2;
            size += recon.sizeOfValue(predicate);
            size += 1;
            size += recon.sizeOfThen(then);
            return size;
        };
        FilterSelectorWriter.sizeOfThen = function (recon, predicate, then) {
            var size = 1;
            size += recon.sizeOfValue(predicate);
            size += 1;
            size += recon.sizeOfThen(then);
            return size;
        };
        FilterSelectorWriter.write = function (output, recon, predicate, then, part, step) {
            if (step === void 0) { step = 1; }
            if (step === 1 && output.isCont()) {
                output = output.write(36);
                step = 2;
            }
            if (step === 2 && output.isCont()) {
                output = output.write(91);
                step = 3;
            }
            if (step === 3) {
                if (!part) {
                    part = recon.writeValue(predicate, output);
                }
                else {
                    part = part.pull(output);
                }
                if (part.isDone()) {
                    part = void 0;
                    step = 4;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 4 && output.isCont()) {
                output = output.write(93);
                return recon.writeThen(then, output);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new FilterSelectorWriter(recon, predicate, then, part, step);
        };
        FilterSelectorWriter.writeThen = function (output, recon, predicate, then) {
            return FilterSelectorWriter.write(output, recon, predicate, then, void 0, 2);
        };
        return FilterSelectorWriter;
    }(Writer));

    var ReconWriter = (function () {
        function ReconWriter() {
        }
        ReconWriter.prototype.sizeOfAttr = function (key, value) {
            return AttrWriter.sizeOf(this, key, value);
        };
        ReconWriter.prototype.writeAttr = function (key, value, output) {
            return AttrWriter.write(output, this, key, value);
        };
        ReconWriter.prototype.sizeOfSlot = function (key, value) {
            return SlotWriter.sizeOf(this, key, value);
        };
        ReconWriter.prototype.writeSlot = function (key, value, output) {
            return SlotWriter.write(output, this, key, value);
        };
        ReconWriter.prototype.sizeOfBlock = function (item, inBlock, inMarkup) {
            if (arguments.length === 3) {
                return BlockWriter.sizeOf(this, item, inBlock, inMarkup);
            }
            else {
                var items = this.items(item);
                if (items.hasNext()) {
                    return BlockWriter.sizeOf(this, items, this.isBlockSafe(this.items(item)), false);
                }
                else {
                    return 2;
                }
            }
        };
        ReconWriter.prototype.writeBlock = function (item, output, inBlock, inMarkup) {
            if (arguments.length === 4) {
                return BlockWriter.write(output, this, item, inBlock, inMarkup);
            }
            else {
                var items = this.items(item);
                if (items.hasNext()) {
                    return BlockWriter.write(output, this, items, this.isBlockSafe(this.items(item)), false);
                }
                else {
                    return Unicode.writeString("{}", output);
                }
            }
        };
        ReconWriter.prototype.sizeOfRecord = function (item) {
            var items = this.items(item);
            if (items.hasNext()) {
                return BlockWriter.sizeOf(this, items, false, false);
            }
            else {
                return 2;
            }
        };
        ReconWriter.prototype.writeRecord = function (item, output) {
            var items = this.items(item);
            if (items.hasNext()) {
                return BlockWriter.write(output, this, items, false, false);
            }
            else {
                return Unicode.writeString("{}", output);
            }
        };
        ReconWriter.prototype.sizeOfPrimary = function (value) {
            if (this.isRecord(this.item(value))) {
                var items = this.items(this.item(value));
                if (items.hasNext()) {
                    return PrimaryWriter.sizeOf(this, items);
                }
            }
            else if (!this.isExtant(this.item(value))) {
                return this.sizeOfValue(value);
            }
            return 2;
        };
        ReconWriter.prototype.writePrimary = function (value, output) {
            if (this.isRecord(this.item(value))) {
                var items = this.items(this.item(value));
                if (items.hasNext()) {
                    return PrimaryWriter.write(output, this, items);
                }
            }
            else if (!this.isExtant(this.item(value))) {
                return this.writeValue(value, output);
            }
            return Unicode.writeString("()", output);
        };
        ReconWriter.prototype.isBlockSafe = function (items) {
            while (items.hasNext()) {
                if (this.isAttr(items.next().value)) {
                    return false;
                }
            }
            return true;
        };
        ReconWriter.prototype.isMarkupSafe = function (items) {
            if (!items.hasNext() || !this.isAttr(items.next().value)) {
                return false;
            }
            while (items.hasNext()) {
                if (this.isAttr(items.next().value)) {
                    return false;
                }
            }
            return true;
        };
        ReconWriter.prototype.sizeOfMarkupText = function (item) {
            if (typeof item !== "string") {
                item = this.string(item);
            }
            return MarkupTextWriter.sizeOf(item);
        };
        ReconWriter.prototype.writeMarkupText = function (item, output) {
            if (typeof item !== "string") {
                item = this.string(item);
            }
            return MarkupTextWriter.write(output, item);
        };
        ReconWriter.prototype.sizeOfData = function (length) {
            return DataWriter.sizeOf(length);
        };
        ReconWriter.prototype.writeData = function (value, output) {
            if (value) {
                return DataWriter.write(output, value);
            }
            else {
                return Unicode.writeString("%", output);
            }
        };
        ReconWriter.prototype.isIdent = function (value) {
            if (typeof value !== "string") {
                value = this.string(value);
            }
            var n = value.length;
            var c;
            if (n === 0 || (c = value.codePointAt(0), c !== void 0 && !Recon.isIdentStartChar(c))) {
                return false;
            }
            for (var i = value.offsetByCodePoints(0, 1); i < n; i = value.offsetByCodePoints(i, 1)) {
                c = value.codePointAt(i);
                if (c === void 0 || !Recon.isIdentChar(c)) {
                    return false;
                }
            }
            return true;
        };
        ReconWriter.prototype.sizeOfText = function (value) {
            if (this.isIdent(value)) {
                return IdentWriter.sizeOf(value);
            }
            else {
                return StringWriter$1.sizeOf(value);
            }
        };
        ReconWriter.prototype.writeText = function (value, output) {
            if (this.isIdent(value)) {
                return IdentWriter.write(output, value);
            }
            else {
                return StringWriter$1.write(output, value);
            }
        };
        ReconWriter.prototype.sizeOfNum = function (value) {
            if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
                var size = Base10.countDigits(value);
                if (value < 0) {
                    size += 1;
                }
                return size;
            }
            else {
                return ("" + value).length;
            }
        };
        ReconWriter.prototype.writeNum = function (value, output) {
            if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
                return Base10.writeInteger(value, output);
            }
            else {
                return Unicode.writeString("" + value, output);
            }
        };
        ReconWriter.prototype.sizeOfUint32 = function (value) {
            return 10;
        };
        ReconWriter.prototype.writeUint32 = function (value, output) {
            return Base16.lowercase().writeIntegerLiteral(value, output, 8);
        };
        ReconWriter.prototype.sizeOfUint64 = function (value) {
            return 18;
        };
        ReconWriter.prototype.writeUint64 = function (value, output) {
            return Base16.lowercase().writeIntegerLiteral(value, output, 16);
        };
        ReconWriter.prototype.sizeOfBool = function (value) {
            return value ? 4 : 5;
        };
        ReconWriter.prototype.writeBool = function (value, output) {
            return Unicode.writeString(value ? "true" : "false", output);
        };
        ReconWriter.prototype.sizeOfLambdaFunc = function (bindings, template) {
            return LambdaFuncWriter.sizeOf(this, bindings, template);
        };
        ReconWriter.prototype.writeLambdaFunc = function (bindings, template, output) {
            return LambdaFuncWriter.write(output, this, bindings, template);
        };
        ReconWriter.prototype.sizeOfConditionalOperator = function (ifTerm, thenTerm, elseTerm, precedence) {
            return ConditionalOperatorWriter.sizeOf(this, ifTerm, thenTerm, elseTerm, precedence);
        };
        ReconWriter.prototype.writeConditionalOperator = function (ifTerm, thenTerm, elseTerm, precedence, output) {
            return ConditionalOperatorWriter.write(output, this, ifTerm, thenTerm, elseTerm, precedence);
        };
        ReconWriter.prototype.sizeOfInfixOperator = function (lhs, operator, rhs, precedence) {
            return InfixOperatorWriter.sizeOf(this, lhs, operator, rhs, precedence);
        };
        ReconWriter.prototype.writeInfixOperator = function (lhs, operator, rhs, precedence, output) {
            return InfixOperatorWriter.write(output, this, lhs, operator, rhs, precedence);
        };
        ReconWriter.prototype.sizeOfPrefixOperator = function (operator, rhs, precedence) {
            return PrefixOperatorWriter.sizeOf(this, operator, rhs, precedence);
        };
        ReconWriter.prototype.writePrefixOperator = function (operator, rhs, precedence, output) {
            return PrefixOperatorWriter.write(output, this, operator, rhs, precedence);
        };
        ReconWriter.prototype.sizeOfInvokeOperator = function (func, args) {
            return InvokeOperatorWriter.sizeOf(this, func, args);
        };
        ReconWriter.prototype.writeInvokeOperator = function (func, args, output) {
            return InvokeOperatorWriter.write(output, this, func, args);
        };
        ReconWriter.prototype.sizeOfIdentitySelector = function () {
            return 0;
        };
        ReconWriter.prototype.writeIdentitySelector = function (output) {
            return Writer.done();
        };
        ReconWriter.prototype.sizeOfThenIdentitySelector = function () {
            return 0;
        };
        ReconWriter.prototype.writeThenIdentitySelector = function (output) {
            return Writer.done();
        };
        ReconWriter.prototype.sizeOfLiteralSelector = function (item, then) {
            return LiteralSelectorWriter.sizeOf(this, item, then);
        };
        ReconWriter.prototype.writeLiteralSelector = function (item, then, output) {
            return LiteralSelectorWriter.write(output, this, item, then);
        };
        ReconWriter.prototype.sizeOfThenLiteralSelector = function (item, then) {
            return 0;
        };
        ReconWriter.prototype.writeThenLiteralSelector = function (item, then, output) {
            return Writer.done();
        };
        ReconWriter.prototype.sizeOfGetSelector = function (key, then) {
            return GetSelectorWriter.sizeOf(this, key, then);
        };
        ReconWriter.prototype.writeGetSelector = function (key, then, output) {
            return GetSelectorWriter.write(output, this, key, then);
        };
        ReconWriter.prototype.sizeOfThenGetSelector = function (key, then) {
            return GetSelectorWriter.sizeOf(this, key, then);
        };
        ReconWriter.prototype.writeThenGetSelector = function (key, then, output) {
            return GetSelectorWriter.writeThen(output, this, key, then);
        };
        ReconWriter.prototype.sizeOfGetAttrSelector = function (key, then) {
            return GetAttrSelectorWriter.sizeOf(this, key, then);
        };
        ReconWriter.prototype.writeGetAttrSelector = function (key, then, output) {
            return GetAttrSelectorWriter.write(output, this, key, then);
        };
        ReconWriter.prototype.sizeOfThenGetAttrSelector = function (key, then) {
            return GetAttrSelectorWriter.sizeOf(this, key, then);
        };
        ReconWriter.prototype.writeThenGetAttrSelector = function (key, then, output) {
            return GetAttrSelectorWriter.writeThen(output, this, key, then);
        };
        ReconWriter.prototype.sizeOfGetItemSelector = function (index, then) {
            return GetItemSelectorWriter.sizeOf(this, index, then);
        };
        ReconWriter.prototype.writeGetItemSelector = function (index, then, output) {
            return GetItemSelectorWriter.write(output, this, index, then);
        };
        ReconWriter.prototype.sizeOfThenGetItemSelector = function (index, then) {
            return GetItemSelectorWriter.sizeOfThen(this, index, then);
        };
        ReconWriter.prototype.writeThenGetItemSelector = function (index, then, output) {
            return GetItemSelectorWriter.writeThen(output, this, index, then);
        };
        ReconWriter.prototype.sizeOfKeysSelector = function (then) {
            return KeysSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeKeysSelector = function (then, output) {
            return KeysSelectorWriter.write(output, this, then);
        };
        ReconWriter.prototype.sizeOfThenKeysSelector = function (then) {
            return KeysSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeThenKeysSelector = function (then, output) {
            return KeysSelectorWriter.writeThen(output, this, then);
        };
        ReconWriter.prototype.sizeOfValuesSelector = function (then) {
            return ValuesSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeValuesSelector = function (then, output) {
            return ValuesSelectorWriter.write(output, this, then);
        };
        ReconWriter.prototype.sizeOfThenValuesSelector = function (then) {
            return ValuesSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeThenValuesSelector = function (then, output) {
            return ValuesSelectorWriter.writeThen(output, this, then);
        };
        ReconWriter.prototype.sizeOfChildrenSelector = function (then) {
            return ChildrenSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeChildrenSelector = function (then, output) {
            return ChildrenSelectorWriter.write(output, this, then);
        };
        ReconWriter.prototype.sizeOfThenChildrenSelector = function (then) {
            return ChildrenSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeThenChildrenSelector = function (then, output) {
            return ChildrenSelectorWriter.writeThen(output, this, then);
        };
        ReconWriter.prototype.sizeOfDescendantsSelector = function (then) {
            return DescendantsSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeDescendantsSelector = function (then, output) {
            return DescendantsSelectorWriter.write(output, this, then);
        };
        ReconWriter.prototype.sizeOfThenDescendantsSelector = function (then) {
            return DescendantsSelectorWriter.sizeOf(this, then);
        };
        ReconWriter.prototype.writeThenDescendantsSelector = function (then, output) {
            return DescendantsSelectorWriter.writeThen(output, this, then);
        };
        ReconWriter.prototype.sizeOfFilterSelector = function (predicate, then) {
            return FilterSelectorWriter.sizeOf(this, predicate, then);
        };
        ReconWriter.prototype.writeFilterSelector = function (predicate, then, output) {
            return FilterSelectorWriter.write(output, this, predicate, then);
        };
        ReconWriter.prototype.sizeOfThenFilterSelector = function (predicate, then) {
            return FilterSelectorWriter.sizeOfThen(this, predicate, then);
        };
        ReconWriter.prototype.writeThenFilterSelector = function (predicate, then, output) {
            return FilterSelectorWriter.writeThen(output, this, predicate, then);
        };
        ReconWriter.prototype.sizeOfExtant = function () {
            return 0;
        };
        ReconWriter.prototype.writeExtant = function (output) {
            return Writer.done();
        };
        ReconWriter.prototype.sizeOfAbsent = function () {
            return 0;
        };
        ReconWriter.prototype.writeAbsent = function (output) {
            return Writer.done();
        };
        return ReconWriter;
    }());

    var ReconStructureWriter = (function (_super) {
        __extends(ReconStructureWriter, _super);
        function ReconStructureWriter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReconStructureWriter.prototype.isField = function (item) {
            return item instanceof Field;
        };
        ReconStructureWriter.prototype.isAttr = function (item) {
            return item instanceof Attr;
        };
        ReconStructureWriter.prototype.isSlot = function (item) {
            return item instanceof Slot;
        };
        ReconStructureWriter.prototype.isValue = function (item) {
            return item instanceof Value;
        };
        ReconStructureWriter.prototype.isRecord = function (item) {
            return item instanceof Record;
        };
        ReconStructureWriter.prototype.isText = function (item) {
            return item instanceof Text$1;
        };
        ReconStructureWriter.prototype.isNum = function (item) {
            return item instanceof Num;
        };
        ReconStructureWriter.prototype.isBool = function (item) {
            return item instanceof Bool;
        };
        ReconStructureWriter.prototype.isExpression = function (item) {
            return item instanceof Expression;
        };
        ReconStructureWriter.prototype.isExtant = function (item) {
            return item instanceof Extant;
        };
        ReconStructureWriter.prototype.items = function (item) {
            return item.iterator();
        };
        ReconStructureWriter.prototype.item = function (value) {
            return value;
        };
        ReconStructureWriter.prototype.key = function (item) {
            return item.key;
        };
        ReconStructureWriter.prototype.value = function (item) {
            return item.toValue();
        };
        ReconStructureWriter.prototype.string = function (item) {
            return item.stringValue("");
        };
        ReconStructureWriter.prototype.precedence = function (item) {
            return item.precedence();
        };
        ReconStructureWriter.prototype.sizeOfItem = function (item) {
            if (item instanceof Field) {
                if (item instanceof Attr) {
                    return this.sizeOfAttr(item.key, item.value);
                }
                else if (item instanceof Slot) {
                    return this.sizeOfSlot(item.key, item.value);
                }
            }
            else if (item instanceof Value) {
                return this.sizeOfValue(item);
            }
            throw new WriterException("No Recon serialization for " + item);
        };
        ReconStructureWriter.prototype.writeItem = function (item, output) {
            if (item instanceof Field) {
                if (item instanceof Attr) {
                    return this.writeAttr(item.key, item.value, output);
                }
                else if (item instanceof Slot) {
                    return this.writeSlot(item.key, item.value, output);
                }
            }
            else if (item instanceof Value) {
                return this.writeValue(item, output);
            }
            return Writer.error(new WriterException("No Recon serialization for " + item));
        };
        ReconStructureWriter.prototype.sizeOfValue = function (value) {
            if (value instanceof Record) {
                return this.sizeOfRecord(value);
            }
            else if (value instanceof Data) {
                return this.sizeOfData(value.size);
            }
            else if (value instanceof Text$1) {
                return this.sizeOfText(value.value);
            }
            else if (value instanceof Num) {
                if (value.isUint32()) {
                    return this.sizeOfUint32(value.value);
                }
                else if (value.isUint64()) {
                    return this.sizeOfUint64(value.value);
                }
                else {
                    return this.sizeOfNum(value.value);
                }
            }
            else if (value instanceof Bool) {
                return this.sizeOfBool(value.value);
            }
            else if (value instanceof Selector) {
                return this.sizeOfSelector(value);
            }
            else if (value instanceof Operator) {
                return this.sizeOfOperator(value);
            }
            else if (value instanceof Func) {
                return this.sizeOfFunc(value);
            }
            else if (value instanceof Extant) {
                return this.sizeOfExtant();
            }
            else if (value instanceof Absent) {
                return this.sizeOfAbsent();
            }
            throw new WriterException("No Recon serialization for " + value);
        };
        ReconStructureWriter.prototype.writeValue = function (value, output) {
            if (value instanceof Record) {
                return this.writeRecord(value, output);
            }
            else if (value instanceof Data) {
                return this.writeData(value.asUint8Array(), output);
            }
            else if (value instanceof Text$1) {
                return this.writeText(value.value, output);
            }
            else if (value instanceof Num) {
                if (value.isUint32()) {
                    return this.writeUint32(value.value, output);
                }
                else if (value.isUint64()) {
                    return this.writeUint64(value.value, output);
                }
                else {
                    return this.writeNum(value.value, output);
                }
            }
            else if (value instanceof Bool) {
                return this.writeBool(value.value, output);
            }
            else if (value instanceof Selector) {
                return this.writeSelector(value, output);
            }
            else if (value instanceof Operator) {
                return this.writeOperator(value, output);
            }
            else if (value instanceof Func) {
                return this.writeFunc(value, output);
            }
            else if (value instanceof Extant) {
                return this.writeExtant(output);
            }
            else if (value instanceof Absent) {
                return this.writeAbsent(output);
            }
            return Writer.error(new WriterException("No Recon serialization for " + value));
        };
        ReconStructureWriter.prototype.sizeOfSelector = function (selector) {
            if (selector instanceof IdentitySelector) {
                return this.sizeOfIdentitySelector();
            }
            else if (selector instanceof LiteralSelector) {
                return this.sizeOfLiteralSelector(selector.item(), selector.then());
            }
            else if (selector instanceof GetSelector) {
                return this.sizeOfGetSelector(selector.accessor(), selector.then());
            }
            else if (selector instanceof GetAttrSelector) {
                return this.sizeOfGetAttrSelector(selector.accessor(), selector.then());
            }
            else if (selector instanceof GetItemSelector) {
                return this.sizeOfGetItemSelector(selector.accessor(), selector.then());
            }
            else if (selector instanceof KeysSelector) {
                return this.sizeOfKeysSelector(selector.then());
            }
            else if (selector instanceof ValuesSelector) {
                return this.sizeOfValuesSelector(selector.then());
            }
            else if (selector instanceof ChildrenSelector) {
                return this.sizeOfChildrenSelector(selector.then());
            }
            else if (selector instanceof DescendantsSelector) {
                return this.sizeOfDescendantsSelector(selector.then());
            }
            else if (selector instanceof FilterSelector) {
                return this.sizeOfFilterSelector(selector.predicate(), selector.then());
            }
            throw new WriterException("No Recon serialization for " + selector);
        };
        ReconStructureWriter.prototype.writeSelector = function (selector, output) {
            if (selector instanceof IdentitySelector) {
                return this.writeIdentitySelector(output);
            }
            else if (selector instanceof LiteralSelector) {
                return this.writeLiteralSelector(selector.item(), selector.then(), output);
            }
            else if (selector instanceof GetSelector) {
                return this.writeGetSelector(selector.accessor(), selector.then(), output);
            }
            else if (selector instanceof GetAttrSelector) {
                return this.writeGetAttrSelector(selector.accessor(), selector.then(), output);
            }
            else if (selector instanceof GetItemSelector) {
                return this.writeGetItemSelector(selector.accessor(), selector.then(), output);
            }
            else if (selector instanceof KeysSelector) {
                return this.writeKeysSelector(selector.then(), output);
            }
            else if (selector instanceof ValuesSelector) {
                return this.writeValuesSelector(selector.then(), output);
            }
            else if (selector instanceof ChildrenSelector) {
                return this.writeChildrenSelector(selector.then(), output);
            }
            else if (selector instanceof DescendantsSelector) {
                return this.writeDescendantsSelector(selector.then(), output);
            }
            else if (selector instanceof FilterSelector) {
                return this.writeFilterSelector(selector.predicate(), selector.then(), output);
            }
            return Writer.error(new WriterException("No Recon serialization for " + selector));
        };
        ReconStructureWriter.prototype.sizeOfOperator = function (operator) {
            if (operator instanceof BinaryOperator) {
                return this.sizeOfInfixOperator(operator.operand1(), operator.operator(), operator.operand2(), operator.precedence());
            }
            else if (operator instanceof UnaryOperator) {
                return this.sizeOfPrefixOperator(operator.operator(), operator.operand(), operator.precedence());
            }
            else if (operator instanceof InvokeOperator) {
                return this.sizeOfInvokeOperator(operator.func(), operator.args());
            }
            else if (operator instanceof ConditionalOperator) {
                return this.sizeOfConditionalOperator(operator.ifTerm(), operator.thenTerm(), operator.elseTerm(), operator.precedence());
            }
            throw new WriterException("No Recon serialization for " + operator);
        };
        ReconStructureWriter.prototype.writeOperator = function (operator, output) {
            if (operator instanceof BinaryOperator) {
                return this.writeInfixOperator(operator.operand1(), operator.operator(), operator.operand2(), operator.precedence(), output);
            }
            else if (operator instanceof UnaryOperator) {
                return this.writePrefixOperator(operator.operator(), operator.operand(), operator.precedence(), output);
            }
            else if (operator instanceof InvokeOperator) {
                return this.writeInvokeOperator(operator.func(), operator.args(), output);
            }
            else if (operator instanceof ConditionalOperator) {
                return this.writeConditionalOperator(operator.ifTerm(), operator.thenTerm(), operator.elseTerm(), operator.precedence(), output);
            }
            return Writer.error(new WriterException("No Recon serialization for " + operator));
        };
        ReconStructureWriter.prototype.sizeOfFunc = function (func) {
            if (func instanceof LambdaFunc) {
                return this.sizeOfLambdaFunc(func.bindings(), func.template());
            }
            else if (func instanceof BridgeFunc) {
                return 0;
            }
            throw new WriterException("No Recon serialization for " + func);
        };
        ReconStructureWriter.prototype.writeFunc = function (func, output) {
            if (func instanceof LambdaFunc) {
                return this.writeLambdaFunc(func.bindings(), func.template(), output);
            }
            else if (func instanceof BridgeFunc) {
                return Writer.done();
            }
            return Writer.error(new WriterException("No Recon serialization for " + func));
        };
        ReconStructureWriter.prototype.sizeOfBlockItem = function (item) {
            if (item instanceof Field) {
                return this.sizeOfItem(item);
            }
            else if (item instanceof Value) {
                return this.sizeOfBlockValue(item);
            }
            throw new WriterException("No Recon serialization for " + item);
        };
        ReconStructureWriter.prototype.writeBlockItem = function (item, output) {
            if (item instanceof Field) {
                return this.writeItem(item, output);
            }
            else if (item instanceof Value) {
                return this.writeBlockValue(item, output);
            }
            return Writer.error(new WriterException("No Recon serialization for " + item));
        };
        ReconStructureWriter.prototype.sizeOfBlockValue = function (value) {
            if (value instanceof Record) {
                return this.sizeOfBlock(value);
            }
            return this.sizeOfValue(value);
        };
        ReconStructureWriter.prototype.writeBlockValue = function (value, output) {
            if (value instanceof Record) {
                return this.writeBlock(value, output);
            }
            return this.writeValue(value, output);
        };
        ReconStructureWriter.prototype.sizeOfThen = function (then) {
            if (then instanceof Selector) {
                if (then instanceof IdentitySelector) {
                    return this.sizeOfThenIdentitySelector();
                }
                else if (then instanceof LiteralSelector) {
                    return this.sizeOfThenLiteralSelector(then.item(), then.then());
                }
                else if (then instanceof GetSelector) {
                    return this.sizeOfThenGetSelector(then.accessor(), then.then());
                }
                else if (then instanceof GetAttrSelector) {
                    return this.sizeOfThenGetAttrSelector(then.accessor(), then.then());
                }
                else if (then instanceof GetItemSelector) {
                    return this.sizeOfThenGetItemSelector(then.accessor(), then.then());
                }
                else if (then instanceof KeysSelector) {
                    return this.sizeOfThenKeysSelector(then.then());
                }
                else if (then instanceof ValuesSelector) {
                    return this.sizeOfThenValuesSelector(then.then());
                }
                else if (then instanceof ChildrenSelector) {
                    return this.sizeOfThenChildrenSelector(then.then());
                }
                else if (then instanceof DescendantsSelector) {
                    return this.sizeOfThenDescendantsSelector(then.then());
                }
                else if (then instanceof FilterSelector) {
                    return this.sizeOfThenFilterSelector(then.predicate(), then.then());
                }
            }
            throw new WriterException("No Recon serialization for " + then);
        };
        ReconStructureWriter.prototype.writeThen = function (then, output) {
            if (then instanceof Selector) {
                if (then instanceof IdentitySelector) {
                    return this.writeThenIdentitySelector(output);
                }
                else if (then instanceof LiteralSelector) {
                    return this.writeThenLiteralSelector(then.item(), then.then(), output);
                }
                else if (then instanceof GetSelector) {
                    return this.writeThenGetSelector(then.accessor(), then.then(), output);
                }
                else if (then instanceof GetAttrSelector) {
                    return this.writeThenGetAttrSelector(then.accessor(), then.then(), output);
                }
                else if (then instanceof GetItemSelector) {
                    return this.writeThenGetItemSelector(then.accessor(), then.then(), output);
                }
                else if (then instanceof KeysSelector) {
                    return this.writeThenKeysSelector(then.then(), output);
                }
                else if (then instanceof ValuesSelector) {
                    return this.writeThenValuesSelector(then.then(), output);
                }
                else if (then instanceof ChildrenSelector) {
                    return this.writeThenChildrenSelector(then.then(), output);
                }
                else if (then instanceof DescendantsSelector) {
                    return this.writeThenDescendantsSelector(then.then(), output);
                }
                else if (then instanceof FilterSelector) {
                    return this.writeThenFilterSelector(then.predicate(), then.then(), output);
                }
            }
            return Writer.error(new WriterException("No Recon serialization for " + then));
        };
        return ReconStructureWriter;
    }(ReconWriter));

    var Recon = (function () {
        function Recon() {
        }
        Recon.isSpace = function (c) {
            return c === 0x20 || c === 0x9;
        };
        Recon.isNewline = function (c) {
            return c === 0xa || c === 0xd;
        };
        Recon.isWhitespace = function (c) {
            return Recon.isSpace(c) || Recon.isNewline(c);
        };
        Recon.isIdentStartChar = function (c) {
            return c >= 65 && c <= 90
                || c === 95
                || c >= 97 && c <= 122
                || c >= 0xc0 && c <= 0xd6
                || c >= 0xd8 && c <= 0xf6
                || c >= 0xf8 && c <= 0x2ff
                || c >= 0x370 && c <= 0x37d
                || c >= 0x37f && c <= 0x1fff
                || c >= 0x200c && c <= 0x200d
                || c >= 0x2070 && c <= 0x218f
                || c >= 0x2c00 && c <= 0x2fef
                || c >= 0x3001 && c <= 0xd7ff
                || c >= 0xf900 && c <= 0xfdcf
                || c >= 0xfdf0 && c <= 0xfffd
                || c >= 0x10000 && c <= 0xeffff;
        };
        Recon.isIdentChar = function (c) {
            return c === 45
                || c >= 48 && c <= 57
                || c >= 65 && c <= 90
                || c === 95
                || c >= 97 && c <= 122
                || c === 0xb7
                || c >= 0xc0 && c <= 0xd6
                || c >= 0xd8 && c <= 0xf6
                || c >= 0xf8 && c <= 0x37d
                || c >= 0x37f && c <= 0x1fff
                || c >= 0x200c && c <= 0x200d
                || c >= 0x203f && c <= 0x2040
                || c >= 0x2070 && c <= 0x218f
                || c >= 0x2c00 && c <= 0x2fef
                || c >= 0x3001 && c <= 0xd7ff
                || c >= 0xf900 && c <= 0xfdcf
                || c >= 0xfdf0 && c <= 0xfffd
                || c >= 0x10000 && c <= 0xeffff;
        };
        Recon.structureParser = function () {
            if (!Recon._structureParser) {
                Recon._structureParser = new ReconStructureParser();
            }
            return Recon._structureParser;
        };
        Recon.structureWriter = function () {
            if (!Recon._structureWriter) {
                Recon._structureWriter = new ReconStructureWriter();
            }
            return Recon._structureWriter;
        };
        Recon.parse = function (recon) {
            return Recon.structureParser().parseBlockString(recon);
        };
        Recon.parser = function () {
            return Recon.structureParser().blockParser();
        };
        Recon.sizeOf = function (item) {
            return Recon.structureWriter().sizeOfItem(item);
        };
        Recon.sizeOfBlock = function (item) {
            return Recon.structureWriter().sizeOfBlockItem(item);
        };
        Recon.write = function (item, output) {
            return Recon.structureWriter().writeItem(item, output);
        };
        Recon.writeBlock = function (item, output) {
            return Recon.structureWriter().writeBlockItem(item, output);
        };
        Recon.toString = function (item) {
            var output = Unicode.stringOutput();
            Recon.write(item, output);
            return output.bind();
        };
        Recon.toBlockString = function (item) {
            var output = Unicode.stringOutput();
            Recon.writeBlock(item, output);
            return output.bind();
        };
        Recon.toData = function (item) {
            var output = Utf8.encodedOutput(Data.output());
            Recon.write(item, output);
            return output.bind();
        };
        Recon.toBlockData = function (item) {
            var output = Utf8.encodedOutput(Data.output());
            Recon.writeBlock(item, output);
            return output.bind();
        };
        return Recon;
    }());
    Item.prototype.toRecon = function () {
        return Recon.toString(this);
    };
    Item.prototype.toReconBlock = function () {
        return Recon.toBlockString(this);
    };
    Value.parseRecon = function (recon) {
        return Recon.parse(recon);
    };

    var Shape = {
        fromAny: function (shape) {
            if (shape instanceof Shape.R2) {
                return shape;
            }
            else if (typeof shape === "object" && shape) {
                if (Array.isArray(shape)) {
                    if (shape.length === 2) {
                        return new Shape.R2.Point(shape[0], shape[1]);
                    }
                    else {
                        throw new TypeError("" + shape);
                    }
                }
                var point = shape;
                if (typeof point.x === "number" && typeof point.y === "number") {
                    return new Shape.R2.Point(point.x, point.y);
                }
                var segment = shape;
                if (typeof segment.x0 === "number" && typeof segment.y0 === "number"
                    && typeof segment.x1 === "number" && typeof segment.y1 === "number") {
                    return new Shape.R2.Segment(segment.x0, segment.y0, segment.x1, segment.y1);
                }
                var box = shape;
                if (typeof box.xMin === "number" && typeof box.yMin === "number"
                    && typeof box.xMax === "number" && typeof box.yMax === "number") {
                    return new Shape.R2.Box(box.xMin, box.yMin, box.xMax, box.yMax);
                }
                var circle = shape;
                if (typeof circle.cx === "number" && typeof circle.cy === "number"
                    && typeof circle.r === "number") {
                    return new Shape.R2.Circle(circle.cx, circle.cy, circle.r);
                }
            }
            throw new TypeError("" + shape);
        },
        is: function (object) {
            if (typeof object === "object" && object) {
                var shape = object;
                return typeof shape.contains === "function"
                    && typeof shape.intersects === "function";
            }
            return false;
        },
        R2: void 0,
    };

    var R2Shape = (function () {
        function R2Shape() {
        }
        R2Shape.prototype.union = function (that) {
            that = R2Shape.fromAny(that);
            return new R2Shape.Box(Math.min(this.xMin, that.xMin), Math.min(this.yMin, that.yMin), Math.max(this.xMax, that.xMax), Math.max(this.yMax, that.yMax));
        };
        R2Shape.fromAny = function (shape) {
            return Shape.fromAny(shape);
        };
        return R2Shape;
    }());
    Shape.R2 = R2Shape;

    var VectorR2 = (function () {
        function VectorR2(x, y) {
            this._x = x;
            this._y = y;
        }
        Object.defineProperty(VectorR2.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VectorR2.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        VectorR2.prototype.plus = function (that) {
            return new VectorR2(this._x + that.x, this._y + that.y);
        };
        VectorR2.prototype.opposite = function () {
            return new VectorR2(-this._x, -this._y);
        };
        VectorR2.prototype.minus = function (that) {
            return new VectorR2(this._x - that.x, this._y - that.y);
        };
        VectorR2.prototype.times = function (scalar) {
            return new VectorR2(this._x * scalar, this._y * scalar);
        };
        VectorR2.prototype.toAny = function () {
            return {
                x: this._x,
                y: this._y,
            };
        };
        VectorR2.prototype.canEqual = function (that) {
            return true;
        };
        VectorR2.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof VectorR2) {
                return that.canEqual(this) && this._x === that._x && this._y === that._y;
            }
            return false;
        };
        VectorR2.prototype.hashCode = function () {
            if (VectorR2._hashSeed === void 0) {
                VectorR2._hashSeed = Murmur3.seed(VectorR2);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(VectorR2._hashSeed, Murmur3.hash(this._x)), Murmur3.hash(this._y)));
        };
        VectorR2.prototype.debug = function (output) {
            output.write("VectorR2").write(46).write("of").write(40)
                .debug(this._x).write(", ").debug(this._y).write(41);
        };
        VectorR2.prototype.toString = function () {
            return Format.debug(this);
        };
        VectorR2.zero = function () {
            if (VectorR2._zero === void 0) {
                VectorR2._zero = new VectorR2(0, 0);
            }
            return VectorR2._zero;
        };
        VectorR2.of = function (x, y) {
            return new VectorR2(x, y);
        };
        VectorR2.fromAny = function (vector) {
            if (vector instanceof VectorR2) {
                return vector;
            }
            else if (typeof vector === "object" && vector) {
                return new VectorR2(vector.x, vector.y);
            }
            throw new TypeError("" + vector);
        };
        return VectorR2;
    }());

    var PointR2 = (function (_super) {
        __extends(PointR2, _super);
        function PointR2(x, y) {
            var _this = _super.call(this) || this;
            _this._x = x;
            _this._y = y;
            return _this;
        }
        Object.defineProperty(PointR2.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointR2.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointR2.prototype, "xMin", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointR2.prototype, "yMin", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointR2.prototype, "xMax", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointR2.prototype, "yMax", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        PointR2.prototype.plus = function (vector) {
            return new PointR2(this._x + vector.x, this._y + vector.y);
        };
        PointR2.prototype.minus = function (that) {
            var x = this._x - that._x;
            var y = this._y - that._y;
            if (that instanceof VectorR2) {
                return new PointR2(x, y);
            }
            else {
                return new VectorR2(x, y);
            }
        };
        PointR2.prototype.contains = function (that, y) {
            if (typeof that === "number") {
                return this._x === that && this._y === y;
            }
            else {
                that = Shape.fromAny(that);
                if (that instanceof PointR2) {
                    return this._x === that._x && this._y === that._y;
                }
                else if (that instanceof R2Shape) {
                    return this._x <= that.xMin && that.xMax <= this._x
                        && this._y <= that.yMin && that.yMax <= this._y;
                }
                return false;
            }
        };
        PointR2.prototype.intersects = function (that) {
            that = Shape.fromAny(that);
            return that.intersects(this);
        };
        PointR2.prototype.transform = function (f) {
            return new PointR2(f.transformX(this.x, this.y), f.transformY(this.x, this.y));
        };
        PointR2.prototype.toAny = function () {
            return {
                x: this._x,
                y: this._y,
            };
        };
        PointR2.prototype.canEqual = function (that) {
            return true;
        };
        PointR2.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PointR2) {
                return that.canEqual(this) && this._x === that._x && this._y === that._y;
            }
            return false;
        };
        PointR2.prototype.hashCode = function () {
            if (PointR2._hashSeed === void 0) {
                PointR2._hashSeed = Murmur3.seed(PointR2);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(PointR2._hashSeed, Murmur3.hash(this._x)), Murmur3.hash(this._y)));
        };
        PointR2.prototype.debug = function (output) {
            output.write("PointR2").write(46).write("of").write(40)
                .debug(this._x).write(", ").debug(this._y).write(41);
        };
        PointR2.prototype.toString = function () {
            return Format.debug(this);
        };
        PointR2.origin = function () {
            if (PointR2._origin === void 0) {
                PointR2._origin = new PointR2(0, 0);
            }
            return PointR2._origin;
        };
        PointR2.of = function (x, y) {
            return new PointR2(x, y);
        };
        PointR2.fromAny = function (point) {
            if (point instanceof PointR2) {
                return point;
            }
            else if (typeof point === "object" && point) {
                var x = void 0;
                var y = void 0;
                if (Array.isArray(point)) {
                    x = point[0];
                    y = point[1];
                }
                else {
                    x = point.x;
                    y = point.y;
                }
                return new PointR2(x, y);
            }
            throw new TypeError("" + point);
        };
        return PointR2;
    }(R2Shape));
    R2Shape.Point = PointR2;

    var SegmentR2 = (function (_super) {
        __extends(SegmentR2, _super);
        function SegmentR2(x0, y0, x1, y1) {
            var _this = _super.call(this) || this;
            _this._x0 = x0;
            _this._y0 = y0;
            _this._x1 = x1;
            _this._y1 = y1;
            return _this;
        }
        Object.defineProperty(SegmentR2.prototype, "x0", {
            get: function () {
                return this._x0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "y0", {
            get: function () {
                return this._y0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "x1", {
            get: function () {
                return this._x1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "y1", {
            get: function () {
                return this._y1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "xMin", {
            get: function () {
                return Math.min(this._x0, this._x1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "yMin", {
            get: function () {
                return Math.min(this._y0, this._y1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "xMax", {
            get: function () {
                return Math.max(this._x0, this._x1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentR2.prototype, "yMax", {
            get: function () {
                return Math.max(this._y0, this._y1);
            },
            enumerable: true,
            configurable: true
        });
        SegmentR2.prototype.contains = function (that, y) {
            if (typeof that === "number") {
                return SegmentR2.contains(this._x0, this._y0, this._x1, this._y1, that, y);
            }
            else {
                that = Shape.fromAny(that);
                if (that instanceof R2Shape) {
                    if (that instanceof PointR2) {
                        return this.containsPoint(that);
                    }
                    else if (that instanceof SegmentR2) {
                        return this.containsSegment(that);
                    }
                }
                return false;
            }
        };
        SegmentR2.prototype.containsPoint = function (that) {
            return SegmentR2.contains(this._x0, this._y0, this._x1, this._y1, that._x, that._y);
        };
        SegmentR2.prototype.containsSegment = function (that) {
            return SegmentR2.contains(this._x0, this._y0, this._x1, this._y1, that._x0, that._y0)
                && SegmentR2.contains(this._x0, this._y0, this._x1, this._y1, that._x1, that._y1);
        };
        SegmentR2.prototype.intersects = function (that) {
            that = Shape.fromAny(that);
            if (that instanceof R2Shape) {
                if (that instanceof PointR2) {
                    return this.intersectsPoint(that);
                }
                else if (that instanceof SegmentR2) {
                    return this.intersectsSegment(that);
                }
                else {
                    return that.intersects(this);
                }
            }
            return false;
        };
        SegmentR2.prototype.intersectsPoint = function (that) {
            return SegmentR2.contains(this._x0, this._y0, this._x1, this._y1, that._x, that._y);
        };
        SegmentR2.prototype.intersectsSegment = function (that) {
            return SegmentR2.intersects(this._x0, this._y0, this._x1 - this._x0, this._y1 - this._y0, that._x0, that._y0, that._x1 - that._x0, that._y1 - that._y0);
        };
        SegmentR2.prototype.transform = function (f) {
            return new SegmentR2(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0), f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1));
        };
        SegmentR2.contains = function (ax, ay, bx, by, cx, cy) {
            return (ax <= cx && cx <= bx || bx <= cx && cx <= ax)
                && (ay <= cy && cy <= by || by <= cy && cy <= ay)
                && (bx - ax) * (cy - ay) === (cx - ax) * (by - ay);
        };
        SegmentR2.intersects = function (px, py, rx, ry, qx, qy, sx, sy) {
            var pqx = qx - px;
            var pqy = qy - py;
            var pqr = pqx * ry - pqy * rx;
            var rs = rx * sy - ry * sx;
            if (pqr === 0 && rs === 0) {
                var rr = rx * rx + ry * ry;
                var sr = sx * rx + sy * ry;
                var t0 = (pqx * rx + pqy * ry) / rr;
                var t1 = t0 + sr / rr;
                return sr >= 0 ? 0 < t1 && t0 < 1 : 0 < t0 && t1 < 1;
            }
            else if (rs === 0) {
                return false;
            }
            else {
                var pqs = pqx * sy - pqy * sx;
                var t = pqs / rs;
                var u = pqr / rs;
                return 0 <= t && t <= 1 && 0 <= u && u <= 1;
            }
        };
        SegmentR2.prototype.toAny = function () {
            return {
                x0: this._x0,
                y0: this._y0,
                x1: this._x1,
                y1: this._y1,
            };
        };
        SegmentR2.prototype.canEqual = function (that) {
            return true;
        };
        SegmentR2.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof SegmentR2) {
                return that.canEqual(this) && this._x0 === that._x0 && this._y0 === that._y0
                    && this._x1 === that._x1 && this._y1 === that._y1;
            }
            return false;
        };
        SegmentR2.prototype.hashCode = function () {
            if (SegmentR2._hashSeed === void 0) {
                SegmentR2._hashSeed = Murmur3.seed(SegmentR2);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(SegmentR2._hashSeed, Murmur3.hash(this._x0)), Murmur3.hash(this._y0)), Murmur3.hash(this._x1)), Murmur3.hash(this._y1)));
        };
        SegmentR2.prototype.debug = function (output) {
            output.write("SegmentR2").write(46).write("of").write(40)
                .debug(this._x0).write(", ").debug(this._y0).write(", ")
                .debug(this._x1).write(", ").debug(this._y1).write(41);
        };
        SegmentR2.prototype.toString = function () {
            return Format.debug(this);
        };
        SegmentR2.of = function (x0, y0, x1, y1) {
            return new SegmentR2(x0, y0, x1, y1);
        };
        SegmentR2.fromAny = function (segment) {
            if (segment instanceof SegmentR2) {
                return segment;
            }
            else if (typeof segment === "object" && segment) {
                return new SegmentR2(segment.x0, segment.y0, segment.x1, segment.y1);
            }
            throw new TypeError("" + segment);
        };
        return SegmentR2;
    }(R2Shape));
    R2Shape.Segment = SegmentR2;

    var CircleR2 = (function (_super) {
        __extends(CircleR2, _super);
        function CircleR2(x, y, r) {
            var _this = _super.call(this) || this;
            _this._cx = x;
            _this._cy = y;
            _this._r = r;
            return _this;
        }
        Object.defineProperty(CircleR2.prototype, "cx", {
            get: function () {
                return this._cx;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "cy", {
            get: function () {
                return this._cy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "r", {
            get: function () {
                return this._r;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "xMin", {
            get: function () {
                return this._cx - this._r;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "yMin", {
            get: function () {
                return this._cy - this._r;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "xMax", {
            get: function () {
                return this._cx + this._r;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CircleR2.prototype, "yMax", {
            get: function () {
                return this._cy + this._r;
            },
            enumerable: true,
            configurable: true
        });
        CircleR2.prototype.contains = function (that, y) {
            if (typeof that === "number") {
                var dx = that - this._cx;
                var dy = y - this._cy;
                return dx * dx + dy * dy <= this._r * this._r;
            }
            else {
                that = Shape.fromAny(that);
                if (that instanceof R2Shape) {
                    if (that instanceof PointR2) {
                        return this.containsPoint(that);
                    }
                    else if (that instanceof SegmentR2) {
                        return this.containsSegment(that);
                    }
                    else if (that instanceof BoxR2) {
                        return this.containsBox(that);
                    }
                    else if (that instanceof CircleR2) {
                        return this.containsCircle(that);
                    }
                }
                return false;
            }
        };
        CircleR2.prototype.containsPoint = function (that) {
            var dx = that._x - this._cx;
            var dy = that._y - this._cy;
            return dx * dx + dy * dy <= this._r * this._r;
        };
        CircleR2.prototype.containsSegment = function (that) {
            var dx0 = that._x0 - this._cx;
            var dy0 = that._y0 - this._cy;
            var dx1 = that._x1 - this._cx;
            var dy1 = that._y1 - this._cy;
            var r2 = this._r * this._r;
            return dx0 * dx0 + dy0 * dy0 <= r2
                && dx1 * dx1 + dy1 * dy1 <= r2;
        };
        CircleR2.prototype.containsBox = function (that) {
            var dxMin = that._xMin - this._cx;
            var dyMin = that._yMin - this._cy;
            var dxMax = that._xMax - this._cx;
            var dyMax = that._yMax - this._cy;
            var r2 = this._r * this._r;
            return dxMin * dxMin + dyMin * dyMin <= r2
                && dxMin * dxMin + dyMax * dyMax <= r2
                && dxMax * dxMax + dyMin * dyMin <= r2
                && dxMax * dxMax + dyMax * dyMax <= r2;
        };
        CircleR2.prototype.containsCircle = function (that) {
            var dx = that._cx - this._cx;
            var dy = that._cy - this._cy;
            return dx * dx + dy * dy + that._r * that._r <= this._r * this._r;
        };
        CircleR2.prototype.intersects = function (that) {
            that = Shape.fromAny(that);
            if (that instanceof R2Shape) {
                if (that instanceof PointR2) {
                    return this.intersectsPoint(that);
                }
                else if (that instanceof SegmentR2) {
                    return this.intersectsSegment(that);
                }
                else if (that instanceof BoxR2) {
                    return this.intersectsBox(that);
                }
                else if (that instanceof CircleR2) {
                    return this.intersectsCircle(that);
                }
                else {
                    return that.intersects(this);
                }
            }
            return false;
        };
        CircleR2.prototype.intersectsPoint = function (that) {
            var dx = that._x - this._cx;
            var dy = that._y - this._cy;
            return dx * dx + dy * dy <= this._r * this._r;
        };
        CircleR2.prototype.intersectsSegment = function (that) {
            var cx = this._cx;
            var cy = this._cy;
            var r = this._r;
            var x0 = that._x0;
            var y0 = that._y0;
            var x1 = that._x1;
            var y1 = that._y1;
            var dx = x1 - x0;
            var dy = y1 - y0;
            var l = Math.sqrt(dx * dx + dy * dy);
            var unitX = dx / l;
            var unitY = dy / l;
            var d = (cx - x0) * unitY - (cy - y0) * unitX;
            if (d < -r || r < d) {
                return false;
            }
            else {
                var dcx0 = x0 - cx;
                var dcy0 = y0 - cy;
                var dcx1 = x1 - cx;
                var dcy1 = y1 - cy;
                var r2 = r * r;
                if (dcx0 * dcx0 + dcy0 * dcy0 <= r2 || dcx1 * dcx1 + dcy1 * dcy1 <= r2) {
                    return true;
                }
                else {
                    var uc = unitX * cx + unitY * cy;
                    var u0 = unitX * x0 + unitY * y0;
                    var u1 = unitX * x1 + unitY * y1;
                    return u0 < uc && uc <= u1 || u1 < uc && uc <= u0;
                }
            }
        };
        CircleR2.prototype.intersectsBox = function (that) {
            var dx = (this._cx < that._xMin ? that._xMin : that._xMax < this._cx ? that._xMax : this._cx) - this._cx;
            var dy = (this._cy < that._yMin ? that._yMin : that._yMax < this._cy ? that._yMax : this._cy) - this._cy;
            return dx * dx + dy * dy <= this._r * this._r;
        };
        CircleR2.prototype.intersectsCircle = function (that) {
            var dx = that._cx - this._cx;
            var dy = that._cy - this._cy;
            var rr = this._r + that._r;
            return dx * dx + dy * dy <= rr * rr;
        };
        CircleR2.prototype.transform = function (f) {
            var cx = f.transformX(this.cx, this.cy);
            var cy = f.transformY(this.cx, this.cy);
            var rx = f.transformX(this.cx + this.r, this.cy);
            var ry = f.transformY(this.cx + this.r, this.cy);
            var dx = rx - cx;
            var dy = ry - cy;
            var r = Math.sqrt(dx * dx + dy * dy);
            return new CircleR2(cx, cy, r);
        };
        CircleR2.prototype.toAny = function () {
            return {
                cx: this._cx,
                cy: this._cy,
                r: this._r,
            };
        };
        CircleR2.prototype.canEqual = function (that) {
            return true;
        };
        CircleR2.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof CircleR2) {
                return that.canEqual(this) && this._cx === that._cx && this._cy === that._cy && this._r === that._r;
            }
            return false;
        };
        CircleR2.prototype.hashCode = function () {
            if (CircleR2._hashSeed === void 0) {
                CircleR2._hashSeed = Murmur3.seed(CircleR2);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(CircleR2._hashSeed, Murmur3.hash(this._cx)), Murmur3.hash(this._cy)), Murmur3.hash(this._r)));
        };
        CircleR2.prototype.debug = function (output) {
            output.write("CircleR2").write(46).write("of").write(40)
                .debug(this._cx).write(", ").debug(this._cy).write(", ").debug(this._r).write(41);
        };
        CircleR2.prototype.toString = function () {
            return Format.debug(this);
        };
        CircleR2.of = function (cx, cy, r) {
            return new CircleR2(cx, cy, r);
        };
        CircleR2.fromAny = function (circle) {
            if (circle instanceof CircleR2) {
                return circle;
            }
            else if (typeof circle === "object" && circle) {
                return new CircleR2(circle.cx, circle.cy, circle.r);
            }
            throw new TypeError("" + circle);
        };
        return CircleR2;
    }(R2Shape));
    R2Shape.Circle = CircleR2;

    var BoxR2 = (function (_super) {
        __extends(BoxR2, _super);
        function BoxR2(xMin, yMin, xMax, yMax) {
            var _this = _super.call(this) || this;
            _this._xMin = xMin <= xMax ? xMin : xMax;
            _this._yMin = yMin <= yMax ? yMin : yMax;
            _this._xMax = xMin <= xMax ? xMax : xMin;
            _this._yMax = yMin <= yMax ? yMax : yMin;
            return _this;
        }
        Object.defineProperty(BoxR2.prototype, "xMin", {
            get: function () {
                return this._xMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "yMin", {
            get: function () {
                return this._yMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "xMax", {
            get: function () {
                return this._xMax;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "yMax", {
            get: function () {
                return this._yMax;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "x", {
            get: function () {
                return this._xMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "y", {
            get: function () {
                return this._yMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "width", {
            get: function () {
                return this._xMax - this._xMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "height", {
            get: function () {
                return this._yMax - this._yMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "top", {
            get: function () {
                return this._yMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "right", {
            get: function () {
                return this._xMax;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "bottom", {
            get: function () {
                return this._yMax;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoxR2.prototype, "left", {
            get: function () {
                return this._xMin;
            },
            enumerable: true,
            configurable: true
        });
        BoxR2.prototype.contains = function (that, y) {
            if (typeof that === "number") {
                return this._xMin <= that && that <= this._xMax
                    && this._yMin <= y && y <= this._yMax;
            }
            else {
                that = Shape.fromAny(that);
                if (that instanceof R2Shape) {
                    if (that instanceof PointR2) {
                        return this.containsPoint(that);
                    }
                    else if (that instanceof SegmentR2) {
                        return this.containsSegment(that);
                    }
                    else if (that instanceof BoxR2) {
                        return this.containsBox(that);
                    }
                    else if (that instanceof CircleR2) {
                        return this.containsCircle(that);
                    }
                    else {
                        return this._xMin <= that.xMin && that.xMax <= this._xMax
                            && this._yMin <= that.yMin && that.yMax <= this._yMax;
                    }
                }
                return false;
            }
        };
        BoxR2.prototype.containsPoint = function (that) {
            return this._xMin <= that._x && that._x <= this._xMax
                && this._yMin <= that._y && that._y <= this._yMax;
        };
        BoxR2.prototype.containsSegment = function (that) {
            return this._xMin <= that._x0 && that._x0 <= this._xMax
                && this._yMin <= that._y0 && that._y0 <= this._yMax
                && this._xMin <= that._x1 && that._x1 <= this._xMax
                && this._yMin <= that._y1 && that._y1 <= this._yMax;
        };
        BoxR2.prototype.containsBox = function (that) {
            return this._xMin <= that._xMin && that._xMax <= this._xMax
                && this._yMin <= that._yMin && that._yMax <= this._yMax;
        };
        BoxR2.prototype.containsCircle = function (that) {
            return this._xMin <= that._cx - that._r && that._cx + that._r <= this._xMax
                && this._yMin <= that._cy - that._r && that._cy + that._r <= this._yMax;
        };
        BoxR2.prototype.intersects = function (that) {
            that = Shape.fromAny(that);
            if (that instanceof R2Shape) {
                if (that instanceof PointR2) {
                    return this.intersectsPoint(that);
                }
                else if (that instanceof SegmentR2) {
                    return this.intersectsSegment(that);
                }
                else if (that instanceof BoxR2) {
                    return this.intersectsBox(that);
                }
                else if (that instanceof CircleR2) {
                    return this.intersectsCircle(that);
                }
                else {
                    return that.intersects(this);
                }
            }
            return false;
        };
        BoxR2.prototype.intersectsPoint = function (that) {
            return this._xMin <= that._x && that._x <= this._xMax
                && this._yMin <= that._y && that._y <= this._yMax;
        };
        BoxR2.prototype.intersectsSegment = function (that) {
            var xMin = this._xMin;
            var yMin = this._yMin;
            var xMax = this._xMax;
            var yMax = this._yMax;
            var x0 = that._x0;
            var y0 = that._y0;
            var x1 = that._x1;
            var y1 = that._y1;
            if (x0 < xMin && x1 < xMin || x0 > xMax && x1 > xMax ||
                y0 < yMin && y1 < yMin || y0 > yMax && y1 > yMax) {
                return false;
            }
            else if (x0 > xMin && x0 < xMax && y0 > yMin && y0 < yMax) {
                return true;
            }
            else if ((BoxR2.intersectsSegment(x0 - xMin, x1 - xMin, x0, y0, x1, y1) && BoxR2._hitY > yMin && BoxR2._hitY < yMax)
                || (BoxR2.intersectsSegment(y0 - yMin, y1 - yMin, x0, y0, x1, y1) && BoxR2._hitX > xMin && BoxR2._hitX < xMax)
                || (BoxR2.intersectsSegment(x0 - xMax, x1 - xMax, x0, y0, x1, y1) && BoxR2._hitY > yMin && BoxR2._hitY < yMax)
                || (BoxR2.intersectsSegment(y0 - yMax, y1 - yMax, x0, y0, x1, y1) && BoxR2._hitX > xMin && BoxR2._hitX < xMax)) {
                return true;
            }
            else {
                return false;
            }
        };
        BoxR2.intersectsSegment = function (d0, d1, x0, y0, x1, y1) {
            if (d0 !== d1 || d0 * d1 < 0) {
                var scale = -d0 / (d1 - d0);
                BoxR2._hitX = x0 + (x1 - x0) * scale;
                BoxR2._hitY = y0 + (y1 - y0) * scale;
                return true;
            }
            return false;
        };
        BoxR2.prototype.intersectsBox = function (that) {
            return this._xMin <= that._xMax && that._xMin <= this._xMax
                && this._yMin <= that._yMax && that._yMin <= this._yMax;
        };
        BoxR2.prototype.intersectsCircle = function (that) {
            var dx = (that._cx < this._xMin ? this._xMin : this._xMax < that._cx ? this._xMax : that._cx) - that._cx;
            var dy = (that._cy < this._yMin ? this._yMin : this._yMax < that._cy ? this._yMax : that._cy) - that._cy;
            return dx * dx + dy * dy <= that._r * that._r;
        };
        BoxR2.prototype.union = function (that) {
            return _super.prototype.union.call(this, that);
        };
        BoxR2.prototype.transform = function (f) {
            return new BoxR2(f.transformX(this.xMin, this.yMin), f.transformY(this.xMin, this.yMin), f.transformX(this.xMax, this.yMax), f.transformY(this.xMax, this.yMax));
        };
        BoxR2.prototype.toAny = function () {
            return {
                xMin: this._xMin,
                yMin: this._yMin,
                xMax: this._xMax,
                yMax: this._yMax,
            };
        };
        BoxR2.prototype.canEqual = function (that) {
            return true;
        };
        BoxR2.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BoxR2) {
                return that.canEqual(this) && this._xMin === that._xMin && this._yMin === that._yMin
                    && this._xMax === that._xMax && this._yMax === that._yMax;
            }
            return false;
        };
        BoxR2.prototype.hashCode = function () {
            if (BoxR2._hashSeed === void 0) {
                BoxR2._hashSeed = Murmur3.seed(BoxR2);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(BoxR2._hashSeed, Murmur3.hash(this.xMin)), Murmur3.hash(this.yMin)), Murmur3.hash(this.xMax)), Murmur3.hash(this.yMax)));
        };
        BoxR2.prototype.debug = function (output) {
            output.write("BoxR2").write(46).write("of").write(40)
                .debug(this.xMin).write(", ").debug(this.yMin).write(", ")
                .debug(this.xMax).write(", ").debug(this.yMax).write(41);
        };
        BoxR2.prototype.toString = function () {
            return Format.debug(this);
        };
        BoxR2.empty = function () {
            if (!BoxR2._empty) {
                BoxR2._empty = new BoxR2(0, 0, 0, 0);
            }
            return BoxR2._empty;
        };
        BoxR2.of = function (xMin, yMin, xMax, yMax) {
            return new BoxR2(xMin, yMin, xMax, yMax);
        };
        BoxR2.fromAny = function (box) {
            if (box instanceof BoxR2) {
                return box;
            }
            else if (typeof box === "object" && box) {
                return new BoxR2(box.xMin, box.yMin, box.xMax, box.yMax);
            }
            throw new TypeError("" + box);
        };
        BoxR2._hitX = 0;
        BoxR2._hitY = 0;
        return BoxR2;
    }(R2Shape));
    R2Shape.Box = BoxR2;

    var TimeZone = (function () {
        function TimeZone(name, offset) {
            this._name = name;
            this._offset = offset;
        }
        TimeZone.prototype.isUTC = function () {
            return this._offset === 0;
        };
        TimeZone.prototype.isLocal = function () {
            return this._offset === -new Date().getTimezoneOffset();
        };
        TimeZone.prototype.name = function () {
            return this._name;
        };
        TimeZone.prototype.offset = function () {
            return this._offset;
        };
        TimeZone.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TimeZone) {
                return this._offset === that._offset;
            }
            return false;
        };
        TimeZone.prototype.hashCode = function () {
            if (TimeZone._hashSeed === void 0) {
                TimeZone._hashSeed = Murmur3.seed(TimeZone);
            }
            return Murmur3.mash(Murmur3.mix(TimeZone._hashSeed, Murmur3.hash(this._offset)));
        };
        TimeZone.prototype.debug = function (output) {
            output = output.write("TimeZone").write(46);
            if (this._name === "UTC" && this._offset === 0) {
                output = output.write("utc").write(40).write(41);
            }
            else if (this._name === void 0) {
                output = output.write("forOffset").write(40)
                    .debug(this._offset).write(41);
            }
            else {
                output = output.write("from").write(40)
                    .debug(this._name).write(", ").debug(this._offset).write(41);
            }
        };
        TimeZone.prototype.toString = function () {
            return Format.debug(this);
        };
        TimeZone.utc = function () {
            if (!TimeZone._utc) {
                TimeZone._utc = new TimeZone("UTC", 0);
            }
            return TimeZone._utc;
        };
        TimeZone.local = function () {
            if (!TimeZone._local) {
                TimeZone._local = TimeZone.forOffset(-new Date().getTimezoneOffset());
            }
            return TimeZone._local;
        };
        TimeZone.forName = function (name) {
            switch (name) {
                case "UTC": return TimeZone.utc();
                default: return void 0;
            }
        };
        TimeZone.forOffset = function (offset) {
            switch (offset) {
                case 0: return TimeZone.utc();
                default: return new TimeZone(void 0, offset);
            }
        };
        TimeZone.from = function (name, offset) {
            if (name === "UTC" && offset === 0) {
                return TimeZone.utc();
            }
            else {
                return new TimeZone(name, offset);
            }
        };
        TimeZone.fromAny = function (value) {
            if (value instanceof TimeZone) {
                return value;
            }
            else if (typeof value === "string") {
                var zone = TimeZone.forName(value);
                if (zone !== void 0) {
                    return zone;
                }
            }
            else if (typeof value === "number") {
                return TimeZone.forOffset(value);
            }
            throw new TypeError("" + value);
        };
        TimeZone.fromValue = function (value) {
            var name = value.stringValue(void 0);
            if (name !== void 0) {
                return TimeZone.forName(name);
            }
            var offset = value.numberValue(void 0);
            if (offset !== void 0) {
                return TimeZone.forOffset(offset);
            }
            return void 0;
        };
        TimeZone.form = function (unit) {
            if (unit !== void 0) {
                unit = TimeZone.fromAny(unit);
            }
            if (unit !== TimeZone.utc()) {
                return new TimeZone.Form(unit);
            }
            else {
                if (!TimeZone._form) {
                    TimeZone._form = new TimeZone.Form(TimeZone.utc());
                }
                return TimeZone._form;
            }
        };
        return TimeZone;
    }());

    var TimeZoneForm = (function (_super) {
        __extends(TimeZoneForm, _super);
        function TimeZoneForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        TimeZoneForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new TimeZoneForm(unit);
            }
        };
        TimeZoneForm.prototype.mold = function (zone) {
            zone = TimeZone.fromAny(zone);
            var name = zone.name();
            if (name !== void 0) {
                return Text$1.from(name);
            }
            else {
                return Num.from(zone._offset);
            }
        };
        TimeZoneForm.prototype.cast = function (item) {
            var value = item.toValue();
            return TimeZone.fromValue(value);
        };
        return TimeZoneForm;
    }(Form));
    TimeZone.Form = TimeZoneForm;

    var DateTimeLocale = (function () {
        function DateTimeLocale(periods, weekdays, shortWeekdays, months, shortMonths) {
            if (periods === void 0) { periods = DateTimeLocale.Periods; }
            if (weekdays === void 0) { weekdays = DateTimeLocale.Weekdays; }
            if (shortWeekdays === void 0) { shortWeekdays = DateTimeLocale.ShortWeekdays; }
            if (months === void 0) { months = DateTimeLocale.Months; }
            if (shortMonths === void 0) { shortMonths = DateTimeLocale.ShortMonths; }
            this.periods = periods;
            this.weekdays = weekdays;
            this.shortWeekdays = shortWeekdays;
            this.months = months;
            this.shortMonths = shortMonths;
        }
        DateTimeLocale.standard = function () {
            if (!DateTimeLocale._standard) {
                DateTimeLocale._standard = new DateTimeLocale();
            }
            return DateTimeLocale._standard;
        };
        DateTimeLocale.Periods = [
            "AM",
            "PM",
        ];
        DateTimeLocale.Weekdays = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
        ];
        DateTimeLocale.ShortWeekdays = [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
        ];
        DateTimeLocale.Months = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ];
        DateTimeLocale.ShortMonths = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
        ];
        return DateTimeLocale;
    }());

    var DateTime = (function () {
        function DateTime(time, zone) {
            if (zone === void 0) { zone = TimeZone.utc(); }
            this._time = time;
            this._zone = zone;
        }
        DateTime.prototype.time = function (time) {
            if (time === void 0) {
                return this._time;
            }
            else {
                return new DateTime(time, this._zone);
            }
        };
        DateTime.prototype.zone = function (zone) {
            if (zone === void 0) {
                return this._zone;
            }
            else {
                return new DateTime(this._time, zone);
            }
        };
        DateTime.prototype.year = function (year, month, day, hour, minute, second, millisecond) {
            var date = this.toUTCLocalDate();
            if (year === void 0) {
                return date.getUTCFullYear();
            }
            else {
                date.setUTCFullYear(year);
                if (month !== void 0) {
                    date.setUTCMonth(month);
                }
                if (day !== void 0) {
                    date.setUTCDate(day);
                }
                if (hour !== void 0) {
                    date.setUTCHours(hour);
                }
                if (minute !== void 0) {
                    date.setUTCMinutes(minute);
                }
                if (second !== void 0) {
                    date.setUTCSeconds(second);
                }
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.month = function (month, day, hour, minute, second, millisecond) {
            var date = this.toUTCLocalDate();
            if (month === void 0) {
                return date.getUTCMonth();
            }
            else {
                date.setUTCMonth(month);
                if (day !== void 0) {
                    date.setUTCDate(day);
                }
                if (hour !== void 0) {
                    date.setUTCHours(hour);
                }
                if (minute !== void 0) {
                    date.setUTCMinutes(minute);
                }
                if (second !== void 0) {
                    date.setUTCSeconds(second);
                }
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.day = function (day, hour, minute, second, millisecond) {
            var date = this.toUTCLocalDate();
            if (day === void 0) {
                return date.getUTCDate();
            }
            else {
                date.setUTCDate(day);
                if (hour !== void 0) {
                    date.setUTCHours(hour);
                }
                if (minute !== void 0) {
                    date.setUTCMinutes(minute);
                }
                if (second !== void 0) {
                    date.setUTCSeconds(second);
                }
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.hour = function (hour, minute, second, millisecond) {
            var date = this.toUTCLocalDate();
            if (hour === void 0) {
                return date.getUTCHours();
            }
            else {
                date.setUTCHours(hour);
                if (minute !== void 0) {
                    date.setUTCMinutes(minute);
                }
                if (second !== void 0) {
                    date.setUTCSeconds(second);
                }
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.minute = function (minute, second, millisecond) {
            var date = this.toUTCLocalDate();
            if (minute === void 0) {
                return date.getUTCMinutes();
            }
            else {
                date.setUTCMinutes(minute);
                if (second !== void 0) {
                    date.setUTCSeconds(second);
                }
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.second = function (second, millisecond) {
            var date = this.toUTCLocalDate();
            if (second === void 0) {
                return date.getUTCSeconds();
            }
            else {
                date.setUTCSeconds(second);
                if (millisecond !== void 0) {
                    date.setUTCMilliseconds(millisecond);
                }
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.millisecond = function (millisecond) {
            var date = this.toUTCLocalDate();
            if (millisecond === void 0) {
                return date.getUTCMilliseconds();
            }
            else {
                date.setUTCMilliseconds(millisecond);
                return DateTime.fromUTCLocalDate(date, this._zone);
            }
        };
        DateTime.prototype.weekday = function () {
            return this.toUTCLocalDate().getUTCDay();
        };
        DateTime.prototype.toUTCLocalDate = function () {
            return new Date(this._time + 60000 * this._zone._offset);
        };
        DateTime.prototype.toDate = function () {
            return new Date(this._time);
        };
        DateTime.prototype.valueOf = function () {
            return this._time;
        };
        DateTime.prototype.compareTo = function (that) {
            var x = this._time;
            var y = DateTime.time(that);
            return x < y ? -1 : x > y ? 1 : x === y ? 0 : NaN;
        };
        DateTime.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DateTime) {
                return this._time === that._time && this._zone.equals(that._zone);
            }
            return false;
        };
        DateTime.prototype.hashCode = function () {
            if (DateTime._hashSeed === void 0) {
                DateTime._hashSeed = Murmur3.seed(DateTime);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(DateTime._hashSeed, Murmur3.hash(this._time)), this._zone.hashCode()));
        };
        DateTime.prototype.display = function (output, format) {
            if (format === void 0) { format = DateTime.Format.iso8601(); }
            format.writeDate(this, output);
        };
        DateTime.prototype.toString = function (format) {
            if (format === void 0) { format = DateTime.Format.iso8601(); }
            return format.format(this);
        };
        DateTime.current = function (zone) {
            zone = zone !== void 0 ? TimeZone.fromAny(zone) : TimeZone.local();
            return new DateTime(Date.now(), zone);
        };
        DateTime.fromUTCLocalDate = function (date, zone) {
            return new DateTime(date.getTime() - 60000 * zone._offset, zone);
        };
        DateTime.from = function (init, zone) {
            var time = Date.UTC(init.year !== void 0 ? init.year : 1970, init.month !== void 0 ? init.month : 0, init.day !== void 0 ? init.day : 1, init.hour !== void 0 ? init.hour : 0, init.minute !== void 0 ? init.minute : 0, init.second !== void 0 ? init.second : 0, init.millisecond !== void 0 ? init.millisecond : 0);
            if (init.zone !== void 0) {
                zone = TimeZone.fromAny(init.zone);
            }
            if (zone !== void 0) {
                zone = TimeZone.fromAny(zone);
                time += 60000 * zone._offset;
            }
            else {
                zone = TimeZone.utc();
            }
            return new DateTime(time, zone);
        };
        DateTime.fromAny = function (date, zone) {
            if (date instanceof DateTime) {
                return date;
            }
            else if (date instanceof Date) {
                zone = zone !== void 0 ? TimeZone.fromAny(zone) : TimeZone.utc();
                return new DateTime(date.getTime(), zone);
            }
            else if (typeof date === "number") {
                zone = zone !== void 0 ? TimeZone.fromAny(zone) : TimeZone.utc();
                return new DateTime(date, zone);
            }
            else if (typeof date === "string") {
                return DateTime.parse(date, zone);
            }
            else if (date && typeof date === "object") {
                return DateTime.from(date, zone);
            }
            throw new TypeError("" + date);
        };
        DateTime.fromValue = function (value) {
            var positional;
            var header = value.header("date");
            if (header.isDefined()) {
                value = header;
                positional = true;
            }
            else {
                positional = false;
            }
            var init = {};
            value.forEach(function (item, index) {
                var key = item.key.stringValue(void 0);
                if (key !== void 0) {
                    if (key === "year") {
                        init.year = item.toValue().numberValue(init.year);
                    }
                    else if (key === "month") {
                        init.month = item.toValue().numberValue(init.month);
                    }
                    else if (key === "day") {
                        init.day = item.toValue().numberValue(init.day);
                    }
                    else if (key === "hour") {
                        init.hour = item.toValue().numberValue(init.hour);
                    }
                    else if (key === "minute") {
                        init.minute = item.toValue().numberValue(init.minute);
                    }
                    else if (key === "second") {
                        init.second = item.toValue().numberValue(init.second);
                    }
                    else if (key === "millisecond") {
                        init.millisecond = item.toValue().numberValue(init.millisecond);
                    }
                    else if (key === "zone") {
                        init.zone = item.toValue().cast(TimeZone.form(), init.zone);
                    }
                }
                else if (item instanceof Value && positional) {
                    if (index === 0) {
                        init.year = item.numberValue(init.year);
                    }
                    else if (index === 1) {
                        init.month = item.numberValue(init.month);
                    }
                    else if (index === 2) {
                        init.day = item.numberValue(init.day);
                    }
                    else if (index === 3) {
                        init.hour = item.numberValue(init.hour);
                    }
                    else if (index === 4) {
                        init.minute = item.numberValue(init.minute);
                    }
                    else if (index === 5) {
                        init.second = item.numberValue(init.second);
                    }
                    else if (index === 6) {
                        init.millisecond = item.numberValue(init.millisecond);
                    }
                    else if (index === 7) {
                        init.zone = item.cast(TimeZone.form(), init.zone);
                    }
                }
            });
            if (DateTime.isInit(init)) {
                return DateTime.from(init);
            }
            return void 0;
        };
        DateTime.parse = function (date, zone) {
            return DateTime.Format.iso8601().parse(date);
        };
        DateTime.time = function (date) {
            if (date instanceof DateTime) {
                return date._time;
            }
            else if (date instanceof Date) {
                return date.getTime();
            }
            else if (typeof date === "number") {
                return date;
            }
            else if (typeof date === "string") {
                return DateTime.parse(date).time();
            }
            else if (date && typeof date === "object") {
                return DateTime.from(date).time();
            }
            throw new TypeError("" + date);
        };
        DateTime.zone = function (date) {
            if (date instanceof DateTime) {
                return date._zone;
            }
            else {
                return TimeZone.utc();
            }
        };
        DateTime.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.year !== void 0 || init.month !== void 0 || init.day !== void 0
                    || init.hour !== void 0 || init.minute !== void 0 || init.second !== void 0
                    || init.millisecond !== void 0;
            }
            return false;
        };
        DateTime.form = function (unit) {
            if (unit !== void 0) {
                unit = DateTime.fromAny(unit);
            }
            if (unit !== void 0) {
                return new DateTime.Form(unit);
            }
            else {
                if (!DateTime._form) {
                    DateTime._form = new DateTime.Form();
                }
                return DateTime._form;
            }
        };
        return DateTime;
    }());

    var DateTimeParser = (function (_super) {
        __extends(DateTimeParser, _super);
        function DateTimeParser(dateParser) {
            var _this = _super.call(this) || this;
            _this.dateParser = dateParser;
            return _this;
        }
        DateTimeParser.prototype.feed = function (input) {
            return DateTimeParser.parse(input, this.dateParser);
        };
        DateTimeParser.parse = function (input, dateParser) {
            dateParser = dateParser.feed(input);
            if (dateParser.isDone()) {
                return Parser.done(DateTime.fromAny(dateParser.bind()));
            }
            else if (dateParser.isError()) {
                return dateParser.asError();
            }
            return new DateTimeParser(dateParser);
        };
        return DateTimeParser;
    }(Parser));
    DateTime.Parser = DateTimeParser;

    var DateTimeForm = (function (_super) {
        __extends(DateTimeForm, _super);
        function DateTimeForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        DateTimeForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit !== void 0 ? this._unit : new DateTime(0);
            }
            else {
                return new DateTimeForm(unit);
            }
        };
        DateTimeForm.prototype.mold = function (date) {
            date = DateTime.fromAny(date);
            return Text$1.from(date.toString());
        };
        DateTimeForm.prototype.cast = function (value) {
            var date;
            try {
                date = DateTime.fromValue(value);
                if (!date) {
                    var millis = value.numberValue(void 0);
                    if (millis !== void 0) {
                        date = new DateTime(millis);
                    }
                    else {
                        var string = value.stringValue(void 0);
                        if (string !== void 0) {
                            date = DateTime.parse(string);
                        }
                    }
                }
            }
            catch (e) {
            }
            return date;
        };
        return DateTimeForm;
    }(Form));
    DateTime.Form = DateTimeForm;

    var DateTimeSpecifiers = {
        _standard: void 0,
        standard: function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            var specifiers;
            if (locale === DateTimeLocale.standard()) {
                specifiers = DateTimeSpecifiers._standard;
            }
            if (!specifiers) {
                specifiers = {
                    Y: DateTimeFormat.year(),
                    m: DateTimeFormat.monthOfYear(),
                    B: DateTimeFormat.month(locale),
                    b: DateTimeFormat.shortMonth(locale),
                    d: DateTimeFormat.dayOfMonth(),
                    A: DateTimeFormat.weekday(locale),
                    a: DateTimeFormat.shortWeekday(locale),
                    H: DateTimeFormat.hour24(),
                    I: DateTimeFormat.hour12(),
                    p: DateTimeFormat.period(locale),
                    M: DateTimeFormat.minute(),
                    S: DateTimeFormat.second(),
                    L: DateTimeFormat.millisecond(),
                };
                if (locale === DateTimeLocale.standard()) {
                    DateTimeSpecifiers._standard = specifiers;
                }
            }
            return specifiers;
        },
    };

    var DateTimeFormat = (function () {
        function DateTimeFormat() {
        }
        DateTimeFormat.prototype.format = function (date) {
            date = DateTime.fromAny(date);
            var output = Unicode.stringOutput();
            this.writeDate(date, output);
            return output.bind();
        };
        DateTimeFormat.prototype.parse = function (input) {
            if (typeof input === "string") {
                input = Unicode.stringInput(input);
            }
            while (input.isCont() && Unicode.isSpace(input.head())) {
                input = input.step();
            }
            var parser = this.parseDate(input, {});
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        DateTimeFormat.prototype.parseDate = function (input, date) {
            var dateParser = this.parseDateTime(input, date);
            if (dateParser.isDone()) {
                return Parser.done(DateTime.fromAny(dateParser.bind()));
            }
            else if (dateParser.isError()) {
                return dateParser.asError();
            }
            return new DateTime.Parser(dateParser);
        };
        DateTimeFormat.year = function () {
            if (!DateTimeFormat._year) {
                DateTimeFormat._year = new DateTimeFormat.Year();
            }
            return DateTimeFormat._year;
        };
        DateTimeFormat.monthOfYear = function () {
            if (!DateTimeFormat._monthOfYear) {
                DateTimeFormat._monthOfYear = new DateTimeFormat.MonthOfYear();
            }
            return DateTimeFormat._monthOfYear;
        };
        DateTimeFormat.month = function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            if (locale !== DateTimeLocale.standard()) {
                return new DateTimeFormat.Month(locale);
            }
            else {
                if (!DateTimeFormat._month) {
                    DateTimeFormat._month = new DateTimeFormat.Month(locale);
                }
                return DateTimeFormat._month;
            }
        };
        DateTimeFormat.shortMonth = function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            if (locale !== DateTimeLocale.standard()) {
                return new DateTimeFormat.ShortMonth(locale);
            }
            else {
                if (!DateTimeFormat._shortMonth) {
                    DateTimeFormat._shortMonth = new DateTimeFormat.ShortMonth(locale);
                }
                return DateTimeFormat._shortMonth;
            }
        };
        DateTimeFormat.dayOfMonth = function () {
            if (!DateTimeFormat._dayOfMonth) {
                DateTimeFormat._dayOfMonth = new DateTimeFormat.DayOfMonth();
            }
            return DateTimeFormat._dayOfMonth;
        };
        DateTimeFormat.weekday = function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            if (locale !== DateTimeLocale.standard()) {
                return new DateTimeFormat.Weekday(locale);
            }
            else {
                if (!DateTimeFormat._weekday) {
                    DateTimeFormat._weekday = new DateTimeFormat.Weekday(locale);
                }
                return DateTimeFormat._weekday;
            }
        };
        DateTimeFormat.shortWeekday = function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            if (locale !== DateTimeLocale.standard()) {
                return new DateTimeFormat.ShortWeekday(locale);
            }
            else {
                if (!DateTimeFormat._shortWeekday) {
                    DateTimeFormat._shortWeekday = new DateTimeFormat.ShortWeekday(locale);
                }
                return DateTimeFormat._shortWeekday;
            }
        };
        DateTimeFormat.hour24 = function () {
            if (!DateTimeFormat._hour24) {
                DateTimeFormat._hour24 = new DateTimeFormat.Hour24();
            }
            return DateTimeFormat._hour24;
        };
        DateTimeFormat.hour12 = function () {
            if (!DateTimeFormat._hour12) {
                DateTimeFormat._hour12 = new DateTimeFormat.Hour12();
            }
            return DateTimeFormat._hour12;
        };
        DateTimeFormat.period = function (locale) {
            if (locale === void 0) { locale = DateTimeLocale.standard(); }
            if (locale !== DateTimeLocale.standard()) {
                return new DateTimeFormat.Period(locale);
            }
            else {
                if (!DateTimeFormat._period) {
                    DateTimeFormat._period = new DateTimeFormat.Period(locale);
                }
                return DateTimeFormat._period;
            }
        };
        DateTimeFormat.minute = function () {
            if (!DateTimeFormat._minute) {
                DateTimeFormat._minute = new DateTimeFormat.Minute();
            }
            return DateTimeFormat._minute;
        };
        DateTimeFormat.second = function () {
            if (!DateTimeFormat._second) {
                DateTimeFormat._second = new DateTimeFormat.Second();
            }
            return DateTimeFormat._second;
        };
        DateTimeFormat.millisecond = function () {
            if (!DateTimeFormat._millisecond) {
                DateTimeFormat._millisecond = new DateTimeFormat.Millisecond();
            }
            return DateTimeFormat._millisecond;
        };
        DateTimeFormat.pattern = function (pattern, specifiers) {
            if (!specifiers || specifiers instanceof DateTimeLocale) {
                specifiers = DateTimeSpecifiers.standard(specifiers);
            }
            return new DateTimeFormat.Pattern(pattern, specifiers);
        };
        DateTimeFormat.iso8601 = function () {
            if (!DateTimeFormat._iso8601) {
                DateTimeFormat._iso8601 = new DateTimeFormat.Pattern("%Y-%m-%dT%H:%M:%S.%LZ", DateTimeSpecifiers.standard());
            }
            return DateTimeFormat._iso8601;
        };
        DateTimeFormat.parseDateNumber = function (input, factory, desc, minDigits, maxDigits, date, value, step) {
            if (value === void 0) { value = 0; }
            if (step === void 0) { step = 0; }
            var c = 0;
            while (step < maxDigits) {
                if (input.isCont() && (c = input.head(), Base10.isDigit(c))) {
                    input.step();
                    value = 10 * value + Base10.decodeDigit(c);
                    step += 1;
                    continue;
                }
                break;
            }
            if (!input.isEmpty()) {
                if (step >= minDigits) {
                    return factory.bind(value, date || {}, input);
                }
                else {
                    return Parser.error(Diagnostic.expected(desc, input));
                }
            }
            return factory.cont(date || {}, value, step, input);
        };
        DateTimeFormat.parseDateString = function (input, factory, locale, date, output) {
            var c = 0;
            output = output || Unicode.stringOutput();
            do {
                if (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input.step();
                    output.write(c);
                    continue;
                }
                else if (!input.isEmpty()) {
                    return factory.bind(locale, output.bind(), date || {}, input);
                }
                break;
            } while (true);
            return factory.cont(locale, date || {}, output, input);
        };
        DateTimeFormat.writeDateNumber2 = function (value, output) {
            var c1 = 48 + value % 10;
            value /= 10;
            var c0 = 48 + value % 10;
            output = output.write(c0).write(c1);
        };
        DateTimeFormat.writeDateNumber3 = function (value, output) {
            var c2 = 48 + value % 10;
            value /= 10;
            var c1 = 48 + value % 10;
            value /= 10;
            var c0 = 48 + value % 10;
            output = output.write(c0).write(c1).write(c2);
        };
        DateTimeFormat.writeDateNumber4 = function (value, output) {
            var c3 = 48 + value % 10;
            value /= 10;
            var c2 = 48 + value % 10;
            value /= 10;
            var c1 = 48 + value % 10;
            value /= 10;
            var c0 = 48 + value % 10;
            output = output.write(c0).write(c1).write(c2).write(c3);
        };
        return DateTimeFormat;
    }());
    DateTime.Format = DateTimeFormat;

    var YearFormat = (function (_super) {
        __extends(YearFormat, _super);
        function YearFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        YearFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber4(date.year(), output);
        };
        YearFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.YearParser.parse(input, date);
        };
        return YearFormat;
    }(DateTimeFormat));
    DateTimeFormat.Year = YearFormat;

    var MonthOfYearFormat = (function (_super) {
        __extends(MonthOfYearFormat, _super);
        function MonthOfYearFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MonthOfYearFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.month() + 1, output);
        };
        MonthOfYearFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.MonthOfYearParser.parse(input, date);
        };
        return MonthOfYearFormat;
    }(DateTimeFormat));
    DateTimeFormat.MonthOfYear = MonthOfYearFormat;

    var MonthFormat = (function (_super) {
        __extends(MonthFormat, _super);
        function MonthFormat(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        MonthFormat.prototype.writeDate = function (date, output) {
            output.write(this.locale.months[date.month()]);
        };
        MonthFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.MonthParser.parse(input, this.locale, date);
        };
        return MonthFormat;
    }(DateTimeFormat));
    DateTimeFormat.Month = MonthFormat;

    var ShortMonthFormat = (function (_super) {
        __extends(ShortMonthFormat, _super);
        function ShortMonthFormat(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        ShortMonthFormat.prototype.writeDate = function (date, output) {
            output.write(this.locale.shortMonths[date.month()]);
        };
        ShortMonthFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.ShortMonthParser.parse(input, this.locale, date);
        };
        return ShortMonthFormat;
    }(DateTimeFormat));
    DateTimeFormat.ShortMonth = ShortMonthFormat;

    var DayOfMonthFormat = (function (_super) {
        __extends(DayOfMonthFormat, _super);
        function DayOfMonthFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DayOfMonthFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.day(), output);
        };
        DayOfMonthFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.DayOfMonthParser.parse(input, date);
        };
        return DayOfMonthFormat;
    }(DateTimeFormat));
    DateTimeFormat.DayOfMonth = DayOfMonthFormat;

    var WeekdayFormat = (function (_super) {
        __extends(WeekdayFormat, _super);
        function WeekdayFormat(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        WeekdayFormat.prototype.writeDate = function (date, output) {
            output.write(this.locale.weekdays[date.weekday()]);
        };
        WeekdayFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.WeekdayParser.parse(input, this.locale, date);
        };
        return WeekdayFormat;
    }(DateTimeFormat));
    DateTimeFormat.Weekday = WeekdayFormat;

    var ShortWeekdayFormat = (function (_super) {
        __extends(ShortWeekdayFormat, _super);
        function ShortWeekdayFormat(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        ShortWeekdayFormat.prototype.writeDate = function (date, output) {
            output.write(this.locale.shortWeekdays[date.weekday()]);
        };
        ShortWeekdayFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.ShortWeekdayParser.parse(input, this.locale, date);
        };
        return ShortWeekdayFormat;
    }(DateTimeFormat));
    DateTimeFormat.ShortWeekday = ShortWeekdayFormat;

    var Hour24Format = (function (_super) {
        __extends(Hour24Format, _super);
        function Hour24Format() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Hour24Format.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.hour(), output);
        };
        Hour24Format.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.Hour24Parser.parse(input, date);
        };
        return Hour24Format;
    }(DateTimeFormat));
    DateTimeFormat.Hour24 = Hour24Format;

    var Hour12Format = (function (_super) {
        __extends(Hour12Format, _super);
        function Hour12Format() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Hour12Format.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.hour() % 12 || 12, output);
        };
        Hour12Format.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.Hour12Parser.parse(input, date);
        };
        return Hour12Format;
    }(DateTimeFormat));
    DateTimeFormat.Hour12 = Hour12Format;

    var PeriodFormat = (function (_super) {
        __extends(PeriodFormat, _super);
        function PeriodFormat(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        PeriodFormat.prototype.writeDate = function (date, output) {
            output.write(this.locale.periods[+(date.hour() >= 12)]);
        };
        PeriodFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.PeriodParser.parse(input, this.locale, date);
        };
        return PeriodFormat;
    }(DateTimeFormat));
    DateTimeFormat.Period = PeriodFormat;

    var MinuteFormat = (function (_super) {
        __extends(MinuteFormat, _super);
        function MinuteFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinuteFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.minute(), output);
        };
        MinuteFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.MinuteParser.parse(input, date);
        };
        return MinuteFormat;
    }(DateTimeFormat));
    DateTimeFormat.Minute = MinuteFormat;

    var SecondFormat = (function (_super) {
        __extends(SecondFormat, _super);
        function SecondFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecondFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber2(date.second(), output);
        };
        SecondFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.SecondParser.parse(input, date);
        };
        return SecondFormat;
    }(DateTimeFormat));
    DateTimeFormat.Second = SecondFormat;

    var MillisecondFormat = (function (_super) {
        __extends(MillisecondFormat, _super);
        function MillisecondFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MillisecondFormat.prototype.writeDate = function (date, output) {
            DateTimeFormat.writeDateNumber3(date.millisecond(), output);
        };
        MillisecondFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.MillisecondParser.parse(input, date);
        };
        return MillisecondFormat;
    }(DateTimeFormat));
    DateTimeFormat.Millisecond = MillisecondFormat;

    var PatternFormat = (function (_super) {
        __extends(PatternFormat, _super);
        function PatternFormat(pattern, specifiers) {
            var _this = _super.call(this) || this;
            _this.pattern = pattern;
            _this.specifiers = specifiers;
            return _this;
        }
        PatternFormat.prototype.writeDate = function (date, output) {
            var pattern = this.pattern;
            var specifiers = this.specifiers;
            var i = 0;
            var j = 0;
            var n = pattern.length;
            while (j < n) {
                if (pattern.charCodeAt(j) === 37) {
                    if (i !== j) {
                        output.write(pattern.slice(i, j));
                    }
                    var s = pattern.charAt(j + 1);
                    var f = specifiers[s];
                    if (f) {
                        f.writeDate(date, output);
                    }
                    j += 2;
                    i = j;
                }
                else {
                    j += 1;
                }
            }
            if (i !== j) {
                output.write(pattern.slice(i, j));
            }
        };
        PatternFormat.prototype.parseDateTime = function (input, date) {
            return DateTimeFormat.PatternParser.parse(input, this.pattern, this.specifiers, date);
        };
        return PatternFormat;
    }(DateTimeFormat));
    DateTimeFormat.Pattern = PatternFormat;

    var YearParser = (function (_super) {
        __extends(YearParser, _super);
        function YearParser(date, year, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.year = year;
            _this.step = step;
            return _this;
        }
        YearParser.prototype.feed = function (input) {
            return YearParser.parse(input, this.date, this.year, this.step);
        };
        YearParser.parse = function (input, date, year, step) {
            return DateTimeFormat.parseDateNumber(input, YearParser, "full year", 4, 4, date, year, step);
        };
        YearParser.bind = function (year, date) {
            date.year = year;
            return Parser.done(date);
        };
        YearParser.cont = function (date, year, step) {
            return new YearParser(date, year, step);
        };
        return YearParser;
    }(Parser));
    DateTimeFormat.YearParser = YearParser;

    var MonthOfYearParser = (function (_super) {
        __extends(MonthOfYearParser, _super);
        function MonthOfYearParser(date, month, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.month = month;
            _this.step = step;
            return _this;
        }
        MonthOfYearParser.prototype.feed = function (input) {
            return MonthOfYearParser.parse(input, this.date, this.month, this.step);
        };
        MonthOfYearParser.parse = function (input, date, month, step) {
            return DateTimeFormat.parseDateNumber(input, MonthOfYearParser, "month number", 2, 2, date, month, step);
        };
        MonthOfYearParser.bind = function (month, date) {
            date.month = month - 1;
            return Parser.done(date);
        };
        MonthOfYearParser.cont = function (date, month, step) {
            return new MonthOfYearParser(date, month, step);
        };
        return MonthOfYearParser;
    }(Parser));
    DateTimeFormat.MonthOfYearParser = MonthOfYearParser;

    var MonthParser = (function (_super) {
        __extends(MonthParser, _super);
        function MonthParser(locale, date, output) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            _this.date = date;
            _this.output = output;
            return _this;
        }
        MonthParser.prototype.feed = function (input) {
            return MonthParser.parse(input, this.locale, this.date, this.output);
        };
        MonthParser.parse = function (input, locale, date, output) {
            return DateTimeFormat.parseDateString(input, MonthParser, locale, date, output);
        };
        MonthParser.bind = function (locale, value, date, input) {
            var month = locale.months.indexOf(value);
            if (month >= 0) {
                date.month = month;
                return Parser.done(date);
            }
            else {
                return Parser.error(Diagnostic.message("expected month, but found " + value, input));
            }
        };
        MonthParser.cont = function (locale, date, output) {
            return new MonthParser(locale, date, output);
        };
        return MonthParser;
    }(Parser));
    DateTimeFormat.MonthParser = MonthParser;

    var ShortMonthParser = (function (_super) {
        __extends(ShortMonthParser, _super);
        function ShortMonthParser(locale, date, output) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            _this.date = date;
            _this.output = output;
            return _this;
        }
        ShortMonthParser.prototype.feed = function (input) {
            return ShortMonthParser.parse(input, this.locale, this.date, this.output);
        };
        ShortMonthParser.parse = function (input, locale, date, output) {
            return DateTimeFormat.parseDateString(input, ShortMonthParser, locale, date, output);
        };
        ShortMonthParser.bind = function (locale, value, date, input) {
            var month = locale.shortMonths.indexOf(value);
            if (month >= 0) {
                date.month = month;
                return Parser.done(date);
            }
            else {
                return Parser.error(Diagnostic.message("expected short month, but found " + value, input));
            }
        };
        ShortMonthParser.cont = function (locale, date, output) {
            return new ShortMonthParser(locale, date, output);
        };
        return ShortMonthParser;
    }(Parser));
    DateTimeFormat.ShortMonthParser = ShortMonthParser;

    var DayOfMonthParser = (function (_super) {
        __extends(DayOfMonthParser, _super);
        function DayOfMonthParser(date, day, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.day = day;
            _this.step = step;
            return _this;
        }
        DayOfMonthParser.prototype.feed = function (input) {
            return DayOfMonthParser.parse(input, this.date, this.day, this.step);
        };
        DayOfMonthParser.parse = function (input, date, day, step) {
            return DateTimeFormat.parseDateNumber(input, DayOfMonthParser, "day of month", 2, 2, date, day, step);
        };
        DayOfMonthParser.bind = function (day, date) {
            date.day = day;
            return Parser.done(date);
        };
        DayOfMonthParser.cont = function (date, month, step) {
            return new DayOfMonthParser(date, month, step);
        };
        return DayOfMonthParser;
    }(Parser));
    DateTimeFormat.DayOfMonthParser = DayOfMonthParser;

    var WeekdayParser = (function (_super) {
        __extends(WeekdayParser, _super);
        function WeekdayParser(locale, date, output) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            _this.date = date;
            _this.output = output;
            return _this;
        }
        WeekdayParser.prototype.feed = function (input) {
            return WeekdayParser.parse(input, this.locale, this.date, this.output);
        };
        WeekdayParser.parse = function (input, locale, date, output) {
            return DateTimeFormat.parseDateString(input, WeekdayParser, locale, date, output);
        };
        WeekdayParser.bind = function (locale, value, date, input) {
            var day = locale.weekdays.indexOf(value);
            if (day >= 0) {
                return Parser.done(date);
            }
            else {
                return Parser.error(Diagnostic.message("expected weekday, but found " + value, input));
            }
        };
        WeekdayParser.cont = function (locale, date, output) {
            return new WeekdayParser(locale, date, output);
        };
        return WeekdayParser;
    }(Parser));
    DateTimeFormat.WeekdayParser = WeekdayParser;

    var ShortWeekdayParser = (function (_super) {
        __extends(ShortWeekdayParser, _super);
        function ShortWeekdayParser(locale, date, output) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            _this.date = date;
            _this.output = output;
            return _this;
        }
        ShortWeekdayParser.prototype.feed = function (input) {
            return ShortWeekdayParser.parse(input, this.locale, this.date, this.output);
        };
        ShortWeekdayParser.parse = function (input, locale, date, output) {
            return DateTimeFormat.parseDateString(input, ShortWeekdayParser, locale, date, output);
        };
        ShortWeekdayParser.bind = function (locale, value, date, input) {
            var day = locale.shortWeekdays.indexOf(value);
            if (day >= 0) {
                return Parser.done(date);
            }
            else {
                return Parser.error(Diagnostic.message("expected short weekday, but found " + value, input));
            }
        };
        ShortWeekdayParser.cont = function (locale, date, output) {
            return new ShortWeekdayParser(locale, date, output);
        };
        return ShortWeekdayParser;
    }(Parser));
    DateTimeFormat.ShortWeekdayParser = ShortWeekdayParser;

    var Hour24Parser = (function (_super) {
        __extends(Hour24Parser, _super);
        function Hour24Parser(date, hour, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.hour = hour;
            _this.step = step;
            return _this;
        }
        Hour24Parser.prototype.feed = function (input) {
            return Hour24Parser.parse(input, this.date, this.hour, this.step);
        };
        Hour24Parser.parse = function (input, date, hour, step) {
            return DateTimeFormat.parseDateNumber(input, Hour24Parser, "hour (24)", 2, 2, date, hour, step);
        };
        Hour24Parser.bind = function (hour, date) {
            date.hour = hour;
            return Parser.done(date);
        };
        Hour24Parser.cont = function (date, hour, step) {
            return new Hour24Parser(date, hour, step);
        };
        return Hour24Parser;
    }(Parser));
    DateTimeFormat.Hour24Parser = Hour24Parser;

    var Hour12Parser = (function (_super) {
        __extends(Hour12Parser, _super);
        function Hour12Parser(date, hour, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.hour = hour;
            _this.step = step;
            return _this;
        }
        Hour12Parser.prototype.feed = function (input) {
            return Hour12Parser.parse(input, this.date, this.hour, this.step);
        };
        Hour12Parser.parse = function (input, date, hour, step) {
            return DateTimeFormat.parseDateNumber(input, Hour12Parser, "hour (12)", 2, 2, date, hour, step);
        };
        Hour12Parser.bind = function (hour, date) {
            date.hour = (date.hour || 0) + hour;
            return Parser.done(date);
        };
        Hour12Parser.cont = function (date, hour, step) {
            return new Hour12Parser(date, hour, step);
        };
        return Hour12Parser;
    }(Parser));
    DateTimeFormat.Hour12Parser = Hour12Parser;

    var PeriodParser = (function (_super) {
        __extends(PeriodParser, _super);
        function PeriodParser(locale, date, output) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            _this.date = date;
            _this.output = output;
            return _this;
        }
        PeriodParser.prototype.feed = function (input) {
            return PeriodParser.parse(input, this.locale, this.date, this.output);
        };
        PeriodParser.parse = function (input, locale, date, output) {
            return DateTimeFormat.parseDateString(input, PeriodParser, locale, date, output);
        };
        PeriodParser.bind = function (locale, value, date, input) {
            var period = locale.months.indexOf(value);
            if (period >= 0) {
                date.hour = (date.hour || 0) + 12 * period;
                return Parser.done(date);
            }
            else {
                return Parser.error(Diagnostic.message("expected period of day, but found " + value, input));
            }
        };
        PeriodParser.cont = function (locale, date, output) {
            return new PeriodParser(locale, date, output);
        };
        return PeriodParser;
    }(Parser));
    DateTimeFormat.PeriodParser = PeriodParser;

    var MinuteParser = (function (_super) {
        __extends(MinuteParser, _super);
        function MinuteParser(date, minute, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.minute = minute;
            _this.step = step;
            return _this;
        }
        MinuteParser.prototype.feed = function (input) {
            return MinuteParser.parse(input, this.date, this.minute, this.step);
        };
        MinuteParser.parse = function (input, date, minute, step) {
            return DateTimeFormat.parseDateNumber(input, MinuteParser, "minute", 2, 2, date, minute, step);
        };
        MinuteParser.bind = function (minute, date) {
            date.minute = minute;
            return Parser.done(date);
        };
        MinuteParser.cont = function (date, minute, step) {
            return new MinuteParser(date, minute, step);
        };
        return MinuteParser;
    }(Parser));
    DateTimeFormat.MinuteParser = MinuteParser;

    var SecondParser = (function (_super) {
        __extends(SecondParser, _super);
        function SecondParser(date, second, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.second = second;
            _this.step = step;
            return _this;
        }
        SecondParser.prototype.feed = function (input) {
            return SecondParser.parse(input, this.date, this.second, this.step);
        };
        SecondParser.parse = function (input, date, second, step) {
            return DateTimeFormat.parseDateNumber(input, SecondParser, "second", 2, 2, date, second, step);
        };
        SecondParser.bind = function (second, date) {
            date.second = second;
            return Parser.done(date);
        };
        SecondParser.cont = function (date, second, step) {
            return new SecondParser(date, second, step);
        };
        return SecondParser;
    }(Parser));
    DateTimeFormat.SecondParser = SecondParser;

    var MillisecondParser = (function (_super) {
        __extends(MillisecondParser, _super);
        function MillisecondParser(date, millisecond, step) {
            var _this = _super.call(this) || this;
            _this.date = date;
            _this.millisecond = millisecond;
            _this.step = step;
            return _this;
        }
        MillisecondParser.prototype.feed = function (input) {
            return MillisecondParser.parse(input, this.date, this.millisecond, this.step);
        };
        MillisecondParser.parse = function (input, date, millisecond, step) {
            return DateTimeFormat.parseDateNumber(input, MillisecondParser, "millisecond", 1, 3, date, millisecond, step);
        };
        MillisecondParser.bind = function (millisecond, date) {
            date.millisecond = millisecond;
            return Parser.done(date);
        };
        MillisecondParser.cont = function (date, millisecond, step) {
            return new MillisecondParser(date, millisecond, step);
        };
        return MillisecondParser;
    }(Parser));
    DateTimeFormat.MillisecondParser = MillisecondParser;

    var PatternParser = (function (_super) {
        __extends(PatternParser, _super);
        function PatternParser(pattern, specifiers, date, dateParser, step) {
            var _this = _super.call(this) || this;
            _this.pattern = pattern;
            _this.specifiers = specifiers;
            _this.date = date;
            _this.dateParser = dateParser;
            _this.step = step;
            return _this;
        }
        PatternParser.prototype.feed = function (input) {
            return PatternParser.parse(input, this.pattern, this.specifiers, this.date, this.dateParser, this.step);
        };
        PatternParser.parse = function (input, pattern, specifiers, date, dateParser, step) {
            if (date === void 0) { date = {}; }
            if (step === void 0) { step = 0; }
            var c = 0;
            var n = pattern.length;
            while (step < n) {
                var p = pattern.charCodeAt(step);
                if (p === 37) {
                    if (!dateParser) {
                        var s = pattern.charAt(step + 1);
                        var format = specifiers[s];
                        if (format) {
                            dateParser = format.parseDateTime(input, date);
                        }
                        else {
                            return Parser.error(Diagnostic.message("unknown format specifier: " + s, input));
                        }
                    }
                    else {
                        dateParser = dateParser.feed(input);
                    }
                    if (dateParser.isDone()) {
                        date = dateParser.bind();
                        dateParser = void 0;
                        step += 2;
                        continue;
                    }
                    else if (dateParser.isError()) {
                        return dateParser.asError();
                    }
                }
                else if (input.isCont()) {
                    c = input.head();
                    if (c === p) {
                        input.step();
                        step += 1;
                        continue;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(p, input));
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
                break;
            }
            if (step === n) {
                return Parser.done(date);
            }
            return new PatternParser(pattern, specifiers, date, dateParser, step);
        };
        return PatternParser;
    }(Parser));
    DateTimeFormat.PatternParser = PatternParser;

    var MILLIS_PER_SECOND = 1000;
    var MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;
    var MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;
    var TimeInterval = (function () {
        function TimeInterval() {
        }
        TimeInterval.prototype.next = function (d, k) {
            return this.floor(this.offset(d, k));
        };
        TimeInterval.prototype.ceil = function (d) {
            if (d instanceof DateTime) {
                d = d.time(d.time() - 1);
            }
            else {
                d = DateTime.time(d) - 1;
            }
            return this.next(this.floor(d), 1);
        };
        TimeInterval.prototype.round = function (d) {
            d = DateTime.fromAny(d);
            var d0 = this.floor(d);
            var d1 = this.ceil(d);
            return d.time() - d0.time() < d1.time() - d.time() ? d0 : d1;
        };
        TimeInterval.prototype.range = function (d0, d1, step) {
            d0 = this.ceil(d0);
            d1 = DateTime.time(d1);
            var ds = [];
            step = typeof step === "number" ? Math.floor(step) : 1;
            if (step > 0) {
                while (d0.time() < d1) {
                    ds.push(d0);
                    d0 = this.next(d0, step);
                }
            }
            return ds;
        };
        TimeInterval.prototype.filter = function (predicate) {
            return new TimeInterval.Filter(this, predicate);
        };
        TimeInterval.year = function (k) {
            if (!TimeInterval._year) {
                TimeInterval._year = new TimeInterval.Year();
            }
            if (k === void 0) {
                return TimeInterval._year;
            }
            else {
                return TimeInterval._year.every(k);
            }
        };
        TimeInterval.month = function (k) {
            if (!TimeInterval._month) {
                TimeInterval._month = new TimeInterval.Month();
            }
            if (k === void 0) {
                return TimeInterval._month;
            }
            else {
                return TimeInterval._month.every(k);
            }
        };
        TimeInterval.week = function () {
            if (!TimeInterval._week) {
                TimeInterval._week = new TimeInterval.Week();
            }
            return TimeInterval._week;
        };
        TimeInterval.day = function (k) {
            if (!TimeInterval._day) {
                TimeInterval._day = new TimeInterval.Day();
            }
            if (k === void 0) {
                return TimeInterval._day;
            }
            else {
                return TimeInterval._day.every(k);
            }
        };
        TimeInterval.hour = function (k) {
            if (!TimeInterval._hour) {
                TimeInterval._hour = new TimeInterval.Hour();
            }
            if (k === void 0) {
                return TimeInterval._hour;
            }
            else {
                return TimeInterval._hour.every(k);
            }
        };
        TimeInterval.minute = function (k) {
            if (!TimeInterval._minute) {
                TimeInterval._minute = new TimeInterval.Minute();
            }
            if (k === void 0) {
                return TimeInterval._minute;
            }
            else {
                return TimeInterval._minute.every(k);
            }
        };
        TimeInterval.second = function (k) {
            if (!TimeInterval._second) {
                TimeInterval._second = new TimeInterval.Second();
            }
            if (k === void 0) {
                return TimeInterval._second;
            }
            else {
                return TimeInterval._second.every(k);
            }
        };
        TimeInterval.millisecond = function (k) {
            if (!TimeInterval._millisecond) {
                TimeInterval._millisecond = new TimeInterval.Millisecond();
            }
            if (k === void 0) {
                return TimeInterval._millisecond;
            }
            else {
                return TimeInterval._millisecond.every(k);
            }
        };
        TimeInterval.years = function (d0, d1, step) {
            return TimeInterval.year().range(d0, d1, step);
        };
        TimeInterval.months = function (d0, d1, step) {
            return TimeInterval.month().range(d0, d1, step);
        };
        TimeInterval.weeks = function (d0, d1, step) {
            return TimeInterval.week().range(d0, d1, step);
        };
        TimeInterval.days = function (d0, d1, step) {
            return TimeInterval.day().range(d0, d1, step);
        };
        TimeInterval.hours = function (d0, d1, step) {
            return TimeInterval.hour().range(d0, d1, step);
        };
        TimeInterval.minutes = function (d0, d1, step) {
            return TimeInterval.minute().range(d0, d1, step);
        };
        TimeInterval.seconds = function (d0, d1, step) {
            return TimeInterval.second().range(d0, d1, step);
        };
        TimeInterval.milliseconds = function (d0, d1, step) {
            return TimeInterval.millisecond().range(d0, d1, step);
        };
        return TimeInterval;
    }());
    var UnitTimeInterval = (function (_super) {
        __extends(UnitTimeInterval, _super);
        function UnitTimeInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UnitTimeInterval;
    }(TimeInterval));

    var FilterInterval = (function (_super) {
        __extends(FilterInterval, _super);
        function FilterInterval(unit, predicate) {
            var _this = _super.call(this) || this;
            _this.unit = unit;
            _this.predicate = predicate;
            return _this;
        }
        FilterInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            while (k < 0) {
                do {
                    d = this.unit.offset(d, -1);
                } while (!this.predicate(d));
                k += 1;
            }
            while (k > 0) {
                do {
                    d = this.unit.offset(d, 1);
                } while (!this.predicate(d));
                k -= 1;
            }
            return d;
        };
        FilterInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            while (d = this.unit.floor(d), !this.predicate(d)) {
                d = d.time(d.time() - 1);
            }
            return d;
        };
        return FilterInterval;
    }(TimeInterval));
    TimeInterval.Filter = FilterInterval;

    var YearInterval = (function (_super) {
        __extends(YearInterval, _super);
        function YearInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        YearInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = d.year(d.year() + k);
            return d;
        };
        YearInterval.prototype.next = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            return d.year(d.year() + k).month(0, 1).hour(0, 0, 0, 0);
        };
        YearInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            return d.month(0, 1).hour(0, 0, 0, 0);
        };
        YearInterval.prototype.ceil = function (d) {
            d = DateTime.fromAny(d);
            d = d.time(d.time() - 1);
            d = d.month(0, 1).hour(0, 0, 0, 0);
            d = d.year(d.year() + 1);
            return d.month(0, 1).hour(0, 0, 0, 0);
        };
        YearInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Years(k);
            }
            else {
                throw new Error("" + k);
            }
        };
        return YearInterval;
    }(UnitTimeInterval));
    TimeInterval.Year = YearInterval;

    var YearsInterval = (function (_super) {
        __extends(YearsInterval, _super);
        function YearsInterval(stride) {
            var _this = _super.call(this) || this;
            _this.stride = stride || 1;
            return _this;
        }
        YearsInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            return d.year(d.year() + k * this.stride);
        };
        YearsInterval.prototype.next = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = d.year(Math.floor((d.year() + k * this.stride) / this.stride) * this.stride);
            return d.month(0, 1).hour(0, 0, 0, 0);
        };
        YearsInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            d = d.year(Math.floor(d.year() / this.stride) * this.stride);
            return d.month(0, 1).hour(0, 0, 0, 0);
        };
        YearsInterval.prototype.ceil = function (d) {
            d = DateTime.fromAny(d);
            d = d.time(d.time() - 1);
            d = d.year(Math.floor(d.year() / this.stride) * this.stride);
            d = d.month(0, 1).hour(0, 0, 0, 0);
            d = d.year(Math.floor((d.year() + this.stride) / this.stride) * this.stride);
            return d.month(0, 1).hour(0, 0, 0, 0);
        };
        return YearsInterval;
    }(TimeInterval));
    TimeInterval.Years = YearsInterval;

    var MonthInterval = (function (_super) {
        __extends(MonthInterval, _super);
        function MonthInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MonthInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            return d.month(d.month() + k);
        };
        MonthInterval.prototype.next = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = d.month(d.month() + k);
            return d.day(1).hour(0, 0, 0, 0);
        };
        MonthInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            return d.day(1).hour(0, 0, 0, 0);
        };
        MonthInterval.prototype.ceil = function (d) {
            d = DateTime.fromAny(d);
            d = d.time(d.time() - 1);
            d = d.day(1).hour(0, 0, 0, 0);
            d = d.month(d.month() + 1);
            return d.day(1).hour(0, 0, 0, 0);
        };
        MonthInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Filter(this, MonthInterval.modulo.bind(void 0, k));
            }
            else {
                throw new Error("" + k);
            }
        };
        MonthInterval.modulo = function (k, d) {
            return d.month() % k === 0;
        };
        return MonthInterval;
    }(UnitTimeInterval));
    TimeInterval.Month = MonthInterval;

    var WeekInterval = (function (_super) {
        __extends(WeekInterval, _super);
        function WeekInterval(day) {
            if (day === void 0) { day = 0; }
            var _this = _super.call(this) || this;
            _this.day = day;
            return _this;
        }
        WeekInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            return d.day(d.day() + 7 * k);
        };
        WeekInterval.prototype.next = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = d.day(d.day() + 7 * k);
            d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
            return d.hour(0, 0, 0, 0);
        };
        WeekInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
            return d.hour(0, 0, 0, 0);
        };
        WeekInterval.prototype.ceil = function (d) {
            d = DateTime.fromAny(d);
            d = d.time(d.time() - 1);
            d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
            d = d.hour(0, 0, 0, 0);
            d = d.day(d.day() + 7);
            return d.hour(0, 0, 0, 0);
        };
        return WeekInterval;
    }(TimeInterval));
    TimeInterval.Week = WeekInterval;

    var DayInterval = (function (_super) {
        __extends(DayInterval, _super);
        function DayInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DayInterval.prototype.offset = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            return d.day(d.day() + k);
        };
        DayInterval.prototype.next = function (d, k) {
            d = DateTime.fromAny(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = d.day(d.day() + k);
            return d.hour(0, 0, 0, 0);
        };
        DayInterval.prototype.floor = function (d) {
            d = DateTime.fromAny(d);
            return d.hour(0, 0, 0, 0);
        };
        DayInterval.prototype.ceil = function (d) {
            d = DateTime.fromAny(d);
            d = d.time(d.time() - 1);
            d = d.hour(0, 0, 0, 0);
            d = d.day(d.day() + 1);
            return d.hour(0, 0, 0, 0);
        };
        DayInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Filter(this, DayInterval.modulo.bind(void 0, k));
            }
            else {
                throw new Error("" + k);
            }
        };
        DayInterval.modulo = function (k, d) {
            return d.day() % k === 0;
        };
        return DayInterval;
    }(UnitTimeInterval));
    TimeInterval.Day = DayInterval;

    var HourInterval = (function (_super) {
        __extends(HourInterval, _super);
        function HourInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HourInterval.prototype.offset = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * MILLIS_PER_HOUR;
            return new DateTime(d, z);
        };
        HourInterval.prototype.next = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * MILLIS_PER_HOUR;
            var dtz = z.offset() * MILLIS_PER_MINUTE % MILLIS_PER_HOUR;
            if (dtz < 0) {
                dtz += MILLIS_PER_HOUR;
            }
            d = Math.floor((d - dtz) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR + dtz;
            return new DateTime(d, z);
        };
        HourInterval.prototype.floor = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            var dtz = z.offset() * MILLIS_PER_MINUTE % MILLIS_PER_HOUR;
            if (dtz < 0) {
                dtz += MILLIS_PER_HOUR;
            }
            d = Math.floor((d - dtz) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR + dtz;
            return new DateTime(d, z);
        };
        HourInterval.prototype.ceil = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            d -= 1;
            var dtz = z.offset() * MILLIS_PER_MINUTE % MILLIS_PER_HOUR;
            if (dtz < 0) {
                dtz += MILLIS_PER_HOUR;
            }
            d = (Math.floor((d - dtz) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR + dtz) + MILLIS_PER_HOUR;
            d = Math.floor((d - dtz) / MILLIS_PER_HOUR) * MILLIS_PER_HOUR + dtz;
            return new DateTime(d, z);
        };
        HourInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Filter(this, HourInterval.modulo.bind(void 0, k));
            }
            else {
                throw new Error("" + k);
            }
        };
        HourInterval.modulo = function (k, d) {
            return d.hour() % k === 0;
        };
        return HourInterval;
    }(UnitTimeInterval));
    TimeInterval.Hour = HourInterval;

    var MinuteInterval = (function (_super) {
        __extends(MinuteInterval, _super);
        function MinuteInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinuteInterval.prototype.offset = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * MILLIS_PER_MINUTE;
            return new DateTime(d, z);
        };
        MinuteInterval.prototype.next = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d = Math.floor((d + k * MILLIS_PER_MINUTE) / MILLIS_PER_MINUTE) * MILLIS_PER_MINUTE;
            return new DateTime(d, z);
        };
        MinuteInterval.prototype.floor = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            d = Math.floor(d / MILLIS_PER_MINUTE) * MILLIS_PER_MINUTE;
            return new DateTime(d, z);
        };
        MinuteInterval.prototype.ceil = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            d = Math.floor(((Math.floor((d - 1) / MILLIS_PER_MINUTE) * MILLIS_PER_MINUTE) + MILLIS_PER_MINUTE) / MILLIS_PER_MINUTE) * MILLIS_PER_MINUTE;
            return new DateTime(d, z);
        };
        MinuteInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Filter(this, MinuteInterval.modulo.bind(void 0, k));
            }
            else {
                throw new Error("" + k);
            }
        };
        MinuteInterval.modulo = function (k, d) {
            return d.minute() % k === 0;
        };
        return MinuteInterval;
    }(UnitTimeInterval));
    TimeInterval.Minute = MinuteInterval;

    var SecondInterval = (function (_super) {
        __extends(SecondInterval, _super);
        function SecondInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecondInterval.prototype.offset = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * MILLIS_PER_SECOND;
            return new DateTime(d, z);
        };
        SecondInterval.prototype.next = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * MILLIS_PER_SECOND;
            d = Math.floor(d / MILLIS_PER_SECOND) * MILLIS_PER_SECOND;
            return new DateTime(d, z);
        };
        SecondInterval.prototype.floor = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            d = Math.floor(d / MILLIS_PER_SECOND) * MILLIS_PER_SECOND;
            return new DateTime(d, z);
        };
        SecondInterval.prototype.ceil = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            d = Math.floor(((Math.floor((d - 1) / MILLIS_PER_SECOND) * MILLIS_PER_SECOND) + MILLIS_PER_SECOND) / MILLIS_PER_SECOND) * MILLIS_PER_SECOND;
            return new DateTime(d, z);
        };
        SecondInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Filter(this, SecondInterval.modulo.bind(void 0, k));
            }
            else {
                throw new Error('' + k);
            }
        };
        SecondInterval.modulo = function (k, d) {
            return d.second() % k === 0;
        };
        return SecondInterval;
    }(UnitTimeInterval));
    TimeInterval.Second = SecondInterval;

    var MillisecondInterval = (function (_super) {
        __extends(MillisecondInterval, _super);
        function MillisecondInterval() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MillisecondInterval.prototype.offset = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k;
            return new DateTime(d, z);
        };
        MillisecondInterval.prototype.next = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k;
            return new DateTime(d, z);
        };
        MillisecondInterval.prototype.floor = function (d) {
            return DateTime.fromAny(d);
        };
        MillisecondInterval.prototype.ceil = function (d) {
            return DateTime.fromAny(d);
        };
        MillisecondInterval.prototype.every = function (k) {
            if (k === 1) {
                return this;
            }
            else if (isFinite(k) && k >= 1) {
                return new TimeInterval.Milliseconds(k);
            }
            else {
                throw new Error("" + k);
            }
        };
        return MillisecondInterval;
    }(UnitTimeInterval));
    TimeInterval.Millisecond = MillisecondInterval;

    var MillisecondsInterval = (function (_super) {
        __extends(MillisecondsInterval, _super);
        function MillisecondsInterval(stride) {
            var _this = _super.call(this) || this;
            if (typeof stride !== "number" || !isFinite(stride) || isNaN(stride)) {
                stride = 1;
            }
            _this.stride = stride;
            return _this;
        }
        MillisecondsInterval.prototype.offset = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            d += k * this.stride;
            return new DateTime(d, z);
        };
        MillisecondsInterval.prototype.next = function (d, k) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            k = Math.max(1, typeof k === "number" ? Math.floor(k) : 1);
            var stride = this.stride;
            d = Math.floor((d + k * stride) / stride) * stride;
            return new DateTime(d, z);
        };
        MillisecondsInterval.prototype.floor = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            var stride = this.stride;
            d = Math.floor(d / stride) * stride;
            return new DateTime(d, z);
        };
        MillisecondsInterval.prototype.ceil = function (d) {
            var z = DateTime.zone(d);
            d = DateTime.time(d);
            var stride = this.stride;
            d = Math.floor(((Math.floor((d - 1) / stride) * stride) + stride) / stride) * stride;
            return new DateTime(d, z);
        };
        return MillisecondsInterval;
    }(TimeInterval));
    TimeInterval.Milliseconds = MillisecondsInterval;

    var UriException = (function (_super) {
        __extends(UriException, _super);
        function UriException(message) {
            var _this = _super.call(this, message instanceof Diagnostic ? message.message() || void 0 : message) || this;
            if (message instanceof Diagnostic) {
                _this.diagnostic = message;
            }
            _this.__proto__ = UriException.prototype;
            return _this;
        }
        UriException.prototype.toString = function () {
            if (this.diagnostic) {
                return this.diagnostic.toString();
            }
            else {
                return _super.prototype.toString.call(this);
            }
        };
        return UriException;
    }(Error));

    var Uri = (function () {
        function Uri(scheme, authority, path, query, fragment) {
            this._scheme = scheme;
            this._authority = authority;
            this._path = path;
            this._query = query;
            this._fragment = fragment;
        }
        Uri.prototype.isDefined = function () {
            return this._scheme.isDefined() || this._authority.isDefined() || this._path.isDefined()
                || this._query.isDefined() || this._fragment.isDefined();
        };
        Uri.prototype.isEmpty = function () {
            return !this._scheme.isDefined() && !this._authority.isDefined() && this._path.isEmpty()
                && !this._query.isDefined() && !this._fragment.isDefined();
        };
        Uri.prototype.scheme = function (scheme) {
            if (scheme === void 0) {
                return this._scheme;
            }
            else {
                scheme = Uri.Scheme.fromAny(scheme);
                if (scheme !== this._scheme) {
                    return this.copy(scheme, this._authority, this._path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.schemePart = function (scheme) {
            if (scheme === void 0) {
                return this._scheme.toString();
            }
            else {
                return this.scheme(Uri.Scheme.parse(scheme));
            }
        };
        Uri.prototype.schemeName = function (scheme) {
            if (scheme === void 0) {
                return this._scheme.name();
            }
            else {
                return this.scheme(Uri.Scheme.from(scheme));
            }
        };
        Uri.prototype.authority = function (authority) {
            if (authority === void 0) {
                return this._authority;
            }
            else {
                authority = Uri.Authority.fromAny(authority);
                if (authority !== this._authority) {
                    return this.copy(this._scheme, authority, this._path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.authorityPart = function (authority) {
            if (authority === void 0) {
                return this._authority.toString();
            }
            else {
                return this.authority(Uri.Authority.parse(authority));
            }
        };
        Uri.prototype.user = function (user) {
            if (user === void 0) {
                return this._authority.user();
            }
            else {
                return this.authority(this._authority.user(user));
            }
        };
        Uri.prototype.userPart = function (user) {
            if (user === void 0) {
                return this._authority.userPart();
            }
            else {
                return this.authority(this._authority.userPart(user));
            }
        };
        Uri.prototype.username = function (username, password) {
            if (username === void 0) {
                return this._authority.username();
            }
            else {
                return this.authority(this._authority.username(username, password));
            }
        };
        Uri.prototype.password = function (password) {
            if (password === void 0) {
                return this._authority.password();
            }
            else {
                return this.authority(this._authority.password(password));
            }
        };
        Uri.prototype.host = function (host) {
            if (host === void 0) {
                return this._authority.host();
            }
            else {
                return this.authority(this._authority.host(host));
            }
        };
        Uri.prototype.hostPart = function (host) {
            if (host === void 0) {
                return this._authority.hostPart();
            }
            else {
                return this.authority(this._authority.hostPart(host));
            }
        };
        Uri.prototype.hostAddress = function () {
            return this._authority.hostAddress();
        };
        Uri.prototype.hostName = function (address) {
            if (address === void 0) {
                return this._authority.hostName();
            }
            else {
                return this.authority(this._authority.hostName(address));
            }
        };
        Uri.prototype.hostIPv4 = function (address) {
            if (address === void 0) {
                return this._authority.hostIPv4();
            }
            else {
                return this.authority(this._authority.hostIPv4(address));
            }
        };
        Uri.prototype.hostIPv6 = function (address) {
            if (address === void 0) {
                return this._authority.hostIPv6();
            }
            else {
                return this.authority(this._authority.hostIPv6(address));
            }
        };
        Uri.prototype.port = function (port) {
            if (port === void 0) {
                return this._authority.port();
            }
            else {
                return this.authority(this._authority.port(port));
            }
        };
        Uri.prototype.portPart = function (port) {
            if (port === void 0) {
                return this._authority.portPart();
            }
            else {
                return this.authority(this._authority.portPart(port));
            }
        };
        Uri.prototype.portNumber = function (port) {
            if (port === void 0) {
                return this._authority.portNumber();
            }
            else {
                return this.authority(this._authority.portNumber(port));
            }
        };
        Uri.prototype.path = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length === 0) {
                return this._path;
            }
            else {
                var path = Uri.Path.from.apply(void 0, components);
                if (path !== this._path) {
                    return this.copy(this._scheme, this._authority, path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.pathPart = function (path) {
            if (path === void 0) {
                return this._path.toString();
            }
            else {
                return this.path(Uri.Path.parse(path));
            }
        };
        Uri.prototype.pathName = function (name) {
            if (name === void 0) {
                return this._path.name();
            }
            else {
                return this.path(this._path.name(name));
            }
        };
        Uri.prototype.parentPath = function () {
            return this._path.parent();
        };
        Uri.prototype.basePath = function () {
            return this._path.base();
        };
        Uri.prototype.parent = function () {
            return Uri.from(this._scheme, this._authority, this._path.parent());
        };
        Uri.prototype.base = function () {
            return Uri.from(this._scheme, this._authority, this._path.base());
        };
        Uri.prototype.appendedPath = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return this.path(this._path.appended.apply(this._path, arguments));
        };
        Uri.prototype.appendedSlash = function () {
            return this.path(this._path.appendedSlash());
        };
        Uri.prototype.appendedSegment = function (segment) {
            return this.path(this._path.appendedSegment(segment));
        };
        Uri.prototype.prependedPath = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return this.path(this._path.prepended.apply(this._path, arguments));
        };
        Uri.prototype.prependedSlash = function () {
            return this.path(this._path.prependedSlash());
        };
        Uri.prototype.prependedSegment = function (segment) {
            return this.path(this._path.prependedSegment(segment));
        };
        Uri.prototype.query = function (query) {
            if (query === void 0) {
                return this._query;
            }
            else {
                query = Uri.Query.fromAny(query);
                if (query !== this._query) {
                    return this.copy(this._scheme, this._authority, this._path, query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.queryPart = function (query) {
            if (query === void 0) {
                return this._query.toString();
            }
            else {
                return this.query(Uri.Query.parse(query));
            }
        };
        Uri.prototype.updatedQuery = function (key, value) {
            return this.query(this._query.updated(key, value));
        };
        Uri.prototype.removedQuery = function (key) {
            return this.query(this._query.removed(key));
        };
        Uri.prototype.appendedQuery = function (key, value) {
            return this.query(this._query.appended(key, value));
        };
        Uri.prototype.prependedQuery = function (key, value) {
            return this.query(this._query.prepended(key, value));
        };
        Uri.prototype.fragment = function (fragment) {
            if (fragment === void 0) {
                return this._fragment;
            }
            else {
                fragment = Uri.Fragment.fromAny(fragment);
                if (fragment !== this._fragment) {
                    return Uri.from(this._scheme, this._authority, this._path, this._query, fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.fragmentPart = function (fragment) {
            if (fragment === void 0) {
                return this._fragment.toString();
            }
            else {
                return this.fragment(Uri.Fragment.parse(fragment));
            }
        };
        Uri.prototype.fragmentIdentifier = function (identifier) {
            if (identifier === void 0) {
                return this._fragment.identifier();
            }
            else {
                return this.fragment(Uri.Fragment.from(identifier));
            }
        };
        Uri.prototype.endpoint = function () {
            if (this._path.isDefined() || this._query.isDefined() || this._fragment.isDefined()) {
                return Uri.from(this._scheme, this._authority);
            }
            else {
                return this;
            }
        };
        Uri.prototype.resolve = function (relative) {
            relative = Uri.fromAny(relative);
            if (relative._scheme.isDefined()) {
                return this.copy(relative._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else if (relative._authority.isDefined()) {
                return this.copy(this._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else if (relative._path.isEmpty()) {
                return this.copy(this._scheme, this._authority, this._path, relative._query.isDefined() ? relative._query : this._query, relative._fragment);
            }
            else if (relative._path.isAbsolute()) {
                return this.copy(this._scheme, this._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else {
                return this.copy(this._scheme, this._authority, this.merge(relative._path).removeDotSegments(), relative._query, relative._fragment);
            }
        };
        Uri.prototype.merge = function (relative) {
            if (this._authority.isDefined() && this._path.isEmpty()) {
                return relative.prependedSlash();
            }
            else if (this._path.isEmpty()) {
                return relative;
            }
            else {
                return this._path.merge(relative);
            }
        };
        Uri.prototype.unresolve = function (absolute) {
            absolute = Uri.fromAny(absolute);
            if (!this._scheme.equals(absolute._scheme) || !this._authority.equals(absolute._authority)) {
                return absolute;
            }
            else {
                return Uri.from(Uri.Scheme.undefined(), Uri.Authority.undefined(), this._path.unmerge(absolute._path), absolute._query, absolute._fragment);
            }
        };
        Uri.prototype.copy = function (scheme, authority, path, query, fragment) {
            return Uri.from(scheme, authority, path, query, fragment);
        };
        Uri.prototype.toAny = function () {
            var uri = {};
            uri.scheme = this._scheme.toAny();
            this._authority.toAny(uri);
            uri.path = this._path.toAny();
            uri.query = this._query.toAny();
            uri.fragment = this._fragment.toAny();
            return uri;
        };
        Uri.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        Uri.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Uri) {
                return this.toString() === that.toString();
            }
            return false;
        };
        Uri.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        Uri.prototype.debug = function (output) {
            output = output.write("Uri").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("empty").write(40).write(41);
            }
        };
        Uri.prototype.display = function (output) {
            if (this._string != null) {
                output = output.write(this._string);
            }
            else {
                if (this._scheme.isDefined()) {
                    output.display(this._scheme).write(58);
                }
                if (this._authority.isDefined()) {
                    output = output.write(47).write(47).display(this._authority);
                }
                output.display(this._path);
                if (this._query.isDefined()) {
                    output = output.write(63).display(this._query);
                }
                if (this._fragment.isDefined()) {
                    output = output.write(35).display(this._fragment);
                }
            }
        };
        Uri.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        Uri.empty = function () {
            if (Uri._empty === void 0) {
                Uri._empty = new Uri(Uri.Scheme.undefined(), Uri.Authority.undefined(), Uri.Path.empty(), Uri.Query.undefined(), Uri.Fragment.undefined());
            }
            return Uri._empty;
        };
        Uri.from = function (scheme, authority, path, query, fragment) {
            if (scheme === void 0) { scheme = Uri.Scheme.undefined(); }
            if (authority === void 0) { authority = Uri.Authority.undefined(); }
            if (path === void 0) { path = Uri.Path.empty(); }
            if (query === void 0) { query = Uri.Query.undefined(); }
            if (fragment === void 0) { fragment = Uri.Fragment.undefined(); }
            if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                || query.isDefined() || fragment.isDefined()) {
                return new Uri(scheme, authority, path, query, fragment);
            }
            else {
                return Uri.empty();
            }
        };
        Uri.fromAny = function (uri) {
            if (uri === null || uri === void 0) {
                return Uri.empty();
            }
            else if (uri instanceof Uri) {
                return uri;
            }
            else if (typeof uri === "object") {
                var scheme = Uri.Scheme.fromAny(uri.scheme);
                var authority = Uri.Authority.fromAny(uri.authority || uri);
                var path = Uri.Path.fromAny(uri.path);
                var query = Uri.Query.fromAny(uri.query);
                var fragment = Uri.Fragment.fromAny(uri.fragment);
                if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                    || query.isDefined() || fragment.isDefined()) {
                    return new Uri(scheme, authority, path, query, fragment);
                }
                else {
                    return Uri.empty();
                }
            }
            else if (typeof uri === "string") {
                return Uri.parse(uri);
            }
            else {
                throw new TypeError("" + uri);
            }
        };
        Uri.scheme = function (scheme) {
            scheme = Uri.Scheme.fromAny(scheme);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.schemePart = function (part) {
            var scheme = Uri.Scheme.parse(part);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.schemeName = function (name) {
            var scheme = Uri.Scheme.from(name);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.authority = function (authority) {
            authority = Uri.Authority.fromAny(authority);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.authorityPart = function (part) {
            var authority = Uri.Authority.parse(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.user = function (user) {
            var authority = Uri.Authority.user(user);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.userPart = function (part) {
            var authority = Uri.Authority.userPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.username = function (username, password) {
            var authority = Uri.Authority.username(username, password);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.password = function (password) {
            var authority = Uri.Authority.password(password);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.host = function (host) {
            var authority = Uri.Authority.host(host);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostPart = function (part) {
            var authority = Uri.Authority.hostPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostName = function (address) {
            var authority = Uri.Authority.hostName(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostIPv4 = function (address) {
            var authority = Uri.Authority.hostIPv4(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostIPv6 = function (address) {
            var authority = Uri.Authority.hostIPv6(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.port = function (port) {
            var authority = Uri.Authority.port(port);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.portPart = function (part) {
            var authority = Uri.Authority.portPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.portNumber = function (number) {
            var authority = Uri.Authority.portNumber(number);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.path = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            var path = Uri.Path.from.apply(void 0, components);
            return Uri.from(void 0, void 0, path, void 0, void 0);
        };
        Uri.pathPart = function (part) {
            var path = Uri.Path.parse(part);
            return Uri.from(void 0, void 0, path, void 0, void 0);
        };
        Uri.query = function (query) {
            query = Uri.Query.fromAny(query);
            return Uri.from(void 0, void 0, void 0, query, void 0);
        };
        Uri.queryPart = function (part) {
            var query = Uri.Query.parse(part);
            return Uri.from(void 0, void 0, void 0, query, void 0);
        };
        Uri.fragment = function (fragment) {
            fragment = Uri.Fragment.fromAny(fragment);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.fragmentPart = function (part) {
            var fragment = Uri.Fragment.parse(part);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.fragmentIdentifier = function (identifier) {
            var fragment = Uri.Fragment.from(identifier);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.standardParser = function () {
            if (!this._standardParser) {
                this._standardParser = new Uri.Parser();
            }
            return this._standardParser;
        };
        Uri.parse = function (string) {
            return Uri.standardParser().parseAbsoluteString(string);
        };
        Uri.isUnreservedChar = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c >= 48 && c <= 57
                || c === 45 || c === 46
                || c === 95 || c === 126;
        };
        Uri.isSubDelimChar = function (c) {
            return c === 33 || c === 36
                || c === 38 || c === 40
                || c === 41 || c === 42
                || c === 43 || c === 44
                || c === 59 || c === 61
                || c === 39;
        };
        Uri.isSchemeChar = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c >= 48 && c <= 57
                || c === 43 || c === 45
                || c === 46;
        };
        Uri.isUserInfoChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 58;
        };
        Uri.isUserChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c);
        };
        Uri.isHostChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c);
        };
        Uri.isPathChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 58 || c === 64;
        };
        Uri.isQueryChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 47 || c === 58
                || c === 63 || c === 64;
        };
        Uri.isParamChar = function (c) {
            return Uri.isUnreservedChar(c)
                || c === 33 || c === 36
                || c === 40 || c === 41
                || c === 42 || c === 43
                || c === 44 || c === 47
                || c === 58 || c === 59
                || c === 63 || c === 64
                || c === 39;
        };
        Uri.isFragmentChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 47 || c === 58
                || c === 63 || c === 64;
        };
        Uri.isAlpha = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122;
        };
        Uri.toLowerCase = function (c) {
            if (c >= 65 && c <= 90) {
                return c + (97 - 65);
            }
            else {
                return c;
            }
        };
        Uri.writeScheme = function (scheme, output) {
            for (var i = 0, n = scheme.length; i < n; i += 1) {
                var c = scheme.charCodeAt(i);
                if (i > 0 && Uri.isSchemeChar(c) || i === 0 && Uri.isAlpha(c)) {
                    output = output.write(c);
                }
                else {
                    throw new UriException("Invalid scheme: " + scheme);
                }
            }
        };
        Uri.writeUserInfo = function (userInfo, output) {
            for (var i = 0, n = userInfo.length; i < n; i += 1) {
                var c = userInfo.charCodeAt(i);
                if (Uri.isUserInfoChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeUser = function (user, output) {
            for (var i = 0, n = user.length; i < n; i += 1) {
                var c = user.charCodeAt(i);
                if (Uri.isUserChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeHost = function (address, output) {
            for (var i = 0, n = address.length; i < n; i += 1) {
                var c = address.charCodeAt(i);
                if (Uri.isHostChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeHostLiteral = function (address, output) {
            for (var i = 0, n = address.length; i < n; i += 1) {
                var c = address.charCodeAt(i);
                if (Uri.isHostChar(c) || c === 58) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writePathSegment = function (segment, output) {
            for (var i = 0, n = segment.length; i < n; i += 1) {
                var c = segment.charCodeAt(i);
                if (Uri.isPathChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeQuery = function (query, output) {
            for (var i = 0, n = query.length; i < n; i += 1) {
                var c = query.charCodeAt(i);
                if (Uri.isQueryChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeParam = function (param, output) {
            for (var i = 0, n = param.length; i < n; i += 1) {
                var c = param.charCodeAt(i);
                if (Uri.isParamChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeFragment = function (fragment, output) {
            for (var i = 0, n = fragment.length; i < n; i += 1) {
                var c = fragment.charCodeAt(i);
                if (Uri.isFragmentChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeEncoded = function (c, output) {
            if (c === 0x00) {
                Uri.writePctEncoded(0xC0, output);
                Uri.writePctEncoded(0x80, output);
            }
            else if (c >= 0x00 && c <= 0x7F) {
                Uri.writePctEncoded(c, output);
            }
            else if (c >= 0x80 && c <= 0x07FF) {
                Uri.writePctEncoded(0xC0 | (c >>> 6), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else if (c >= 0x0800 && c <= 0xFFFF
                || c >= 0xE000 && c <= 0xFFFF) {
                Uri.writePctEncoded(0xE0 | (c >>> 12), output);
                Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else if (c >= 0x10000 && c <= 0x10FFFF) {
                Uri.writePctEncoded(0xF0 | (c >>> 18), output);
                Uri.writePctEncoded(0x80 | (c >>> 12 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else {
                Uri.writePctEncoded(0xEF, output);
                Uri.writePctEncoded(0xBF, output);
                Uri.writePctEncoded(0xBD, output);
            }
        };
        Uri.writePctEncoded = function (c, output) {
            output = output.write(37)
                .write(Base16.lowercase().encodeDigit(c >>> 4 & 0xF))
                .write(Base16.lowercase().encodeDigit(c & 0xF));
        };
        Uri.form = function () {
            if (!Uri._form) {
                Uri._form = new Uri.Form(Uri.empty());
            }
            return Uri._form;
        };
        return Uri;
    }());

    var UriScheme = (function () {
        function UriScheme(name) {
            this._name = name;
        }
        UriScheme.prototype.isDefined = function () {
            return this._name.length !== 0;
        };
        UriScheme.prototype.name = function () {
            return this._name;
        };
        UriScheme.prototype.toAny = function () {
            return this._name.length !== 0 ? this._name : void 0;
        };
        UriScheme.prototype.compareTo = function (that) {
            var order = this._name.localeCompare(that._name);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriScheme.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriScheme) {
                return this._name === that._name;
            }
            return false;
        };
        UriScheme.prototype.hashCode = function () {
            return Murmur3.hash(this._name);
        };
        UriScheme.prototype.debug = function (output) {
            output = output.write("UriScheme").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriScheme.prototype.display = function (output) {
            Uri.writeScheme(this._name, output);
        };
        UriScheme.prototype.toString = function () {
            return this._name;
        };
        UriScheme.undefined = function () {
            if (UriScheme._undefined === void 0) {
                UriScheme._undefined = new UriScheme("");
            }
            return UriScheme._undefined;
        };
        UriScheme.from = function (name) {
            var cache = UriScheme.cache();
            var scheme = cache.get(name);
            if (scheme) {
                return scheme;
            }
            else {
                return cache.put(name, new UriScheme(name));
            }
        };
        UriScheme.fromAny = function (scheme) {
            if (scheme === null || scheme === void 0) {
                return UriScheme.undefined();
            }
            else if (scheme instanceof UriScheme) {
                return scheme;
            }
            else if (typeof scheme === "string") {
                return UriScheme.parse(scheme);
            }
            else {
                throw new TypeError("" + scheme);
            }
        };
        UriScheme.parse = function (string) {
            return Uri.standardParser().parseSchemeString(string);
        };
        UriScheme.cache = function () {
            if (UriScheme._cache === void 0) {
                var cacheSize = 4;
                UriScheme._cache = new HashGenCacheMap(cacheSize);
            }
            return UriScheme._cache;
        };
        return UriScheme;
    }());
    Uri.Scheme = UriScheme;

    var UriAuthority = (function () {
        function UriAuthority(user, host, port) {
            this._user = user;
            this._host = host;
            this._port = port;
        }
        UriAuthority.prototype.isDefined = function () {
            return this._user.isDefined() || this._host.isDefined() || this._port.isDefined();
        };
        UriAuthority.prototype.user = function (user) {
            if (user === void 0) {
                return this._user;
            }
            else {
                user = Uri.User.fromAny(user);
                if (user !== this._user) {
                    return this.copy(user, this._host, this._port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.userPart = function (user) {
            if (user === void 0) {
                return this._user.toString();
            }
            else {
                return this.user(Uri.User.parse(user));
            }
        };
        UriAuthority.prototype.username = function (username, password) {
            if (username === void 0) {
                return this._user._username || "";
            }
            else if (password === void 0) {
                return this.user(this._user.username(username));
            }
            else {
                return this.user(Uri.User.from(username, password));
            }
        };
        UriAuthority.prototype.password = function (password) {
            if (password === void 0) {
                return this._user.password();
            }
            else {
                return this.user(this._user.password(password));
            }
        };
        UriAuthority.prototype.host = function (host) {
            if (host === void 0) {
                return this._host;
            }
            else {
                host = Uri.Host.fromAny(host);
                if (host !== this._host) {
                    return this.copy(this._user, host, this._port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.hostPart = function (host) {
            if (host === void 0) {
                return this._host.toString();
            }
            else {
                return this.host(Uri.Host.parse(host));
            }
        };
        UriAuthority.prototype.hostAddress = function () {
            return this._host.address();
        };
        UriAuthority.prototype.hostName = function (address) {
            if (address === void 0) {
                return this._host.name();
            }
            else {
                return this.host(Uri.Host.from(address));
            }
        };
        UriAuthority.prototype.hostIPv4 = function (address) {
            if (address === void 0) {
                return this._host.ipv4();
            }
            else {
                return this.host(Uri.Host.ipv4(address));
            }
        };
        UriAuthority.prototype.hostIPv6 = function (address) {
            if (address === void 0) {
                return this._host.ipv6();
            }
            else {
                return this.host(Uri.Host.ipv6(address));
            }
        };
        UriAuthority.prototype.port = function (port) {
            if (port === void 0) {
                return this._port;
            }
            else {
                port = Uri.Port.fromAny(port);
                if (port !== this._port) {
                    return this.copy(this._user, this._host, port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.portPart = function (port) {
            if (port === void 0) {
                return this._port.toString();
            }
            else {
                return this.port(Uri.Port.parse(port));
            }
        };
        UriAuthority.prototype.portNumber = function (port) {
            if (port === void 0) {
                return this._port.number();
            }
            else {
                return this.port(Uri.Port.from(port));
            }
        };
        UriAuthority.prototype.copy = function (user, host, port) {
            return UriAuthority.from(user, host, port);
        };
        UriAuthority.prototype.toAny = function (authority) {
            if (this.isDefined()) {
                authority = authority || {};
                this._user.toAny(authority);
                if (this._host.isDefined()) {
                    authority.host = this._host.toAny();
                }
                if (this._port.isDefined()) {
                    authority.port = this._port.toAny();
                }
            }
            return authority;
        };
        UriAuthority.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriAuthority.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriAuthority) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriAuthority.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriAuthority.prototype.debug = function (output) {
            output = output.write("UriAuthority").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriAuthority.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                if (this._user.isDefined()) {
                    output.display(this._user).write(64);
                }
                output.display(this._host);
                if (this._port.isDefined()) {
                    output = output.write(58).display(this._port);
                }
            }
        };
        UriAuthority.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        UriAuthority.undefined = function () {
            if (UriAuthority._undefined === void 0) {
                UriAuthority._undefined = new UriAuthority(Uri.User.undefined(), Uri.Host.undefined(), Uri.Port.undefined());
            }
            return UriAuthority._undefined;
        };
        UriAuthority.from = function (user, host, port) {
            if (user === void 0) { user = Uri.User.undefined(); }
            if (host === void 0) { host = Uri.Host.undefined(); }
            if (port === void 0) { port = Uri.Port.undefined(); }
            if (user.isDefined() || host.isDefined() || port.isDefined()) {
                return new UriAuthority(user, host, port);
            }
            else {
                return UriAuthority.undefined();
            }
        };
        UriAuthority.fromAny = function (authority) {
            if (authority === null || authority === void 0) {
                return UriAuthority.undefined();
            }
            else if (authority instanceof UriAuthority) {
                return authority;
            }
            else if (typeof authority === "object") {
                var user = Uri.User.fromAny(authority.user || authority);
                var host = Uri.Host.fromAny(authority.host);
                var port = Uri.Port.fromAny(authority.port);
                return UriAuthority.from(user, host, port);
            }
            else if (typeof authority === "string") {
                return UriAuthority.parse(authority);
            }
            else {
                throw new TypeError("" + authority);
            }
        };
        UriAuthority.user = function (user) {
            user = Uri.User.fromAny(user);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.userPart = function (part) {
            var user = Uri.User.parse(part);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.username = function (username, password) {
            var user = Uri.User.from(username, password);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.password = function (password) {
            var user = Uri.User.from("", password);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.host = function (host) {
            host = Uri.Host.fromAny(host);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostPart = function (part) {
            var host = Uri.Host.parse(part);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostName = function (address) {
            var host = Uri.Host.from(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostIPv4 = function (address) {
            var host = Uri.Host.ipv4(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostIPv6 = function (address) {
            var host = Uri.Host.ipv6(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.port = function (port) {
            port = Uri.Port.fromAny(port);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.portPart = function (part) {
            var port = Uri.Port.parse(part);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.portNumber = function (number) {
            var port = Uri.Port.from(number);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.parse = function (string) {
            return Uri.standardParser().parseAuthorityString(string);
        };
        return UriAuthority;
    }());
    Uri.Authority = UriAuthority;

    var UriUser = (function () {
        function UriUser(username, password) {
            this._username = username;
            this._password = password;
        }
        UriUser.prototype.isDefined = function () {
            return this._username !== null;
        };
        UriUser.prototype.username = function (username) {
            if (username === void 0) {
                return this._username || "";
            }
            else {
                if (username !== this._username) {
                    return this.copy(username, this._password);
                }
                else {
                    return this;
                }
            }
        };
        UriUser.prototype.password = function (password) {
            if (password === void 0) {
                return this._password;
            }
            else {
                if (password !== this._password) {
                    return this.copy(this._username, password);
                }
                else {
                    return this;
                }
            }
        };
        UriUser.prototype.copy = function (username, password) {
            return UriUser.from(username, password);
        };
        UriUser.prototype.toAny = function (user) {
            if (this._username !== null) {
                user = user || {};
                user.username = this._username;
                if (this._password !== null) {
                    user.password = this._password;
                }
            }
            return user;
        };
        UriUser.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriUser) {
                return this._username === that._username && this._password === that._password;
            }
            return false;
        };
        UriUser.prototype.hashCode = function () {
            if (UriUser._hashSeed === void 0) {
                UriUser._hashSeed = Murmur3.seed(UriUser);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(UriUser._hashSeed, Murmur3.hash(this._username)), Murmur3.hash(this._password)));
        };
        UriUser.prototype.debug = function (output) {
            output = output.write("UriUser").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriUser.prototype.display = function (output) {
            if (this._username != null) {
                Uri.writeUser(this._username, output);
                if (this._password != null) {
                    output = output.write(58);
                    Uri.writeUser(this._password, output);
                }
            }
        };
        UriUser.prototype.toString = function () {
            return Format.display(this);
        };
        UriUser.undefined = function () {
            if (UriUser._undefined === void 0) {
                UriUser._undefined = new UriUser(null, null);
            }
            return UriUser._undefined;
        };
        UriUser.from = function (username, password) {
            if (password === void 0) { password = null; }
            if (username !== null || password !== null) {
                return new UriUser(username || "", password);
            }
            else {
                return UriUser.undefined();
            }
        };
        UriUser.fromAny = function (user) {
            if (user === null || user === void 0) {
                return UriUser.undefined();
            }
            else if (user instanceof UriUser) {
                return user;
            }
            else if (typeof user === "object") {
                var username = typeof user.username === "string" ? user.username : null;
                var password = typeof user.password === "string" ? user.password : null;
                return UriUser.from(username, password);
            }
            else if (typeof user === "string") {
                return UriUser.parse(user);
            }
            else {
                throw new TypeError("" + user);
            }
        };
        UriUser.parse = function (string) {
            return Uri.standardParser().parseUserString(string);
        };
        return UriUser;
    }());
    Uri.User = UriUser;

    var UriHost = (function () {
        function UriHost() {
        }
        UriHost.prototype.isDefined = function () {
            return true;
        };
        UriHost.prototype.name = function () {
            return null;
        };
        UriHost.prototype.ipv4 = function () {
            return null;
        };
        UriHost.prototype.ipv6 = function () {
            return null;
        };
        UriHost.prototype.toAny = function () {
            return this.toString();
        };
        UriHost.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriHost.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriHost) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriHost.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriHost.undefined = function () {
            if (UriHost._undefined === void 0) {
                UriHost._undefined = new Uri.HostUndefined();
            }
            return UriHost._undefined;
        };
        UriHost.from = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostName) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostName(address));
            }
        };
        UriHost.ipv4 = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostIPv4) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostIPv4(address));
            }
        };
        UriHost.ipv6 = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostIPv6) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostIPv6(address));
            }
        };
        UriHost.fromAny = function (host) {
            if (host === null || host === void 0) {
                return UriHost.undefined();
            }
            else if (host instanceof UriHost) {
                return host;
            }
            else if (typeof host === "string") {
                return UriHost.parse(host);
            }
            else {
                throw new TypeError("" + host);
            }
        };
        UriHost.parse = function (string) {
            return Uri.standardParser().parseHostString(string);
        };
        UriHost.cache = function () {
            if (UriHost._cache === void 0) {
                var cacheSize = 16;
                UriHost._cache = new HashGenCacheMap(cacheSize);
            }
            return UriHost._cache;
        };
        return UriHost;
    }());
    Uri.Host = UriHost;

    var UriHostName = (function (_super) {
        __extends(UriHostName, _super);
        function UriHostName(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostName.prototype.address = function () {
            return this._address;
        };
        UriHostName.prototype.name = function () {
            return this._address;
        };
        UriHostName.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("from")
                .write(40).debug(this._address).write(41);
        };
        UriHostName.prototype.display = function (output) {
            Uri.writeHost(this._address, output);
        };
        UriHostName.prototype.toString = function () {
            return this._address;
        };
        return UriHostName;
    }(UriHost));
    Uri.HostName = UriHostName;

    var UriHostIPv4 = (function (_super) {
        __extends(UriHostIPv4, _super);
        function UriHostIPv4(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostIPv4.prototype.address = function () {
            return this._address;
        };
        UriHostIPv4.prototype.ipv4 = function () {
            return this._address;
        };
        UriHostIPv4.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("ipv4")
                .write(40).debug(this._address).write(41);
        };
        UriHostIPv4.prototype.display = function (output) {
            Uri.writeHost(this._address, output);
        };
        UriHostIPv4.prototype.toString = function () {
            return this._address;
        };
        return UriHostIPv4;
    }(UriHost));
    Uri.HostIPv4 = UriHostIPv4;

    var UriHostIPv6 = (function (_super) {
        __extends(UriHostIPv6, _super);
        function UriHostIPv6(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostIPv6.prototype.address = function () {
            return this._address;
        };
        UriHostIPv6.prototype.ipv6 = function () {
            return this._address;
        };
        UriHostIPv6.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("ipv6")
                .write(40).debug(this._address).write(41);
        };
        UriHostIPv6.prototype.display = function (output) {
            if (this._string != null) {
                output = output.write(this._string);
            }
            else {
                output = output.write(91);
                Uri.writeHostLiteral(this._address, output);
                output = output.write(93);
            }
        };
        UriHostIPv6.prototype.toString = function () {
            if (this._string == null) {
                this._string = "[" + this.address + "]";
            }
            return this._string;
        };
        return UriHostIPv6;
    }(UriHost));
    Uri.HostIPv6 = UriHostIPv6;

    var UriHostUndefined = (function (_super) {
        __extends(UriHostUndefined, _super);
        function UriHostUndefined() {
            return _super.call(this) || this;
        }
        UriHostUndefined.prototype.isDefined = function () {
            return false;
        };
        UriHostUndefined.prototype.address = function () {
            return "";
        };
        UriHostUndefined.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("undefined")
                .write(40).write(41);
        };
        UriHostUndefined.prototype.display = function (output) {
        };
        UriHostUndefined.prototype.toString = function () {
            return "";
        };
        return UriHostUndefined;
    }(UriHost));
    Uri.HostUndefined = UriHostUndefined;

    var UriPort = (function () {
        function UriPort(num) {
            this._number = num;
        }
        UriPort.prototype.isDefined = function () {
            return this._number !== 0;
        };
        UriPort.prototype.number = function () {
            return this._number;
        };
        UriPort.prototype.valueOf = function () {
            return this._number;
        };
        UriPort.prototype.toAny = function () {
            return this._number;
        };
        UriPort.prototype.compareTo = function (that) {
            return this._number < that._number ? -1 : this._number > that._number ? 1 : 0;
        };
        UriPort.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriPort) {
                return this._number === that._number;
            }
            return false;
        };
        UriPort.prototype.hashCode = function () {
            if (UriPort._hashSeed === void 0) {
                UriPort._hashSeed = Murmur3.seed(UriPort);
            }
            return Murmur3.mash(Murmur3.mix(UriPort._hashSeed, this._number));
        };
        UriPort.prototype.debug = function (output) {
            output = output.write("UriPort").write(46);
            if (this.isDefined()) {
                output = output.write("from").write(40);
                Format.displayNumber(this._number, output);
                output = output.write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriPort.prototype.display = function (output) {
            Format.displayNumber(this._number, output);
        };
        UriPort.prototype.toString = function () {
            return "" + this._number;
        };
        UriPort.undefined = function () {
            if (UriPort._undefined === void 0) {
                UriPort._undefined = new UriPort(0);
            }
            return UriPort._undefined;
        };
        UriPort.from = function (number) {
            if (number > 0) {
                var cache = UriPort.cache();
                var port = cache.get(number);
                if (port !== void 0) {
                    return port;
                }
                else {
                    return cache.put(number, new UriPort(number));
                }
            }
            else if (number === 0) {
                return UriPort.undefined();
            }
            else {
                throw new TypeError("" + number);
            }
        };
        UriPort.fromAny = function (port) {
            if (port === null || port === void 0) {
                return UriPort.undefined();
            }
            else if (port instanceof UriPort) {
                return port;
            }
            else if (typeof port === "number") {
                return UriPort.from(port);
            }
            else if (typeof port === "string") {
                return UriPort.parse(port);
            }
            else {
                throw new TypeError("" + port);
            }
        };
        UriPort.parse = function (string) {
            return Uri.standardParser().parsePortString(string);
        };
        UriPort.cache = function () {
            if (UriPort._cache === void 0) {
                var cacheSize = 4;
                UriPort._cache = new HashGenCacheMap(cacheSize);
            }
            return UriPort._cache;
        };
        return UriPort;
    }());
    Uri.Port = UriPort;

    var UriPath = (function () {
        function UriPath() {
        }
        Object.defineProperty(UriPath.prototype, "length", {
            get: function () {
                var n = 0;
                var path = this;
                while (!path.isEmpty()) {
                    n += 1;
                    path = path.tail();
                }
                return n;
            },
            enumerable: true,
            configurable: true
        });
        UriPath.prototype.get = function (index) {
            var i = 0;
            var path = this;
            while (!path.isEmpty()) {
                if (i < index) {
                    i += 1;
                    path = path.tail();
                }
                else {
                    return path.head();
                }
            }
            return void 0;
        };
        UriPath.prototype.name = function (name) {
            if (name === void 0) {
                if (this.isEmpty()) {
                    return "";
                }
                var path = this;
                do {
                    var tail = path.tail();
                    if (tail.isEmpty()) {
                        return path.isRelative() ? path.head() : "";
                    }
                    else {
                        path = tail;
                    }
                } while (true);
            }
            else {
                var builder = new Uri.PathBuilder();
                builder.addPath(this.base());
                builder.addSegment(name);
                return builder.bind();
            }
        };
        UriPath.prototype.foot = function () {
            if (this.isEmpty()) {
                return this;
            }
            var path = this;
            do {
                var tail = path.tail();
                if (tail.isEmpty()) {
                    return path;
                }
                else {
                    path = tail;
                }
            } while (true);
        };
        UriPath.prototype.isSubpathOf = function (b) {
            b = UriPath.fromAny(b);
            var a = this;
            while (!a.isEmpty() && !b.isEmpty()) {
                if (a.head() !== b.head()) {
                    return false;
                }
                a = a.tail();
                b = b.tail();
            }
            return b.isEmpty();
        };
        UriPath.prototype.appended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length > 0) {
                var builder = new Uri.PathBuilder();
                builder.addPath(this);
                builder.push.apply(builder, arguments);
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriPath.prototype.appendedSlash = function () {
            var builder = new Uri.PathBuilder();
            builder.addPath(this);
            builder.addSlash();
            return builder.bind();
        };
        UriPath.prototype.appendedSegment = function (segment) {
            var builder = new Uri.PathBuilder();
            builder.addPath(this);
            builder.addSegment(segment);
            return builder.bind();
        };
        UriPath.prototype.prepended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length > 0) {
                var builder = new Uri.PathBuilder();
                builder.push.apply(builder, arguments);
                builder.addPath(this);
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriPath.prototype.prependedSlash = function () {
            return UriPath.slash(this);
        };
        UriPath.prototype.prependedSegment = function (segment) {
            if (this.isEmpty() || this.isAbsolute()) {
                return UriPath.segment(segment, this);
            }
            else {
                return UriPath.segment(segment, UriPath.slash(this));
            }
        };
        UriPath.prototype.resolve = function (that) {
            if (that.isEmpty()) {
                return this;
            }
            else if (that.isAbsolute() || this.isEmpty()) {
                return that.removeDotSegments();
            }
            else {
                return this.merge(that).removeDotSegments();
            }
        };
        UriPath.prototype.removeDotSegments = function () {
            var path = this;
            var builder = new Uri.PathBuilder();
            while (!path.isEmpty()) {
                var head = path.head();
                if (head === "." || head === "..") {
                    path = path.tail();
                    if (!path.isEmpty()) {
                        path = path.tail();
                    }
                }
                else if (path.isAbsolute()) {
                    var rest = path.tail();
                    if (!rest.isEmpty()) {
                        var next = rest.head();
                        if (next === ".") {
                            path = rest.tail();
                            if (path.isEmpty()) {
                                path = UriPath.slash();
                            }
                        }
                        else if (next === "..") {
                            path = rest.tail();
                            if (path.isEmpty()) {
                                path = UriPath.slash();
                            }
                            if (!builder.isEmpty() && !builder.pop().isAbsolute()) {
                                if (!builder.isEmpty()) {
                                    builder.pop();
                                }
                            }
                        }
                        else {
                            builder.push(head, next);
                            path = rest.tail();
                        }
                    }
                    else {
                        builder.push(path.head());
                        path = path.tail();
                    }
                }
                else {
                    builder.push(path.head());
                    path = path.tail();
                }
            }
            return builder.bind();
        };
        UriPath.prototype.merge = function (that) {
            if (!this.isEmpty()) {
                var builder = new Uri.PathBuilder();
                var prev = this;
                do {
                    var next = prev.tail();
                    if (!next.isEmpty()) {
                        if (prev.isAbsolute()) {
                            builder.addSlash();
                        }
                        else {
                            builder.addSegment(prev.head());
                        }
                        prev = next;
                    }
                    else {
                        if (prev.isAbsolute()) {
                            builder.addSlash();
                        }
                        break;
                    }
                } while (true);
                builder.addPath(that);
                return builder.bind();
            }
            else {
                return that;
            }
        };
        UriPath.prototype.unmerge = function (relative, root) {
            if (root === void 0) { root = relative; }
            var base = this;
            do {
                if (base.isEmpty()) {
                    if (!relative.isEmpty() && !relative.tail().isEmpty()) {
                        return relative.tail();
                    }
                    else {
                        return relative;
                    }
                }
                else if (base.isRelative()) {
                    return relative;
                }
                else if (relative.isRelative()) {
                    return UriPath.slash(relative);
                }
                else {
                    var a = base.tail();
                    var b = relative.tail();
                    if (!a.isEmpty() && b.isEmpty()) {
                        return UriPath.slash();
                    }
                    else if (a.isEmpty() || b.isEmpty() || a.head() !== b.head()) {
                        return b;
                    }
                    else {
                        a = a.tail();
                        b = b.tail();
                        if (!a.isEmpty() && b.isEmpty()) {
                            return root;
                        }
                        else {
                            base = a;
                            relative = b;
                        }
                    }
                }
            } while (true);
        };
        UriPath.prototype.toAny = function () {
            var components = [];
            var path = this;
            while (!path.isEmpty()) {
                components.push(path.head());
                path = path.tail();
            }
            return components;
        };
        UriPath.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriPath.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriPath) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriPath.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriPath.prototype.display = function (output) {
            var path = this;
            while (!path.isEmpty()) {
                if (path.isAbsolute()) {
                    output = output.write(47);
                }
                else {
                    Uri.writePathSegment(path.head(), output);
                }
                path = path.tail();
            }
        };
        UriPath.builder = function () {
            return new Uri.PathBuilder();
        };
        UriPath.empty = function () {
            if (UriPath._empty === void 0) {
                UriPath._empty = new Uri.PathEmpty();
            }
            return UriPath._empty;
        };
        UriPath.slash = function (tail) {
            if (tail === void 0) { tail = UriPath.empty(); }
            if (tail === UriPath.empty()) {
                if (UriPath._slash === void 0) {
                    UriPath._slash = new Uri.PathSlash(tail);
                }
                return UriPath._slash;
            }
            else {
                return new Uri.PathSlash(tail);
            }
        };
        UriPath.segment = function (segment, tail) {
            if (tail === void 0) { tail = UriPath.empty(); }
            segment = this.cacheSegment(segment);
            return new Uri.PathSegment(segment, tail);
        };
        UriPath.from = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            var builder = new Uri.PathBuilder();
            builder.push.apply(builder, arguments);
            return builder.bind();
        };
        UriPath.fromAny = function (path) {
            if (path === null || path === void 0) {
                return UriPath.empty();
            }
            else if (path instanceof UriPath) {
                return path;
            }
            else if (Array.isArray(path)) {
                return UriPath.from.apply(void 0, arguments);
            }
            else if (typeof path === "string") {
                return UriPath.parse(path);
            }
            else {
                throw new TypeError("" + path);
            }
        };
        UriPath.parse = function (string) {
            return Uri.standardParser().parsePathString(string);
        };
        UriPath.segmentCache = function () {
            if (UriPath._segmentCache === void 0) {
                var segmentCacheSize = 64;
                UriPath._segmentCache = new HashGenCacheSet(segmentCacheSize);
            }
            return UriPath._segmentCache;
        };
        UriPath.cacheSegment = function (segment) {
            if (segment.length <= 32) {
                return this.segmentCache().put(segment);
            }
            else {
                return segment;
            }
        };
        UriPath.pathForm = function () {
            if (!UriPath._pathForm) {
                UriPath._pathForm = new Uri.PathForm(UriPath.empty());
            }
            return UriPath._pathForm;
        };
        return UriPath;
    }());
    Uri.Path = UriPath;

    var UriPathSegment = (function (_super) {
        __extends(UriPathSegment, _super);
        function UriPathSegment(head, tail) {
            var _this = _super.call(this) || this;
            _this._head = head;
            _this._tail = tail;
            return _this;
        }
        UriPathSegment.prototype.isDefined = function () {
            return true;
        };
        UriPathSegment.prototype.isAbsolute = function () {
            return false;
        };
        UriPathSegment.prototype.isRelative = function () {
            return true;
        };
        UriPathSegment.prototype.isEmpty = function () {
            return false;
        };
        UriPathSegment.prototype.head = function () {
            return this._head;
        };
        UriPathSegment.prototype.tail = function () {
            return this._tail;
        };
        UriPathSegment.prototype.setTail = function (tail) {
            if (tail.isAbsolute()) {
                this._tail = tail;
            }
            else {
                this._tail = UriPath.slash(tail);
            }
        };
        UriPathSegment.prototype.dealias = function () {
            return new UriPathSegment(this._head, this._tail);
        };
        UriPathSegment.prototype.parent = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                var next = tail.tail();
                if (next.isEmpty()) {
                    return UriPath.empty();
                }
                else {
                    return new UriPathSegment(this._head, tail.parent());
                }
            }
        };
        UriPathSegment.prototype.base = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                return new UriPathSegment(this._head, tail.base());
            }
        };
        UriPathSegment.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment, UriPath.slash(this));
        };
        UriPathSegment.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriPathSegment.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriPathSegment.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        return UriPathSegment;
    }(UriPath));
    Uri.PathSegment = UriPathSegment;

    var UriPathSlash = (function (_super) {
        __extends(UriPathSlash, _super);
        function UriPathSlash(tail) {
            var _this = _super.call(this) || this;
            _this._tail = tail;
            return _this;
        }
        UriPathSlash.prototype.isDefined = function () {
            return true;
        };
        UriPathSlash.prototype.isAbsolute = function () {
            return true;
        };
        UriPathSlash.prototype.isRelative = function () {
            return false;
        };
        UriPathSlash.prototype.isEmpty = function () {
            return false;
        };
        UriPathSlash.prototype.head = function () {
            return "/";
        };
        UriPathSlash.prototype.tail = function () {
            return this._tail;
        };
        UriPathSlash.prototype.setTail = function (tail) {
            this._tail = tail;
        };
        UriPathSlash.prototype.dealias = function () {
            return new UriPathSlash(this._tail);
        };
        UriPathSlash.prototype.parent = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                var next = tail.tail();
                if (next.isEmpty()) {
                    return UriPath.slash();
                }
                else {
                    return new UriPathSlash(tail.parent());
                }
            }
        };
        UriPathSlash.prototype.base = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return this;
            }
            else {
                return new UriPathSlash(tail.base());
            }
        };
        UriPathSlash.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment, this);
        };
        UriPathSlash.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriPathSlash.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriPathSlash.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        return UriPathSlash;
    }(UriPath));
    Uri.PathSlash = UriPathSlash;

    var UriPathEmpty = (function (_super) {
        __extends(UriPathEmpty, _super);
        function UriPathEmpty() {
            return _super.call(this) || this;
        }
        UriPathEmpty.prototype.isDefined = function () {
            return false;
        };
        UriPathEmpty.prototype.isAbsolute = function () {
            return false;
        };
        UriPathEmpty.prototype.isRelative = function () {
            return true;
        };
        UriPathEmpty.prototype.isEmpty = function () {
            return true;
        };
        UriPathEmpty.prototype.head = function () {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.tail = function () {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.setTail = function (tail) {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.dealias = function () {
            return this;
        };
        UriPathEmpty.prototype.parent = function () {
            return this;
        };
        UriPathEmpty.prototype.base = function () {
            return this;
        };
        UriPathEmpty.prototype.appended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return UriPath.from.apply(void 0, arguments);
        };
        UriPathEmpty.prototype.appendedSlash = function () {
            return UriPath.slash();
        };
        UriPathEmpty.prototype.appendedSegment = function (segment) {
            return UriPath.segment(segment);
        };
        UriPathEmpty.prototype.prepended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return UriPath.from.apply(void 0, arguments);
        };
        UriPathEmpty.prototype.prependedSlash = function () {
            return UriPath.slash();
        };
        UriPathEmpty.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment);
        };
        UriPathEmpty.prototype.merge = function (that) {
            return that;
        };
        UriPathEmpty.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("empty")
                .write(40).write(41);
        };
        UriPathEmpty.prototype.display = function (output) {
        };
        UriPathEmpty.prototype.toString = function () {
            return "";
        };
        return UriPathEmpty;
    }(UriPath));
    Uri.PathEmpty = UriPathEmpty;

    var UriPathBuilder = (function () {
        function UriPathBuilder() {
            this._first = Uri.Path.empty();
            this._last = null;
            this._size = 0;
            this._aliased = 0;
        }
        UriPathBuilder.prototype.isEmpty = function () {
            return this._size === 0;
        };
        UriPathBuilder.prototype.push = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            for (var i = 0; i < components.length; i += 1) {
                var component = components[i];
                if (component instanceof Uri.Path) {
                    this.addPath(component);
                }
                else if (Array.isArray(component)) {
                    this.push.apply(this, component);
                }
                else if (component === "/") {
                    this.addSlash();
                }
                else {
                    this.addSegment(component);
                }
            }
        };
        UriPathBuilder.prototype.bind = function () {
            this._aliased = 0;
            return this._first;
        };
        UriPathBuilder.prototype.addSlash = function () {
            var tail = Uri.Path.slash().dealias();
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriPathBuilder.prototype.addSegment = function (segment) {
            var tail = Uri.Path.segment(segment, Uri.Path.empty());
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriPathBuilder.prototype.addPath = function (path) {
            if (!path.isEmpty()) {
                var size = this._size;
                if (size === 0) {
                    this._first = path;
                }
                else {
                    this.dealias(size - 1).setTail(path);
                }
                size += 1;
                do {
                    var tail = path.tail();
                    if (!tail.isEmpty()) {
                        path = tail;
                        size += 1;
                    }
                    else {
                        break;
                    }
                } while (true);
                this._last = path;
                this._size = size;
            }
        };
        UriPathBuilder.prototype.pop = function () {
            var size = this._size;
            var aliased = this._aliased;
            if (size === 0) {
                throw new Error("Empty UriPath");
            }
            else if (size === 1) {
                var first = this._first;
                this._first = first.tail();
                if (first.tail().isEmpty()) {
                    this._last = null;
                }
                this._size = size - 1;
                if (aliased > 0) {
                    this._aliased = aliased - 1;
                }
                return first;
            }
            else {
                var last = this.dealias(size - 2);
                last.setTail(Uri.Path.empty());
                this._last = last;
                this._size = size - 1;
                this._aliased = aliased - 1;
                return last.tail();
            }
        };
        UriPathBuilder.prototype.dealias = function (n) {
            var i = 0;
            var xi = null;
            var xs = this._first;
            if (this._aliased <= n) {
                while (i < this._aliased) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
                while (i <= n) {
                    var xn = xs.dealias();
                    if (i === 0) {
                        this._first = xn;
                    }
                    else {
                        xi.setTail(xn);
                    }
                    xi = xn;
                    xs = xs.tail();
                    i += 1;
                }
                if (i === this._size) {
                    this._last = xi;
                }
                this._aliased = i;
            }
            else if (n === 0) {
                xi = this._first;
            }
            else if (n === this._size - 1) {
                xi = this._last;
            }
            else {
                while (i <= n) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
            }
            return xi;
        };
        return UriPathBuilder;
    }());
    Uri.PathBuilder = UriPathBuilder;

    var UriQuery = (function () {
        function UriQuery() {
        }
        Object.defineProperty(UriQuery.prototype, "length", {
            get: function () {
                var n = 0;
                var query = this;
                while (!query.isEmpty()) {
                    n += 1;
                    query = query.tail();
                }
                return n;
            },
            enumerable: true,
            configurable: true
        });
        UriQuery.prototype.has = function (key) {
            var query = this;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    return true;
                }
                query = query.tail();
            }
            return false;
        };
        UriQuery.prototype.get = function (key) {
            var query = this;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    return query.value();
                }
                query = query.tail();
            }
            return void 0;
        };
        UriQuery.prototype.updated = function (key, value) {
            var query = this;
            var builder = new Uri.QueryBuilder();
            var updated = false;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    builder.addParam(key, value);
                    updated = true;
                }
                else {
                    builder.addParam(query.key(), query.value());
                }
                query = query.tail();
            }
            if (!updated) {
                builder.addParam(key, value);
            }
            return builder.bind();
        };
        UriQuery.prototype.removed = function (key) {
            var query = this;
            var builder = new Uri.QueryBuilder();
            var updated = false;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    updated = true;
                }
                else {
                    builder.addParam(query.key(), query.value());
                }
                query = query.tail();
            }
            if (updated) {
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriQuery.prototype.appended = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.addQuery(this);
            builder.add(key, value);
            return builder.bind();
        };
        UriQuery.prototype.prepended = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.add(key, value);
            builder.addQuery(this);
            return builder.bind();
        };
        UriQuery.prototype.toAny = function (params) {
            if (this.isDefined()) {
                params = params || {};
                var query = this;
                var i = 0;
                while (!query.isEmpty()) {
                    var key = query.key();
                    if (key !== null) {
                        params[key] = query.value();
                    }
                    else {
                        params["$" + i] = query.value();
                    }
                    query = query.tail();
                    i += 1;
                }
            }
            return params;
        };
        UriQuery.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriQuery.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriQuery) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriQuery.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriQuery.prototype.display = function (output) {
            var query = this;
            var first = true;
            while (!query.isEmpty()) {
                if (!first) {
                    output = output.write(38);
                }
                else {
                    first = false;
                }
                var key = query.key();
                if (key !== null) {
                    Uri.writeParam(key, output);
                    output = output.write(61);
                }
                Uri.writeQuery(query.value(), output);
                query = query.tail();
            }
        };
        UriQuery.builder = function () {
            return new Uri.QueryBuilder();
        };
        UriQuery.undefined = function () {
            if (UriQuery._undefined === void 0) {
                UriQuery._undefined = new Uri.QueryUndefined();
            }
            return UriQuery._undefined;
        };
        UriQuery.param = function (key, value, tail) {
            if (tail === void 0) {
                tail = value;
                value = key;
                key = null;
            }
            else if (key !== null) {
                key = this.cacheKey(key);
            }
            if (tail === void 0) {
                tail = UriQuery.undefined();
            }
            return new Uri.QueryParam(key, value, tail);
        };
        UriQuery.from = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.add(key, value);
            return builder.bind();
        };
        UriQuery.fromAny = function (query) {
            if (query === null || query === void 0) {
                return UriQuery.undefined();
            }
            else if (query instanceof UriQuery) {
                return query;
            }
            else if (typeof query === "object") {
                var builder = new Uri.QueryBuilder();
                builder.add(query);
                return builder.bind();
            }
            else if (typeof query === "string") {
                return UriQuery.parse(query);
            }
            else {
                throw new TypeError("" + query);
            }
        };
        UriQuery.parse = function (string) {
            return Uri.standardParser().parseQueryString(string);
        };
        UriQuery.keyCache = function () {
            if (UriQuery._keyCache === void 0) {
                var keyCacheSize = 64;
                UriQuery._keyCache = new HashGenCacheSet(keyCacheSize);
            }
            return UriQuery._keyCache;
        };
        UriQuery.cacheKey = function (key) {
            if (key.length <= 32) {
                return UriQuery.keyCache().put(key);
            }
            else {
                return key;
            }
        };
        return UriQuery;
    }());
    Uri.Query = UriQuery;

    var UriQueryParam = (function (_super) {
        __extends(UriQueryParam, _super);
        function UriQueryParam(key, value, tail) {
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._value = value;
            _this._tail = tail;
            return _this;
        }
        UriQueryParam.prototype.isDefined = function () {
            return true;
        };
        UriQueryParam.prototype.isEmpty = function () {
            return false;
        };
        UriQueryParam.prototype.head = function () {
            return [this._key, this._value];
        };
        UriQueryParam.prototype.key = function () {
            return this._key;
        };
        UriQueryParam.prototype.value = function () {
            return this._value;
        };
        UriQueryParam.prototype.tail = function () {
            return this._tail;
        };
        UriQueryParam.prototype.setTail = function (tail) {
            this._tail = tail;
        };
        UriQueryParam.prototype.dealias = function () {
            return new UriQueryParam(this._key, this._value, this._tail);
        };
        UriQueryParam.prototype.debug = function (output) {
            output = output.write("UriQuery").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriQueryParam.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriQueryParam.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        return UriQueryParam;
    }(UriQuery));
    Uri.QueryParam = UriQueryParam;

    var UriQueryUndefined = (function (_super) {
        __extends(UriQueryUndefined, _super);
        function UriQueryUndefined() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UriQueryUndefined.prototype.isDefined = function () {
            return false;
        };
        UriQueryUndefined.prototype.isEmpty = function () {
            return true;
        };
        UriQueryUndefined.prototype.head = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.key = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.value = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.tail = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.setTail = function (tail) {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.dealias = function () {
            return this;
        };
        UriQueryUndefined.prototype.updated = function (key, value) {
            return UriQuery.param(key, value, this);
        };
        UriQueryUndefined.prototype.removed = function (key) {
            return this;
        };
        UriQueryUndefined.prototype.appended = function (key, value) {
            return UriQuery.from(key, value);
        };
        UriQueryUndefined.prototype.prepended = function (key, value) {
            return UriQuery.from(key, value);
        };
        UriQueryUndefined.prototype.debug = function (output) {
            output = output.write("UriQuery").write(46).write("undefined")
                .write(40).write(41);
        };
        UriQueryUndefined.prototype.display = function (output) {
        };
        UriQueryUndefined.prototype.toString = function () {
            return "";
        };
        return UriQueryUndefined;
    }(UriQuery));
    Uri.QueryUndefined = UriQueryUndefined;

    var UriQueryBuilder = (function () {
        function UriQueryBuilder() {
            this._first = Uri.Query.undefined();
            this._last = null;
            this._size = 0;
            this._aliased = 0;
        }
        UriQueryBuilder.prototype.isEmpty = function () {
            return this._size === 0;
        };
        UriQueryBuilder.prototype.add = function (key, value) {
            if (value !== void 0) {
                this.addParam(key, value);
            }
            else if (typeof key === "string") {
                this.addParam(null, key);
            }
            else if (key instanceof Uri.Query) {
                this.addQuery(key);
            }
            else {
                var params = key;
                for (var k in params) {
                    var key_1 = k;
                    var value_1 = params[k];
                    if (k.charCodeAt(0) === 36) {
                        key_1 = null;
                    }
                    this.addParam(key_1, value_1);
                }
            }
        };
        UriQueryBuilder.prototype.bind = function () {
            this._aliased = 0;
            return this._first;
        };
        UriQueryBuilder.prototype.addParam = function (key, value) {
            if (value === void 0) {
                value = key;
                key = null;
            }
            var tail = Uri.Query.param(key, value, Uri.Query.undefined());
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriQueryBuilder.prototype.addQuery = function (query) {
            if (!query.isEmpty()) {
                var size = this._size;
                if (size === 0) {
                    this._first = query;
                }
                else {
                    this.dealias(size - 1).setTail(query);
                }
                size += 1;
                do {
                    var tail = query.tail();
                    if (!tail.isEmpty()) {
                        query = tail;
                        size += 1;
                    }
                    else {
                        break;
                    }
                } while (true);
                this._last = query;
                this._size = size;
            }
        };
        UriQueryBuilder.prototype.dealias = function (n) {
            var i = 0;
            var xi = null;
            var xs = this._first;
            if (this._aliased <= n) {
                while (i < this._aliased) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
                while (i <= n) {
                    var xn = xs.dealias();
                    if (i === 0) {
                        this._first = xn;
                    }
                    else {
                        xi.setTail(xn);
                    }
                    xi = xn;
                    xs = xs.tail();
                    i += 1;
                }
                if (i === this._size) {
                    this._last = xi;
                }
                this._aliased = i;
            }
            else if (n === 0) {
                xi = this._first;
            }
            else if (n === this._size - 1) {
                xi = this._last;
            }
            else {
                while (i <= n) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
            }
            return xi;
        };
        return UriQueryBuilder;
    }());
    Uri.QueryBuilder = UriQueryBuilder;

    var UriFragment = (function () {
        function UriFragment(identifier) {
            this._identifier = identifier;
        }
        UriFragment.prototype.isDefined = function () {
            return this._identifier !== null;
        };
        UriFragment.prototype.identifier = function () {
            return this._identifier;
        };
        UriFragment.prototype.toAny = function () {
            return this._identifier !== null ? this._identifier : void 0;
        };
        UriFragment.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriFragment.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriFragment) {
                return this._identifier === that._identifier;
            }
            return false;
        };
        UriFragment.prototype.hashCode = function () {
            return Murmur3.hash(this._identifier);
        };
        UriFragment.prototype.debug = function (output) {
            output = output.write("UriFragment").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriFragment.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else if (this._identifier !== null) {
                Uri.writeFragment(this._identifier, output);
            }
        };
        UriFragment.prototype.toString = function () {
            if (this._string == null) {
                this._string = Format.display(this);
            }
            return this._string;
        };
        UriFragment.undefined = function () {
            if (UriFragment._undefined === void 0) {
                UriFragment._undefined = new UriFragment(null);
            }
            return UriFragment._undefined;
        };
        UriFragment.from = function (identifier) {
            if (identifier !== null) {
                var cache = UriFragment.cache();
                var fragment = cache.get(identifier);
                if (fragment) {
                    return fragment;
                }
                else {
                    return cache.put(identifier, new UriFragment(identifier));
                }
            }
            else {
                return UriFragment.undefined();
            }
        };
        UriFragment.fromAny = function (fragment) {
            if (fragment === null || fragment === void 0) {
                return UriFragment.undefined();
            }
            else if (fragment instanceof UriFragment) {
                return fragment;
            }
            else if (typeof fragment === "string") {
                return UriFragment.parse(fragment);
            }
            else {
                throw new TypeError("" + fragment);
            }
        };
        UriFragment.parse = function (string) {
            return Uri.standardParser().parseFragmentString(string);
        };
        UriFragment.cache = function () {
            if (UriFragment._cache === void 0) {
                var cacheSize = 32;
                UriFragment._cache = new HashGenCacheMap(cacheSize);
            }
            return UriFragment._cache;
        };
        return UriFragment;
    }());
    Uri.Fragment = UriFragment;

    var UriParser = (function () {
        function UriParser() {
        }
        UriParser.prototype.absolute = function (scheme, authority, path, query, fragment) {
            return Uri.from(scheme, authority, path, query, fragment);
        };
        UriParser.prototype.scheme = function (name) {
            return Uri.Scheme.from(name);
        };
        UriParser.prototype.authority = function (user, host, port) {
            return Uri.Authority.from(user, host, port);
        };
        UriParser.prototype.user = function (username, password) {
            return Uri.User.from(username, password);
        };
        UriParser.prototype.hostName = function (address) {
            return Uri.Host.from(address);
        };
        UriParser.prototype.hostIPv4 = function (address) {
            return Uri.Host.ipv4(address);
        };
        UriParser.prototype.hostIPv6 = function (address) {
            return Uri.Host.ipv6(address);
        };
        UriParser.prototype.port = function (number) {
            return Uri.Port.from(number);
        };
        UriParser.prototype.pathEmpty = function () {
            return Uri.Path.empty();
        };
        UriParser.prototype.pathBuilder = function () {
            return new Uri.PathBuilder();
        };
        UriParser.prototype.queryBuilder = function () {
            return new Uri.QueryBuilder();
        };
        UriParser.prototype.fragment = function (identifier) {
            return Uri.Fragment.from(identifier);
        };
        UriParser.prototype.absoluteParser = function () {
            return new UriParser.AbsoluteParser(this);
        };
        UriParser.prototype.parseAbsolute = function (input) {
            return UriParser.AbsoluteParser.parse(input, this);
        };
        UriParser.prototype.parseAbsoluteString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseAbsolute(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.schemeParser = function () {
            return new UriParser.SchemeParser(this);
        };
        UriParser.prototype.parseScheme = function (input) {
            return UriParser.SchemeParser.parse(input, this);
        };
        UriParser.prototype.parseSchemeString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseScheme(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.authorityParser = function () {
            return new UriParser.AuthorityParser(this);
        };
        UriParser.prototype.parseAuthority = function (input) {
            return UriParser.AuthorityParser.parse(input, this);
        };
        UriParser.prototype.parseAuthorityString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseAuthority(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.userParser = function () {
            return new UriParser.UserParser(this);
        };
        UriParser.prototype.parseUser = function (input) {
            return UriParser.UserParser.parse(input, this);
        };
        UriParser.prototype.parseUserString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseUser(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.hostParser = function () {
            return new UriParser.HostParser(this);
        };
        UriParser.prototype.parseHost = function (input) {
            return UriParser.HostParser.parse(input, this);
        };
        UriParser.prototype.parseHostString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseHost(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.hostAddressParser = function () {
            return new UriParser.HostAddressParser(this);
        };
        UriParser.prototype.parseHostAddress = function (input) {
            return UriParser.HostAddressParser.parse(input, this);
        };
        UriParser.prototype.hostLiteralParser = function () {
            return new UriParser.HostLiteralParser(this);
        };
        UriParser.prototype.parseHostLiteral = function (input) {
            return UriParser.HostLiteralParser.parse(input, this);
        };
        UriParser.prototype.portParser = function () {
            return new UriParser.PortParser(this);
        };
        UriParser.prototype.parsePort = function (input) {
            return UriParser.PortParser.parse(input, this);
        };
        UriParser.prototype.parsePortString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parsePort(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.pathParser = function (builder) {
            return new UriParser.PathParser(this, builder);
        };
        UriParser.prototype.parsePath = function (input, builder) {
            return UriParser.PathParser.parse(input, this, builder);
        };
        UriParser.prototype.parsePathString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parsePath(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.queryParser = function (builder) {
            return new UriParser.QueryParser(this, builder);
        };
        UriParser.prototype.parseQuery = function (input, builder) {
            return UriParser.QueryParser.parse(input, this, builder);
        };
        UriParser.prototype.parseQueryString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseQuery(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.fragmentParser = function () {
            return new UriParser.FragmentParser(this);
        };
        UriParser.prototype.parseFragment = function (input) {
            return UriParser.FragmentParser.parse(input, this);
        };
        UriParser.prototype.parseFragmentString = function (string) {
            var input = Unicode.stringInput(string);
            var parser = this.parseFragment(input);
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return UriParser;
    }());
    Uri.Parser = UriParser;

    var UriAbsoluteParser = (function (_super) {
        __extends(UriAbsoluteParser, _super);
        function UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.schemeParser = schemeParser;
            _this.authorityParser = authorityParser;
            _this.pathParser = pathParser;
            _this.queryParser = queryParser;
            _this.fragmentParser = fragmentParser;
            _this.step = step;
            return _this;
        }
        UriAbsoluteParser.prototype.feed = function (input) {
            return UriAbsoluteParser.parse(input, this.uri, this.schemeParser, this.authorityParser, this.pathParser, this.queryParser, this.fragmentParser, this.step);
        };
        UriAbsoluteParser.parse = function (input, uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    var look = input.clone();
                    while (look.isCont() && (c = look.head(), Uri.isSchemeChar(c))) {
                        look.step();
                    }
                    if (look.isCont() && c === 58) {
                        step = 2;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    step = 3;
                }
            }
            if (step === 2) {
                if (!schemeParser) {
                    schemeParser = uri.parseScheme(input);
                }
                else {
                    schemeParser = schemeParser.feed(input);
                }
                if (schemeParser.isDone()) {
                    if (input.isCont() && input.head() === 58) {
                        input = input.step();
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected(58, input));
                    }
                }
                else if (schemeParser.isError()) {
                    return schemeParser.asError();
                }
            }
            if (step === 3) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 47) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c === 63) {
                        input = input.step();
                        step = 7;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else {
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind()));
                }
            }
            if (step === 4) {
                if (input.isCont() && input.head() === 47) {
                    input = input.step();
                    step = 5;
                }
                else if (input.isCont()) {
                    var pathBuilder = uri.pathBuilder();
                    pathBuilder.addSlash();
                    pathParser = uri.parsePath(input, pathBuilder);
                    step = 6;
                }
                else if (input.isDone()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), void 0, Uri.Path.slash()));
                }
            }
            if (step === 5) {
                if (!authorityParser) {
                    authorityParser = uri.parseAuthority(input);
                }
                else {
                    authorityParser = authorityParser.feed(input);
                }
                if (authorityParser.isDone()) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 63) {
                            input = input.step();
                            step = 7;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 8;
                        }
                        else {
                            step = 6;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind()));
                    }
                }
                else if (authorityParser.isError()) {
                    return authorityParser.asError();
                }
            }
            if (step === 6) {
                if (!pathParser) {
                    pathParser = uri.parsePath(input);
                }
                else {
                    pathParser = pathParser.feed(input);
                }
                if (pathParser.isDone()) {
                    if (input.isCont() && input.head() === 63) {
                        input = input.step();
                        step = 7;
                    }
                    else if (input.isCont() && input.head() === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser.bind()));
                    }
                }
                else if (pathParser.isError()) {
                    return pathParser.asError();
                }
            }
            if (step === 7) {
                if (!queryParser) {
                    queryParser = uri.parseQuery(input);
                }
                else {
                    queryParser = queryParser.feed(input);
                }
                if (queryParser.isDone()) {
                    if (input.isCont() && input.head() === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser.bind()));
                    }
                }
                else if (queryParser.isError()) {
                    return queryParser.asError();
                }
            }
            if (step === 8) {
                if (!fragmentParser) {
                    fragmentParser = uri.parseFragment(input);
                }
                else {
                    fragmentParser = fragmentParser.feed(input);
                }
                if (fragmentParser.isDone()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser && queryParser.bind(), fragmentParser.bind()));
                }
                else if (fragmentParser.isError()) {
                    return fragmentParser.asError();
                }
            }
            return new UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step);
        };
        return UriAbsoluteParser;
    }(Parser));
    UriParser.AbsoluteParser = UriAbsoluteParser;

    var UriSchemeParser = (function (_super) {
        __extends(UriSchemeParser, _super);
        function UriSchemeParser(uri, output, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.step = step;
            return _this;
        }
        UriSchemeParser.prototype.feed = function (input) {
            return UriSchemeParser.parse(input, this.uri, this.output, this.step);
        };
        UriSchemeParser.parse = function (input, uri, output, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont() && (c = input.head(), Uri.isAlpha(c))) {
                    input = input.step();
                    output = output || Utf8.decodedString();
                    output = output.write(Uri.toLowerCase(c));
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("scheme", input));
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Uri.isSchemeChar(c))) {
                    input = input.step();
                    output.write(Uri.toLowerCase(c));
                }
                if (!input.isEmpty()) {
                    return Parser.done(uri.scheme(output.bind()));
                }
            }
            return new UriSchemeParser(uri, output, step);
        };
        return UriSchemeParser;
    }(Parser));
    UriParser.SchemeParser = UriSchemeParser;

    var UriAuthorityParser = (function (_super) {
        __extends(UriAuthorityParser, _super);
        function UriAuthorityParser(uri, userParser, hostParser, portParser, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.userParser = userParser;
            _this.hostParser = hostParser;
            _this.portParser = portParser;
            _this.step = step;
            return _this;
        }
        UriAuthorityParser.prototype.feed = function (input) {
            return UriAuthorityParser.parse(input, this.uri, this.userParser, this.hostParser, this.portParser, this.step);
        };
        UriAuthorityParser.parse = function (input, uri, userParser, hostParser, portParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    var look = input.clone();
                    while (look.isCont() && (c = look.head(), c !== 64 && c !== 47)) {
                        look.step();
                    }
                    if (look.isCont() && c === 64) {
                        step = 2;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    step = 3;
                }
            }
            if (step === 2) {
                if (!userParser) {
                    userParser = uri.parseUser(input);
                }
                else {
                    userParser = userParser.feed(input);
                }
                if (userParser.isDone()) {
                    if (input.isCont() && input.head() === 64) {
                        input = input.step();
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected(64, input));
                    }
                }
                else if (userParser.isError()) {
                    return userParser.asError();
                }
            }
            if (step === 3) {
                if (!hostParser) {
                    hostParser = uri.parseHost(input);
                }
                else {
                    hostParser = hostParser.feed(input);
                }
                if (hostParser.isDone()) {
                    if (input.isCont() && input.head() === 58) {
                        input = input.step();
                        step = 4;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind()));
                    }
                }
                else if (hostParser.isError()) {
                    return hostParser.asError();
                }
            }
            if (step === 4) {
                if (!portParser) {
                    portParser = uri.parsePort(input);
                }
                else {
                    portParser = portParser.feed(input);
                }
                if (portParser.isDone()) {
                    return Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind(), portParser.bind()));
                }
                else if (portParser.isError()) {
                    return portParser.asError();
                }
            }
            return new UriAuthorityParser(uri, userParser, hostParser, portParser, step);
        };
        return UriAuthorityParser;
    }(Parser));
    UriParser.AuthorityParser = UriAuthorityParser;

    var UriUserParser = (function (_super) {
        __extends(UriUserParser, _super);
        function UriUserParser(uri, usernameOutput, passwordOutput, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.usernameOutput = usernameOutput;
            _this.passwordOutput = passwordOutput;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriUserParser.prototype.feed = function (input) {
            return UriUserParser.parse(input, this.uri, this.usernameOutput, this.passwordOutput, this.c1, this.step);
        };
        UriUserParser.parse = function (input, uri, usernameOutput, passwordOutput, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    usernameOutput = usernameOutput || Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isUserChar(c))) {
                        input = input.step();
                        usernameOutput.write(c);
                    }
                    if (input.isCont() && c === 58) {
                        input = input.step();
                        step = 4;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.user(usernameOutput.bind()));
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        usernameOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 4) {
                    passwordOutput = passwordOutput || Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isUserInfoChar(c))) {
                        input = input.step();
                        passwordOutput.write(c);
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 5;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.user(usernameOutput.bind(), passwordOutput.bind()));
                    }
                }
                if (step === 5) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        passwordOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 4;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriUserParser(uri, usernameOutput, passwordOutput, c1, step);
        };
        return UriUserParser;
    }(Parser));
    UriParser.UserParser = UriUserParser;

    var UriHostParser = (function (_super) {
        __extends(UriHostParser, _super);
        function UriHostParser(uri) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            return _this;
        }
        UriHostParser.prototype.feed = function (input) {
            return UriHostParser.parse(input, this.uri);
        };
        UriHostParser.parse = function (input, uri) {
            if (input.isCont()) {
                var c = input.head();
                if (c === 91) {
                    return uri.parseHostLiteral(input);
                }
                else {
                    return uri.parseHostAddress(input);
                }
            }
            else if (input.isDone()) {
                return Parser.done(uri.hostName(""));
            }
            return new UriHostParser(uri);
        };
        return UriHostParser;
    }(Parser));
    UriParser.HostParser = UriHostParser;

    var UriHostAddressParser = (function (_super) {
        __extends(UriHostAddressParser, _super);
        function UriHostAddressParser(uri, output, c1, x, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.c1 = c1;
            _this.x = x;
            _this.step = step;
            return _this;
        }
        UriHostAddressParser.prototype.feed = function (input) {
            return UriHostAddressParser.parse(input, this.uri, this.output, this.c1, this.x, this.step);
        };
        UriHostAddressParser.parse = function (input, uri, output, c1, x, step) {
            if (c1 === void 0) { c1 = 0; }
            if (x === void 0) { x = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            output = output || Utf8.decodedString();
            while (step <= 4) {
                while (input.isCont() && (c = input.head(), Base10.isDigit(c))) {
                    input = input.step();
                    output = output.write(c);
                    x = 10 * x + Base10.decodeDigit(c);
                }
                if (input.isCont()) {
                    if (c === 46 && step < 4 && x <= 255) {
                        input = input.step();
                        output = output.write(c);
                        x = 0;
                        step += 1;
                    }
                    else if (!Uri.isHostChar(c) && c !== 37 && step === 4 && x <= 255) {
                        return Parser.done(uri.hostIPv4(output.bind()));
                    }
                    else {
                        x = 0;
                        step = 5;
                        break;
                    }
                }
                else if (!input.isEmpty()) {
                    if (step === 4 && x <= 255) {
                        return Parser.done(uri.hostIPv4(output.bind()));
                    }
                    else {
                        return Parser.done(uri.hostName(output.bind()));
                    }
                }
                else {
                    break;
                }
            }
            do {
                if (step === 5) {
                    while (input.isCont() && (c = input.head(), Uri.isHostChar(c))) {
                        input = input.step();
                        output.write(Uri.toLowerCase(c));
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.hostName(output.bind()));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 7;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 7) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 5;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriHostAddressParser(uri, output, c1, x, step);
        };
        return UriHostAddressParser;
    }(Parser));
    UriParser.HostAddressParser = UriHostAddressParser;

    var UriHostLiteralParser = (function (_super) {
        __extends(UriHostLiteralParser, _super);
        function UriHostLiteralParser(uri, output, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.step = step;
            return _this;
        }
        UriHostLiteralParser.prototype.feed = function (input) {
            return UriHostLiteralParser.parse(input, this.uri, this.output, this.step);
        };
        UriHostLiteralParser.parse = function (input, uri, output, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont() && input.head() === 91) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(91, input));
                }
            }
            if (step === 2) {
                output = output || Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isHostChar(c) || c === 58)) {
                    input = input.step();
                    output = output.write(Uri.toLowerCase(c));
                }
                if (input.isCont() && c === 93) {
                    input = input.step();
                    return Parser.done(uri.hostIPv6(output.bind()));
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(93, input));
                }
            }
            return new UriHostLiteralParser(uri, output, step);
        };
        return UriHostLiteralParser;
    }(Parser));
    UriParser.HostLiteralParser = UriHostLiteralParser;

    var UriPortParser = (function (_super) {
        __extends(UriPortParser, _super);
        function UriPortParser(uri, number) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.number = number;
            return _this;
        }
        UriPortParser.prototype.feed = function (input) {
            return UriPortParser.parse(input, this.uri, this.number);
        };
        UriPortParser.parse = function (input, uri, number) {
            if (number === void 0) { number = 0; }
            var c = 0;
            while (input.isCont() && (c = input.head(), Base10.isDigit(c))) {
                input = input.step();
                number = 10 * number + Base10.decodeDigit(c);
            }
            if (!input.isEmpty()) {
                return Parser.done(uri.port(number));
            }
            return new UriPortParser(uri, number);
        };
        return UriPortParser;
    }(Parser));
    UriParser.PortParser = UriPortParser;

    var UriPathParser = (function (_super) {
        __extends(UriPathParser, _super);
        function UriPathParser(uri, builder, output, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.builder = builder;
            _this.output = output;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriPathParser.prototype.feed = function (input) {
            return UriPathParser.parse(input, this.uri, this.builder, this.output, this.c1, this.step);
        };
        UriPathParser.parse = function (input, uri, builder, output, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Uri.isPathChar(c))) {
                        output = output || Utf8.decodedString();
                        input = input.step();
                        output = output.write(c);
                    }
                    if (input.isCont() && c === 47) {
                        input = input.step();
                        builder = builder || uri.pathBuilder();
                        if (output) {
                            builder.addSegment(output.bind());
                            output = void 0;
                        }
                        builder.addSlash();
                        continue;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        if (output) {
                            builder = builder || uri.pathBuilder();
                            builder.addSegment(output.bind());
                        }
                        if (builder) {
                            return Parser.done(builder.bind());
                        }
                        else {
                            return Parser.done(uri.pathEmpty());
                        }
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        output = output || Utf8.decodedString();
                        input = input.step();
                        output = output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriPathParser(uri, builder, output, c1, step);
        };
        return UriPathParser;
    }(Parser));
    UriParser.PathParser = UriPathParser;

    var UriQueryParser = (function (_super) {
        __extends(UriQueryParser, _super);
        function UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.builder = builder;
            _this.keyOutput = keyOutput;
            _this.valueOutput = valueOutput;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriQueryParser.prototype.feed = function (input) {
            return UriQueryParser.parse(input, this.uri, this.builder, this.keyOutput, this.valueOutput, this.c1, this.step);
        };
        UriQueryParser.parse = function (input, uri, builder, keyOutput, valueOutput, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    keyOutput = keyOutput || Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isParamChar(c))) {
                        input = input.step();
                        keyOutput.write(c);
                    }
                    if (input.isCont() && c === 61) {
                        input = input.step();
                        step = 4;
                    }
                    else if (input.isCont() && c === 38) {
                        input = input.step();
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind());
                        keyOutput = void 0;
                        continue;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind());
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        keyOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 4) {
                    valueOutput = valueOutput || Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isParamChar(c) || c === 61)) {
                        input = input.step();
                        valueOutput.write(c);
                    }
                    if (input.isCont() && c === 38) {
                        input = input.step();
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind(), valueOutput.bind());
                        keyOutput = void 0;
                        valueOutput = void 0;
                        step = 1;
                        continue;
                    }
                    else if (input.isCont() && c === 38) {
                        input = input.step();
                        step = 5;
                    }
                    else if (!input.isEmpty()) {
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind(), valueOutput.bind());
                        return Parser.done(builder.bind());
                    }
                }
                if (step === 5) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        valueOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 4;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step);
        };
        return UriQueryParser;
    }(Parser));
    UriParser.QueryParser = UriQueryParser;

    var UriFragmentParser = (function (_super) {
        __extends(UriFragmentParser, _super);
        function UriFragmentParser(uri, output, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriFragmentParser.prototype.feed = function (input) {
            return UriFragmentParser.parse(input, this.uri, this.output, this.c1, this.step);
        };
        UriFragmentParser.parse = function (input, uri, output, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            output = output || Utf8.decodedString();
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Uri.isFragmentChar(c))) {
                        input = input.step();
                        output = output.write(c);
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(uri.fragment(output.bind()));
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        output = output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriFragmentParser(uri, output, c1, step);
        };
        return UriFragmentParser;
    }(Parser));
    UriParser.FragmentParser = UriFragmentParser;

    var UriForm = (function (_super) {
        __extends(UriForm, _super);
        function UriForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        UriForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new UriForm(unit);
            }
        };
        UriForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Text$1.from(object.toString());
            }
            else {
                return item.concat(Text$1.from(object.toString()));
            }
        };
        UriForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                var string = value.stringValue();
                if (typeof string === "string") {
                    return Uri.parse(string);
                }
            }
            catch (error) {
            }
            return void 0;
        };
        return UriForm;
    }(Form));
    Uri.Form = UriForm;

    var UriCache = (function () {
        function UriCache(base, size) {
            if (size === void 0) { size = 32; }
            this._base = base;
            this._resolveCache = new HashGenCacheMap(size);
            this._unresolveCache = new HashGenCacheMap(size);
        }
        UriCache.prototype.resolve = function (relative) {
            relative = Uri.fromAny(relative);
            var absolute = this._resolveCache.get(relative);
            if (absolute === undefined) {
                absolute = this._base.resolve(relative);
                this._resolveCache.put(relative, absolute);
            }
            return absolute;
        };
        UriCache.prototype.unresolve = function (absolute) {
            absolute = Uri.fromAny(absolute);
            var relative = this._unresolveCache.get(absolute);
            if (relative === undefined) {
                relative = this._base.unresolve(absolute);
                this._unresolveCache.put(absolute, relative);
            }
            return relative;
        };
        return UriCache;
    }());

    var Envelope = (function () {
        function Envelope() {
        }
        Envelope.prototype.tag = function () {
            return this.constructor.tag();
        };
        Envelope.prototype.prio = function (prio) {
            if (prio === void 0) {
                return 0;
            }
            else {
                return this;
            }
        };
        Envelope.prototype.rate = function (rate) {
            if (rate === void 0) {
                return 0;
            }
            else {
                return this;
            }
        };
        Envelope.prototype.toRecon = function () {
            return Recon.toString(this.toValue());
        };
        Envelope.prototype.toString = function () {
            return Format.debug(this);
        };
        Envelope.tag = function () {
            return void 0;
        };
        Envelope.fromValue = function (value) {
            switch (value.tag()) {
                case "event": return Envelope.EventMessage.fromValue(value);
                case "command": return Envelope.CommandMessage.fromValue(value);
                case "link": return Envelope.LinkRequest.fromValue(value);
                case "linked": return Envelope.LinkedResponse.fromValue(value);
                case "sync": return Envelope.SyncRequest.fromValue(value);
                case "synced": return Envelope.SyncedResponse.fromValue(value);
                case "unlink": return Envelope.UnlinkRequest.fromValue(value);
                case "unlinked": return Envelope.UnlinkedResponse.fromValue(value);
                case "auth": return Envelope.AuthRequest.fromValue(value);
                case "authed": return Envelope.AuthedResponse.fromValue(value);
                case "deauth": return Envelope.DeauthRequest.fromValue(value);
                case "deauthed": return Envelope.DeauthedResponse.fromValue(value);
                default: return void 0;
            }
        };
        Envelope.parseRecon = function (input) {
            return Envelope.fromValue(Recon.parse(input));
        };
        return Envelope;
    }());

    var HostAddressed = (function (_super) {
        __extends(HostAddressed, _super);
        function HostAddressed(body) {
            var _this = _super.call(this) || this;
            _this._body = body;
            return _this;
        }
        HostAddressed.prototype.node = function (node) {
            if (node === void 0) {
                return Uri.empty();
            }
            else {
                return this;
            }
        };
        HostAddressed.prototype.lane = function (lane) {
            if (lane === void 0) {
                return Uri.empty();
            }
            else {
                return this;
            }
        };
        HostAddressed.prototype.body = function (body) {
            if (body === void 0) {
                return this._body;
            }
            else {
                body = Value.fromAny(body);
                return this.copy(body);
            }
        };
        HostAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof HostAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._body.equals(that._body);
            }
            return false;
        };
        HostAddressed.prototype.hashCode = function () {
            return Murmur3.mash(Murmur3.mix(Murmur3.seed(this.__proto__), this._body.hashCode()));
        };
        HostAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40);
            if (this._body.isDefined()) {
                output = output.debug(this._body);
            }
            output = output.write(41);
        };
        HostAddressed.prototype.toValue = function () {
            return Attr.of(this.tag()).concat(this._body);
        };
        HostAddressed.fromValue = function (value, E) {
            var header = value.header(E.tag());
            if (header.isDefined()) {
                var body = value.body();
                return new E(body);
            }
            return void 0;
        };
        return HostAddressed;
    }(Envelope));

    var LaneAddressed = (function (_super) {
        __extends(LaneAddressed, _super);
        function LaneAddressed(node, lane, body) {
            var _this = _super.call(this) || this;
            _this._node = node;
            _this._lane = lane;
            _this._body = body;
            return _this;
        }
        LaneAddressed.prototype.node = function (node) {
            if (node === void 0) {
                return this._node;
            }
            else {
                node = Uri.fromAny(node);
                return this.copy(node, this._lane, this._body);
            }
        };
        LaneAddressed.prototype.lane = function (lane) {
            if (lane === void 0) {
                return this._lane;
            }
            else {
                lane = Uri.fromAny(lane);
                return this.copy(this._node, lane, this._body);
            }
        };
        LaneAddressed.prototype.body = function (body) {
            if (body === void 0) {
                return this._body;
            }
            else {
                body = Value.fromAny(body);
                return this.copy(this._node, this._lane, body);
            }
        };
        LaneAddressed.prototype.toValue = function () {
            var header = Record.create(2)
                .slot("node", this._node.toString())
                .slot("lane", this._lane.toString());
            return Attr.of(this.tag(), header).concat(this._body);
        };
        LaneAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LaneAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._node.equals(that._node) && this._lane.equals(that._lane)
                    && this._body.equals(that._body);
            }
            return false;
        };
        LaneAddressed.prototype.hashCode = function () {
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.seed(this.__proto__), this._node.hashCode()), this._lane.hashCode()), this._body.hashCode()));
        };
        LaneAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40)
                .debug(this._node.toString()).write(", ").debug(this._lane.toString());
            if (this._body.isDefined()) {
                output = output.write(", ").debug(this._body);
            }
            output = output.write(41);
        };
        LaneAddressed.fromValue = function (value, E) {
            var node;
            var lane;
            var header = value.header(E.tag());
            header.forEach(function (header, index) {
                var key = header.key.stringValue(void 0);
                if (key !== void 0) {
                    if (key === "node") {
                        node = Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "lane") {
                        lane = Uri.parse(header.toValue().stringValue(""));
                    }
                }
                else if (header instanceof Value) {
                    if (index === 0) {
                        node = Uri.parse(header.stringValue(""));
                    }
                    else if (index === 1) {
                        lane = Uri.parse(header.stringValue(""));
                    }
                }
            });
            if (node && lane) {
                var body = value.body();
                return new E(node, lane, body);
            }
            return void 0;
        };
        return LaneAddressed;
    }(Envelope));

    var LinkAddressed = (function (_super) {
        __extends(LinkAddressed, _super);
        function LinkAddressed(node, lane, prio, rate, body) {
            var _this = _super.call(this) || this;
            _this._node = node;
            _this._lane = lane;
            _this._prio = prio;
            _this._rate = rate;
            _this._body = body;
            return _this;
        }
        LinkAddressed.prototype.node = function (node) {
            if (node === undefined) {
                return this._node;
            }
            else {
                node = Uri.fromAny(node);
                return this.copy(node, this._lane, this._prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.lane = function (lane) {
            if (lane === undefined) {
                return this._lane;
            }
            else {
                lane = Uri.fromAny(lane);
                return this.copy(this._node, lane, this._prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.prio = function (prio) {
            if (prio === undefined) {
                return this._prio;
            }
            else {
                return this.copy(this._node, this._lane, prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.rate = function (rate) {
            if (rate === undefined) {
                return this._rate;
            }
            else {
                return this.copy(this._node, this._lane, this._prio, rate, this._body);
            }
        };
        LinkAddressed.prototype.body = function (body) {
            if (body === undefined) {
                return this._body;
            }
            else {
                body = Value.fromAny(body);
                return this.copy(this._node, this._lane, this._prio, this._rate, body);
            }
        };
        LinkAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LinkAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._node.equals(that._node) && this._lane.equals(that._lane)
                    && this._prio === that._prio && this._rate === that._rate
                    && this._body.equals(that._body);
            }
            return false;
        };
        LinkAddressed.prototype.hashCode = function () {
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.seed(this.__proto__), this._node.hashCode()), this._lane.hashCode()), Murmur3.hash(this._prio)), Murmur3.hash(this._rate)), this._body.hashCode()));
        };
        LinkAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40)
                .debug(this._node.toString()).write(", ").debug(this._lane.toString());
            if (this._prio || this._rate) {
                output = output.write(", ").debug(this._prio).write(", ").debug(this._rate);
            }
            if (this._body.isDefined()) {
                output = output.write(", ").debug(this._body);
            }
            output = output.write(41);
        };
        LinkAddressed.prototype.toValue = function () {
            var header = Record.create(4)
                .slot("node", this._node.toString())
                .slot("lane", this._lane.toString());
            if (this._prio) {
                header.slot("prio", this._prio);
            }
            if (this._rate) {
                header.slot("rate", this._rate);
            }
            return Attr.of(this.tag(), header).concat(this._body);
        };
        LinkAddressed.fromValue = function (value, E) {
            var node;
            var lane;
            var prio = 0;
            var rate = 0;
            var header = value.header(E.tag());
            header.forEach(function (header, index) {
                var key = header.key.stringValue(void 0);
                if (key !== void 0) {
                    if (key === "node") {
                        node = Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "lane") {
                        lane = Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "prio") {
                        prio = header.numberValue(prio);
                    }
                    else if (key === "rate") {
                        rate = header.numberValue(rate);
                    }
                }
                else if (header instanceof Value) {
                    if (index === 0) {
                        node = Uri.parse(header.stringValue(""));
                    }
                    else if (index === 1) {
                        lane = Uri.parse(header.stringValue(""));
                    }
                }
            });
            if (node && lane) {
                var body = value.body();
                return new E(node, lane, prio, rate, body);
            }
            return void 0;
        };
        return LinkAddressed;
    }(Envelope));

    var EventMessage = (function (_super) {
        __extends(EventMessage, _super);
        function EventMessage(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        EventMessage.prototype.copy = function (node, lane, body) {
            return new EventMessage(node, lane, body);
        };
        EventMessage.tag = function () {
            return "event";
        };
        EventMessage.fromValue = function (value) {
            return LaneAddressed.fromValue(value, EventMessage);
        };
        EventMessage.of = function (node, lane, body) {
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new EventMessage(node, lane, body);
        };
        return EventMessage;
    }(LaneAddressed));
    Envelope.EventMessage = EventMessage;

    var CommandMessage = (function (_super) {
        __extends(CommandMessage, _super);
        function CommandMessage(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        CommandMessage.prototype.copy = function (node, lane, body) {
            return new CommandMessage(node, lane, body);
        };
        CommandMessage.tag = function () {
            return "command";
        };
        CommandMessage.fromValue = function (value) {
            return LaneAddressed.fromValue(value, CommandMessage);
        };
        CommandMessage.of = function (node, lane, body) {
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new CommandMessage(node, lane, body);
        };
        return CommandMessage;
    }(LaneAddressed));
    Envelope.CommandMessage = CommandMessage;

    var LinkRequest = (function (_super) {
        __extends(LinkRequest, _super);
        function LinkRequest(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        LinkRequest.prototype.copy = function (node, lane, prio, rate, body) {
            return new LinkRequest(node, lane, prio, rate, body);
        };
        LinkRequest.tag = function () {
            return "link";
        };
        LinkRequest.fromValue = function (value) {
            return LinkAddressed.fromValue(value, LinkRequest);
        };
        LinkRequest.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new LinkRequest(node, lane, prio, rate, body);
        };
        return LinkRequest;
    }(LinkAddressed));
    Envelope.LinkRequest = LinkRequest;

    var LinkedResponse = (function (_super) {
        __extends(LinkedResponse, _super);
        function LinkedResponse(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        LinkedResponse.prototype.copy = function (node, lane, prio, rate, body) {
            return new LinkedResponse(node, lane, prio, rate, body);
        };
        LinkedResponse.tag = function () {
            return "linked";
        };
        LinkedResponse.fromValue = function (value) {
            return LinkAddressed.fromValue(value, LinkedResponse);
        };
        LinkedResponse.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new LinkedResponse(node, lane, prio, rate, body);
        };
        return LinkedResponse;
    }(LinkAddressed));
    Envelope.LinkedResponse = LinkedResponse;

    var SyncRequest = (function (_super) {
        __extends(SyncRequest, _super);
        function SyncRequest(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        SyncRequest.prototype.copy = function (node, lane, prio, rate, body) {
            return new SyncRequest(node, lane, prio, rate, body);
        };
        SyncRequest.tag = function () {
            return "sync";
        };
        SyncRequest.fromValue = function (value) {
            return LinkAddressed.fromValue(value, SyncRequest);
        };
        SyncRequest.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new SyncRequest(node, lane, prio, rate, body);
        };
        return SyncRequest;
    }(LinkAddressed));
    Envelope.SyncRequest = SyncRequest;

    var SyncedResponse = (function (_super) {
        __extends(SyncedResponse, _super);
        function SyncedResponse(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        SyncedResponse.prototype.copy = function (node, lane, body) {
            return new SyncedResponse(node, lane, body);
        };
        SyncedResponse.tag = function () {
            return "synced";
        };
        SyncedResponse.fromValue = function (value) {
            return LaneAddressed.fromValue(value, SyncedResponse);
        };
        SyncedResponse.of = function (node, lane, body) {
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new SyncedResponse(node, lane, body);
        };
        return SyncedResponse;
    }(LaneAddressed));
    Envelope.SyncedResponse = SyncedResponse;

    var UnlinkRequest = (function (_super) {
        __extends(UnlinkRequest, _super);
        function UnlinkRequest(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        UnlinkRequest.prototype.copy = function (node, lane, body) {
            return new UnlinkRequest(node, lane, body);
        };
        UnlinkRequest.tag = function () {
            return "unlink";
        };
        UnlinkRequest.fromValue = function (value) {
            return LaneAddressed.fromValue(value, UnlinkRequest);
        };
        UnlinkRequest.of = function (node, lane, body) {
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new UnlinkRequest(node, lane, body);
        };
        return UnlinkRequest;
    }(LaneAddressed));
    Envelope.UnlinkRequest = UnlinkRequest;

    var UnlinkedResponse = (function (_super) {
        __extends(UnlinkedResponse, _super);
        function UnlinkedResponse(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        UnlinkedResponse.prototype.copy = function (node, lane, body) {
            return new UnlinkedResponse(node, lane, body);
        };
        UnlinkedResponse.tag = function () {
            return "unlinked";
        };
        UnlinkedResponse.fromValue = function (value) {
            return LaneAddressed.fromValue(value, UnlinkedResponse);
        };
        UnlinkedResponse.of = function (node, lane, body) {
            if (body === void 0) { body = Value.absent(); }
            node = Uri.fromAny(node);
            lane = Uri.fromAny(lane);
            body = Value.fromAny(body);
            return new UnlinkedResponse(node, lane, body);
        };
        return UnlinkedResponse;
    }(LaneAddressed));
    Envelope.UnlinkedResponse = UnlinkedResponse;

    var AuthRequest = (function (_super) {
        __extends(AuthRequest, _super);
        function AuthRequest(body) {
            return _super.call(this, body) || this;
        }
        AuthRequest.prototype.copy = function (body) {
            return new AuthRequest(body);
        };
        AuthRequest.tag = function () {
            return "auth";
        };
        AuthRequest.fromValue = function (value) {
            return HostAddressed.fromValue(value, AuthRequest);
        };
        AuthRequest.of = function (body) {
            if (body === void 0) { body = Value.absent(); }
            body = Value.fromAny(body);
            return new AuthRequest(body);
        };
        return AuthRequest;
    }(HostAddressed));
    Envelope.AuthRequest = AuthRequest;

    var AuthedResponse = (function (_super) {
        __extends(AuthedResponse, _super);
        function AuthedResponse(body) {
            return _super.call(this, body) || this;
        }
        AuthedResponse.prototype.copy = function (body) {
            return new AuthedResponse(body);
        };
        AuthedResponse.tag = function () {
            return "authed";
        };
        AuthedResponse.fromValue = function (value) {
            return HostAddressed.fromValue(value, AuthedResponse);
        };
        AuthedResponse.of = function (body) {
            if (body === void 0) { body = Value.absent(); }
            body = Value.fromAny(body);
            return new AuthedResponse(body);
        };
        return AuthedResponse;
    }(HostAddressed));
    Envelope.AuthedResponse = AuthedResponse;

    var DeauthRequest = (function (_super) {
        __extends(DeauthRequest, _super);
        function DeauthRequest(body) {
            return _super.call(this, body) || this;
        }
        DeauthRequest.prototype.copy = function (body) {
            return new DeauthRequest(body);
        };
        DeauthRequest.tag = function () {
            return "deauth";
        };
        DeauthRequest.fromValue = function (value) {
            return HostAddressed.fromValue(value, DeauthRequest);
        };
        DeauthRequest.of = function (body) {
            if (body === void 0) { body = Value.absent(); }
            body = Value.fromAny(body);
            return new DeauthRequest(body);
        };
        return DeauthRequest;
    }(HostAddressed));
    Envelope.DeauthRequest = DeauthRequest;

    var DeauthedResponse = (function (_super) {
        __extends(DeauthedResponse, _super);
        function DeauthedResponse(body) {
            return _super.call(this, body) || this;
        }
        DeauthedResponse.prototype.copy = function (body) {
            return new DeauthedResponse(body);
        };
        DeauthedResponse.tag = function () {
            return "deauthed";
        };
        DeauthedResponse.fromValue = function (value) {
            return HostAddressed.fromValue(value, DeauthedResponse);
        };
        DeauthedResponse.of = function (body) {
            if (body === void 0) { body = Value.absent(); }
            body = Value.fromAny(body);
            return new DeauthedResponse(body);
        };
        return DeauthedResponse;
    }(HostAddressed));
    Envelope.DeauthedResponse = DeauthedResponse;

    var Host = (function () {
        function Host() {
        }
        return Host;
    }());

    var MAX_RECONNECT_TIMEOUT = 30000;
    var IDLE_TIMEOUT = 1000;
    var SEND_BUFFER_SIZE = 1024;
    var RemoteHost = (function (_super) {
        __extends(RemoteHost, _super);
        function RemoteHost(context, hostUri, options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this) || this;
            _this._context = context;
            _this._hostUri = hostUri;
            _this._options = options;
            _this._downlinks = new BTree();
            _this._downlinkCount = 0;
            _this._authenticated = false;
            _this._session = Value.absent();
            _this._uriCache = new UriCache(hostUri);
            _this._sendBuffer = [];
            _this._reconnectTimer = 0;
            _this._reconnectTimeout = 0;
            _this._idleTimer = 0;
            _this.open = _this.open.bind(_this);
            _this.checkIdle = _this.checkIdle.bind(_this);
            return _this;
        }
        RemoteHost.prototype.hostUri = function () {
            return this._hostUri;
        };
        RemoteHost.prototype.credentials = function () {
            return this._options.credentials || Value.absent();
        };
        RemoteHost.prototype.maxReconnectTimeout = function () {
            return this._options.maxReconnectTimeout || MAX_RECONNECT_TIMEOUT;
        };
        RemoteHost.prototype.idleTimeout = function () {
            return this._options.idleTimeout || IDLE_TIMEOUT;
        };
        RemoteHost.prototype.sendBufferSize = function () {
            return this._options.sendBufferSize || SEND_BUFFER_SIZE;
        };
        RemoteHost.prototype.isAuthenticated = function () {
            return this._authenticated;
        };
        RemoteHost.prototype.session = function () {
            return this._session;
        };
        RemoteHost.prototype.isIdle = function () {
            return !this._sendBuffer.length && !this._downlinkCount;
        };
        RemoteHost.prototype.resolve = function (relative) {
            return this._uriCache.resolve(relative);
        };
        RemoteHost.prototype.unresolve = function (absolute) {
            return this._uriCache.unresolve(absolute);
        };
        RemoteHost.prototype.authenticate = function (credentials) {
            credentials = Value.fromAny(credentials);
            if (!credentials.equals(this._options.credentials)) {
                this._options.credentials = credentials;
                if (this.isConnected()) {
                    var request = AuthRequest.of(credentials);
                    this.push(request);
                }
                else {
                    this.open();
                }
            }
        };
        RemoteHost.prototype.openDownlink = function (downlink) {
            this.clearIdle();
            var nodeUri = this.resolve(downlink.nodeUri());
            var laneUri = downlink.laneUri();
            if (!this._downlinkCount) {
                this.open();
            }
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (!nodeDownlinks) {
                nodeDownlinks = new BTree();
                this._downlinks.set(nodeUri, nodeDownlinks);
            }
            if (nodeDownlinks.get(laneUri)) {
                throw new Error("duplicate downlink");
            }
            nodeDownlinks.set(laneUri, downlink);
            this._downlinkCount += 1;
            downlink.openUp(this);
            if (this.isConnected()) {
                downlink.hostDidConnect(this);
            }
        };
        RemoteHost.prototype.unlinkDownlink = function (downlink) {
            var nodeUri = this.resolve(downlink.nodeUri());
            var laneUri = downlink.laneUri();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks && nodeDownlinks.get(laneUri) && this.isConnected()) {
                var request = UnlinkRequest.of(this.unresolve(nodeUri), laneUri);
                downlink.onUnlinkRequest(request, this);
                this.push(request);
            }
        };
        RemoteHost.prototype.closeDownlink = function (downlink) {
            var nodeUri = this.resolve(downlink.nodeUri());
            var laneUri = downlink.laneUri();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks) {
                if (nodeDownlinks.get(laneUri)) {
                    this._downlinkCount -= 1;
                    nodeDownlinks.delete(laneUri);
                    if (nodeDownlinks.isEmpty()) {
                        this._downlinks.delete(nodeUri);
                    }
                    if (!this._downlinkCount) {
                        this.watchIdle();
                    }
                    downlink.closeUp(this);
                }
            }
        };
        RemoteHost.prototype.command = function (nodeUri, laneUri, body) {
            nodeUri = Uri.fromAny(nodeUri);
            nodeUri = this.resolve(nodeUri);
            laneUri = Uri.fromAny(laneUri);
            body = Value.fromAny(body);
            var message = CommandMessage.of(this.unresolve(nodeUri), laneUri, body);
            this.push(message);
        };
        RemoteHost.prototype.onEnvelope = function (envelope) {
            if (envelope instanceof EventMessage) {
                this.onEventMessage(envelope);
            }
            else if (envelope instanceof CommandMessage) {
                this.onCommandMessage(envelope);
            }
            else if (envelope instanceof LinkRequest) {
                this.onLinkRequest(envelope);
            }
            else if (envelope instanceof LinkedResponse) {
                this.onLinkedResponse(envelope);
            }
            else if (envelope instanceof SyncRequest) {
                this.onSyncRequest(envelope);
            }
            else if (envelope instanceof SyncedResponse) {
                this.onSyncedResponse(envelope);
            }
            else if (envelope instanceof UnlinkRequest) {
                this.onUnlinkRequest(envelope);
            }
            else if (envelope instanceof UnlinkedResponse) {
                this.onUnlinkedResponse(envelope);
            }
            else if (envelope instanceof AuthRequest) {
                this.onAuthRequest(envelope);
            }
            else if (envelope instanceof AuthedResponse) {
                this.onAuthedResponse(envelope);
            }
            else if (envelope instanceof DeauthRequest) {
                this.onDeauthRequest(envelope);
            }
            else if (envelope instanceof DeauthedResponse) {
                this.onDeauthedResponse(envelope);
            }
            else {
                this.onUnknownEnvelope(envelope);
            }
        };
        RemoteHost.prototype.onEventMessage = function (message) {
            var nodeUri = this.resolve(message.node());
            var laneUri = message.lane();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks) {
                var downlink = nodeDownlinks.get(laneUri);
                if (downlink) {
                    var resolvedMessage = message.node(nodeUri);
                    downlink.onEventMessage(resolvedMessage, this);
                }
            }
        };
        RemoteHost.prototype.onCommandMessage = function (message) {
        };
        RemoteHost.prototype.onLinkRequest = function (request) {
        };
        RemoteHost.prototype.onLinkedResponse = function (response) {
            var nodeUri = this.resolve(response.node());
            var laneUri = response.lane();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks) {
                var downlink = nodeDownlinks.get(laneUri);
                if (downlink) {
                    var resolvedResponse = response.node(nodeUri);
                    downlink.onLinkedResponse(resolvedResponse, this);
                }
            }
        };
        RemoteHost.prototype.onSyncRequest = function (request) {
        };
        RemoteHost.prototype.onSyncedResponse = function (response) {
            var nodeUri = this.resolve(response.node());
            var laneUri = response.lane();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks) {
                var downlink = nodeDownlinks.get(laneUri);
                if (downlink) {
                    var resolvedResponse = response.node(nodeUri);
                    downlink.onSyncedResponse(resolvedResponse, this);
                }
            }
        };
        RemoteHost.prototype.onUnlinkRequest = function (request) {
        };
        RemoteHost.prototype.onUnlinkedResponse = function (response) {
            var nodeUri = this.resolve(response.node());
            var laneUri = response.lane();
            var nodeDownlinks = this._downlinks.get(nodeUri);
            if (nodeDownlinks) {
                var downlink = nodeDownlinks.get(laneUri);
                if (downlink) {
                    var resolvedResponse = response.node(nodeUri);
                    downlink.onUnlinkedResponse(resolvedResponse, this);
                }
            }
        };
        RemoteHost.prototype.onAuthRequest = function (request) {
        };
        RemoteHost.prototype.onAuthedResponse = function (response) {
            this._authenticated = true;
            this._session = response.body();
            this._context.hostDidAuthenticate(response.body(), this);
        };
        RemoteHost.prototype.onDeauthRequest = function (request) {
        };
        RemoteHost.prototype.onDeauthedResponse = function (response) {
            this._authenticated = false;
            this._session = Value.absent();
            this._context.hostDidDeauthenticate(response.body(), this);
        };
        RemoteHost.prototype.onUnknownEnvelope = function (envelope) {
        };
        RemoteHost.prototype.onConnect = function () {
            this._reconnectTimeout = 0;
            this._context.hostDidConnect(this);
            this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.hostDidConnect(this);
                }, this);
            }, this);
        };
        RemoteHost.prototype.onDisconnect = function () {
            this._authenticated = false;
            this._session = Value.absent();
            this._context.hostDidDisconnect(this);
            this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.hostDidDisconnect(this);
                }, this);
            }, this);
        };
        RemoteHost.prototype.onError = function (error) {
            this._context.hostDidFail(error, this);
            this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.hostDidFail(error, this);
                }, this);
            }, this);
        };
        RemoteHost.prototype.reconnect = function () {
            if (!this._reconnectTimer) {
                if (!this._reconnectTimeout) {
                    this._reconnectTimeout = Math.floor(500 + 1000 * Math.random());
                }
                else {
                    this._reconnectTimeout = Math.min(Math.floor(1.8 * this._reconnectTimeout), this.maxReconnectTimeout());
                }
                this._reconnectTimer = setTimeout(this.open, this._reconnectTimeout);
            }
        };
        RemoteHost.prototype.clearReconnect = function () {
            if (this._reconnectTimer) {
                clearTimeout(this._reconnectTimer);
                this._reconnectTimer = 0;
            }
        };
        RemoteHost.prototype.watchIdle = function () {
            if (!this._idleTimer && this.isConnected() && this.isIdle()) {
                this._idleTimer = setTimeout(this.checkIdle, this.idleTimeout());
            }
        };
        RemoteHost.prototype.clearIdle = function () {
            if (this._idleTimer) {
                clearTimeout(this._idleTimer);
                this._idleTimer = 0;
            }
        };
        RemoteHost.prototype.checkIdle = function () {
            if (this.isConnected() && this.isIdle()) {
                this.close();
            }
        };
        RemoteHost.prototype.close = function () {
            this._context.closeHost(this);
        };
        RemoteHost.prototype.closeUp = function () {
            this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.closeUp(this);
                }, this);
            }, this);
        };
        return RemoteHost;
    }(Host));

    var WebSocketHost = (function (_super) {
        __extends(WebSocketHost, _super);
        function WebSocketHost(context, hostUri, options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, context, hostUri, options) || this;
            _this.onWebSocketOpen = _this.onWebSocketOpen.bind(_this);
            _this.onWebSocketMessage = _this.onWebSocketMessage.bind(_this);
            _this.onWebSocketClose = _this.onWebSocketClose.bind(_this);
            _this.onWebSocketError = _this.onWebSocketError.bind(_this);
            return _this;
        }
        Object.defineProperty(WebSocketHost.prototype, "WebSocket", {
            get: function () {
                return this._options.WebSocket
                    || typeof WebSocket !== "undefined" && WebSocket
                    || typeof require === "function" && require("ws")
                    || void 0;
            },
            enumerable: true,
            configurable: true
        });
        WebSocketHost.prototype.isConnected = function () {
            return this._socket ? this._socket.readyState === this._socket.OPEN : false;
        };
        WebSocketHost.prototype.open = function () {
            this.clearReconnect();
            if (!this._socket) {
                var WebSocket_1 = this.WebSocket;
                if (!WebSocket_1) {
                    throw new Error("WebSocket undefined");
                }
                var hostUri = this._hostUri;
                var schemeName = hostUri.schemeName();
                if (schemeName === "warp" || schemeName === "swim") {
                    hostUri = hostUri.scheme("ws");
                }
                else if (schemeName === "warps" || schemeName === "swims") {
                    hostUri = hostUri.scheme("wss");
                }
                if (this._options.protocols) {
                    this._socket = new WebSocket_1(hostUri.toString(), this._options.protocols);
                }
                else {
                    this._socket = new WebSocket_1(hostUri.toString());
                }
                this._socket.onopen = this.onWebSocketOpen;
                this._socket.onmessage = this.onWebSocketMessage;
                this._socket.onclose = this.onWebSocketClose;
                this._socket.onerror = this.onWebSocketError;
            }
        };
        WebSocketHost.prototype.close = function () {
            this.clearReconnect();
            this.clearIdle();
            if (this._socket) {
                this._socket.close();
                if (!this._context.isOnline()) {
                    this.onWebSocketClose();
                }
            }
            else {
                _super.prototype.close.call(this);
            }
        };
        WebSocketHost.prototype.push = function (envelope) {
            if (this.isConnected()) {
                this.clearIdle();
                var text = envelope.toRecon();
                this._socket.send(text);
                this.watchIdle();
            }
            else if (envelope instanceof CommandMessage) {
                if (this._sendBuffer.length < this.sendBufferSize()) {
                    this._sendBuffer.push(envelope);
                }
                else {
                    throw new Error("send buffer overflow");
                }
                this.open();
            }
        };
        WebSocketHost.prototype.onWebSocketOpen = function () {
            if (this.isConnected()) {
                var credentials = this.credentials();
                if (credentials.isDefined()) {
                    var request = new AuthRequest(credentials);
                    this.push(request);
                }
                this.onConnect();
                var envelope = void 0;
                while ((envelope = this._sendBuffer.shift()) && this.isConnected()) {
                    this.push(envelope);
                }
                this.watchIdle();
            }
            else {
                this.close();
            }
        };
        WebSocketHost.prototype.onWebSocketMessage = function (message) {
            var data = message.data;
            if (typeof data === "string") {
                var envelope = Envelope.parseRecon(data);
                if (envelope) {
                    this.onEnvelope(envelope);
                }
                else {
                    this.onUnknownEnvelope(data);
                }
            }
        };
        WebSocketHost.prototype.onWebSocketClose = function () {
            if (this._socket) {
                this._socket.onopen = null;
                this._socket.onmessage = null;
                this._socket.onclose = null;
                this._socket.onerror = null;
                this._socket = void 0;
            }
            this.onDisconnect();
            this.clearIdle();
            if (!this.isIdle()) {
                if (this._context.isOnline()) {
                    this.reconnect();
                }
            }
            else {
                this.close();
            }
        };
        WebSocketHost.prototype.onWebSocketError = function () {
            this.onError();
            if (this._socket) {
                this._socket.close();
            }
        };
        return WebSocketHost;
    }(RemoteHost));

    var LINKING = 1;
    var LINKED = 2;
    var SYNCING = 4;
    var SYNCED = 8;
    var UNLINKING = 16;
    var DownlinkModel = (function () {
        function DownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = Value.absent(); }
            this._context = context;
            this._hostUri = hostUri;
            this._nodeUri = nodeUri;
            this._laneUri = laneUri;
            this._prio = prio;
            this._rate = rate;
            this._body = body;
            this._views = [];
            this._host = null;
            this._status = 0;
        }
        DownlinkModel.prototype.hostUri = function () {
            return this._hostUri;
        };
        DownlinkModel.prototype.nodeUri = function () {
            return this._nodeUri;
        };
        DownlinkModel.prototype.laneUri = function () {
            return this._laneUri;
        };
        DownlinkModel.prototype.prio = function () {
            return this._prio;
        };
        DownlinkModel.prototype.rate = function () {
            return this._rate;
        };
        DownlinkModel.prototype.body = function () {
            return this._body;
        };
        DownlinkModel.prototype.keepLinked = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                if (this._views[i].keepLinked()) {
                    return true;
                }
            }
            return false;
        };
        DownlinkModel.prototype.keepSynced = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                if (this._views[i].keepSynced()) {
                    return true;
                }
            }
            return false;
        };
        DownlinkModel.prototype.isConnected = function () {
            return !!(this._host && this._host.isConnected());
        };
        DownlinkModel.prototype.isAuthenticated = function () {
            return !!(this._host && this._host.isAuthenticated());
        };
        DownlinkModel.prototype.isLinked = function () {
            return (this._status & LINKED) !== 0;
        };
        DownlinkModel.prototype.isSynced = function () {
            return (this._status & SYNCED) !== 0;
        };
        DownlinkModel.prototype.session = function () {
            return this._host ? this._host.session() : Value.absent();
        };
        DownlinkModel.prototype.addDownlink = function (view) {
            this._views.push(view);
        };
        DownlinkModel.prototype.removeDownlink = function (view) {
            for (var i = 0; i < this._views.length; i += 1) {
                if (this._views[i] === view) {
                    this._views.splice(i, 1);
                    view.closeUp();
                }
            }
            if (this._views.length === 0) {
                this.unlink();
            }
        };
        DownlinkModel.prototype.onEventMessage = function (message, host) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onEventMessage(message);
            }
        };
        DownlinkModel.prototype.onCommandMessage = function (body) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onCommandMessage(body);
            }
        };
        DownlinkModel.prototype.onLinkRequest = function (request) {
            this._status |= LINKING;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onLinkRequest(request);
            }
        };
        DownlinkModel.prototype.onLinkedResponse = function (response, host) {
            this._status = this._status & ~LINKING | LINKED;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onLinkedResponse(response);
            }
        };
        DownlinkModel.prototype.onSyncRequest = function (request) {
            this._status |= SYNCING;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onSyncRequest(request);
            }
        };
        DownlinkModel.prototype.onSyncedResponse = function (response, host) {
            this._status = this._status & ~SYNCING | SYNCED;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onSyncedResponse(response);
            }
        };
        DownlinkModel.prototype.onUnlinkRequest = function (request, host) {
            this._status = this._status & ~(LINKING | SYNCING) | UNLINKING;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onUnlinkRequest(request);
            }
        };
        DownlinkModel.prototype.onUnlinkedResponse = function (response, host) {
            this._status &= ~UNLINKING;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onUnlinkedResponse(response);
            }
            if (this._status === 0) {
                this.close();
            }
        };
        DownlinkModel.prototype.hostDidConnect = function (host) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].hostDidConnect();
            }
            var nodeUri = this._host.unresolve(this._nodeUri);
            var request;
            if (this.keepSynced()) {
                request = SyncRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
                this.onSyncRequest(request);
            }
            else {
                request = LinkRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
                this.onLinkRequest(request);
            }
            this._host.push(request);
        };
        DownlinkModel.prototype.hostDidDisconnect = function (host) {
            this._status = 0;
            var keepLinked = false;
            for (var i = 0; i < this._views.length; i += 1) {
                var view = this._views[i];
                view.hostDidDisconnect();
                keepLinked = keepLinked || view.keepLinked();
            }
            if (!keepLinked) {
                this.close();
            }
        };
        DownlinkModel.prototype.hostDidFail = function (error, host) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].hostDidFail(error);
            }
        };
        DownlinkModel.prototype.command = function (body) {
            body = Value.fromAny(body);
            this.onCommandMessage(body);
            this._host.command(this._nodeUri, this._laneUri, body);
        };
        DownlinkModel.prototype.unlink = function () {
            this._status = UNLINKING;
            this._context.unlinkDownlink(this);
        };
        DownlinkModel.prototype.close = function () {
            this._context.closeDownlink(this);
        };
        DownlinkModel.prototype.openUp = function (host) {
            this._host = host;
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].openUp(host);
            }
        };
        DownlinkModel.prototype.closeUp = function () {
            var views = this._views;
            this._views = [];
            for (var i = 0; i < views.length; i += 1) {
                views[i].closeUp();
            }
        };
        return DownlinkModel;
    }());

    (function (DownlinkFlags) {
        DownlinkFlags[DownlinkFlags["KeepLinked"] = 1] = "KeepLinked";
        DownlinkFlags[DownlinkFlags["KeepSynced"] = 2] = "KeepSynced";
        DownlinkFlags[DownlinkFlags["KeepLinkedSynced"] = 3] = "KeepLinkedSynced";
    })(exports.DownlinkFlags || (exports.DownlinkFlags = {}));
    var Downlink = (function () {
        function Downlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
            if (hostUri === void 0) { hostUri = Uri.empty(); }
            if (nodeUri === void 0) { nodeUri = Uri.empty(); }
            if (laneUri === void 0) { laneUri = Uri.empty(); }
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = Value.absent(); }
            if (flags === void 0) { flags = 0; }
            if (observers === void 0) { observers = null; }
            var observer;
            if (!observers) {
                observers = [];
            }
            else if (!Array.isArray(observers)) {
                observer = observers;
                observers = [observer];
            }
            if (init) {
                observer = observer || {};
                observers = observers ? observers.concat(observer) : [observer];
                hostUri = init.hostUri !== void 0 ? Uri.fromAny(init.hostUri) : hostUri;
                nodeUri = init.nodeUri !== void 0 ? Uri.fromAny(init.nodeUri) : nodeUri;
                laneUri = init.laneUri !== void 0 ? Uri.fromAny(init.laneUri) : laneUri;
                prio = init.prio !== void 0 ? init.prio : prio;
                rate = init.rate !== void 0 ? init.rate : rate;
                body = init.body !== void 0 ? Value.fromAny(init.body) : body;
                observer.onEvent = init.onEvent || observer.onEvent;
                observer.onCommand = init.onCommand || observer.onCommand;
                observer.willLink = init.willLink || observer.willLink;
                observer.didLink = init.didLink || observer.didLink;
                observer.willSync = init.willSync || observer.willSync;
                observer.didSync = init.didSync || observer.didSync;
                observer.willUnlink = init.willUnlink || observer.willUnlink;
                observer.didUnlink = init.didUnlink || observer.didUnlink;
                observer.didConnect = init.didConnect || observer.didConnect;
                observer.didDisconnect = init.didDisconnect || observer.didDisconnect;
                observer.didClose = init.didClose || observer.didClose;
                observer.didFail = init.didFail || observer.didFail;
            }
            this._context = context;
            this._owner = owner;
            this._hostUri = hostUri;
            this._nodeUri = nodeUri;
            this._laneUri = laneUri;
            this._prio = prio;
            this._rate = rate;
            this._body = body;
            this._flags = flags;
            this._model = null;
            this._observers = observers;
        }
        Downlink.prototype.hostUri = function (hostUri) {
            if (hostUri === void 0) {
                return this._hostUri;
            }
            else {
                hostUri = Uri.fromAny(hostUri);
                return this.copy(this._context, this._owner, hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
            }
        };
        Downlink.prototype.nodeUri = function (nodeUri) {
            if (nodeUri === void 0) {
                return this._nodeUri;
            }
            else {
                nodeUri = Uri.fromAny(nodeUri);
                return this.copy(this._context, this._owner, this._hostUri, nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
            }
        };
        Downlink.prototype.laneUri = function (laneUri) {
            if (laneUri === void 0) {
                return this._laneUri;
            }
            else {
                laneUri = Uri.fromAny(laneUri);
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
            }
        };
        Downlink.prototype.prio = function (prio) {
            if (prio === void 0) {
                return this._prio;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, prio, this._rate, this._body, this._flags, this._observers);
            }
        };
        Downlink.prototype.rate = function (rate) {
            if (rate === void 0) {
                return this._rate;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, rate, this._body, this._flags, this._observers);
            }
        };
        Downlink.prototype.body = function (body) {
            if (body === void 0) {
                return this._body;
            }
            else {
                body = Value.fromAny(body);
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, body, this._flags, this._observers);
            }
        };
        Downlink.prototype.keepLinked = function (keepLinked) {
            if (keepLinked === void 0) {
                return (this._flags & 1) !== 0;
            }
            else {
                var flags = keepLinked ? this._flags | 1 : this._flags & ~1;
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this._observers);
            }
        };
        Downlink.prototype.keepSynced = function (keepSynced) {
            if (keepSynced === void 0) {
                return (this._flags & 2) !== 0;
            }
            else {
                var flags = keepSynced ? this._flags | 2 : this._flags & ~2;
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this._observers);
            }
        };
        Downlink.prototype.observe = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            var newObservers = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newObservers[i] = oldObservers[i];
            }
            newObservers[n] = observer;
            this._observers = newObservers;
            return this;
        };
        Downlink.prototype.unobserve = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var oldObserver = oldObservers[i];
                var found = oldObserver === observer;
                if (!found) {
                    for (var key in oldObserver) {
                        if (oldObserver[key] === observer) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    if (n > 1) {
                        var newObservers = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newObservers[j] = oldObservers[j];
                        }
                        for (var j = i + 1; j < n; j += 1) {
                            newObservers[j - 1] = oldObservers[j];
                        }
                        this._observers = newObservers;
                    }
                    else {
                        this._observers = null;
                    }
                    break;
                }
            }
            return this;
        };
        Downlink.prototype.onEvent = function (onEvent) {
            return this.observe({ onEvent: onEvent });
        };
        Downlink.prototype.onCommand = function (onCommand) {
            return this.observe({ onCommand: onCommand });
        };
        Downlink.prototype.willLink = function (willLink) {
            return this.observe({ willLink: willLink });
        };
        Downlink.prototype.didLink = function (didLink) {
            return this.observe({ didLink: didLink });
        };
        Downlink.prototype.willSync = function (willSync) {
            return this.observe({ willSync: willSync });
        };
        Downlink.prototype.didSync = function (didSync) {
            return this.observe({ didSync: didSync });
        };
        Downlink.prototype.willUnlink = function (willUnlink) {
            return this.observe({ willUnlink: willUnlink });
        };
        Downlink.prototype.didUnlink = function (didUnlink) {
            return this.observe({ didUnlink: didUnlink });
        };
        Downlink.prototype.didConnect = function (didConnect) {
            return this.observe({ didConnect: didConnect });
        };
        Downlink.prototype.didDisconnect = function (didDisconnect) {
            return this.observe({ didDisconnect: didDisconnect });
        };
        Downlink.prototype.didClose = function (didClose) {
            return this.observe({ didClose: didClose });
        };
        Downlink.prototype.didFail = function (didFail) {
            return this.observe({ didFail: didFail });
        };
        Downlink.prototype.isConnected = function () {
            return this._model ? this._model.isConnected() : false;
        };
        Downlink.prototype.isAuthenticated = function () {
            return this._model ? this._model.isAuthenticated() : false;
        };
        Downlink.prototype.isLinked = function () {
            return this._model ? this._model.isLinked() : false;
        };
        Downlink.prototype.isSynced = function () {
            return this._model ? this._model.isSynced() : false;
        };
        Downlink.prototype.session = function () {
            return this._model ? this._model.session() : Value.absent();
        };
        Downlink.prototype.onEventMessage = function (message) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.onEvent) {
                    observer.onEvent(message.body(), this);
                }
            }
        };
        Downlink.prototype.onCommandMessage = function (body) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.onCommand) {
                    observer.onCommand(body, this);
                }
            }
        };
        Downlink.prototype.onLinkRequest = function (request) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willLink) {
                    observer.willLink(this);
                }
            }
        };
        Downlink.prototype.onLinkedResponse = function (response) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didLink) {
                    observer.didLink(this);
                }
            }
        };
        Downlink.prototype.onSyncRequest = function (request) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willSync) {
                    observer.willSync(this);
                }
            }
        };
        Downlink.prototype.onSyncedResponse = function (response) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didSync) {
                    observer.didSync(this);
                }
            }
        };
        Downlink.prototype.onUnlinkRequest = function (request) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willUnlink) {
                    observer.willUnlink(this);
                }
            }
        };
        Downlink.prototype.onUnlinkedResponse = function (response) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didUnlink) {
                    observer.didUnlink(this);
                }
            }
        };
        Downlink.prototype.hostDidConnect = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didConnect) {
                    observer.didConnect(this);
                }
            }
        };
        Downlink.prototype.hostDidDisconnect = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDisconnect) {
                    observer.didDisconnect(this);
                }
            }
        };
        Downlink.prototype.hostDidFail = function (error) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didFail) {
                    observer.didFail(error, this);
                }
            }
        };
        Downlink.prototype.command = function (body) {
            this._model.command(body);
        };
        Downlink.prototype.close = function () {
            if (this._owner) {
                this._owner.removeDownlink(this);
            }
            if (this._model) {
                this._model.removeDownlink(this);
            }
        };
        Downlink.prototype.openUp = function (host) {
        };
        Downlink.prototype.closeUp = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didClose) {
                    observer.didClose(this);
                }
            }
        };
        Downlink.initForm = function () {
            if (!Downlink._initForm) {
                Downlink._initForm = new DownlinkInitForm();
            }
            return Downlink._initForm;
        };
        return Downlink;
    }());
    var DownlinkInitForm = (function (_super) {
        __extends(DownlinkInitForm, _super);
        function DownlinkInitForm() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DownlinkInitForm.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return "link";
            }
            else if (tag !== void 0) {
                return _super.prototype.tag.call(this, tag);
            }
            else {
                return this;
            }
        };
        DownlinkInitForm.prototype.mold = function (init) {
            if (init) {
                var header = Record.create();
                if (init.hostUri !== void 0) {
                    header.slot("host", Uri.fromAny(init.hostUri).toString());
                }
                if (init.nodeUri !== void 0) {
                    header.slot("node", Uri.fromAny(init.nodeUri).toString());
                }
                if (init.laneUri !== void 0) {
                    header.slot("lane", Uri.fromAny(init.laneUri).toString());
                }
                if (init.prio !== void 0) {
                    header.slot("prio", init.prio);
                }
                if (init.rate !== void 0) {
                    header.slot("rate", init.rate);
                }
                if (init.body !== void 0) {
                    header.slot("body", init.body);
                }
                if (init.type !== void 0) {
                    header.slot("type", init.type);
                }
                return Record.of(Attr.of("link", header));
            }
            else {
                return Item.extant();
            }
        };
        DownlinkInitForm.prototype.cast = function (item) {
            var value = item.toValue();
            var header = value.get("link");
            if (header.isDefined()) {
                var init = {};
                var host = header.get("host");
                if (host.isDefined()) {
                    init.hostUri = host.cast(Uri.form());
                }
                var node = header.get("node");
                if (node.isDefined()) {
                    init.nodeUri = node.cast(Uri.form());
                }
                var lane = header.get("lane");
                if (lane.isDefined()) {
                    init.laneUri = lane.cast(Uri.form());
                }
                var prio = header.get("prio");
                if (prio.isDefined()) {
                    init.prio = prio.numberValue();
                }
                var rate = header.get("rate");
                if (rate.isDefined()) {
                    init.rate = rate.numberValue();
                }
                var body = header.get("body");
                if (body.isDefined()) {
                    init.body = body;
                }
                var type = header.get("type");
                if (type.isDefined()) {
                    init.type = type.stringValue();
                }
                return init;
            }
            return void 0;
        };
        return DownlinkInitForm;
    }(Form));

    var EventDownlinkModel = (function (_super) {
        __extends(EventDownlinkModel, _super);
        function EventDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
            return _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        }
        EventDownlinkModel.prototype.type = function () {
            return "event";
        };
        return EventDownlinkModel;
    }(DownlinkModel));

    var EventDownlink = (function (_super) {
        __extends(EventDownlink, _super);
        function EventDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
            if (flags === void 0) { flags = 1; }
            return _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
        }
        EventDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
            return new EventDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers);
        };
        EventDownlink.prototype.type = function () {
            return "event";
        };
        EventDownlink.prototype.observe = function (observer) {
            return _super.prototype.observe.call(this, observer);
        };
        EventDownlink.prototype.open = function () {
            var laneUri = this._laneUri;
            if (laneUri.isEmpty()) {
                throw new Error("no lane");
            }
            var nodeUri = this._nodeUri;
            if (nodeUri.isEmpty()) {
                throw new Error("no node");
            }
            var hostUri = this._hostUri;
            if (hostUri.isEmpty()) {
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
            if (model) {
                if (!(model instanceof EventDownlinkModel)) {
                    throw new Error("downlink type mismatch");
                }
                model.addDownlink(this);
            }
            else {
                model = new EventDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body);
                model.addDownlink(this);
                this._context.openDownlink(model);
            }
            this._model = model;
            if (this._owner) {
                this._owner.addDownlink(this);
            }
            return this;
        };
        return EventDownlink;
    }(Downlink));

    var ListDownlinkModel = (function (_super) {
        __extends(ListDownlinkModel, _super);
        function ListDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
            if (state === void 0) { state = new STree(); }
            var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
            _this._state = state;
            return _this;
        }
        ListDownlinkModel.prototype.type = function () {
            return "list";
        };
        ListDownlinkModel.prototype.isEmpty = function () {
            return this._state.isEmpty();
        };
        Object.defineProperty(ListDownlinkModel.prototype, "length", {
            get: function () {
                return this._state.length;
            },
            enumerable: true,
            configurable: true
        });
        ListDownlinkModel.prototype.get = function (index, key) {
            return this._state.get(index, key) || Value.absent();
        };
        ListDownlinkModel.prototype.getEntry = function (index, key) {
            return this._state.getEntry(index, key);
        };
        ListDownlinkModel.prototype.set = function (index, newValue, key) {
            if (key !== void 0) {
                index = this._state.lookup(key, index);
                if (index < 0) {
                    throw new RangeError("" + key);
                }
            }
            if (index < 0 || index >= this._state.length) {
                throw new RangeError("" + index);
            }
            newValue = this.listWillUpdate(index, newValue);
            var oldEntry = this._state.getEntry(index);
            this._state.set(index, newValue);
            this.listDidUpdate(index, newValue, oldEntry[1]);
            var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
            this.command(Attr.of("update", header).concat(newValue));
            return this;
        };
        ListDownlinkModel.prototype.insert = function (index, newValue, key) {
            if (index < 0 || index > this._state.length) {
                throw new RangeError("" + index);
            }
            newValue = this.listWillUpdate(index, newValue);
            this._state.insert(index, newValue, key);
            var newEntry = this._state.getEntry(index);
            this.listDidUpdate(index, newValue, Value.absent());
            var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
            this.command(Attr.of("update", header).concat(newValue));
            return this;
        };
        ListDownlinkModel.prototype.remove = function (index, key) {
            if (key !== void 0) {
                index = this._state.lookup(key, index);
                if (index < 0) {
                    throw new RangeError("" + key);
                }
            }
            if (index < 0 || index > this._state.length) {
                throw new RangeError("" + index);
            }
            this.listWillRemove(index);
            var oldEntry = this._state.getEntry(index);
            this._state.remove(index);
            this.listDidRemove(index, oldEntry[1]);
            var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
            this.command(Record.create(1).attr("remove", header));
            return this;
        };
        ListDownlinkModel.prototype.push = function () {
            var newValues = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newValues[_i] = arguments[_i];
            }
            for (var i = 0; i < newValues.length; i += 1) {
                var index = this._state.length + i;
                var newValue = this.listWillUpdate(index, newValues[i]);
                this._state.insert(index, newValue);
                var newEntry = this._state.getEntry(index);
                this.listDidUpdate(index, newValue, Value.absent());
                var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
                this.command(Attr.of("update", header).concat(newValue));
            }
            return this._state.length;
        };
        ListDownlinkModel.prototype.pop = function () {
            var index = this._state.length - 1;
            if (index >= 0) {
                this.listWillRemove(index);
                var oldEntry = this._state.getEntry(index);
                this._state.remove(index);
                this.listDidRemove(index, oldEntry[1]);
                var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
                this.command(Record.create(1).attr("remove", header));
                return oldEntry[1];
            }
            else {
                return Value.absent();
            }
        };
        ListDownlinkModel.prototype.unshift = function () {
            var newValues = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newValues[_i] = arguments[_i];
            }
            for (var i = newValues.length - 1; i >= 0; i -= 1) {
                var newValue = this.listWillUpdate(0, newValues[i]);
                this._state.insert(0, newValue);
                var newEntry = this._state.getEntry(0);
                this.listDidUpdate(0, newValue, Value.absent());
                var header = Record.create(2).slot("key", newEntry[0]).slot("index", 0);
                this.command(Attr.of("update", header).concat(newValue));
            }
            return this._state.length;
        };
        ListDownlinkModel.prototype.shift = function () {
            if (this._state.length > 0) {
                this.listWillRemove(0);
                var oldEntry = this._state.getEntry(0);
                this._state.remove(0);
                this.listDidRemove(0, oldEntry[1]);
                var header = Record.create(2).slot("key", oldEntry[0]).slot("index", 0);
                this.command(Record.create(1).attr("remove", header));
                return oldEntry[1];
            }
            else {
                return Value.absent();
            }
        };
        ListDownlinkModel.prototype.move = function (fromIndex, toIndex, key) {
            if (key !== void 0) {
                fromIndex = this._state.lookup(key, fromIndex);
                if (fromIndex < 0) {
                    throw new RangeError("" + key);
                }
            }
            if (fromIndex < 0 || fromIndex >= this._state.length) {
                throw new RangeError("" + fromIndex);
            }
            if (toIndex < 0 || toIndex >= this._state.length) {
                throw new RangeError("" + toIndex);
            }
            if (fromIndex !== toIndex) {
                var entry = this._state.getEntry(fromIndex);
                this.listWillMove(fromIndex, toIndex, entry[1]);
                this._state.remove(fromIndex).insert(toIndex, entry[1], entry[0]);
                this.listDidMove(fromIndex, toIndex, entry[1]);
                var header = Record.create(2).slot("key", entry[0]).slot("from", fromIndex).slot("to", toIndex);
                this.command(Record.create(1).attr("move", header));
            }
            return this;
        };
        ListDownlinkModel.prototype.splice = function (start, deleteCount) {
            var newValues = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newValues[_i - 2] = arguments[_i];
            }
            if (start < 0) {
                start = this._state.length + start;
            }
            start = Math.min(Math.max(0, start), this._state.length);
            if (deleteCount === void 0) {
                deleteCount = this._state.length - start;
            }
            var deleted = [];
            for (var i = start, n = start + deleteCount; i < n; i += 1) {
                this.listWillRemove(start);
                var oldEntry = this._state.getEntry(start);
                deleted.push(oldEntry[1]);
                this._state.remove(start);
                this.listDidRemove(start, oldEntry[1]);
                var header = Record.create(2).slot("key", oldEntry[0]).slot("index", start);
                this.command(Record.create(1).attr("remove", header));
            }
            for (var i = 0; i < newValues.length; i += 1) {
                var index = start + i;
                var newValue = this.listWillUpdate(index, newValues[i]);
                this._state.insert(index, newValue);
                var newEntry = this._state.getEntry(index);
                this.listDidUpdate(index, newValue, Value.absent());
                var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
                this.command(Attr.of("update", header).concat(newValue));
            }
            return deleted;
        };
        ListDownlinkModel.prototype.clear = function () {
            this.listWillClear();
            this._state.clear();
            this.listDidClear();
            this.command(Record.create(1).attr("clear"));
        };
        ListDownlinkModel.prototype.forEach = function (callback, thisArg) {
            return this._state.forEach(function (value, index, tree, key) {
                return callback.call(thisArg, value, index, this, key);
            }, this);
        };
        ListDownlinkModel.prototype.values = function () {
            return this._state.values();
        };
        ListDownlinkModel.prototype.keys = function () {
            return this._state.keys();
        };
        ListDownlinkModel.prototype.entries = function () {
            return this._state.entries();
        };
        ListDownlinkModel.prototype.snapshot = function () {
            return this._state.clone();
        };
        ListDownlinkModel.prototype.setState = function (state) {
            this._state = state;
        };
        ListDownlinkModel.prototype.onEventMessage = function (message, host) {
            _super.prototype.onEventMessage.call(this, message, host);
            var event = message.body();
            var tag = event.tag();
            if (tag === "update") {
                var header = event.head().toValue();
                var index = this._state.lookup(header.get("key"), header.get("index").numberValue());
                if (index >= 0) {
                    this.onUpdateEvent(index, event.body(), header.get("key"));
                }
                else {
                    this.onInsertEvent(header.get("index").numberValue(0), event.body(), header.get("key"));
                }
            }
            else if (tag === "move") {
                var header = event.head().toValue();
                var index = this._state.lookup(header.get("key"), header.get("from").numberValue());
                if (index >= 0) {
                    this.onMoveEvent(index, header.get("to").numberValue(0), header.get("key"));
                }
            }
            else if (tag === "remove") {
                var header = event.head().toValue();
                var index = this._state.lookup(header.get("key"), header.get("index").numberValue());
                if (index >= 0) {
                    this.onRemoveEvent(index, header.get("key"));
                }
            }
            else if (tag === "drop") {
                var header = event.head();
                this.onDropEvent(header.numberValue(0));
            }
            else if (tag === "take") {
                var header = event.head();
                this.onTakeEvent(header.numberValue(0));
            }
            else if (tag === "clear") {
                this.onClearEvent();
            }
        };
        ListDownlinkModel.prototype.onInsertEvent = function (index, newValue, key) {
            newValue = this.listWillUpdate(index, newValue);
            this._state.insert(index, newValue, key);
            this.listDidUpdate(index, newValue, Value.absent());
        };
        ListDownlinkModel.prototype.onUpdateEvent = function (index, newValue, key) {
            newValue = this.listWillUpdate(index, newValue);
            var oldValue = this._state.get(index) || Value.absent();
            this._state.set(index, newValue);
            this.listDidUpdate(index, newValue, oldValue);
        };
        ListDownlinkModel.prototype.onMoveEvent = function (fromIndex, toIndex, key) {
            toIndex = Math.min(Math.max(0, toIndex), this._state.length);
            if (fromIndex !== toIndex) {
                var value = this._state.get(fromIndex) || Value.absent();
                this.listWillMove(fromIndex, toIndex, value);
                this._state.remove(fromIndex).insert(toIndex, value, key);
                this.listDidMove(fromIndex, toIndex, value);
            }
        };
        ListDownlinkModel.prototype.onRemoveEvent = function (index, key) {
            this.listWillRemove(index);
            var oldValue = this._state.get(index) || Value.absent();
            this._state.remove(index);
            this.listDidRemove(index, oldValue);
        };
        ListDownlinkModel.prototype.onDropEvent = function (lower) {
            this.listWillDrop(lower);
            this._state.drop(lower);
            this.listDidDrop(lower);
        };
        ListDownlinkModel.prototype.onTakeEvent = function (upper) {
            this.listWillTake(upper);
            this._state.take(upper);
            this.listDidTake(upper);
        };
        ListDownlinkModel.prototype.onClearEvent = function () {
            this.listWillClear();
            this._state.clear();
            this.listDidClear();
        };
        ListDownlinkModel.prototype.listWillUpdate = function (index, newValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                newValue = this._views[i].listWillUpdate(index, newValue);
            }
            return newValue;
        };
        ListDownlinkModel.prototype.listDidUpdate = function (index, newValue, oldValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidUpdate(index, newValue, oldValue);
            }
        };
        ListDownlinkModel.prototype.listWillMove = function (fromIndex, toIndex, value) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listWillMove(fromIndex, toIndex, value);
            }
        };
        ListDownlinkModel.prototype.listDidMove = function (fromIndex, toIndex, value) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidMove(fromIndex, toIndex, value);
            }
        };
        ListDownlinkModel.prototype.listWillRemove = function (index) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listWillRemove(index);
            }
        };
        ListDownlinkModel.prototype.listDidRemove = function (index, oldValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidRemove(index, oldValue);
            }
        };
        ListDownlinkModel.prototype.listWillDrop = function (lower) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listWillDrop(lower);
            }
        };
        ListDownlinkModel.prototype.listDidDrop = function (lower) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidDrop(lower);
            }
        };
        ListDownlinkModel.prototype.listWillTake = function (upper) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listWillTake(upper);
            }
        };
        ListDownlinkModel.prototype.listDidTake = function (upper) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidTake(upper);
            }
        };
        ListDownlinkModel.prototype.listWillClear = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listWillClear();
            }
        };
        ListDownlinkModel.prototype.listDidClear = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].listDidClear();
            }
        };
        return ListDownlinkModel;
    }(DownlinkModel));

    var ListDownlink = (function (_super) {
        __extends(ListDownlink, _super);
        function ListDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
            if (flags === void 0) { flags = 3; }
            var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
            if (init) {
                var observer = _this._observers[_this._observers.length - 1];
                observer.willUpdate = init.willUpdate || observer.willUpdate;
                observer.didUpdate = init.didUpdate || observer.didUpdate;
                observer.willMove = init.willMove || observer.willMove;
                observer.didMove = init.didMove || observer.didMove;
                observer.willRemove = init.willRemove || observer.willRemove;
                observer.didRemove = init.didRemove || observer.didRemove;
                observer.willDrop = init.willDrop || observer.willDrop;
                observer.didDrop = init.didDrop || observer.didDrop;
                observer.willTake = init.willTake || observer.willTake;
                observer.didTake = init.didTake || observer.didTake;
                observer.willClear = init.willClear || observer.willClear;
                observer.didClear = init.didClear || observer.didClear;
                valueForm = init.valueForm ? init.valueForm : valueForm;
            }
            _this._valueForm = valueForm || Form.forValue();
            _this._state0 = state0;
            return _this;
        }
        ListDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
            if (arguments.length === 10) {
                valueForm = this._valueForm;
                state0 = this._state0;
            }
            return new ListDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0);
        };
        ListDownlink.prototype.type = function () {
            return "list";
        };
        ListDownlink.prototype.valueForm = function (valueForm) {
            if (valueForm === void 0) {
                return this._valueForm;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, valueForm, this._state0);
            }
        };
        ListDownlink.prototype.isEmpty = function () {
            return this._model.isEmpty();
        };
        Object.defineProperty(ListDownlink.prototype, "length", {
            get: function () {
                return this._model.length;
            },
            enumerable: true,
            configurable: true
        });
        ListDownlink.prototype.get = function (index, id) {
            var value = this._model.get(index, id);
            return value.coerce(this._valueForm);
        };
        ListDownlink.prototype.getEntry = function (index, id) {
            var entry = this._model.getEntry(index, id);
            if (entry) {
                return [entry[0].coerce(this._valueForm), entry[1]];
            }
            return void 0;
        };
        ListDownlink.prototype.set = function (index, newObject, id) {
            var newValue = this._valueForm.mold(newObject);
            this._model.set(index, newValue, id);
            return this;
        };
        ListDownlink.prototype.insert = function (index, newObject, id) {
            var newValue = this._valueForm.mold(newObject);
            this._model.insert(index, newValue, id);
            return this;
        };
        ListDownlink.prototype.remove = function (index, id) {
            this._model.remove(index, id);
            return this;
        };
        ListDownlink.prototype.push = function () {
            var newObjects = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newObjects[_i] = arguments[_i];
            }
            var newValues = new Array(newObjects.length);
            for (var i = 0; i < newObjects.length; i += 1) {
                newValues[i] = this._valueForm.mold(newObjects[i]);
            }
            return this._model.push.apply(this._model, newValues);
        };
        ListDownlink.prototype.pop = function () {
            var value = this._model.pop();
            return value.coerce(this._valueForm);
        };
        ListDownlink.prototype.unshift = function () {
            var newObjects = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newObjects[_i] = arguments[_i];
            }
            var newValues = new Array(newObjects.length);
            for (var i = 0; i < newObjects.length; i += 1) {
                newValues[i] = this._valueForm.mold(newObjects[i]);
            }
            return this._model.unshift.apply(this._model, newValues);
        };
        ListDownlink.prototype.shift = function () {
            var value = this._model.shift();
            return value.coerce(this._valueForm);
        };
        ListDownlink.prototype.move = function (fromIndex, toIndex, id) {
            this._model.move(fromIndex, toIndex, id);
            return this;
        };
        ListDownlink.prototype.splice = function (start, deleteCount) {
            var _a;
            var newObjects = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newObjects[_i - 2] = arguments[_i];
            }
            var newValues = new Array(newObjects.length);
            for (var i = 0; i < newObjects.length; i += 1) {
                newValues[i] = this._valueForm.mold(newObjects[i]);
            }
            var oldValues = (_a = this._model).splice.apply(_a, [start, deleteCount].concat(newValues));
            var oldObjects = new Array(oldValues.length);
            for (var i = 0; i < oldValues.length; i += 1) {
                oldObjects[i] = oldValues[i].coerce(this._valueForm);
            }
            return oldObjects;
        };
        ListDownlink.prototype.clear = function () {
            this._model.clear();
        };
        ListDownlink.prototype.forEach = function (callback, thisArg) {
            if (this._valueForm === Form.forValue()) {
                return this._model._state.forEach(callback, thisArg);
            }
            else {
                return this._model._state.forEach(function (value, index, tree, id) {
                    var object = value.coerce(this._valueForm);
                    return callback.call(thisArg, object, index, this, id);
                }, this);
            }
        };
        ListDownlink.prototype.values = function () {
            var cursor = this._model.values();
            if (this._valueForm === Form.forValue()) {
                return cursor;
            }
            else {
                return new ValueCursor(cursor, this._valueForm);
            }
        };
        ListDownlink.prototype.keys = function () {
            return this._model.keys();
        };
        ListDownlink.prototype.entries = function () {
            var cursor = this._model.entries();
            if (this._valueForm === Form.forValue()) {
                return cursor;
            }
            else {
                return new ValueEntryCursor(cursor, Form.forValue(), this._valueForm);
            }
        };
        ListDownlink.prototype.snapshot = function () {
            return this._model.snapshot();
        };
        ListDownlink.prototype.setState = function (state) {
            this._model.setState(state);
        };
        ListDownlink.prototype.observe = function (observer) {
            return _super.prototype.observe.call(this, observer);
        };
        ListDownlink.prototype.willUpdate = function (willUpdate) {
            return this.observe({ willUpdate: willUpdate });
        };
        ListDownlink.prototype.didUpdate = function (didUpdate) {
            return this.observe({ didUpdate: didUpdate });
        };
        ListDownlink.prototype.willMove = function (willMove) {
            return this.observe({ willMove: willMove });
        };
        ListDownlink.prototype.didMove = function (didMove) {
            return this.observe({ didMove: didMove });
        };
        ListDownlink.prototype.willRemove = function (willRemove) {
            return this.observe({ willRemove: willRemove });
        };
        ListDownlink.prototype.didRemove = function (didRemove) {
            return this.observe({ didRemove: didRemove });
        };
        ListDownlink.prototype.willDrop = function (willDrop) {
            return this.observe({ willDrop: willDrop });
        };
        ListDownlink.prototype.didDrop = function (didDrop) {
            return this.observe({ didDrop: didDrop });
        };
        ListDownlink.prototype.willTake = function (willTake) {
            return this.observe({ willTake: willTake });
        };
        ListDownlink.prototype.didTake = function (didTake) {
            return this.observe({ didTake: didTake });
        };
        ListDownlink.prototype.willClear = function (willClear) {
            return this.observe({ willClear: willClear });
        };
        ListDownlink.prototype.didClear = function (didClear) {
            return this.observe({ didClear: didClear });
        };
        ListDownlink.prototype.listWillUpdate = function (index, newValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var newObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willUpdate) {
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    var newResult = observer.willUpdate(index, newObject, this);
                    if (newResult !== void 0) {
                        newObject = newResult;
                        newValue = this._valueForm.mold(newObject);
                    }
                }
            }
            return newValue;
        };
        ListDownlink.prototype.listDidUpdate = function (index, newValue, oldValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var newObject;
            var oldObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didUpdate) {
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    if (oldObject === void 0) {
                        oldObject = oldValue.coerce(this._valueForm);
                    }
                    observer.didUpdate(index, newObject, oldObject, this);
                }
            }
        };
        ListDownlink.prototype.listWillMove = function (fromIndex, toIndex, value) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var object;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willMove) {
                    if (object === void 0) {
                        object = value.coerce(this._valueForm);
                    }
                    observer.willMove(fromIndex, toIndex, object, this);
                }
            }
        };
        ListDownlink.prototype.listDidMove = function (fromIndex, toIndex, value) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var object;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didMove) {
                    if (object === void 0) {
                        object = value.coerce(this._valueForm);
                    }
                    observer.didMove(fromIndex, toIndex, object, this);
                }
            }
        };
        ListDownlink.prototype.listWillRemove = function (index) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willRemove) {
                    observer.willRemove(index, this);
                }
            }
        };
        ListDownlink.prototype.listDidRemove = function (index, oldValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var oldObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didRemove) {
                    if (oldObject === void 0) {
                        oldObject = oldValue.coerce(this._valueForm);
                    }
                    observer.didRemove(index, oldObject, this);
                }
            }
        };
        ListDownlink.prototype.listWillDrop = function (lower) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willDrop) {
                    observer.willDrop(lower, this);
                }
            }
        };
        ListDownlink.prototype.listDidDrop = function (lower) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDrop) {
                    observer.didDrop(lower, this);
                }
            }
        };
        ListDownlink.prototype.listWillTake = function (upper) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willTake) {
                    observer.willTake(upper, this);
                }
            }
        };
        ListDownlink.prototype.listDidTake = function (upper) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didTake) {
                    observer.didTake(upper, this);
                }
            }
        };
        ListDownlink.prototype.listWillClear = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willClear) {
                    observer.willClear(this);
                }
            }
        };
        ListDownlink.prototype.listDidClear = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didClear) {
                    observer.didClear(this);
                }
            }
        };
        ListDownlink.prototype.initialState = function (state0) {
            if (state0 === void 0) {
                return this._state0 || null;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._valueForm, state0 || void 0);
            }
        };
        ListDownlink.prototype.didAliasModel = function () {
            this.onLinkedResponse();
            this._model._state.forEach(function (value, index) {
                this.listDidUpdate(index, value, Value.absent());
            }, this);
            this.onSyncedResponse();
        };
        ListDownlink.prototype.open = function () {
            var laneUri = this._laneUri;
            if (laneUri.isEmpty()) {
                throw new Error("no lane");
            }
            var nodeUri = this._nodeUri;
            if (nodeUri.isEmpty()) {
                throw new Error("no node");
            }
            var hostUri = this._hostUri;
            if (hostUri.isEmpty()) {
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
            if (model) {
                if (!(model instanceof ListDownlinkModel)) {
                    throw new Error("downlink type mismatch");
                }
                model.addDownlink(this);
                this._model = model;
                this.didAliasModel();
            }
            else {
                model = new ListDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
                model.addDownlink(this);
                this._context.openDownlink(model);
                this._model = model;
            }
            if (this._owner) {
                this._owner.addDownlink(this);
            }
            return this;
        };
        return ListDownlink;
    }(Downlink));

    var MapDownlinkModel = (function (_super) {
        __extends(MapDownlinkModel, _super);
        function MapDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
            if (state === void 0) { state = new BTree(); }
            var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
            _this._state = state;
            return _this;
        }
        MapDownlinkModel.prototype.type = function () {
            return "map";
        };
        Object.defineProperty(MapDownlinkModel.prototype, "size", {
            get: function () {
                return this._state.size;
            },
            enumerable: true,
            configurable: true
        });
        MapDownlinkModel.prototype.isEmpty = function () {
            return this._state.isEmpty();
        };
        MapDownlinkModel.prototype.has = function (key) {
            return this._state.has(key);
        };
        MapDownlinkModel.prototype.get = function (key) {
            return this._state.get(key) || Value.absent();
        };
        MapDownlinkModel.prototype.getEntry = function (index) {
            return this._state.getEntry(index);
        };
        MapDownlinkModel.prototype.set = function (key, newValue) {
            newValue = this.mapWillUpdate(key, newValue);
            var oldValue = this._state.get(key) || Value.absent();
            this._state.set(key, newValue);
            this.mapDidUpdate(key, newValue, oldValue);
            var header = Record.create(1).slot("key", key);
            this.command(Attr.of("update", header).concat(newValue));
            return this;
        };
        MapDownlinkModel.prototype.delete = function (key) {
            if (this._state.has(key)) {
                this.mapWillRemove(key);
                var oldValue = this._state.get(key) || Value.absent();
                this._state.delete(key);
                this.mapDidRemove(key, oldValue);
                var header = Record.create(1).slot("key", key);
                this.command(Record.create(1).attr("remove", header));
                return true;
            }
            else {
                return false;
            }
        };
        MapDownlinkModel.prototype.drop = function (lower) {
            this.mapWillDrop(lower);
            this._state.drop(lower);
            this.mapDidDrop(lower);
            this.command(Record.create(1).attr("drop", lower));
            return this;
        };
        MapDownlinkModel.prototype.take = function (upper) {
            this.mapWillTake(upper);
            this._state.take(upper);
            this.mapDidTake(upper);
            this.command(Record.create(1).attr("take", upper));
            return this;
        };
        MapDownlinkModel.prototype.clear = function () {
            this.mapWillClear();
            this._state.clear();
            this.mapDidClear();
            this.command(Record.create(1).attr("clear"));
        };
        MapDownlinkModel.prototype.forEach = function (callback, thisArg) {
            return this._state.forEach(function (key, value) {
                return callback.call(thisArg, key, value, this);
            }, this);
        };
        MapDownlinkModel.prototype.keys = function () {
            return this._state.keys();
        };
        MapDownlinkModel.prototype.values = function () {
            return this._state.values();
        };
        MapDownlinkModel.prototype.entries = function () {
            return this._state.entries();
        };
        MapDownlinkModel.prototype.snapshot = function () {
            return this._state.clone();
        };
        MapDownlinkModel.prototype.setState = function (state) {
            this._state = state;
        };
        MapDownlinkModel.prototype.onEventMessage = function (message, host) {
            _super.prototype.onEventMessage.call(this, message, host);
            var event = message.body();
            var tag = event.tag();
            if (tag === "update") {
                var header = event.head().toValue();
                this.onUpdateEvent(header.get("key"), event.body());
            }
            else if (tag === "remove") {
                var header = event.head().toValue();
                this.onRemoveEvent(header.get("key"));
            }
            else if (tag === "drop") {
                var header = event.head().toValue();
                this.onDropEvent(header.numberValue(0));
            }
            else if (tag === "take") {
                var header = event.head().toValue();
                this.onTakeEvent(header.numberValue(0));
            }
            else if (tag === "clear") {
                this.onClearEvent();
            }
        };
        MapDownlinkModel.prototype.onUpdateEvent = function (key, newValue) {
            newValue = this.mapWillUpdate(key, newValue);
            var oldValue = this._state.get(key) || Value.absent();
            this._state.set(key, newValue);
            this.mapDidUpdate(key, newValue, oldValue);
        };
        MapDownlinkModel.prototype.onRemoveEvent = function (key) {
            this.mapWillRemove(key);
            var oldValue = this._state.get(key) || Value.absent();
            this._state.delete(key);
            this.mapDidRemove(key, oldValue);
        };
        MapDownlinkModel.prototype.onDropEvent = function (lower) {
            this.mapWillDrop(lower);
            this._state.drop(lower);
            this.mapDidDrop(lower);
        };
        MapDownlinkModel.prototype.onTakeEvent = function (upper) {
            this.mapWillTake(upper);
            this._state.take(upper);
            this.mapDidTake(upper);
        };
        MapDownlinkModel.prototype.onClearEvent = function () {
            this.mapWillClear();
            this._state.clear();
            this.mapDidClear();
        };
        MapDownlinkModel.prototype.mapWillUpdate = function (key, newValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                newValue = this._views[i].mapWillUpdate(key, newValue);
            }
            return newValue;
        };
        MapDownlinkModel.prototype.mapDidUpdate = function (key, newValue, oldValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapDidUpdate(key, newValue, oldValue);
            }
        };
        MapDownlinkModel.prototype.mapWillRemove = function (key) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapWillRemove(key);
            }
        };
        MapDownlinkModel.prototype.mapDidRemove = function (key, oldValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapDidRemove(key, oldValue);
            }
        };
        MapDownlinkModel.prototype.mapWillDrop = function (lower) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapWillDrop(lower);
            }
        };
        MapDownlinkModel.prototype.mapDidDrop = function (lower) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapDidDrop(lower);
            }
        };
        MapDownlinkModel.prototype.mapWillTake = function (upper) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapWillTake(upper);
            }
        };
        MapDownlinkModel.prototype.mapDidTake = function (upper) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapDidTake(upper);
            }
        };
        MapDownlinkModel.prototype.mapWillClear = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapWillClear();
            }
        };
        MapDownlinkModel.prototype.mapDidClear = function () {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].mapDidClear();
            }
        };
        return MapDownlinkModel;
    }(DownlinkModel));

    var MapDownlink = (function (_super) {
        __extends(MapDownlink, _super);
        function MapDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0) {
            if (flags === void 0) { flags = 3; }
            var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
            if (init) {
                var observer = _this._observers[_this._observers.length - 1];
                observer.willUpdate = init.willUpdate || observer.willUpdate;
                observer.didUpdate = init.didUpdate || observer.didUpdate;
                observer.willRemove = init.willRemove || observer.willRemove;
                observer.didRemove = init.didRemove || observer.didRemove;
                observer.willDrop = init.willDrop || observer.willDrop;
                observer.didDrop = init.didDrop || observer.didDrop;
                observer.willTake = init.willTake || observer.willTake;
                observer.didTake = init.didTake || observer.didTake;
                observer.willClear = init.willClear || observer.willClear;
                observer.didClear = init.didClear || observer.didClear;
                keyForm = init.keyForm ? init.keyForm : keyForm;
                valueForm = init.valueForm ? init.valueForm : valueForm;
            }
            _this._keyForm = keyForm || Form.forValue();
            _this._valueForm = valueForm || Form.forValue();
            _this._state0 = state0;
            _this._input = null;
            _this._effects = new BTree();
            _this._outlets = new BTree();
            _this._outputs = null;
            _this._version = -1;
            return _this;
        }
        MapDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0) {
            if (arguments.length === 10) {
                state0 = this._state0;
                keyForm = this._keyForm;
                valueForm = this._valueForm;
            }
            return new MapDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0);
        };
        MapDownlink.prototype.type = function () {
            return "map";
        };
        MapDownlink.prototype.keyForm = function (keyForm) {
            if (keyForm === void 0) {
                return this._keyForm;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, keyForm, this._valueForm, this._state0);
            }
        };
        MapDownlink.prototype.valueForm = function (valueForm) {
            if (valueForm === void 0) {
                return this._valueForm;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._keyForm, valueForm, this._state0);
            }
        };
        Object.defineProperty(MapDownlink.prototype, "size", {
            get: function () {
                return this._model.size;
            },
            enumerable: true,
            configurable: true
        });
        MapDownlink.prototype.isEmpty = function () {
            return this._model.isEmpty();
        };
        MapDownlink.prototype.has = function (key) {
            var keyObject = this._keyForm.mold(key);
            return this._model.has(keyObject);
        };
        MapDownlink.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                var keyObject = this._keyForm.mold(key);
                var value = this._model.get(keyObject);
                return value.coerce(this._valueForm);
            }
        };
        MapDownlink.prototype.getEntry = function (index) {
            var entry = this._model.getEntry(index);
            if (entry) {
                return [entry[0].coerce(this._keyForm), entry[1].coerce(this._valueForm)];
            }
            return void 0;
        };
        MapDownlink.prototype.firstKey = function () {
            var key = this._model._state.firstKey();
            if (key !== void 0) {
                var keyObject = this._keyForm.cast(key);
                if (keyObject !== void 0) {
                    return keyObject;
                }
            }
            return this._keyForm.unit();
        };
        MapDownlink.prototype.firstValue = function () {
            var value = this._model._state.firstValue();
            if (value !== void 0) {
                var object = this._valueForm.cast(value);
                if (object !== void 0) {
                    return object;
                }
            }
            return this._valueForm.unit();
        };
        MapDownlink.prototype.firstEntry = function () {
            var entry = this._model._state.firstEntry();
            if (entry !== void 0) {
                var keyObject = this._keyForm.cast(entry[0]);
                var object = this._valueForm.cast(entry[1]);
                return [keyObject, object];
            }
            return void 0;
        };
        MapDownlink.prototype.lastKey = function () {
            var key = this._model._state.lastKey();
            if (key !== void 0) {
                var keyObject = this._keyForm.cast(key);
                if (keyObject !== void 0) {
                    return keyObject;
                }
            }
            return this._keyForm.unit();
        };
        MapDownlink.prototype.lastValue = function () {
            var value = this._model._state.lastValue();
            if (value !== void 0) {
                var object = this._valueForm.cast(value);
                if (object !== void 0) {
                    return object;
                }
            }
            return this._valueForm.unit();
        };
        MapDownlink.prototype.lastEntry = function () {
            var entry = this._model._state.lastEntry();
            if (entry !== void 0) {
                var keyObject = this._keyForm.cast(entry[0]);
                var object = this._valueForm.cast(entry[1]);
                return [keyObject, object];
            }
            return void 0;
        };
        MapDownlink.prototype.nextKey = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var nextKey = this._model._state.nextKey(key);
            if (nextKey !== void 0) {
                var nextKeyObject = this._keyForm.cast(nextKey);
                if (nextKeyObject !== void 0) {
                    return nextKeyObject;
                }
            }
            return this._keyForm.unit();
        };
        MapDownlink.prototype.nextValue = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var nextValue = this._model._state.nextValue(key);
            if (nextValue !== void 0) {
                var nextObject = this._valueForm.cast(nextValue);
                if (nextObject !== void 0) {
                    return nextObject;
                }
            }
            return this._valueForm.unit();
        };
        MapDownlink.prototype.nextEntry = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var entry = this._model._state.nextEntry(key);
            if (entry !== void 0) {
                var keyObject_1 = this._keyForm.cast(entry[0]);
                var object = this._valueForm.cast(entry[1]);
                return [keyObject_1, object];
            }
            return void 0;
        };
        MapDownlink.prototype.previousKey = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var previousKey = this._model._state.previousKey(key);
            if (previousKey !== void 0) {
                var previousKeyObject = this._keyForm.cast(previousKey);
                if (previousKeyObject !== void 0) {
                    return previousKeyObject;
                }
            }
            return this._keyForm.unit();
        };
        MapDownlink.prototype.previousValue = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var previousValue = this._model._state.previousValue(key);
            if (previousValue !== void 0) {
                var previousObject = this._valueForm.cast(previousValue);
                if (previousObject !== void 0) {
                    return previousObject;
                }
            }
            return this._valueForm.unit();
        };
        MapDownlink.prototype.previousEntry = function (keyObject) {
            var key = this._keyForm.mold(keyObject);
            var entry = this._model._state.previousEntry(key);
            if (entry !== void 0) {
                var keyObject_2 = this._keyForm.cast(entry[0]);
                var object = this._valueForm.cast(entry[1]);
                return [keyObject_2, object];
            }
            return void 0;
        };
        MapDownlink.prototype.set = function (key, newValue) {
            var keyObject = this._keyForm.mold(key);
            var newObject = this._valueForm.mold(newValue);
            this._model.set(keyObject, newObject);
            return this;
        };
        MapDownlink.prototype.delete = function (key) {
            var keyObject = this._keyForm.mold(key);
            return this._model.delete(keyObject);
        };
        MapDownlink.prototype.drop = function (lower) {
            this._model.drop(lower);
            return this;
        };
        MapDownlink.prototype.take = function (upper) {
            this._model.take(upper);
            return this;
        };
        MapDownlink.prototype.clear = function () {
            this._model.clear();
        };
        MapDownlink.prototype.forEach = function (callback, thisArg) {
            if (this._keyForm === Form.forValue() && this._valueForm === Form.forValue()) {
                return this._model._state.forEach(callback, thisArg);
            }
            else {
                return this._model._state.forEach(function (key, value) {
                    var keyObject = key.coerce(this._keyForm);
                    var object = value.coerce(this._valueForm);
                    return callback.call(thisArg, keyObject, object, this);
                }, this);
            }
        };
        MapDownlink.prototype.keys = function () {
            var cursor = this._model.keys();
            if (this._keyForm === Form.forValue()) {
                return cursor;
            }
            else {
                return new ValueCursor(cursor, this._keyForm);
            }
        };
        MapDownlink.prototype.values = function () {
            var cursor = this._model.values();
            if (this._valueForm === Form.forValue()) {
                return cursor;
            }
            else {
                return new ValueCursor(cursor, this._valueForm);
            }
        };
        MapDownlink.prototype.entries = function () {
            var cursor = this._model.entries();
            if (this._keyForm === Form.forValue() && this._valueForm === Form.forValue()) {
                return cursor;
            }
            else {
                return new ValueEntryCursor(cursor, this._keyForm, this._valueForm);
            }
        };
        MapDownlink.prototype.snapshot = function () {
            return this._model.snapshot();
        };
        MapDownlink.prototype.setState = function (state) {
            this._model.setState(state);
        };
        MapDownlink.prototype.observe = function (observer) {
            return _super.prototype.observe.call(this, observer);
        };
        MapDownlink.prototype.willUpdate = function (willUpdate) {
            return this.observe({ willUpdate: willUpdate });
        };
        MapDownlink.prototype.didUpdate = function (didUpdate) {
            return this.observe({ didUpdate: didUpdate });
        };
        MapDownlink.prototype.willRemove = function (willRemove) {
            return this.observe({ willRemove: willRemove });
        };
        MapDownlink.prototype.didRemove = function (didRemove) {
            return this.observe({ didRemove: didRemove });
        };
        MapDownlink.prototype.willDrop = function (willDrop) {
            return this.observe({ willDrop: willDrop });
        };
        MapDownlink.prototype.didDrop = function (didDrop) {
            return this.observe({ didDrop: didDrop });
        };
        MapDownlink.prototype.willTake = function (willTake) {
            return this.observe({ willTake: willTake });
        };
        MapDownlink.prototype.didTake = function (didTake) {
            return this.observe({ didTake: didTake });
        };
        MapDownlink.prototype.willClear = function (willClear) {
            return this.observe({ willClear: willClear });
        };
        MapDownlink.prototype.didClear = function (didClear) {
            return this.observe({ didClear: didClear });
        };
        MapDownlink.prototype.mapWillUpdate = function (key, newValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var keyObject;
            var newObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willUpdate) {
                    if (keyObject === void 0) {
                        keyObject = key.coerce(this._keyForm);
                    }
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    var newResult = observer.willUpdate(keyObject, newObject, this);
                    if (newResult !== void 0) {
                        newObject = newResult;
                        newValue = this._valueForm.mold(newObject);
                    }
                }
            }
            return newValue;
        };
        MapDownlink.prototype.mapDidUpdate = function (key, newValue, oldValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var keyObject = key.coerce(this._keyForm);
            var newObject;
            var oldObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didUpdate) {
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    if (oldObject === void 0) {
                        oldObject = oldValue.coerce(this._valueForm);
                    }
                    observer.didUpdate(keyObject, newObject, oldObject, this);
                }
            }
            this.invalidateInputKey(keyObject, 0);
            this.reconcileInput(0);
        };
        MapDownlink.prototype.mapWillRemove = function (key) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var keyObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willRemove) {
                    if (keyObject === void 0) {
                        keyObject = key.coerce(this._keyForm);
                    }
                    observer.willRemove(keyObject, this);
                }
            }
        };
        MapDownlink.prototype.mapDidRemove = function (key, oldValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var keyObject = key.coerce(this._keyForm);
            var oldObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didRemove) {
                    if (oldObject === void 0) {
                        oldObject = oldValue.coerce(this._valueForm);
                    }
                    observer.didRemove(keyObject, oldObject, this);
                }
            }
            this.invalidateInputKey(keyObject, 1);
            this.reconcileInput(0);
        };
        MapDownlink.prototype.mapWillDrop = function (lower) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willDrop) {
                    observer.willDrop(lower, this);
                }
            }
        };
        MapDownlink.prototype.mapDidDrop = function (lower) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDrop) {
                    observer.didDrop(lower, this);
                }
            }
        };
        MapDownlink.prototype.mapWillTake = function (upper) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willTake) {
                    observer.willTake(upper, this);
                }
            }
        };
        MapDownlink.prototype.mapDidTake = function (upper) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didTake) {
                    observer.didTake(upper, this);
                }
            }
        };
        MapDownlink.prototype.mapWillClear = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willClear) {
                    observer.willClear(this);
                }
            }
        };
        MapDownlink.prototype.mapDidClear = function () {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didClear) {
                    observer.didClear(this);
                }
            }
        };
        MapDownlink.prototype.initialState = function (state0) {
            if (state0 === void 0) {
                return this._state0 || null;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._keyForm, this._valueForm, state0 || void 0);
            }
        };
        MapDownlink.prototype.didAliasModel = function () {
            this.onLinkedResponse();
            this._model._state.forEach(function (key, value) {
                this.mapDidUpdate(key, value, Value.absent());
            }, this);
            this.onSyncedResponse();
        };
        MapDownlink.prototype.open = function () {
            var laneUri = this._laneUri;
            if (laneUri.isEmpty()) {
                throw new Error("no lane");
            }
            var nodeUri = this._nodeUri;
            if (nodeUri.isEmpty()) {
                throw new Error("no node");
            }
            var hostUri = this._hostUri;
            if (hostUri.isEmpty()) {
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
            if (model) {
                if (!(model instanceof MapDownlinkModel)) {
                    throw new Error("downlink type mismatch");
                }
                model.addDownlink(this);
                this._model = model;
                this.didAliasModel();
            }
            else {
                model = new MapDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
                model.addDownlink(this);
                this._context.openDownlink(model);
                this._model = model;
            }
            if (this._owner) {
                this._owner.addDownlink(this);
            }
            return this;
        };
        MapDownlink.prototype.keyIterator = function () {
            return this.keys();
        };
        MapDownlink.prototype.input = function () {
            return this._input;
        };
        MapDownlink.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        MapDownlink.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        MapDownlink.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        MapDownlink.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        MapDownlink.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        MapDownlink.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        MapDownlink.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        MapDownlink.prototype.unbindOutputs = function () {
            var oldOutputs = this._outputs;
            if (oldOutputs !== null) {
                this._outputs = null;
                for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                    oldOutputs[i].unbindInput();
                }
            }
        };
        MapDownlink.prototype.disconnectOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        MapDownlink.prototype.invalidateOutputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        MapDownlink.prototype.invalidateInputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        MapDownlink.prototype.invalidateKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateKey(key, effect);
            }
        };
        MapDownlink.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        MapDownlink.prototype.invalidateInput = function () {
            this.invalidate();
        };
        MapDownlink.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidate();
            }
        };
        MapDownlink.prototype.reconcileOutputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        MapDownlink.prototype.reconcileInputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        MapDownlink.prototype.reconcileKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileKey(key, effect, version);
                }
            }
        };
        MapDownlink.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        MapDownlink.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        MapDownlink.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._effects.forEach(function (key) {
                    this.reconcileKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        MapDownlink.prototype.willInvalidateKey = function (key, effect) {
        };
        MapDownlink.prototype.onInvalidateKey = function (key, effect) {
        };
        MapDownlink.prototype.didInvalidateKey = function (key, effect) {
        };
        MapDownlink.prototype.willInvalidate = function () {
        };
        MapDownlink.prototype.onInvalidate = function () {
        };
        MapDownlink.prototype.didInvalidate = function () {
        };
        MapDownlink.prototype.willReconcileKey = function (key, effect, version) {
        };
        MapDownlink.prototype.onReconcileKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this.set(key, value);
                    }
                    else {
                        this.delete(key);
                    }
                }
            }
            else if (effect === 1) {
                this.delete(key);
            }
        };
        MapDownlink.prototype.didReconcileKey = function (key, effect, version) {
        };
        MapDownlink.prototype.willReconcile = function (version) {
        };
        MapDownlink.prototype.onReconcile = function (version) {
        };
        MapDownlink.prototype.didReconcile = function (version) {
        };
        MapDownlink.prototype.memoize = function () {
            return this;
        };
        MapDownlink.prototype.filter = function (func) {
            var combinator = new FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        MapDownlink.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        MapDownlink.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        MapDownlink.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return MapDownlink;
    }(Downlink));

    var ValueDownlinkModel = (function (_super) {
        __extends(ValueDownlinkModel, _super);
        function ValueDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
            if (state === void 0) { state = Value.absent(); }
            var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
            _this._state = state;
            return _this;
        }
        ValueDownlinkModel.prototype.type = function () {
            return "value";
        };
        ValueDownlinkModel.prototype.get = function () {
            return this._state;
        };
        ValueDownlinkModel.prototype.set = function (newValue) {
            newValue = this.valueWillSet(newValue);
            var oldValue = this._state;
            this.setState(newValue);
            this.valueDidSet(newValue, oldValue);
            this.command(newValue);
        };
        ValueDownlinkModel.prototype.setState = function (state) {
            this._state = state;
        };
        ValueDownlinkModel.prototype.onEventMessage = function (message, host) {
            _super.prototype.onEventMessage.call(this, message, host);
            this.onSetEvent(message.body());
        };
        ValueDownlinkModel.prototype.onSetEvent = function (newValue) {
            newValue = this.valueWillSet(newValue);
            var oldValue = this._state;
            this.setState(newValue);
            this.valueDidSet(newValue, oldValue);
        };
        ValueDownlinkModel.prototype.valueWillSet = function (newValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                newValue = this._views[i].valueWillSet(newValue);
            }
            return newValue;
        };
        ValueDownlinkModel.prototype.valueDidSet = function (newValue, oldValue) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].valueDidSet(newValue, oldValue);
            }
        };
        return ValueDownlinkModel;
    }(DownlinkModel));

    var ValueDownlink = (function (_super) {
        __extends(ValueDownlink, _super);
        function ValueDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
            if (flags === void 0) { flags = 3; }
            if (state0 === void 0) { state0 = Value.absent(); }
            var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
            if (init) {
                var observer = _this._observers[_this._observers.length - 1];
                observer.willSet = init.willSet || observer.willSet;
                observer.didSet = init.didSet || observer.didSet;
                valueForm = init.valueForm ? init.valueForm : valueForm;
            }
            _this._valueForm = valueForm || Form.forValue();
            _this._state0 = state0;
            _this._input = null;
            _this._outputs = null;
            _this._version = -1;
            return _this;
        }
        ValueDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
            if (arguments.length === 10) {
                state0 = this._state0;
                valueForm = this._valueForm;
            }
            return new ValueDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0);
        };
        ValueDownlink.prototype.type = function () {
            return "value";
        };
        ValueDownlink.prototype.valueForm = function (valueForm) {
            if (valueForm === void 0) {
                return this._valueForm;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, valueForm, this._state0);
            }
        };
        ValueDownlink.prototype.get = function () {
            var value = this._model.get();
            var object = value.coerce(this._valueForm);
            return object;
        };
        ValueDownlink.prototype.set = function (newObject) {
            var newValue = this._valueForm.mold(newObject);
            this._model.set(newValue);
        };
        ValueDownlink.prototype.setState = function (state) {
            this._model.setState(state);
        };
        ValueDownlink.prototype.observe = function (observer) {
            return _super.prototype.observe.call(this, observer);
        };
        ValueDownlink.prototype.willSet = function (willSet) {
            return this.observe({ willSet: willSet });
        };
        ValueDownlink.prototype.didSet = function (didSet) {
            return this.observe({ didSet: didSet });
        };
        ValueDownlink.prototype.valueWillSet = function (newValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var newObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.willSet) {
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    var newResult = observer.willSet(newObject, this);
                    if (newResult !== void 0) {
                        newObject = newResult;
                        newValue = this._valueForm.mold(newObject);
                    }
                }
            }
            return newValue;
        };
        ValueDownlink.prototype.valueDidSet = function (newValue, oldValue) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            var newObject;
            var oldObject;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didSet) {
                    if (newObject === void 0) {
                        newObject = newValue.coerce(this._valueForm);
                    }
                    if (oldObject === void 0) {
                        oldObject = oldValue.coerce(this._valueForm);
                    }
                    observer.didSet(newObject, oldObject, this);
                }
            }
            this.invalidate();
            this.reconcile(0);
        };
        ValueDownlink.prototype.initialState = function (state0) {
            if (state0 === void 0) {
                return this._state0;
            }
            else {
                return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._valueForm, state0);
            }
        };
        ValueDownlink.prototype.didAliasModel = function () {
            this.onLinkedResponse();
            this.valueDidSet(this._model.get(), Value.absent());
            this.onSyncedResponse();
        };
        ValueDownlink.prototype.open = function () {
            var laneUri = this._laneUri;
            if (laneUri.isEmpty()) {
                throw new Error("no lane");
            }
            var nodeUri = this._nodeUri;
            if (nodeUri.isEmpty()) {
                throw new Error("no node");
            }
            var hostUri = this._hostUri;
            if (hostUri.isEmpty()) {
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
            if (model) {
                if (!(model instanceof ValueDownlinkModel)) {
                    throw new Error("downlink type mismatch");
                }
                model.addDownlink(this);
                this._model = model;
                this.didAliasModel();
            }
            else {
                model = new ValueDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
                model.addDownlink(this);
                this._context.openDownlink(model);
                this._model = model;
            }
            if (this._owner) {
                this._owner.addDownlink(this);
            }
            return this;
        };
        ValueDownlink.prototype.input = function () {
            return this._input;
        };
        ValueDownlink.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        ValueDownlink.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        ValueDownlink.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        ValueDownlink.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        ValueDownlink.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        ValueDownlink.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        ValueDownlink.prototype.unbindOutputs = function () {
            var oldOutputs = this._outputs;
            if (oldOutputs !== null) {
                this._outputs = null;
                for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                    oldOutputs[i].unbindInput();
                }
            }
        };
        ValueDownlink.prototype.disconnectOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        ValueDownlink.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        ValueDownlink.prototype.invalidateInput = function () {
            this.invalidate();
        };
        ValueDownlink.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        ValueDownlink.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        ValueDownlink.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        ValueDownlink.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcile(version);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        ValueDownlink.prototype.willInvalidate = function () {
        };
        ValueDownlink.prototype.onInvalidate = function () {
        };
        ValueDownlink.prototype.didInvalidate = function () {
        };
        ValueDownlink.prototype.willReconcile = function (version) {
        };
        ValueDownlink.prototype.onReconcile = function (version) {
            if (this._input !== null) {
                var value = this._input.get();
                if (value !== void 0) {
                    this.set(value);
                }
            }
        };
        ValueDownlink.prototype.didReconcile = function (version) {
        };
        ValueDownlink.prototype.memoize = function () {
            return this;
        };
        ValueDownlink.prototype.map = function (func) {
            var combinator = new MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        ValueDownlink.prototype.watch = function (func) {
            var combinator = new WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return ValueDownlink;
    }(Downlink));

    var DownlinkRecord = (function (_super) {
        __extends(DownlinkRecord, _super);
        function DownlinkRecord() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DownlinkRecord;
    }(AbstractRecordOutlet));

    var ListDownlinkRecord = (function (_super) {
        __extends(ListDownlinkRecord, _super);
        function ListDownlinkRecord(downlink) {
            var _this = _super.call(this) || this;
            _this._downlink = downlink;
            return _this;
        }
        Object.defineProperty(ListDownlinkRecord.prototype, "downlink", {
            get: function () {
                return this._downlink;
            },
            enumerable: true,
            configurable: true
        });
        ListDownlinkRecord.prototype.isEmpty = function () {
            return this._downlink.isEmpty();
        };
        ListDownlinkRecord.prototype.isArray = function () {
            return true;
        };
        ListDownlinkRecord.prototype.isObject = function () {
            return this._downlink.isEmpty();
        };
        Object.defineProperty(ListDownlinkRecord.prototype, "length", {
            get: function () {
                return this._downlink.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListDownlinkRecord.prototype, "size", {
            get: function () {
                return this._downlink.length;
            },
            enumerable: true,
            configurable: true
        });
        ListDownlinkRecord.prototype.has = function (key) {
            return false;
        };
        ListDownlinkRecord.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                return Value.absent();
            }
        };
        ListDownlinkRecord.prototype.getAttr = function (key) {
            return Value.absent();
        };
        ListDownlinkRecord.prototype.getSlot = function (key) {
            return Value.absent();
        };
        ListDownlinkRecord.prototype.getItem = function (index) {
            if (index instanceof Num) {
                index = index.value;
            }
            var n = this._downlink.length;
            if (index < 0) {
                index = n + index;
            }
            index = Math.min(Math.max(0, index), n - 1);
            if (index >= 0) {
                return this._downlink.get(index);
            }
            return Item.absent();
        };
        ListDownlinkRecord.prototype.set = function (key, newValue) {
            throw new Error("unsupported");
        };
        ListDownlinkRecord.prototype.setAttr = function (key, newValue) {
            throw new Error("unsupported");
        };
        ListDownlinkRecord.prototype.setSlot = function (key, newValue) {
            throw new Error("unsupported");
        };
        ListDownlinkRecord.prototype.setItem = function (index, newItem) {
            if (index instanceof Num) {
                index = index.value;
            }
            var n = this._downlink.length;
            if (index < 0) {
                index = n + index;
            }
            index = Math.min(Math.max(0, index), n - 1);
            if (index >= 0) {
                this._downlink.set(index, Value.fromAny(newItem));
            }
            return this;
        };
        ListDownlinkRecord.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            return this._downlink.push.apply(this._downlink, arguments);
        };
        ListDownlinkRecord.prototype.splice = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            return this._downlink.splice.apply(this._downlink, arguments);
        };
        ListDownlinkRecord.prototype.delete = function (key) {
            return Item.absent();
        };
        ListDownlinkRecord.prototype.clear = function () {
            this._downlink.clear();
        };
        ListDownlinkRecord.prototype.forEach = function (callback, thisArg) {
            return this._downlink.forEach(function (value, index) {
                return callback.call(thisArg, value, index);
            });
        };
        ListDownlinkRecord.prototype.keyIterator = function () {
            return Cursor.empty();
        };
        return ListDownlinkRecord;
    }(DownlinkRecord));

    var MapDownlinkRecord = (function (_super) {
        __extends(MapDownlinkRecord, _super);
        function MapDownlinkRecord(downlink) {
            var _this = _super.call(this) || this;
            _this._downlink = downlink;
            _this._downlink.observe(_this);
            return _this;
        }
        Object.defineProperty(MapDownlinkRecord.prototype, "downlink", {
            get: function () {
                return this._downlink;
            },
            enumerable: true,
            configurable: true
        });
        MapDownlinkRecord.prototype.isEmpty = function () {
            return this._downlink.isEmpty();
        };
        MapDownlinkRecord.prototype.isArray = function () {
            return this._downlink.isEmpty();
        };
        MapDownlinkRecord.prototype.isObject = function () {
            return true;
        };
        Object.defineProperty(MapDownlinkRecord.prototype, "length", {
            get: function () {
                return this._downlink.size;
            },
            enumerable: true,
            configurable: true
        });
        MapDownlinkRecord.prototype.has = function (key) {
            return this._downlink.has(key);
        };
        MapDownlinkRecord.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                return this._downlink.get(key);
            }
        };
        MapDownlinkRecord.prototype.getAttr = function (key) {
            return Value.absent();
        };
        MapDownlinkRecord.prototype.getSlot = function (key) {
            return this.get(key);
        };
        MapDownlinkRecord.prototype.getItem = function (index) {
            if (index instanceof Num) {
                index = index.value;
            }
            var n = this._downlink.size;
            if (index < 0) {
                index = n + index;
            }
            index = Math.min(Math.max(0, index), n - 1);
            if (index >= 0) {
                var entry = this._downlink.getEntry(index);
                return Slot.of(entry[0], entry[1]);
            }
            return Item.absent();
        };
        MapDownlinkRecord.prototype.set = function (key, newValue) {
            this._downlink.set(key, newValue);
            return this;
        };
        MapDownlinkRecord.prototype.setAttr = function (key, newValue) {
            throw new Error("unsupported");
        };
        MapDownlinkRecord.prototype.setSlot = function (key, newValue) {
            return this.set(key, newValue);
        };
        MapDownlinkRecord.prototype.setItem = function (index, newItem) {
            throw new Error("unsupported");
        };
        MapDownlinkRecord.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        MapDownlinkRecord.prototype.splice = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        MapDownlinkRecord.prototype.delete = function (key) {
            key = Value.fromAny(key);
            var oldValue = this._downlink.get(key);
            if (this._downlink.delete(key)) {
                return Slot.of(key, oldValue);
            }
            return Item.absent();
        };
        MapDownlinkRecord.prototype.clear = function () {
            this._downlink.clear();
        };
        MapDownlinkRecord.prototype.forEach = function (callback, thisArg) {
            var index = 0;
            return this._downlink.forEach(function (key, value) {
                var result = callback.call(thisArg, Slot.of(key, value), index);
                index += 1;
                return result;
            });
        };
        MapDownlinkRecord.prototype.keyIterator = function () {
            return this._downlink.keys();
        };
        MapDownlinkRecord.prototype.didUpdate = function (key, newValue, oldValue) {
            this.invalidateInputKey(key, 0);
            this.reconcileInput(0);
        };
        MapDownlinkRecord.prototype.didRemove = function (key, oldValue) {
            this.invalidateInputKey(key, 1);
            this.reconcileInput(0);
        };
        MapDownlinkRecord.prototype.didDrop = function (lower) {
        };
        MapDownlinkRecord.prototype.didTake = function (upper) {
        };
        MapDownlinkRecord.prototype.didClear = function () {
        };
        return MapDownlinkRecord;
    }(DownlinkRecord));

    var ValueDownlinkRecord = (function (_super) {
        __extends(ValueDownlinkRecord, _super);
        function ValueDownlinkRecord(downlink) {
            var _this = _super.call(this) || this;
            _this._downlink = downlink;
            _this._downlink.observe(_this);
            return _this;
        }
        Object.defineProperty(ValueDownlinkRecord.prototype, "downlink", {
            get: function () {
                return this._downlink;
            },
            enumerable: true,
            configurable: true
        });
        ValueDownlinkRecord.prototype.isEmpty = function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.isEmpty();
            }
            else {
                return !value.isDefined();
            }
        };
        ValueDownlinkRecord.prototype.isArray = function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.isArray();
            }
            else {
                return true;
            }
        };
        ValueDownlinkRecord.prototype.isObject = function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.isObject();
            }
            else {
                return !value.isDefined();
            }
        };
        Object.defineProperty(ValueDownlinkRecord.prototype, "length", {
            get: function () {
                var value = this._downlink.get();
                if (value instanceof Record) {
                    return value.length;
                }
                else if (value.isDefined()) {
                    return 1;
                }
                else {
                    return 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        ValueDownlinkRecord.prototype.has = function (key) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.has(key);
            }
            else {
                return false;
            }
        };
        ValueDownlinkRecord.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                var value = this._downlink.get();
                if (value instanceof Record) {
                    return value.get(key);
                }
                else {
                    return Value.absent();
                }
            }
        };
        ValueDownlinkRecord.prototype.getAttr = function (key) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.getAttr(key);
            }
            else {
                return Value.absent();
            }
        };
        ValueDownlinkRecord.prototype.getSlot = function (key) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.getSlot(key);
            }
            else {
                return Value.absent();
            }
        };
        ValueDownlinkRecord.prototype.getField = function (key) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.getField(key);
            }
            else {
                return void 0;
            }
        };
        ValueDownlinkRecord.prototype.getItem = function (index) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.getItem(index);
            }
            else {
                return value;
            }
        };
        ValueDownlinkRecord.prototype.set = function (key, newValue) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                value.set(key, newValue);
            }
            else {
                throw new Error("unsupported");
            }
            return this;
        };
        ValueDownlinkRecord.prototype.setAttr = function (key, newValue) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                value.setAttr(key, newValue);
            }
            else {
                throw new Error("unsupported");
            }
            return this;
        };
        ValueDownlinkRecord.prototype.setSlot = function (key, newValue) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                value.setSlot(key, newValue);
            }
            else {
                throw new Error("unsupported");
            }
            return this;
        };
        ValueDownlinkRecord.prototype.setItem = function (index, newItem) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                value.setItem(index, newItem);
            }
            else {
                this._downlink.set(Item.fromAny(newItem).toValue());
            }
            return this;
        };
        ValueDownlinkRecord.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.push.apply(value, arguments);
            }
            else {
                throw new Error("unsupported");
            }
        };
        ValueDownlinkRecord.prototype.splice = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.splice.apply(value, arguments);
            }
            else {
                throw new Error("unsupported");
            }
        };
        ValueDownlinkRecord.prototype.delete = function (key) {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.delete(key);
            }
            else {
                return Value.absent();
            }
        };
        ValueDownlinkRecord.prototype.clear = function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                value.clear();
            }
            else {
                throw new Error("unsupported");
            }
        };
        ValueDownlinkRecord.prototype.forEach = function (callback, thisArg) {
            var value = this._downlink.get();
            return value.forEach(callback, thisArg);
        };
        ValueDownlinkRecord.prototype.keyIterator = function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                throw new Error();
            }
            else {
                return Cursor.empty();
            }
        };
        ValueDownlinkRecord.prototype.didSet = function (newValue, oldValue) {
            this.invalidateInput();
            this.reconcileInput(0);
        };
        return ValueDownlinkRecord;
    }(DownlinkRecord));

    var DownlinkTransmuter = (function (_super) {
        __extends(DownlinkTransmuter, _super);
        function DownlinkTransmuter(warp) {
            var _this = _super.call(this) || this;
            _this.warp = warp;
            return _this;
        }
        DownlinkTransmuter.prototype.transmute = function (model) {
            if (model.tag() === "link") {
                var streamlet = new DownlinkStreamlet(this.warp, model);
                streamlet.compile();
                return streamlet;
            }
            return model;
        };
        return DownlinkTransmuter;
    }(Transmuter));

    var DownlinkStreamlet = (function (_super) {
        __extends(DownlinkStreamlet, _super);
        function DownlinkStreamlet(warp, scope) {
            var _this = _super.call(this, scope) || this;
            _this.hostUri = _this.inoutlet();
            _this.nodeUri = _this.inoutlet();
            _this.laneUri = _this.inoutlet();
            _this.prio = _this.inoutlet();
            _this.rate = _this.inoutlet();
            _this.bodyValue = _this.inoutlet();
            _this.type = _this.inoutlet();
            _this.warp = warp;
            return _this;
        }
        DownlinkStreamlet.prototype.getOutput = function (outlet) {
            outlet = this.outlet(outlet);
            if (outlet === this.state) {
                if (this.downlink instanceof ValueDownlink) {
                    return this.downlink.get();
                }
                else if (this.downlinkRecord) {
                    return this.downlinkRecord;
                }
            }
            return void 0;
        };
        DownlinkStreamlet.prototype.onReconcile = function (version) {
            var hostUri = this.castInput(this.hostUri, Form.forString());
            var nodeUri = this.castInput(this.nodeUri, Form.forString());
            var laneUri = this.castInput(this.laneUri, Form.forString());
            var prio = this.castInput(this.prio, Form.forNumber(), 0);
            var rate = this.castInput(this.rate, Form.forNumber(), 0);
            var body = this.getInput(this.bodyValue);
            var type = this.castInput(this.type, Form.forString(), void 0);
            if (hostUri !== this.inputHostUri || nodeUri !== this.inputNodeUri || laneUri !== this.inputLaneUri
                || prio !== this.inputPrio || rate !== this.inputRate
                || (body === void 0 ? this.inputBody !== void 0 : !body.equals(this.inputBody))
                || type !== this.inputType) {
                if (this.downlink) {
                    this.downlink.close();
                    this.downlink = void 0;
                    this.downlinkRecord = void 0;
                }
                this.inputHostUri = hostUri;
                this.inputNodeUri = nodeUri;
                this.inputLaneUri = laneUri;
                this.inputPrio = prio;
                this.inputRate = rate;
                this.inputBody = body;
                this.inputType = type;
                var warp = this.warp || client;
                if (type === "map") {
                    var downlink = warp.downlinkMap();
                    if (hostUri !== void 0) {
                        downlink = downlink.hostUri(hostUri);
                    }
                    if (nodeUri !== void 0) {
                        downlink = downlink.nodeUri(nodeUri);
                    }
                    if (laneUri !== void 0) {
                        downlink = downlink.laneUri(laneUri);
                    }
                    if (prio !== 0) {
                        downlink = downlink.prio(prio);
                    }
                    if (rate !== 0) {
                        downlink = downlink.rate(rate);
                    }
                    if (body !== void 0) {
                        downlink = downlink.body(body);
                    }
                    downlink = downlink.open();
                    this.state = downlink;
                    this.downlink = downlink;
                    this.downlinkRecord = new MapDownlinkRecord(downlink);
                }
                else if (type === "value") {
                    var downlink = warp.downlinkValue();
                    if (hostUri !== void 0) {
                        downlink = downlink.hostUri(hostUri);
                    }
                    if (nodeUri !== void 0) {
                        downlink = downlink.nodeUri(nodeUri);
                    }
                    if (laneUri !== void 0) {
                        downlink = downlink.laneUri(laneUri);
                    }
                    if (prio !== void 0) {
                        downlink = downlink.prio(prio);
                    }
                    if (rate !== void 0) {
                        downlink = downlink.rate(rate);
                    }
                    if (body !== void 0) {
                        downlink = downlink.body(body);
                    }
                    downlink = downlink.open();
                    this.state = downlink;
                    this.downlink = downlink;
                }
            }
        };
        DownlinkStreamlet.transmuter = function (warp) {
            if (warp === void 0) {
                if (!DownlinkStreamlet._transmuter) {
                    DownlinkStreamlet._transmuter = new DownlinkTransmuter();
                }
                return DownlinkStreamlet._transmuter;
            }
            else {
                return new DownlinkTransmuter(warp);
            }
        };
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "hostUri", void 0);
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "nodeUri", void 0);
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "laneUri", void 0);
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "prio", void 0);
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "rate", void 0);
        __decorate([
            Inout("body")
        ], DownlinkStreamlet.prototype, "bodyValue", void 0);
        __decorate([
            Inout
        ], DownlinkStreamlet.prototype, "type", void 0);
        __decorate([
            Out
        ], DownlinkStreamlet.prototype, "state", void 0);
        return DownlinkStreamlet;
    }(AbstractRecordStreamlet));

    var BaseRef = (function () {
        function BaseRef(context) {
            this._context = context;
            this._host = void 0;
            this._downlinks = [];
            this._observers = null;
        }
        BaseRef.prototype.isConnected = function () {
            return this._host ? this._host.isConnected() : false;
        };
        BaseRef.prototype.isAuthenticated = function () {
            return this._host ? this._host.isAuthenticated() : false;
        };
        BaseRef.prototype.session = function () {
            return this._host ? this._host.session() : Value.absent();
        };
        BaseRef.prototype.authenticate = function (credentials) {
            this._context.authenticate(this.hostUri(), credentials);
        };
        BaseRef.prototype.addDownlink = function (downlink) {
            if (this._downlinks.length === 0) {
                this.open();
            }
            this._downlinks.push(downlink);
        };
        BaseRef.prototype.removeDownlink = function (downlink) {
            var i = this._downlinks.indexOf(downlink);
            if (i >= 0) {
                this._downlinks.splice(i, 1);
                if (this._downlinks.length === 0) {
                    this.close();
                }
            }
        };
        BaseRef.prototype.open = function () {
            this._context.openRef(this);
        };
        BaseRef.prototype.close = function () {
            this._context.closeRef(this);
        };
        BaseRef.prototype.closeUp = function () {
            var downlinks = this._downlinks;
            this._downlinks = [];
            for (var i = 0, n = downlinks.length; i < n; i += 1) {
                downlinks[i].close();
            }
        };
        BaseRef.prototype.observe = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            var newObservers = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newObservers[i] = oldObservers[i];
            }
            newObservers[n] = observer;
            this._observers = newObservers;
            return this;
        };
        BaseRef.prototype.unobserve = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var oldObserver = oldObservers[i];
                var found = oldObserver === observer;
                if (!found) {
                    for (var key in oldObserver) {
                        if (oldObserver[key] === observer) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    if (n > 1) {
                        var newObservers = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newObservers[j] = oldObservers[j];
                        }
                        for (var j = i + 1; j < n; j += 1) {
                            newObservers[j - 1] = oldObservers[j];
                        }
                        this._observers = newObservers;
                    }
                    else {
                        this._observers = null;
                    }
                    break;
                }
            }
            return this;
        };
        BaseRef.prototype.didConnect = function (didConnect) {
            return this.observe({ didConnect: didConnect });
        };
        BaseRef.prototype.didAuthenticate = function (didAuthenticate) {
            return this.observe({ didAuthenticate: didAuthenticate });
        };
        BaseRef.prototype.didDeauthenticate = function (didDeauthenticate) {
            return this.observe({ didDeauthenticate: didDeauthenticate });
        };
        BaseRef.prototype.didDisconnect = function (didDisconnect) {
            return this.observe({ didDisconnect: didDisconnect });
        };
        BaseRef.prototype.didFail = function (didFail) {
            return this.observe({ didFail: didFail });
        };
        BaseRef.prototype.hostDidConnect = function (host) {
            this._host = host;
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didConnect) {
                    observer.didConnect(host, this);
                }
            }
        };
        BaseRef.prototype.hostDidAuthenticate = function (body, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didAuthenticate) {
                    observer.didAuthenticate(body, host, this);
                }
            }
        };
        BaseRef.prototype.hostDidDeauthenticate = function (body, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDeauthenticate) {
                    observer.didDeauthenticate(body, host, this);
                }
            }
        };
        BaseRef.prototype.hostDidDisconnect = function (host) {
            this._host = void 0;
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDisconnect) {
                    observer.didDisconnect(host, this);
                }
            }
        };
        BaseRef.prototype.hostDidFail = function (error, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didFail) {
                    observer.didFail(error, host, this);
                }
            }
        };
        return BaseRef;
    }());

    var LaneRef = (function (_super) {
        __extends(LaneRef, _super);
        function LaneRef(context, hostUri, nodeUri, laneUri) {
            var _this = _super.call(this, context) || this;
            _this._hostUri = hostUri;
            _this._nodeUri = nodeUri;
            _this._laneUri = laneUri;
            return _this;
        }
        LaneRef.prototype.hostUri = function () {
            return this._hostUri;
        };
        LaneRef.prototype.nodeUri = function () {
            return this._nodeUri;
        };
        LaneRef.prototype.laneUri = function () {
            return this._laneUri;
        };
        LaneRef.prototype.hostRef = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            return new HostRef(this._context, hostUri);
        };
        LaneRef.prototype.nodeRef = function (nodeUri) {
            nodeUri = Uri.fromAny(nodeUri);
            return new NodeRef(this._context, this._hostUri, nodeUri);
        };
        LaneRef.prototype.laneRef = function (laneUri) {
            laneUri = Uri.fromAny(laneUri);
            return new LaneRef(this._context, this._hostUri, this._nodeUri, laneUri);
        };
        LaneRef.prototype.downlink = function (init) {
            return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
        };
        LaneRef.prototype.downlinkList = function (init) {
            return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
        };
        LaneRef.prototype.downlinkMap = function (init) {
            return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
        };
        LaneRef.prototype.downlinkValue = function (init) {
            return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
        };
        LaneRef.prototype.command = function (body) {
            this._context.command(this._hostUri, this._nodeUri, this._laneUri, body);
        };
        return LaneRef;
    }(BaseRef));

    var NodeRef = (function (_super) {
        __extends(NodeRef, _super);
        function NodeRef(context, hostUri, nodeUri) {
            var _this = _super.call(this, context) || this;
            _this._hostUri = hostUri;
            _this._nodeUri = nodeUri;
            return _this;
        }
        NodeRef.prototype.hostUri = function () {
            return this._hostUri;
        };
        NodeRef.prototype.nodeUri = function () {
            return this._nodeUri;
        };
        NodeRef.prototype.hostRef = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            return new HostRef(this._context, hostUri);
        };
        NodeRef.prototype.nodeRef = function (nodeUri) {
            nodeUri = Uri.fromAny(nodeUri);
            return new NodeRef(this._context, this._hostUri, nodeUri);
        };
        NodeRef.prototype.laneRef = function (laneUri) {
            laneUri = Uri.fromAny(laneUri);
            return new LaneRef(this._context, this._hostUri, this._nodeUri, laneUri);
        };
        NodeRef.prototype.downlink = function (init) {
            return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri);
        };
        NodeRef.prototype.downlinkList = function (init) {
            return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri);
        };
        NodeRef.prototype.downlinkMap = function (init) {
            return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri);
        };
        NodeRef.prototype.downlinkValue = function (init) {
            return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri);
        };
        NodeRef.prototype.command = function (laneUri, body) {
            this._context.command(this._hostUri, this._nodeUri, laneUri, body);
        };
        return NodeRef;
    }(BaseRef));

    var HostRef = (function (_super) {
        __extends(HostRef, _super);
        function HostRef(context, hostUri) {
            var _this = _super.call(this, context) || this;
            _this._hostUri = hostUri;
            return _this;
        }
        HostRef.prototype.hostUri = function () {
            return this._hostUri;
        };
        HostRef.prototype.hostRef = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            return new HostRef(this._context, hostUri);
        };
        HostRef.prototype.nodeRef = function (nodeUri) {
            nodeUri = Uri.fromAny(nodeUri);
            return new NodeRef(this._context, this._hostUri, nodeUri);
        };
        HostRef.prototype.laneRef = function (nodeUri, laneUri) {
            nodeUri = Uri.fromAny(nodeUri);
            laneUri = Uri.fromAny(laneUri);
            return new LaneRef(this._context, this._hostUri, nodeUri, laneUri);
        };
        HostRef.prototype.downlink = function (init) {
            return new EventDownlink(this._context, this, init, this._hostUri);
        };
        HostRef.prototype.downlinkList = function (init) {
            return new ListDownlink(this._context, this, init, this._hostUri);
        };
        HostRef.prototype.downlinkMap = function (init) {
            return new MapDownlink(this._context, this, init, this._hostUri);
        };
        HostRef.prototype.downlinkValue = function (init) {
            return new ValueDownlink(this._context, this, init, this._hostUri);
        };
        HostRef.prototype.command = function (nodeUri, laneUri, body) {
            this._context.command(this._hostUri, nodeUri, laneUri, body);
        };
        return HostRef;
    }(BaseRef));

    var WarpClient = (function () {
        function WarpClient(options) {
            if (options === void 0) { options = {}; }
            if (options.keepOnline === void 0) {
                options.keepOnline = true;
            }
            this._options = options;
            this._hosts = new BTree();
            this._downlinks = new BTree();
            this._downlinkCount = 0;
            this._refs = [];
            this._online = true;
            this._observers = null;
            this.onOnline = this.onOnline.bind(this);
            this.onOffline = this.onOffline.bind(this);
            this.watchOnline(!!options.keepOnline);
        }
        WarpClient.prototype.isOnline = function (online) {
            if (online === void 0) {
                return this._online;
            }
            else {
                if (this._online !== online) {
                    this._online = online;
                    this._hosts.forEach(function (hostUri, host) {
                        if (online) {
                            host.open();
                        }
                        else {
                            host.close();
                        }
                    }, this);
                }
                return this;
            }
        };
        WarpClient.prototype.keepOnline = function (keepOnline) {
            if (keepOnline === void 0) {
                return !!this._options.keepOnline;
            }
            else {
                if (this._options.keepOnline !== keepOnline) {
                    this._options.keepOnline = keepOnline;
                    this.watchOnline(keepOnline);
                }
                return this;
            }
        };
        WarpClient.prototype.watchOnline = function (keepOnline) {
            if (typeof window === "object") {
                if (keepOnline) {
                    window.addEventListener("online", this.onOnline);
                    window.addEventListener("offline", this.onOffline);
                }
                else {
                    window.removeEventListener("online", this.onOnline);
                    window.removeEventListener("offline", this.onOffline);
                }
            }
        };
        WarpClient.prototype.onOnline = function (event) {
            this.isOnline(true);
        };
        WarpClient.prototype.onOffline = function (event) {
            this.isOnline(false);
        };
        WarpClient.prototype.getHost = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            return this._hosts.get(hostUri);
        };
        WarpClient.prototype.openHost = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            var host = this._hosts.get(hostUri);
            if (!host) {
                host = new WebSocketHost(this, hostUri, this._options);
                this._hosts.set(hostUri, host);
            }
            return host;
        };
        WarpClient.prototype.closeHost = function (host) {
            if (this._hosts.get(host.hostUri())) {
                this._hosts.delete(host.hostUri());
                host.closeUp();
            }
        };
        WarpClient.prototype.getDownlink = function (hostUri, nodeUri, laneUri) {
            var hostDownlinks = this._downlinks.get(hostUri);
            if (hostDownlinks) {
                var nodeDownlinks = hostDownlinks.get(nodeUri);
                if (nodeDownlinks) {
                    return nodeDownlinks.get(laneUri);
                }
            }
            return void 0;
        };
        WarpClient.prototype.openDownlink = function (downlink) {
            var hostUri = downlink.hostUri();
            var nodeUri = downlink.nodeUri();
            var laneUri = downlink.laneUri();
            var hostDownlinks = this._downlinks.get(hostUri);
            if (!hostDownlinks) {
                hostDownlinks = new BTree();
                this._downlinks.set(hostUri, hostDownlinks);
            }
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (!nodeDownlinks) {
                nodeDownlinks = new BTree();
                hostDownlinks.set(nodeUri, nodeDownlinks);
            }
            if (nodeDownlinks.has(laneUri)) {
                throw new Error("duplicate downlink");
            }
            nodeDownlinks.set(laneUri, downlink);
            this._downlinkCount += 1;
            var host = this.openHost(hostUri);
            host.openDownlink(downlink);
        };
        WarpClient.prototype.unlinkDownlink = function (downlink) {
            var hostUri = downlink.hostUri();
            var host = this.getHost(hostUri);
            if (host) {
                host.unlinkDownlink(downlink);
            }
        };
        WarpClient.prototype.closeDownlink = function (downlink) {
            var hostUri = downlink.hostUri();
            var nodeUri = downlink.nodeUri();
            var laneUri = downlink.laneUri();
            var hostDownlinks = this._downlinks.get(hostUri);
            if (hostDownlinks) {
                var nodeDownlinks = hostDownlinks.get(nodeUri);
                if (nodeDownlinks) {
                    if (nodeDownlinks.get(laneUri)) {
                        this._downlinkCount -= 1;
                        nodeDownlinks.delete(laneUri);
                        if (nodeDownlinks.isEmpty()) {
                            hostDownlinks.delete(nodeUri);
                            if (hostDownlinks.isEmpty()) {
                                this._downlinks.delete(hostUri);
                            }
                        }
                        var host = this.getHost(hostUri);
                        if (host) {
                            host.closeDownlink(downlink);
                        }
                    }
                }
            }
        };
        WarpClient.prototype.downlink = function (init) {
            return new EventDownlink(this, void 0, init);
        };
        WarpClient.prototype.downlinkList = function (init) {
            return new ListDownlink(this, void 0, init);
        };
        WarpClient.prototype.downlinkMap = function (init) {
            return new MapDownlink(this, void 0, init);
        };
        WarpClient.prototype.downlinkValue = function (init) {
            return new ValueDownlink(this, void 0, init);
        };
        WarpClient.prototype.openRef = function (ref) {
            this._refs.push(ref);
        };
        WarpClient.prototype.closeRef = function (ref) {
            var index = this._refs.indexOf(ref);
            if (index >= 0) {
                this._refs.splice(index, 1);
                ref.closeUp();
            }
        };
        WarpClient.prototype.hostRef = function (hostUri) {
            hostUri = Uri.fromAny(hostUri);
            return new HostRef(this, hostUri);
        };
        WarpClient.prototype.nodeRef = function (hostUri, nodeUri) {
            hostUri = Uri.fromAny(hostUri);
            if (nodeUri === void 0) {
                nodeUri = hostUri;
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            else {
                nodeUri = Uri.fromAny(nodeUri);
            }
            return new NodeRef(this, hostUri, nodeUri);
        };
        WarpClient.prototype.laneRef = function (hostUri, nodeUri, laneUri) {
            hostUri = Uri.fromAny(hostUri);
            nodeUri = Uri.fromAny(nodeUri);
            if (laneUri === void 0) {
                laneUri = nodeUri;
                nodeUri = hostUri;
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            else {
                laneUri = Uri.fromAny(laneUri);
            }
            return new LaneRef(this, hostUri, nodeUri, laneUri);
        };
        WarpClient.prototype.authenticate = function (hostUri, credentials) {
            hostUri = Uri.fromAny(hostUri);
            credentials = Value.fromAny(credentials);
            var host = this.openHost(hostUri);
            host.authenticate(credentials);
        };
        WarpClient.prototype.command = function (hostUri, nodeUri, laneUri, body) {
            hostUri = Uri.fromAny(hostUri);
            nodeUri = Uri.fromAny(nodeUri);
            if (arguments.length === 3) {
                body = laneUri;
                laneUri = nodeUri;
                nodeUri = hostUri;
                hostUri = nodeUri.endpoint();
                nodeUri = hostUri.unresolve(nodeUri);
            }
            else {
                laneUri = Uri.fromAny(laneUri);
            }
            body = Value.fromAny(body);
            var host = this.openHost(hostUri);
            host.command(nodeUri, laneUri, body);
        };
        WarpClient.prototype.close = function () {
            var refs = this._refs;
            this._refs = [];
            for (var i = 0; i < refs.length; i += 1) {
                refs[i].closeUp();
            }
            var downlinks = this._downlinks.clone();
            this._downlinks.clear();
            this._downlinkCount = 0;
            downlinks.forEach(function (hostUri, hostDownlinks) {
                hostDownlinks.forEach(function (nodeUri, nodeDownlinks) {
                    nodeDownlinks.forEach(function (laneUri, downlink) {
                        downlink.closeUp();
                        var host = this.getHost(hostUri);
                        if (host) {
                            host.closeDownlink(downlink);
                        }
                    }, this);
                }, this);
            }, this);
            var hosts = this._hosts.clone();
            this._hosts.clear();
            hosts.forEach(function (hostUri, host) {
                host.closeUp();
            }, this);
        };
        WarpClient.prototype.observe = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            var newObservers = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newObservers[i] = oldObservers[i];
            }
            newObservers[n] = observer;
            this._observers = newObservers;
            return this;
        };
        WarpClient.prototype.unobserve = function (observer) {
            var oldObservers = this._observers;
            var n = oldObservers ? oldObservers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var oldObserver = oldObservers[i];
                var found = oldObserver === observer;
                if (!found) {
                    for (var key in oldObserver) {
                        if (oldObserver[key] === observer) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    if (n > 1) {
                        var newObservers = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newObservers[j] = oldObservers[j];
                        }
                        for (var j = i + 1; j < n; j += 1) {
                            newObservers[j - 1] = oldObservers[j];
                        }
                        this._observers = newObservers;
                    }
                    else {
                        this._observers = null;
                    }
                    break;
                }
            }
            return this;
        };
        WarpClient.prototype.didConnect = function (didConnect) {
            return this.observe({ didConnect: didConnect });
        };
        WarpClient.prototype.didAuthenticate = function (didAuthenticate) {
            return this.observe({ didAuthenticate: didAuthenticate });
        };
        WarpClient.prototype.didDeauthenticate = function (didDeauthenticate) {
            return this.observe({ didDeauthenticate: didDeauthenticate });
        };
        WarpClient.prototype.didDisconnect = function (didDisconnect) {
            return this.observe({ didDisconnect: didDisconnect });
        };
        WarpClient.prototype.didFail = function (didFail) {
            return this.observe({ didFail: didFail });
        };
        WarpClient.prototype.hostDidConnect = function (host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didConnect) {
                    observer.didConnect(host, this);
                }
            }
            for (var i = 0; i < this._refs.length; i += 1) {
                var ref = this._refs[i];
                if (ref.hostUri().equals(host.hostUri())) {
                    ref.hostDidConnect(host);
                }
            }
        };
        WarpClient.prototype.hostDidAuthenticate = function (body, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didAuthenticate) {
                    observer.didAuthenticate(body, host, this);
                }
            }
            for (var i = 0; i < this._refs.length; i += 1) {
                var ref = this._refs[i];
                if (ref.hostUri().equals(host.hostUri())) {
                    ref.hostDidAuthenticate(body, host);
                }
            }
        };
        WarpClient.prototype.hostDidDeauthenticate = function (body, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDeauthenticate) {
                    observer.didDeauthenticate(body, host, this);
                }
            }
            for (var i = 0; i < this._refs.length; i += 1) {
                var ref = this._refs[i];
                if (ref.hostUri().equals(host.hostUri())) {
                    ref.hostDidDeauthenticate(body, host);
                }
            }
        };
        WarpClient.prototype.hostDidDisconnect = function (host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didDisconnect) {
                    observer.didDisconnect(host, this);
                }
            }
            for (var i = 0; i < this._refs.length; i += 1) {
                var ref = this._refs[i];
                if (ref.hostUri().equals(host.hostUri())) {
                    ref.hostDidDisconnect(host);
                }
            }
        };
        WarpClient.prototype.hostDidFail = function (error, host) {
            var observers = this._observers;
            var n = observers ? observers.length : 0;
            for (var i = 0; i < n; i += 1) {
                var observer = observers[i];
                if (observer.didFail) {
                    observer.didFail(error, host, this);
                }
            }
            for (var i = 0; i < this._refs.length; i += 1) {
                var ref = this._refs[i];
                if (ref.hostUri().equals(host.hostUri())) {
                    ref.hostDidFail(error, host);
                }
            }
        };
        return WarpClient;
    }());

    var client = new WarpClient();
    var isOnline = client.isOnline.bind(client);
    var keepOnline = client.keepOnline.bind(client);
    var downlink = client.downlink.bind(client);
    var downlinkList = client.downlinkList.bind(client);
    var downlinkMap = client.downlinkMap.bind(client);
    var downlinkValue = client.downlinkValue.bind(client);
    var hostRef = client.hostRef.bind(client);
    var nodeRef = client.nodeRef.bind(client);
    var laneRef = client.laneRef.bind(client);
    var authenticate = client.authenticate.bind(client);
    var command = client.command.bind(client);

    var Angle = (function () {
        function Angle() {
        }
        Angle.prototype.isDefined = function () {
            return this.value() !== 0;
        };
        Angle.prototype.plus = function (that, units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(this.toValue(units) + Angle.fromAny(that).toValue(units), units);
        };
        Angle.prototype.opposite = function (units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(-this.toValue(units), units);
        };
        Angle.prototype.minus = function (that, units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(this.toValue(units) - Angle.fromAny(that).toValue(units), units);
        };
        Angle.prototype.times = function (scalar, units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(this.toValue(units) * scalar, units);
        };
        Angle.prototype.divide = function (scalar, units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(this.toValue(units) / scalar, units);
        };
        Angle.prototype.norm = function (total, units) {
            if (units === void 0) { units = this.units(); }
            return Angle.from(this.toValue(units) / Angle.fromAny(total).toValue(units), units);
        };
        Angle.prototype.deg = function () {
            return Angle.deg(this.degValue());
        };
        Angle.prototype.rad = function () {
            return Angle.rad(this.radValue());
        };
        Angle.prototype.grad = function () {
            return Angle.grad(this.gradValue());
        };
        Angle.prototype.turn = function () {
            return Angle.turn(this.turnValue());
        };
        Angle.prototype.toValue = function (units) {
            switch (units) {
                case "deg": return this.degValue();
                case "grad": return this.gradValue();
                case "rad": return this.radValue();
                case "turn": return this.turnValue();
                default: throw new Error("unknown angle units: " + units);
            }
        };
        Angle.prototype.to = function (units) {
            switch (units) {
                case "deg": return this.deg();
                case "grad": return this.grad();
                case "rad": return this.rad();
                case "turn": return this.turn();
                default: throw new Error("unknown angle units: " + units);
            }
        };
        Angle.zero = function (units) {
            if (units === void 0) { units = "rad"; }
            return Angle.from(0, units);
        };
        Angle.deg = function (value) {
            return new Angle.Deg(value);
        };
        Angle.rad = function (value) {
            return new Angle.Rad(value);
        };
        Angle.grad = function (value) {
            return new Angle.Grad(value);
        };
        Angle.turn = function (value) {
            return new Angle.Turn(value);
        };
        Angle.from = function (value, units) {
            if (units === void 0) { units = "rad"; }
            switch (units) {
                case "deg": return Angle.deg(value);
                case "rad": return Angle.rad(value);
                case "grad": return Angle.grad(value);
                case "turn": return Angle.turn(value);
                default: throw new Error("unknown angle units: " + units);
            }
        };
        Angle.fromAny = function (value, defaultUnits) {
            if (value instanceof Angle) {
                return value;
            }
            else if (typeof value === "number") {
                return Angle.from(value, defaultUnits);
            }
            else if (typeof value === "string") {
                return Angle.parse(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Angle.fromValue = function (value) {
            if (value.length === 2) {
                var num = value.getItem(0).numberValue();
                var units = value.getItem(1);
                if (num !== void 0 && isFinite(num) && units instanceof Attr && units.toValue() === Value.extant()) {
                    switch (units.key.value) {
                        case "deg": return Angle.deg(num);
                        case "rad": return Angle.rad(num);
                        case "grad": return Angle.grad(num);
                        case "turn": return Angle.turn(num);
                        default:
                    }
                }
            }
            return void 0;
        };
        Angle.parse = function (string, defaultUnits) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Angle.Parser.parse(input, defaultUnits);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        Angle.form = function (defaultUnits, unit) {
            if (unit !== void 0) {
                unit = Angle.fromAny(unit);
            }
            if (defaultUnits !== void 0 || unit !== void 0) {
                return new Angle.Form(defaultUnits, unit);
            }
            else {
                if (!Angle._form) {
                    Angle._form = new Angle.Form();
                }
                return Angle._form;
            }
        };
        Angle.PI = Math.PI;
        Angle.TAU = 2 * Angle.PI;
        return Angle;
    }());

    var DegAngle = (function (_super) {
        __extends(DegAngle, _super);
        function DegAngle(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        DegAngle.prototype.value = function () {
            return this._value;
        };
        DegAngle.prototype.units = function () {
            return "deg";
        };
        DegAngle.prototype.degValue = function () {
            return this._value;
        };
        DegAngle.prototype.gradValue = function () {
            return this._value * 10 / 9;
        };
        DegAngle.prototype.radValue = function () {
            return this._value * Angle.PI / 180;
        };
        DegAngle.prototype.turnValue = function () {
            return this._value / 360;
        };
        DegAngle.prototype.deg = function () {
            return this;
        };
        DegAngle.prototype.equals = function (that) {
            if (that instanceof DegAngle) {
                return this._value === that._value;
            }
            return false;
        };
        DegAngle.prototype.hashCode = function () {
            if (DegAngle._hashSeed === void 0) {
                DegAngle._hashSeed = Murmur3.seed(DegAngle);
            }
            return Murmur3.mash(Murmur3.mix(DegAngle._hashSeed, Murmur3.hash(this._value)));
        };
        DegAngle.prototype.debug = function (output) {
            output = output.write("Angle").write(46).write("deg").write(40)
                .debug(this._value).write(41);
        };
        DegAngle.prototype.toString = function () {
            return this._value + "deg";
        };
        return DegAngle;
    }(Angle));
    Angle.Deg = DegAngle;

    var RadAngle = (function (_super) {
        __extends(RadAngle, _super);
        function RadAngle(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        RadAngle.prototype.value = function () {
            return this._value;
        };
        RadAngle.prototype.units = function () {
            return "rad";
        };
        RadAngle.prototype.degValue = function () {
            return this._value * 180 / Angle.PI;
        };
        RadAngle.prototype.gradValue = function () {
            return this._value * 200 / Angle.PI;
        };
        RadAngle.prototype.radValue = function () {
            return this._value;
        };
        RadAngle.prototype.turnValue = function () {
            return this._value / Angle.TAU;
        };
        RadAngle.prototype.rad = function () {
            return this;
        };
        RadAngle.prototype.equals = function (that) {
            if (that instanceof RadAngle) {
                return this._value === that._value;
            }
            return false;
        };
        RadAngle.prototype.hashCode = function () {
            if (RadAngle._hashSeed === void 0) {
                RadAngle._hashSeed = Murmur3.seed(RadAngle);
            }
            return Murmur3.mash(Murmur3.mix(RadAngle._hashSeed, Murmur3.hash(this._value)));
        };
        RadAngle.prototype.debug = function (output) {
            output = output.write("Angle").write(46).write("rad").write(40)
                .debug(this._value).write(41);
        };
        RadAngle.prototype.toString = function () {
            return this._value + "rad";
        };
        return RadAngle;
    }(Angle));
    Angle.Rad = RadAngle;

    var GradAngle = (function (_super) {
        __extends(GradAngle, _super);
        function GradAngle(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        GradAngle.prototype.value = function () {
            return this._value;
        };
        GradAngle.prototype.units = function () {
            return "grad";
        };
        GradAngle.prototype.degValue = function () {
            return this._value * 0.9;
        };
        GradAngle.prototype.gradValue = function () {
            return this._value;
        };
        GradAngle.prototype.radValue = function () {
            return this._value * Angle.PI / 200;
        };
        GradAngle.prototype.turnValue = function () {
            return this._value / 400;
        };
        GradAngle.prototype.grad = function () {
            return this;
        };
        GradAngle.prototype.equals = function (that) {
            if (that instanceof GradAngle) {
                return this._value === that._value;
            }
            return false;
        };
        GradAngle.prototype.hashCode = function () {
            if (GradAngle._hashSeed === void 0) {
                GradAngle._hashSeed = Murmur3.seed(GradAngle);
            }
            return Murmur3.mash(Murmur3.mix(GradAngle._hashSeed, Murmur3.hash(this._value)));
        };
        GradAngle.prototype.debug = function (output) {
            output = output.write("Angle").write(46).write("grad").write(40)
                .debug(this._value).write(41);
        };
        GradAngle.prototype.toString = function () {
            return this._value + "grad";
        };
        return GradAngle;
    }(Angle));
    Angle.Grad = GradAngle;

    var TurnAngle = (function (_super) {
        __extends(TurnAngle, _super);
        function TurnAngle(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        TurnAngle.prototype.value = function () {
            return this._value;
        };
        TurnAngle.prototype.units = function () {
            return "turn";
        };
        TurnAngle.prototype.degValue = function () {
            return this._value * 360;
        };
        TurnAngle.prototype.gradValue = function () {
            return this._value * 400;
        };
        TurnAngle.prototype.radValue = function () {
            return this._value * Angle.TAU;
        };
        TurnAngle.prototype.turnValue = function () {
            return this._value;
        };
        TurnAngle.prototype.turn = function () {
            return this;
        };
        TurnAngle.prototype.equals = function (that) {
            if (that instanceof TurnAngle) {
                return this._value === that._value;
            }
            return false;
        };
        TurnAngle.prototype.hashCode = function () {
            if (TurnAngle._hashSeed === void 0) {
                TurnAngle._hashSeed = Murmur3.seed(TurnAngle);
            }
            return Murmur3.mash(Murmur3.mix(TurnAngle._hashSeed, Murmur3.hash(this._value)));
        };
        TurnAngle.prototype.debug = function (output) {
            output = output.write("Angle").write(46).write("turn").write(40)
                .debug(this._value).write(41);
        };
        TurnAngle.prototype.toString = function () {
            return this._value + "turn";
        };
        return TurnAngle;
    }(Angle));
    Angle.Turn = TurnAngle;

    var AngleParser = (function (_super) {
        __extends(AngleParser, _super);
        function AngleParser(defaultUnits, valueParser, unitsOutput, step) {
            var _this = _super.call(this) || this;
            _this._defaultUnits = defaultUnits;
            _this._valueParser = valueParser;
            _this._unitsOutput = unitsOutput;
            _this._step = step;
            return _this;
        }
        AngleParser.prototype.feed = function (input) {
            return AngleParser.parse(input, this._defaultUnits, this._valueParser, this._unitsOutput, this._step);
        };
        AngleParser.parse = function (input, defaultUnits, valueParser, unitsOutput, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!valueParser) {
                    valueParser = Base10.parseDecimal(input);
                }
                else {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 2;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 2) {
                unitsOutput = unitsOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    unitsOutput.push(c);
                }
                if (!input.isEmpty()) {
                    var value = valueParser.bind();
                    var units = unitsOutput.bind() || defaultUnits;
                    switch (units) {
                        case "deg": return Parser.done(Angle.deg(value));
                        case "":
                        case "rad": return Parser.done(Angle.rad(value));
                        case "grad": return Parser.done(Angle.grad(value));
                        case "turn": return Parser.done(Angle.turn(value));
                        default: return Parser.error(Diagnostic.message("unknown units: " + units, input));
                    }
                }
            }
            return new AngleParser(defaultUnits, valueParser, unitsOutput, step);
        };
        return AngleParser;
    }(Parser));
    Angle.Parser = AngleParser;

    var AngleForm = (function (_super) {
        __extends(AngleForm, _super);
        function AngleForm(defaultUnits, unit) {
            var _this = _super.call(this) || this;
            _this._defaultUnits = defaultUnits;
            _this._unit = unit;
            return _this;
        }
        AngleForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit !== void 0 ? this._unit : Angle.zero(this._defaultUnits);
            }
            else {
                return new AngleForm(this._defaultUnits, unit);
            }
        };
        AngleForm.prototype.mold = function (angle) {
            angle = Angle.fromAny(angle, this._defaultUnits);
            return Text$1.from(angle.toString());
        };
        AngleForm.prototype.cast = function (item) {
            var value = item.toValue();
            var angle;
            try {
                angle = Angle.fromValue(value);
                if (!angle) {
                    var string = value.stringValue(void 0);
                    if (string !== void 0) {
                        angle = Angle.parse(string, this._defaultUnits);
                    }
                }
            }
            catch (e) {
            }
            return angle;
        };
        return AngleForm;
    }(Form));
    Angle.Form = AngleForm;

    var Length = (function () {
        function Length() {
        }
        Length.prototype.isDefined = function () {
            return this.value() !== 0;
        };
        Length.prototype.plus = function (that, units) {
            if (units === void 0) { units = this.units(); }
            return Length.from(this.toValue(units) + Length.fromAny(that).toValue(units), units);
        };
        Length.prototype.opposite = function (units) {
            if (units === void 0) { units = this.units(); }
            return Length.from(-this.toValue(units), units);
        };
        Length.prototype.minus = function (that, units) {
            if (units === void 0) { units = this.units(); }
            return Length.from(this.toValue(units) - Length.fromAny(that).toValue(units), units);
        };
        Length.prototype.times = function (scalar, units) {
            if (units === void 0) { units = this.units(); }
            return Length.from(this.toValue(units) * scalar, units);
        };
        Length.prototype.divide = function (scalar, units) {
            if (units === void 0) { units = this.units(); }
            return Length.from(this.toValue(units) / scalar, units);
        };
        Length.prototype.emValue = function () {
            return this.pxValue() / Length.emUnit(this.node());
        };
        Length.prototype.remValue = function () {
            return this.pxValue() / Length.remUnit();
        };
        Length.prototype.pctValue = function () {
            return this.px().value() / this.unitValue();
        };
        Length.prototype.px = function (unitValue) {
            return Length.px(this.pxValue(unitValue), this.node());
        };
        Length.prototype.em = function () {
            return Length.em(this.emValue(), this.node());
        };
        Length.prototype.rem = function () {
            return Length.rem(this.remValue(), this.node());
        };
        Length.prototype.pct = function () {
            return Length.pct(this.pctValue(), this.node());
        };
        Length.prototype.toValue = function (units) {
            switch (units) {
                case "px": return this.pxValue();
                case "em": return this.emValue();
                case "rem": return this.remValue();
                case "%": return this.pctValue();
                default: throw new Error("unknown length units: " + units);
            }
        };
        Length.prototype.to = function (units) {
            switch (units) {
                case "px": return this.px();
                case "em": return this.em();
                case "rem": return this.rem();
                case "%": return this.pct();
                default: throw new Error("unknown length units: " + units);
            }
        };
        Length.zero = function (units, node) {
            return Length.from(0, units, node);
        };
        Length.px = function (value, node) {
            return new Length.Px(value, node);
        };
        Length.em = function (value, node) {
            return new Length.Em(value, node);
        };
        Length.rem = function (value, node) {
            return new Length.Rem(value, node);
        };
        Length.pct = function (value, node) {
            return new Length.Pct(value, node);
        };
        Length.unitless = function (value, node) {
            return new Length.Unitless(value, node);
        };
        Length.from = function (value, units, node) {
            if (typeof units !== "string") {
                node = units;
                units = "px";
            }
            switch (units) {
                case "px": return Length.px(value, node);
                case "em": return Length.em(value, node);
                case "rem": return Length.rem(value, node);
                case "%": return Length.pct(value, node);
                case "": return Length.unitless(value, node);
                default: throw new Error("unknown length units: " + units);
            }
        };
        Length.fromAny = function (value, defaultUnits, node) {
            if (typeof defaultUnits !== "string") {
                node = defaultUnits;
                defaultUnits = void 0;
            }
            if (value instanceof Length) {
                return value;
            }
            else if (typeof value === "number") {
                return Length.from(value, defaultUnits, node);
            }
            else if (typeof value === "string" && typeof defaultUnits !== "string") {
                return Length.parse(value, defaultUnits, node);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Length.fromValue = function (value, node) {
            if (value.length === 2) {
                var num = value.getItem(0).numberValue(void 0);
                var units = value.getItem(1);
                if (num !== void 0 && isFinite(num) && units instanceof Attr && units.toValue() === Value.extant()) {
                    switch (units.key.value) {
                        case "px": return Length.px(num, node);
                        case "em": return Length.em(num, node);
                        case "rem": return Length.rem(num, node);
                        case "pct": return Length.pct(num, node);
                        default:
                    }
                }
            }
            return void 0;
        };
        Length.parse = function (string, defaultUnits, node) {
            if (typeof defaultUnits !== "string") {
                node = defaultUnits;
                defaultUnits = void 0;
            }
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Length.Parser.parse(input, defaultUnits, node);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        Length.form = function (defaultUnits, node, unit) {
            if (unit !== void 0) {
                unit = Length.fromAny(unit);
            }
            if (defaultUnits !== void 0 || node || unit !== void 0) {
                return new Length.Form(defaultUnits, node, unit);
            }
            else {
                if (!Length._form) {
                    Length._form = new Length.Form();
                }
                return Length._form;
            }
        };
        Length.widthUnit = function (node) {
            while (node) {
                if (node instanceof HTMLElement && node.offsetParent instanceof HTMLElement) {
                    return node.offsetParent.offsetWidth;
                }
                node = node.parentNode || void 0;
            }
            return 0;
        };
        Length.emUnit = function (node) {
            while (node) {
                if (node instanceof Element) {
                    var fontSize = getComputedStyle(node).fontSize;
                    if (fontSize !== null) {
                        return parseFloat(fontSize);
                    }
                }
                node = node.parentNode || void 0;
            }
            return 0;
        };
        Length.remUnit = function () {
            var fontSize = getComputedStyle(document.documentElement).fontSize;
            if (fontSize !== null) {
                return parseFloat(fontSize);
            }
            return 0;
        };
        return Length;
    }());

    var PxLength = (function (_super) {
        __extends(PxLength, _super);
        function PxLength(value, node) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._node = node;
            return _this;
        }
        PxLength.prototype.value = function () {
            return this._value;
        };
        PxLength.prototype.units = function () {
            return "px";
        };
        PxLength.prototype.unitValue = function () {
            return 1;
        };
        PxLength.prototype.node = function () {
            return this._node;
        };
        PxLength.prototype.pxValue = function () {
            return this._value;
        };
        PxLength.prototype.px = function () {
            return this;
        };
        PxLength.prototype.equals = function (that) {
            if (that instanceof PxLength) {
                return this._value === that._value && this._node === that._node;
            }
            return false;
        };
        PxLength.prototype.hashCode = function () {
            if (PxLength._hashSeed === void 0) {
                PxLength._hashSeed = Murmur3.seed(PxLength);
            }
            return Murmur3.mash(Murmur3.mix(PxLength._hashSeed, Murmur3.hash(this._value)));
        };
        PxLength.prototype.debug = function (output) {
            output = output.write("Length").write(46).write("px").write(40).debug(this._value);
            if (this._node) {
                output = output.write(", ").debug(this._node);
            }
            output = output.write(41);
        };
        PxLength.prototype.toString = function () {
            return this._value + "px";
        };
        return PxLength;
    }(Length));
    Length.Px = PxLength;

    var EmLength = (function (_super) {
        __extends(EmLength, _super);
        function EmLength(value, node) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._node = node;
            return _this;
        }
        EmLength.prototype.value = function () {
            return this._value;
        };
        EmLength.prototype.units = function () {
            return "em";
        };
        EmLength.prototype.node = function () {
            return this._node;
        };
        EmLength.prototype.unitValue = function () {
            return Length.emUnit(this._node);
        };
        EmLength.prototype.pxValue = function () {
            return this.unitValue() * this._value;
        };
        EmLength.prototype.em = function () {
            return this;
        };
        EmLength.prototype.equals = function (that) {
            if (that instanceof EmLength) {
                return this._value === that._value && this._node === that._node;
            }
            return false;
        };
        EmLength.prototype.hashCode = function () {
            if (EmLength._hashSeed === void 0) {
                EmLength._hashSeed = Murmur3.seed(EmLength);
            }
            return Murmur3.mash(Murmur3.mix(EmLength._hashSeed, Murmur3.hash(this._value)));
        };
        EmLength.prototype.debug = function (output) {
            output = output.write("Length").write(46).write("em").write(40).debug(this._value);
            if (this._node) {
                output = output.write(", ").debug(this._node);
            }
            output = output.write(41);
        };
        EmLength.prototype.toString = function () {
            return this._value + "em";
        };
        return EmLength;
    }(Length));
    Length.Em = EmLength;

    var RemLength = (function (_super) {
        __extends(RemLength, _super);
        function RemLength(value, node) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._node = node;
            return _this;
        }
        RemLength.prototype.value = function () {
            return this._value;
        };
        RemLength.prototype.units = function () {
            return "rem";
        };
        RemLength.prototype.node = function () {
            return this._node;
        };
        RemLength.prototype.unitValue = function () {
            return Length.remUnit();
        };
        RemLength.prototype.pxValue = function () {
            return this.unitValue() * this._value;
        };
        RemLength.prototype.rem = function () {
            return this;
        };
        RemLength.prototype.equals = function (that) {
            if (that instanceof RemLength) {
                return this._value === that._value && this._node === that._node;
            }
            return false;
        };
        RemLength.prototype.hashCode = function () {
            if (RemLength._hashSeed === void 0) {
                RemLength._hashSeed = Murmur3.seed(RemLength);
            }
            return Murmur3.mash(Murmur3.mix(RemLength._hashSeed, Murmur3.hash(this._value)));
        };
        RemLength.prototype.debug = function (output) {
            output = output.write("Length").write(46).write("rem").write(40).debug(this._value);
            if (this._node) {
                output = output.write(", ").debug(this._node);
            }
            output = output.write(41);
        };
        RemLength.prototype.toString = function () {
            return this._value + "rem";
        };
        return RemLength;
    }(Length));
    Length.Rem = RemLength;

    var PctLength = (function (_super) {
        __extends(PctLength, _super);
        function PctLength(value, node) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._node = node;
            return _this;
        }
        PctLength.prototype.value = function () {
            return this._value;
        };
        PctLength.prototype.units = function () {
            return "%";
        };
        PctLength.prototype.node = function () {
            return this._node;
        };
        PctLength.prototype.unitValue = function () {
            return Length.widthUnit(this._node);
        };
        PctLength.prototype.pxValue = function (unitValue) {
            if (unitValue === void 0) { unitValue = this.unitValue(); }
            return unitValue * this._value / 100;
        };
        PctLength.prototype.pct = function () {
            return this;
        };
        PctLength.prototype.equals = function (that) {
            if (that instanceof PctLength) {
                return this._value === that._value && this._node === that._node;
            }
            return false;
        };
        PctLength.prototype.hashCode = function () {
            if (PctLength._hashSeed === void 0) {
                PctLength._hashSeed = Murmur3.seed(PctLength);
            }
            return Murmur3.mash(Murmur3.mix(PctLength._hashSeed, Murmur3.hash(this._value)));
        };
        PctLength.prototype.debug = function (output) {
            output = output.write("Length").write(46).write("pct").write(40).debug(this._value);
            if (this._node) {
                output = output.write(", ").debug(this._node);
            }
            output = output.write(41);
        };
        PctLength.prototype.toString = function () {
            return this._value + "%";
        };
        return PctLength;
    }(Length));
    Length.Pct = PctLength;

    var UnitlessLength = (function (_super) {
        __extends(UnitlessLength, _super);
        function UnitlessLength(value, node) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._node = node;
            return _this;
        }
        UnitlessLength.prototype.value = function () {
            return this._value;
        };
        UnitlessLength.prototype.units = function () {
            return "";
        };
        UnitlessLength.prototype.unitValue = function () {
            return 0;
        };
        UnitlessLength.prototype.node = function () {
            return this._node;
        };
        UnitlessLength.prototype.pxValue = function () {
            return this._value;
        };
        UnitlessLength.prototype.equals = function (that) {
            if (that instanceof UnitlessLength) {
                return this._value === that._value && this._node === that._node;
            }
            return false;
        };
        UnitlessLength.prototype.hashCode = function () {
            if (UnitlessLength._hashSeed === void 0) {
                UnitlessLength._hashSeed = Murmur3.seed(UnitlessLength);
            }
            return Murmur3.mash(Murmur3.mix(UnitlessLength._hashSeed, Murmur3.hash(this._value)));
        };
        UnitlessLength.prototype.debug = function (output) {
            output = output.write("Length").write(46).write("unitless").write(40).debug(this._value);
            if (this._node) {
                output = output.write(", ").debug(this._node);
            }
            output = output.write(41);
        };
        UnitlessLength.prototype.toString = function () {
            return this._value + "";
        };
        return UnitlessLength;
    }(Length));
    Length.Unitless = UnitlessLength;

    var LengthParser = (function (_super) {
        __extends(LengthParser, _super);
        function LengthParser(defaultUnits, node, valueParser, unitsOutput, step) {
            var _this = _super.call(this) || this;
            _this._defaultUnits = defaultUnits;
            _this._node = node;
            _this._valueParser = valueParser;
            _this._unitsOutput = unitsOutput;
            _this._step = step;
            return _this;
        }
        LengthParser.prototype.feed = function (input) {
            return LengthParser.parse(input, this._defaultUnits, this._node, this._valueParser, this._unitsOutput, this._step);
        };
        LengthParser.parse = function (input, defaultUnits, node, valueParser, unitsOutput, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (!valueParser) {
                    valueParser = Base10.parseDecimal(input);
                }
                else {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 2;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 2) {
                unitsOutput = unitsOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 37)) {
                    input = input.step();
                    unitsOutput.push(c);
                }
                if (!input.isEmpty()) {
                    var value = valueParser.bind();
                    var units = unitsOutput.bind() || defaultUnits;
                    switch (units) {
                        case "px": return Parser.done(Length.px(value, node));
                        case "em": return Parser.done(Length.em(value, node));
                        case "rem": return Parser.done(Length.rem(value, node));
                        case "%": return Parser.done(Length.pct(value, node));
                        case "":
                        case void 0: return Parser.done(Length.unitless(value, node));
                        default: return Parser.error(Diagnostic.message("unknown units: " + units, input));
                    }
                }
            }
            return new LengthParser(defaultUnits, node, valueParser, unitsOutput, step);
        };
        return LengthParser;
    }(Parser));
    Length.Parser = LengthParser;

    var LengthForm = (function (_super) {
        __extends(LengthForm, _super);
        function LengthForm(defaultUnits, node, unit) {
            var _this = _super.call(this) || this;
            _this._defaultUnits = defaultUnits;
            _this._node = node;
            _this._unit = unit;
            return _this;
        }
        LengthForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit !== void 0 ? this._unit : Length.zero(this._defaultUnits, this._node);
            }
            else {
                return new LengthForm(this._defaultUnits, this._node, unit);
            }
        };
        LengthForm.prototype.mold = function (length) {
            length = Length.fromAny(length, this._defaultUnits);
            return Text$1.from(length.toString());
        };
        LengthForm.prototype.cast = function (item) {
            var value = item.toValue();
            var length;
            try {
                length = Length.fromValue(value, this._node);
                if (!length) {
                    var string = value.stringValue(void 0);
                    if (string !== void 0) {
                        length = Length.parse(string, this._defaultUnits, this._node);
                    }
                }
            }
            catch (e) {
            }
            return length;
        };
        return LengthForm;
    }(Form));
    Length.Form = LengthForm;

    var DARKER = 0.7;
    var BRIGHTER = 1 / DARKER;
    var Color = (function () {
        function Color() {
        }
        Color.prototype.contrast = function (k) {
            return this.lightness() < 0.67 ? this.brighter(k) : this.darker(k);
        };
        Color.transparent = function (alpha) {
            return Color.Rgb.transparent(alpha);
        };
        Color.black = function () {
            return Color.Rgb.black();
        };
        Color.white = function () {
            return Color.Rgb.white();
        };
        Color.rgb = function (r, g, b, a) {
            if (arguments.length === 1) {
                return Color.fromAny(r).rgb();
            }
            else {
                return new Color.Rgb(r, g, b, a);
            }
        };
        Color.hsl = function (h, s, l, a) {
            if (arguments.length === 1) {
                return Color.fromAny(h).hsl();
            }
            else {
                h = typeof h === "number" ? h : Angle.fromAny(h).degValue();
                return new Color.Hsl(h, s, l, a);
            }
        };
        Color.fromName = function (name) {
            switch (name) {
                case "transparent": return Color.transparent();
                case "black": return Color.black();
                case "white": return Color.white();
                default: return void 0;
            }
        };
        Color.fromAny = function (value) {
            if (value instanceof Color) {
                return value;
            }
            else if (typeof value === "string") {
                return Color.parse(value);
            }
            else if (value && typeof value === "object") {
                var rgb = value;
                if (rgb.r !== void 0 && rgb.g !== void 0 && rgb.b !== void 0) {
                    return new Color.Rgb(rgb.r, rgb.g, rgb.b, rgb.a);
                }
                var hsl = value;
                if (hsl.h !== void 0 && hsl.s !== void 0 && hsl.l !== void 0) {
                    var h = typeof hsl.h === "number" ? hsl.h : Angle.fromAny(hsl.h).degValue();
                    return new Color.Hsl(h, hsl.s, hsl.l, hsl.a);
                }
            }
            throw new TypeError("" + value);
        };
        Color.fromValue = function (value) {
            var color;
            color = Color.Rgb.fromValue(value);
            if (!color) {
                color = Color.Hsl.fromValue(value);
            }
            return color;
        };
        Color.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Color.Parser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        Color.isInit = function (value) {
            return Color.Rgb.isInit(value) || Color.Hsl.isInit(value);
        };
        Color.form = function (unit) {
            if (unit !== void 0) {
                unit = Color.fromAny(unit);
            }
            if (unit !== Color.transparent()) {
                return new Color.Form(unit);
            }
            else {
                if (!Color._form) {
                    Color._form = new Color.Form(Color.transparent());
                }
                return Color._form;
            }
        };
        return Color;
    }());

    var RgbColor = (function (_super) {
        __extends(RgbColor, _super);
        function RgbColor(r, g, b, a) {
            if (a === void 0) { a = 1; }
            var _this = _super.call(this) || this;
            _this.r = r;
            _this.g = g;
            _this.b = b;
            _this.a = a;
            return _this;
        }
        RgbColor.prototype.isDefined = function () {
            return this.r !== 0 || this.g !== 0 || this.b !== 0 || this.a !== 1;
        };
        RgbColor.prototype.alpha = function (a) {
            if (a === void 0) {
                return this.a;
            }
            else if (this.a !== a) {
                return new RgbColor(this.r, this.g, this.b, a);
            }
            else {
                return this;
            }
        };
        RgbColor.prototype.lightness = function () {
            var r = this.r / 255;
            var g = this.g / 255;
            var b = this.b / 255;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            return (max + min) / 2;
        };
        RgbColor.prototype.brighter = function (k) {
            k = k === void 0 ? BRIGHTER : Math.pow(BRIGHTER, k);
            return k !== 1 ? new RgbColor(this.r * k, this.g * k, this.b * k, this.a) : this;
        };
        RgbColor.prototype.darker = function (k) {
            k = k === void 0 ? DARKER : Math.pow(DARKER, k);
            return k !== 1 ? new RgbColor(this.r * k, this.g * k, this.b * k, this.a) : this;
        };
        RgbColor.prototype.rgb = function () {
            return this;
        };
        RgbColor.prototype.hsl = function () {
            var r = this.r / 255;
            var g = this.g / 255;
            var b = this.b / 255;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var h = NaN;
            var s = max - min;
            var l = (max + min) / 2;
            if (s) {
                if (r === max) {
                    h = (g - b) / s + +(g < b) * 6;
                }
                else if (g === max) {
                    h = (b - r) / s + 2;
                }
                else {
                    h = (r - g) / s + 4;
                }
                s /= l < 0.5 ? max + min : 2 - (max + min);
                h *= 60;
            }
            else {
                s = l > 0 && l < 1 ? 0 : h;
            }
            return new Color.Hsl(h, s, l, this.a);
        };
        RgbColor.prototype.equals = function (other) {
            if (other instanceof RgbColor) {
                return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
            }
            return false;
        };
        RgbColor.prototype.hashCode = function () {
            if (RgbColor._hashSeed === void 0) {
                RgbColor._hashSeed = Murmur3.seed(RgbColor);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(RgbColor._hashSeed, Murmur3.hash(this.r)), Murmur3.hash(this.g)), Murmur3.hash(this.b)), Murmur3.hash(this.a)));
        };
        RgbColor.prototype.debug = function (output) {
            output = output.write("Color").write(46).write("rgb").write(40)
                .debug(this.r).write(", ").debug(this.g).write(", ").debug(this.b);
            if (this.a !== 1) {
                output = output.write(", ").debug(this.a);
            }
            output = output.write(41);
        };
        RgbColor.prototype.toHexString = function () {
            var r = Math.min(Math.max(0, Math.round(this.r || 0)), 255);
            var g = Math.min(Math.max(0, Math.round(this.g || 0)), 255);
            var b = Math.min(Math.max(0, Math.round(this.b || 0)), 255);
            var s = "#";
            var base16Alphabet = Base16.lowercase().alphabet();
            s += base16Alphabet.charAt(r >>> 4 & 0xf);
            s += base16Alphabet.charAt(r & 0xf);
            s += base16Alphabet.charAt(g >>> 4 & 0xf);
            s += base16Alphabet.charAt(g & 0xf);
            s += base16Alphabet.charAt(b >>> 4 & 0xf);
            s += base16Alphabet.charAt(b & 0xf);
            return s;
        };
        RgbColor.prototype.toString = function () {
            var a = this.a;
            a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
            if (a === 1) {
                return this.toHexString();
            }
            else {
                var s = a === 1 ? "rgb" : "rgba";
                s += "(";
                s += Math.max(0, Math.min(Math.round(this.r) || 0, 255));
                s += ",";
                s += Math.max(0, Math.min(Math.round(this.g) || 0, 255));
                s += ",";
                s += Math.max(0, Math.min(Math.round(this.b) || 0, 255));
                if (a !== 1) {
                    s += ",";
                    s += a;
                }
                s += ")";
                return s;
            }
        };
        RgbColor.transparent = function (alpha) {
            if (alpha === void 0) { alpha = 0; }
            return new RgbColor(0, 0, 0, alpha);
        };
        RgbColor.black = function () {
            return new RgbColor(0, 0, 0, 1);
        };
        RgbColor.white = function () {
            return new RgbColor(255, 255, 255, 1);
        };
        RgbColor.fromValue = function (value) {
            var tag = value.tag();
            var positional;
            if (tag === "rgb" || tag === "rgba") {
                value = value.header(tag);
                positional = true;
            }
            else {
                positional = false;
            }
            var r;
            var g;
            var b;
            var a;
            value.forEach(function (member, index) {
                var key = member.key.stringValue();
                if (key !== void 0) {
                    if (key === "r") {
                        r = member.toValue().numberValue(r);
                    }
                    else if (key === "g") {
                        g = member.toValue().numberValue(g);
                    }
                    else if (key === "b") {
                        b = member.toValue().numberValue(b);
                    }
                    else if (key === "a") {
                        a = member.toValue().numberValue(a);
                    }
                }
                else if (member instanceof Value && positional) {
                    if (index === 0) {
                        r = member.numberValue(r);
                    }
                    else if (index === 1) {
                        g = member.numberValue(g);
                    }
                    else if (index === 2) {
                        b = member.numberValue(b);
                    }
                    else if (index === 3) {
                        a = member.numberValue(a);
                    }
                }
            });
            if (r !== void 0 && g !== void 0 && b !== void 0) {
                return Color.rgb(r, g, b, a);
            }
            return void 0;
        };
        RgbColor.parse = function (str) {
            return Color.parse(str).rgb();
        };
        RgbColor.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.r !== void 0 && init.g !== void 0 && init.b !== void 0;
            }
            return false;
        };
        return RgbColor;
    }(Color));
    Color.Rgb = RgbColor;

    var HslColor = (function (_super) {
        __extends(HslColor, _super);
        function HslColor(h, s, l, a) {
            if (a === void 0) { a = 1; }
            var _this = _super.call(this) || this;
            _this.h = h;
            _this.s = s;
            _this.l = l;
            _this.a = a;
            return _this;
        }
        HslColor.prototype.isDefined = function () {
            return this.h !== 0 || this.s !== 0 || this.l !== 0 || this.a !== 1;
        };
        HslColor.prototype.alpha = function (a) {
            if (a === void 0) {
                return this.a;
            }
            else if (this.a !== a) {
                return new HslColor(this.h, this.s, this.l, a);
            }
            else {
                return this;
            }
        };
        HslColor.prototype.lightness = function () {
            return this.l;
        };
        HslColor.prototype.brighter = function (k) {
            k = k === void 0 ? BRIGHTER : Math.pow(BRIGHTER, k);
            return k !== 1 ? new HslColor(this.h, this.s, this.l * k, this.a) : this;
        };
        HslColor.prototype.darker = function (k) {
            k = k === void 0 ? DARKER : Math.pow(DARKER, k);
            return k !== 1 ? new HslColor(this.h, this.s, this.l * k, this.a) : this;
        };
        HslColor.toRgb = function (h, m1, m2) {
            return 255 * (h < 60 ? m1 + (m2 - m1) * h / 60
                : h < 180 ? m2
                    : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
                        : m1);
        };
        HslColor.prototype.rgb = function () {
            var h = this.h % 360 + +(this.h < 0) * 360;
            var s = isNaN(h) || isNaN(this.s) ? 0 : this.s;
            var l = this.l;
            var m2 = l + (l < 0.5 ? l : 1 - l) * s;
            var m1 = 2 * l - m2;
            return new Color.Rgb(HslColor.toRgb(h >= 240 ? h - 240 : h + 120, m1, m2), HslColor.toRgb(h, m1, m2), HslColor.toRgb(h < 120 ? h + 240 : h - 120, m1, m2), this.a);
        };
        HslColor.prototype.hsl = function () {
            return this;
        };
        HslColor.prototype.equals = function (other) {
            if (other instanceof HslColor) {
                return this.h === other.h && this.s === other.s && this.l === other.l && this.a === other.a;
            }
            return false;
        };
        HslColor.prototype.hashCode = function () {
            if (HslColor._hashSeed === void 0) {
                HslColor._hashSeed = Murmur3.seed(HslColor);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(HslColor._hashSeed, Murmur3.hash(this.h)), Murmur3.hash(this.s)), Murmur3.hash(this.l)), Murmur3.hash(this.a)));
        };
        HslColor.prototype.debug = function (output) {
            output = output.write("Color").write(46).write("hsl").write(40)
                .debug(this.h).write(", ").debug(this.s).write(", ").debug(this.l);
            if (this.a !== 1) {
                output = output.write(", ").debug(this.a);
            }
            output = output.write(41);
        };
        HslColor.prototype.toHexString = function () {
            return this.rgb().toHexString();
        };
        HslColor.prototype.toString = function () {
            var a = this.a;
            a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
            var s = a === 1 ? "hsl" : "hsla";
            s += "(";
            s += Math.max(0, Math.min(Math.round(this.h) || 0, 360));
            s += ",";
            s += Math.max(0, Math.min(100 * Math.round(this.s) || 0, 100)) + "%";
            s += ",";
            s += Math.max(0, Math.min(100 * Math.round(this.l) || 0, 100)) + "%";
            if (a !== 1) {
                s += ",";
                s += a;
            }
            s += ")";
            return s;
        };
        HslColor.transparent = function (alpha) {
            if (alpha === void 0) { alpha = 0; }
            return new HslColor(0, 0, 0, alpha);
        };
        HslColor.black = function () {
            return new HslColor(0, 0, 0, 1);
        };
        HslColor.white = function () {
            return new HslColor(0, 1, 1, 1);
        };
        HslColor.fromValue = function (value) {
            var tag = value.tag();
            var positional;
            if (tag === "hsl" || tag === "hsla") {
                value = value.header(tag);
                positional = true;
            }
            else {
                positional = false;
            }
            var h;
            var s;
            var l;
            var a;
            value.forEach(function (member, index) {
                var key = member.key.stringValue();
                if (key !== void 0) {
                    if (key === "h") {
                        h = member.toValue().cast(Angle.form(), h);
                    }
                    else if (key === "s") {
                        s = member.toValue().numberValue(s);
                    }
                    else if (key === "l") {
                        l = member.toValue().numberValue(l);
                    }
                    else if (key === "a") {
                        a = member.toValue().numberValue(a);
                    }
                }
                else if (member instanceof Value && positional) {
                    if (index === 0) {
                        h = member.cast(Angle.form(), h);
                    }
                    else if (index === 1) {
                        s = member.numberValue(s);
                    }
                    else if (index === 2) {
                        l = member.numberValue(l);
                    }
                    else if (index === 3) {
                        a = member.numberValue(a);
                    }
                }
            });
            if (h !== void 0 && s !== void 0 && l !== void 0) {
                return Color.hsl(h, s, l, a);
            }
            return void 0;
        };
        HslColor.parse = function (str) {
            return Color.parse(str).hsl();
        };
        HslColor.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.h !== void 0 && init.s !== void 0 && init.l !== void 0;
            }
            return false;
        };
        return HslColor;
    }(Color));
    Color.Hsl = HslColor;

    var ColorChannel = (function () {
        function ColorChannel(value, units) {
            if (units === void 0) { units = ""; }
            this.value = value;
            this.units = units;
        }
        ColorChannel.prototype.scale = function (k) {
            if (this.units === "%") {
                return this.value * k / 100;
            }
            else {
                return this.value;
            }
        };
        return ColorChannel;
    }());

    var ColorChannelParser = (function (_super) {
        __extends(ColorChannelParser, _super);
        function ColorChannelParser(valueParser, step) {
            var _this = _super.call(this) || this;
            _this.valueParser = valueParser;
            _this.step = step;
            return _this;
        }
        ColorChannelParser.prototype.feed = function (input) {
            return ColorChannelParser.parse(input, this.valueParser, this.step);
        };
        ColorChannelParser.parse = function (input, valueParser, step) {
            if (step === void 0) { step = 1; }
            if (step === 1) {
                if (!valueParser) {
                    valueParser = Base10.parseNumber(input);
                }
                else {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 2;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 2) {
                if (input.isCont() && input.head() === 37) {
                    input = input.step();
                    return Parser.done(new ColorChannel(valueParser.bind(), "%"));
                }
                else if (!input.isEmpty()) {
                    return Parser.done(new ColorChannel(valueParser.bind()));
                }
            }
            return new ColorChannelParser(valueParser, step);
        };
        return ColorChannelParser;
    }(Parser));
    ColorChannel.Parser = ColorChannelParser;

    var HexColorParser = (function (_super) {
        __extends(HexColorParser, _super);
        function HexColorParser(value, step) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._step = step;
            return _this;
        }
        HexColorParser.prototype.feed = function (input) {
            return HexColorParser.parse(input, this._value, this._step);
        };
        HexColorParser.parse = function (input, value, step) {
            if (value === void 0) { value = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont() && input.head() === 35) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("#", input));
                }
            }
            if (step >= 2) {
                while (step <= 9 && input.isCont()) {
                    c = input.head();
                    if (Base16.isDigit(c)) {
                        input = input.step();
                        value = (value << 4) | Base16.decodeDigit(c);
                        step += 1;
                    }
                    else {
                        break;
                    }
                }
                if (!input.isEmpty()) {
                    if (step === 5) {
                        return Parser.done(new RgbColor(value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, value << 4 & 0xf0 | value & 0x0f));
                    }
                    else if (step === 6) {
                        return Parser.done(new RgbColor(value >> 12 & 0x0f | value >> 8 & 0xf0, value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, (value << 4 & 0xf0 | value & 0x0f) / 255));
                    }
                    else if (step === 8) {
                        return Parser.done(new RgbColor(value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff));
                    }
                    else if (step === 10) {
                        return Parser.done(new RgbColor(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, (value & 0xff) / 255));
                    }
                    else {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
            }
            return new HexColorParser(value, step);
        };
        return HexColorParser;
    }(Parser));
    Color.HexParser = HexColorParser;

    var RgbColorParser = (function (_super) {
        __extends(RgbColorParser, _super);
        function RgbColorParser(rParser, gParser, bParser, aParser, step) {
            var _this = _super.call(this) || this;
            _this.rParser = rParser;
            _this.gParser = gParser;
            _this.bParser = bParser;
            _this.aParser = aParser;
            _this.step = step;
            return _this;
        }
        RgbColorParser.prototype.feed = function (input) {
            return RgbColorParser.parse(input, this.rParser, this.gParser, this.bParser, this.aParser, this.step);
        };
        RgbColorParser.parse = function (input, rParser, gParser, bParser, aParser, step) {
            var c = 0;
            if (step === 1) {
                if (input.isCont() && input.head() === 114) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("r", input));
                }
            }
            if (step === 2) {
                if (input.isCont() && input.head() === 103) {
                    input = input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("g", input));
                }
            }
            if (step === 3) {
                if (input.isCont() && input.head() === 98) {
                    input = input.step();
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("b", input));
                }
            }
            if (step === 4) {
                if (input.isCont() && input.head() === 97) {
                    input = input.step();
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    step = 5;
                }
            }
            if (step === 5) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input = input.step();
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 6) {
                if (!rParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        rParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    rParser = rParser.feed(input);
                }
                if (rParser) {
                    if (rParser.isDone()) {
                        step = 7;
                    }
                    else if (rParser.isError()) {
                        return rParser.asError();
                    }
                }
            }
            if (step === 7) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 44) {
                        input = input.step();
                    }
                    step = 8;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 8) {
                if (!gParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        gParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    gParser = gParser.feed(input);
                }
                if (gParser) {
                    if (gParser.isDone()) {
                        step = 9;
                    }
                    else if (gParser.isError()) {
                        return gParser.asError();
                    }
                }
            }
            if (step === 9) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 44) {
                        input = input.step();
                    }
                    step = 10;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 10) {
                if (!bParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        bParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    bParser = bParser.feed(input);
                }
                if (bParser) {
                    if (bParser.isDone()) {
                        step = 11;
                    }
                    else if (bParser.isError()) {
                        return bParser.asError();
                    }
                }
            }
            if (step === 11) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 41) {
                        input = input.step();
                        return Parser.done(new RgbColor(rParser.bind().scale(255), gParser.bind().scale(255), bParser.bind().scale(255)));
                    }
                    else if (c === 44 || c === 47) {
                        input = input.step();
                    }
                    step = 12;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 12) {
                if (!aParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        aParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    aParser = aParser.feed(input);
                }
                if (aParser) {
                    if (aParser.isDone()) {
                        step = 13;
                    }
                    else if (aParser.isError()) {
                        return aParser.asError();
                    }
                }
            }
            if (step === 13) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 41) {
                    input = input.step();
                    return Parser.done(new RgbColor(rParser.bind().scale(255), gParser.bind().scale(255), bParser.bind().scale(255), aParser.bind().scale(1)));
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new RgbColorParser(rParser, gParser, bParser, aParser, step);
        };
        RgbColorParser.parseRest = function (input) {
            return RgbColorParser.parse(input, void 0, void 0, void 0, void 0, 5);
        };
        return RgbColorParser;
    }(Parser));
    Color.RgbParser = RgbColorParser;

    var HslColorParser = (function (_super) {
        __extends(HslColorParser, _super);
        function HslColorParser(hParser, sParser, lParser, aParser, step) {
            var _this = _super.call(this) || this;
            _this.hParser = hParser;
            _this.sParser = sParser;
            _this.lParser = lParser;
            _this.aParser = aParser;
            _this.step = step;
            return _this;
        }
        HslColorParser.prototype.feed = function (input) {
            return HslColorParser.parse(input, this.hParser, this.sParser, this.lParser, this.aParser, this.step);
        };
        HslColorParser.parse = function (input, hParser, sParser, lParser, aParser, step) {
            var c = 0;
            if (step === 1) {
                if (input.isCont() && input.head() === 104) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("h", input));
                }
            }
            if (step === 2) {
                if (input.isCont() && input.head() === 115) {
                    input = input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("s", input));
                }
            }
            if (step === 3) {
                if (input.isCont() && input.head() === 108) {
                    input = input.step();
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("l", input));
                }
            }
            if (step === 4) {
                if (input.isCont() && input.head() === 97) {
                    input = input.step();
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    step = 5;
                }
            }
            if (step === 5) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input = input.step();
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 6) {
                if (!hParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        hParser = AngleParser.parse(input, "deg");
                    }
                }
                else {
                    hParser = hParser.feed(input);
                }
                if (hParser) {
                    if (hParser.isDone()) {
                        step = 7;
                    }
                    else if (hParser.isError()) {
                        return hParser.asError();
                    }
                }
            }
            if (step === 7) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 44) {
                        input = input.step();
                    }
                    step = 8;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 8) {
                if (!sParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        sParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    sParser = sParser.feed(input);
                }
                if (sParser) {
                    if (sParser.isDone()) {
                        if (sParser.bind().units === "%") {
                            step = 9;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("%", input));
                        }
                    }
                    else if (sParser.isError()) {
                        return sParser.asError();
                    }
                }
            }
            if (step === 9) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 44) {
                        input = input.step();
                    }
                    step = 10;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 10) {
                if (!lParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (input.isCont()) {
                        lParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    lParser = lParser.feed(input);
                }
                if (lParser) {
                    if (lParser.isDone()) {
                        if (lParser.bind().units === "%") {
                            step = 11;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("%", input));
                        }
                    }
                    else if (lParser.isError()) {
                        return lParser.asError();
                    }
                }
            }
            if (step === 11) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 41) {
                        input = input.step();
                        return Parser.done(new HslColor(hParser.bind().degValue(), sParser.bind().scale(1), lParser.bind().scale(1)));
                    }
                    else if (c === 44 || c === 47) {
                        input = input.step();
                    }
                    step = 12;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 12) {
                if (!aParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input = input.step();
                    }
                    if (!input.isEmpty()) {
                        aParser = ColorChannelParser.parse(input);
                    }
                }
                else {
                    aParser = aParser.feed(input);
                }
                if (aParser) {
                    if (aParser.isDone()) {
                        step = 13;
                    }
                    else if (aParser.isError()) {
                        return aParser.asError();
                    }
                }
            }
            if (step === 13) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 41) {
                    input = input.step();
                    return Parser.done(new HslColor(hParser.bind().degValue(), sParser.bind().scale(1), lParser.bind().scale(1), aParser.bind().scale(1)));
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new HslColorParser(hParser, sParser, lParser, aParser, step);
        };
        HslColorParser.parseRest = function (input) {
            return HslColorParser.parse(input, void 0, void 0, void 0, void 0, 5);
        };
        return HslColorParser;
    }(Parser));
    Color.HslParser = HslColorParser;

    var ColorParser = (function (_super) {
        __extends(ColorParser, _super);
        function ColorParser(identOutput, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.step = step;
            return _this;
        }
        ColorParser.prototype.feed = function (input) {
            return ColorParser.parse(input, this.identOutput, this.step);
        };
        ColorParser.parse = function (input, identOutput, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    if (input.head() === 35) {
                        return HexColorParser.parse(input);
                    }
                    else {
                        step = 2;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 2) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "rgb":
                        case "rgba": return RgbColorParser.parseRest(input);
                        case "hsl":
                        case "hsla": return HslColorParser.parseRest(input);
                        default:
                            var color = Color.fromName(ident);
                            if (color !== void 0) {
                                return Parser.done(color);
                            }
                            else {
                                return Parser.error(Diagnostic.message("unknown color: " + ident, input));
                            }
                    }
                }
            }
            return new ColorParser(identOutput, step);
        };
        return ColorParser;
    }(Parser));
    Color.Parser = ColorParser;

    var ColorForm = (function (_super) {
        __extends(ColorForm, _super);
        function ColorForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        ColorForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ColorForm(unit);
            }
        };
        ColorForm.prototype.mold = function (color) {
            color = Color.fromAny(color);
            return Text$1.from(color.toString());
        };
        ColorForm.prototype.cast = function (item) {
            var value = item.toValue();
            var color;
            try {
                color = Color.fromValue(value);
                if (!color) {
                    var string = value.stringValue(void 0);
                    if (string !== void 0) {
                        color = Color.parse(string);
                    }
                }
            }
            catch (e) {
            }
            return color;
        };
        return ColorForm;
    }(Form));
    Color.Form = ColorForm;

    var FontSize = {
        fromAny: function (size) {
            if (typeof size === "string" && (size === "large" || size === "larger" || size === "medium"
                || size === "small" || size === "smaller" || size === "x-large" || size === "x-small"
                || size === "xx-large" || size === "xx-small")) {
                return size;
            }
            else {
                return Length.fromAny(size);
            }
        },
        fromValue: function (value) {
            var string = value.stringValue(void 0);
            if (string !== void 0) {
                return FontSize.fromAny(string);
            }
            else {
                return Length.form().cast(value);
            }
        },
    };

    var LineHeight = {
        fromAny: function (height) {
            if (typeof height === "string" && height === "normal") {
                return height;
            }
            else {
                return Length.fromAny(height);
            }
        },
        fromValue: function (value) {
            var string = value.stringValue(void 0);
            if (string !== void 0) {
                return LineHeight.fromAny(string);
            }
            else {
                return Length.form().cast(value);
            }
        },
    };

    var FontFamily = {
        fromValue: function (value) {
            var family;
            value.forEach(function (item) {
                if (item instanceof Value) {
                    var string = item.stringValue(void 0);
                    if (string !== void 0) {
                        if (family === void 0) {
                            family = string;
                        }
                        else if (typeof family === "string") {
                            family = [family, string];
                        }
                        else {
                            family.push(string);
                        }
                    }
                }
            });
            return family;
        },
        format: function (family) {
            var n = family.length;
            var isIdent;
            if (n > 0) {
                isIdent = Unicode.isAlpha(family.charCodeAt(0));
                for (var i = family.offsetByCodePoints(0, 1); isIdent && i < n; i = family.offsetByCodePoints(i, 1)) {
                    var c = family.charCodeAt(i);
                    isIdent = Unicode.isAlpha(c) || c === 45;
                }
            }
            else {
                isIdent = false;
            }
            if (isIdent) {
                return family;
            }
            else {
                var output = Unicode.stringOutput();
                output.write(34);
                for (var i = 0; i < n; i = family.offsetByCodePoints(i, 1)) {
                    var c = family.charCodeAt(i);
                    if (c === 10 || c === 34 || c === 39) {
                        output.write(92).write(c);
                    }
                    else if (c >= 0x20) {
                        output.write(c);
                    }
                    else {
                        var base16 = Base16.uppercase();
                        output.write(92).write(base16.encodeDigit(c >>> 20 & 0xf))
                            .write(base16.encodeDigit(c >>> 16 & 0xf))
                            .write(base16.encodeDigit(c >>> 12 & 0xf))
                            .write(base16.encodeDigit(c >>> 8 & 0xf))
                            .write(base16.encodeDigit(c >>> 4 & 0xf))
                            .write(base16.encodeDigit(c & 0xf));
                    }
                }
                output.write(34);
                return output.toString();
            }
        },
    };

    var FontFamilyParser = (function (_super) {
        __extends(FontFamilyParser, _super);
        function FontFamilyParser(output, quote, code, step) {
            var _this = _super.call(this) || this;
            _this.output = output;
            _this.quote = quote;
            _this.code = code;
            _this.step = step;
            return _this;
        }
        FontFamilyParser.prototype.feed = function (input) {
            return FontFamilyParser.parse(input, this.output, this.quote, this.code, this.step);
        };
        FontFamilyParser.parse = function (input, output, quote, code, step) {
            if (quote === void 0) { quote = 0; }
            if (code === void 0) { code = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (Unicode.isAlpha(c)) {
                        output = output || Unicode.stringOutput();
                        step = 2;
                    }
                    else if (c === 34 || c === 39 && (quote === c || quote === 0)) {
                        input = input.step();
                        output = output || Unicode.stringOutput();
                        quote = c;
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("font family", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("font family", input));
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 45)) {
                    input = input.step();
                    output.write(c);
                }
                if (!input.isEmpty()) {
                    return Parser.done(output.bind());
                }
            }
            string: do {
                if (step === 3) {
                    while (input.isCont()) {
                        c = input.head();
                        if (c >= 0x20 && c !== quote && c !== 92) {
                            input = input.step();
                            output.write(c);
                        }
                        else {
                            break;
                        }
                    }
                    if (input.isCont()) {
                        if (c === quote) {
                            input = input.step();
                            return Parser.done(output.bind());
                        }
                        else if (c === 92) {
                            input = input.step();
                            step = 4;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(quote, input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected(quote, input));
                    }
                }
                if (step === 4) {
                    if (input.isCont()) {
                        c = input.head();
                        if (Base16.isDigit(c)) {
                            step = 5;
                        }
                        else if (c === 10) {
                            input.step();
                            step = 3;
                            continue;
                        }
                        else {
                            input.step();
                            output.write(c);
                            step = 3;
                            continue;
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected("escape character", input));
                    }
                }
                if (step >= 5) {
                    do {
                        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                            input = input.step();
                            code = 16 * code + Base16.decodeDigit(c);
                            if (step <= 11) {
                                step += 1;
                                continue;
                            }
                            else {
                                if (code === 0) {
                                    return Parser.error(Diagnostic.message("zero escape", input));
                                }
                                output.write(code);
                                code = 0;
                                step = 3;
                                continue string;
                            }
                        }
                        else if (!input.isEmpty()) {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                        break;
                    } while (true);
                }
                break;
            } while (true);
            return new FontFamilyParser(output, quote, code, step);
        };
        return FontFamilyParser;
    }(Parser));

    var Font = (function () {
        function Font(style, variant, weight, stretch, size, height, family) {
            this._style = style;
            this._variant = variant;
            this._weight = weight;
            this._stretch = stretch;
            this._size = size;
            this._height = height;
            this._family = family;
        }
        Font.prototype.style = function (style) {
            if (style === void 0) {
                return this._style;
            }
            else {
                if (this._style === style) {
                    return this;
                }
                else {
                    return new Font(style, this._variant, this._weight, this._stretch, this._size, this._height, this._family);
                }
            }
        };
        Font.prototype.variant = function (variant) {
            if (variant === void 0) {
                return this._variant;
            }
            else {
                if (this._variant === variant) {
                    return this;
                }
                else {
                    return new Font(this._style, variant, this._weight, this._stretch, this._size, this._height, this._family);
                }
            }
        };
        Font.prototype.weight = function (weight) {
            if (weight === void 0) {
                return this._weight;
            }
            else {
                if (this._weight === weight) {
                    return this;
                }
                else {
                    return new Font(this._style, this._variant, weight, this._stretch, this._size, this._height, this._family);
                }
            }
        };
        Font.prototype.stretch = function (stretch) {
            if (stretch === void 0) {
                return this._stretch;
            }
            else {
                if (this._stretch === stretch) {
                    return this;
                }
                else {
                    return new Font(this._style, this._variant, this._weight, stretch, this._size, this._height, this._family);
                }
            }
        };
        Font.prototype.size = function (size) {
            if (size === void 0) {
                return this._size;
            }
            else {
                size = size !== null ? FontSize.fromAny(size) : null;
                if (Objects.equal(this._size, size)) {
                    return this;
                }
                else {
                    return new Font(this._style, this._variant, this._weight, this._stretch, size, this._height, this._family);
                }
            }
        };
        Font.prototype.height = function (height) {
            if (height === void 0) {
                return this._height;
            }
            else {
                height = height !== null ? LineHeight.fromAny(height) : null;
                if (Objects.equal(this._height, height)) {
                    return this;
                }
                else {
                    return new Font(this._style, this._variant, this._weight, this._stretch, this._size, height, this._family);
                }
            }
        };
        Font.prototype.family = function (family) {
            if (family === void 0) {
                return (Array.isArray(this._family) ? this._family.slice(0) : this._family);
            }
            else {
                if (Objects.equal(this._family, family)) {
                    return this;
                }
                else {
                    if (Array.isArray(family) && family.length === 1) {
                        family = family[0];
                    }
                    return new Font(this._style, this._variant, this._weight, this._stretch, this._size, this._height, family);
                }
            }
        };
        Font.prototype.toAny = function () {
            return {
                style: this._style,
                variant: this._variant,
                weight: this._weight,
                stretch: this._stretch,
                size: this._size,
                height: this._height,
                family: (Array.isArray(this._family) ? this._family.slice(0) : this._family),
            };
        };
        Font.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Font) {
                return this._style === that._style && this._variant === that._variant
                    && this._weight === that._weight && this._stretch === that._stretch
                    && Objects.equal(this._size, that._size)
                    && Objects.equal(this._height, that._height)
                    && Objects.equal(this._family, that._family);
            }
            return false;
        };
        Font.prototype.debug = function (output) {
            output = output.write("Font").write(46).write("family").write(40).write(41);
            if (typeof this._family === "string") {
                output = output.debug(this._family);
            }
            else if (Array.isArray(this._family) && this._family.length) {
                output = output.debug(this._family[0]);
                for (var i = 1; i < this._family.length; i += 1) {
                    output = output.write(", ").debug(this._family[i]);
                }
            }
            output = output.write(41);
            if (this._style !== null) {
                output = output.write(46).write("style").write(40).debug(this._style).write(41);
            }
            if (this._variant !== null) {
                output = output.write(46).write("variant").write(40).debug(this._variant).write(41);
            }
            if (this._weight !== null) {
                output = output.write(46).write("weight").write(40).debug(this._weight).write(41);
            }
            if (this._stretch !== null) {
                output = output.write(46).write("stretch").write(40).debug(this._stretch).write(41);
            }
            if (this._size !== null) {
                output = output.write(46).write("size").write(40).debug(this._size).write(41);
            }
            if (this._height !== null) {
                output = output.write(46).write("height").write(40).debug(this._height).write(41);
            }
        };
        Font.prototype.toString = function () {
            var s = "";
            if (this._style !== null || this._variant === "normal" || this._weight === "normal" || this._stretch === "normal") {
                s += this._style || "normal";
            }
            if (this._variant !== null || this._weight === "normal" || this._stretch === "normal") {
                if (s) {
                    s += " ";
                }
                s += this._variant || "normal";
            }
            if (this._weight !== null || this._stretch === "normal") {
                if (s) {
                    s += " ";
                }
                s += this._weight || "normal";
            }
            if (this._stretch !== null) {
                if (s) {
                    s += " ";
                }
                s += this._stretch;
            }
            if (this._size !== null) {
                if (s) {
                    s += " ";
                }
                s += this._size.toString();
                if (this._height !== null) {
                    s += "/";
                    s += this._height.toString();
                }
            }
            if (typeof this._family === "string") {
                if (s) {
                    s += " ";
                }
                s += FontFamily.format(this._family);
            }
            else if (Array.isArray(this._family) && this._family.length) {
                if (s) {
                    s += " ";
                }
                s += FontFamily.format(this._family[0]);
                for (var i = 1; i < this._family.length; i += 1) {
                    s += ", ";
                    s += FontFamily.format(this._family[i]);
                }
            }
            return s;
        };
        Font.style = function (style, family) {
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(style, null, null, null, null, null, family);
        };
        Font.variant = function (variant, family) {
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(null, variant, null, null, null, null, family);
        };
        Font.weight = function (weight, family) {
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(null, null, weight, null, null, null, family);
        };
        Font.stretch = function (stretch, family) {
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(null, null, null, stretch, null, null, family);
        };
        Font.size = function (size, family) {
            size = size !== null ? FontSize.fromAny(size) : null;
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(null, null, null, null, size, null, family);
        };
        Font.family = function (family) {
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(null, null, null, null, null, null, family);
        };
        Font.from = function (style, variant, weight, stretch, size, height, family) {
            if (style === void 0) { style = null; }
            if (variant === void 0) { variant = null; }
            if (weight === void 0) { weight = null; }
            if (stretch === void 0) { stretch = null; }
            if (size === void 0) { size = null; }
            if (height === void 0) { height = null; }
            size = size !== null ? FontSize.fromAny(size) : null;
            height = height !== null ? LineHeight.fromAny(height) : null;
            if (Array.isArray(family) && family.length === 1) {
                family = family[0];
            }
            return new Font(style, variant, weight, stretch, size, height, family);
        };
        Font.fromAny = function (value) {
            if (value instanceof Font) {
                return value;
            }
            else if (typeof value === "object" && value) {
                return Font.from(value.style, value.variant, value.weight, value.stretch, value.size, value.height, value.family);
            }
            else if (typeof value === "string") {
                return Font.parse(value);
            }
            throw new TypeError("" + value);
        };
        Font.fromValue = function (value) {
            var header = value.header("font");
            if (header) {
                var style = header.get("style").stringValue(null);
                var variant = header.get("variant").stringValue(null);
                var weight = header.get("weight").stringValue(null);
                var stretch = header.get("stretch").stringValue(null);
                var size = FontSize.fromValue(header.get("size"));
                var height = LineHeight.fromValue(header.get("height"));
                var family = FontFamily.fromValue(header.get("family"));
                if (family !== void 0) {
                    return Font.from(style, variant, weight, stretch, size, height, family);
                }
            }
            return void 0;
        };
        Font.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Font.Parser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        Font.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.family !== void 0;
            }
            return false;
        };
        Font.form = function (unit) {
            if (unit !== void 0) {
                unit = Font.fromAny(unit);
                return new Font.Form(unit);
            }
            else {
                if (!Font._form) {
                    Font._form = new Font.Form();
                }
                return Font._form;
            }
        };
        return Font;
    }());

    var FontParser = (function (_super) {
        __extends(FontParser, _super);
        function FontParser(style, variant, weight, stretch, size, height, family, identOutput, lengthParser, familyParser, step) {
            var _this = _super.call(this) || this;
            _this.style = style;
            _this.variant = variant;
            _this.weight = weight;
            _this.stretch = stretch;
            _this.size = size;
            _this.height = height;
            _this.family = family;
            _this.identOutput = identOutput;
            _this.lengthParser = lengthParser;
            _this.familyParser = familyParser;
            _this.step = step;
            return _this;
        }
        FontParser.prototype.feed = function (input) {
            return FontParser.parse(input, this.style, this.variant, this.weight, this.stretch, this.size, this.height, this.family, this.identOutput, this.lengthParser, this.familyParser, this.step);
        };
        FontParser.parse = function (input, style, variant, weight, stretch, size, height, family, identOutput, lengthParser, familyParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont()) {
                        if (Unicode.isAlpha(c)) {
                            step = 2;
                        }
                        else if (c === 34 || c === 39) {
                            step = 11;
                        }
                        else {
                            step = 4;
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 2) {
                    identOutput = identOutput || Unicode.stringOutput();
                    while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 45)) {
                        input = input.step();
                        identOutput.write(c);
                    }
                    if (!input.isEmpty()) {
                        var ident = identOutput.bind();
                        identOutput = void 0;
                        switch (ident) {
                            case "italic":
                            case "oblique":
                                if (style === void 0) {
                                    style = ident;
                                }
                                else {
                                    return Parser.error(Diagnostic.message("reapeated font style: " + ident, input));
                                }
                                step = 3;
                                break;
                            case "small-caps":
                                if (variant === void 0) {
                                    variant = ident;
                                }
                                else {
                                    return Parser.error(Diagnostic.message("reapeated font variant: " + ident, input));
                                }
                                step = 3;
                                break;
                            case "bold":
                            case "bolder":
                            case "lighter":
                                if (weight === void 0) {
                                    weight = ident;
                                }
                                else {
                                    return Parser.error(Diagnostic.message("reapeated font weight: " + ident, input));
                                }
                                step = 3;
                                break;
                            case "ultra-condensed":
                            case "extra-condensed":
                            case "semi-condensed":
                            case "condensed":
                            case "expanded":
                            case "semi-expanded":
                            case "extra-expanded":
                            case "ultra-expanded":
                                if (stretch === void 0) {
                                    stretch = ident;
                                }
                                else {
                                    return Parser.error(Diagnostic.message("reapeated font stretch: " + ident, input));
                                }
                                step = 3;
                                break;
                            case "normal":
                                if (style === void 0) {
                                    style = ident;
                                }
                                else if (variant === void 0) {
                                    variant = ident;
                                }
                                else if (weight === void 0) {
                                    weight = ident;
                                }
                                else if (stretch === void 0) {
                                    stretch = ident;
                                }
                                else {
                                    return Parser.error(Diagnostic.message("reapeated font property: " + ident, input));
                                }
                                step = 3;
                                break;
                            case "large":
                            case "larger":
                            case "medium":
                            case "small":
                            case "smaller":
                            case "x-large":
                            case "x-small":
                            case "xx-large":
                            case "xx-small":
                                size = ident;
                                step = 5;
                                break;
                            default:
                                family = ident;
                                step = 12;
                        }
                    }
                }
                if (step === 3) {
                    if (input.isCont()) {
                        c = input.head();
                        if (Unicode.isSpace(c)) {
                            input.step();
                            step = 1;
                            continue;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("font property, size, or family", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 4) {
                    if (!lengthParser) {
                        lengthParser = LengthParser.parse(input);
                    }
                    else {
                        lengthParser = lengthParser.feed(input);
                    }
                    if (lengthParser.isDone()) {
                        var length_1 = lengthParser.bind();
                        if (length_1.units() === "") {
                            var value = length_1.value();
                            switch (value) {
                                case 100:
                                case 200:
                                case 300:
                                case 400:
                                case 500:
                                case 600:
                                case 700:
                                case 800:
                                case 900:
                                    if (weight === void 0) {
                                        weight = String(value);
                                    }
                                    else {
                                        return Parser.error(Diagnostic.message("reapeated font weight: " + value, input));
                                    }
                                    break;
                                default:
                                    return Parser.error(Diagnostic.message("unknown font property: " + value, input));
                            }
                            step = 3;
                            continue;
                        }
                        else {
                            size = length_1;
                            lengthParser = void 0;
                            step = 5;
                        }
                    }
                    else if (lengthParser.isError()) {
                        return lengthParser.asError();
                    }
                }
                if (step === 5) {
                    if (input.isCont()) {
                        c = input.head();
                        if (Unicode.isSpace(c)) {
                            input.step();
                            step = 6;
                        }
                        else if (c === 47) {
                            input.step();
                            step = 7;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("font family", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 6) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont()) {
                        if (c === 47) {
                            input.step();
                            step = 7;
                        }
                        else {
                            step = 11;
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 7) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont()) {
                        if (Unicode.isAlpha(c)) {
                            step = 8;
                        }
                        else {
                            step = 9;
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 8) {
                    identOutput = identOutput || Unicode.stringOutput();
                    while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                        input = input.step();
                        identOutput.write(c);
                    }
                    if (!input.isEmpty()) {
                        var ident = identOutput.bind();
                        identOutput = void 0;
                        switch (ident) {
                            case "normal":
                                height = ident;
                                step = 10;
                                break;
                            default:
                                return Parser.error(Diagnostic.message("unknown line height: " + ident, input));
                        }
                    }
                }
                if (step === 9) {
                    if (!lengthParser) {
                        lengthParser = LengthParser.parse(input);
                    }
                    else {
                        lengthParser = lengthParser.feed(input);
                    }
                    if (lengthParser.isDone()) {
                        height = lengthParser.bind();
                        lengthParser = void 0;
                        step = 10;
                    }
                    else if (lengthParser.isError()) {
                        return lengthParser.asError();
                    }
                }
                if (step === 10) {
                    if (input.isCont()) {
                        c = input.head();
                        if (Unicode.isSpace(c)) {
                            input.step();
                            step = 11;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("font family", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 11) {
                    if (!familyParser) {
                        familyParser = FontFamilyParser.parse(input);
                    }
                    else {
                        familyParser = familyParser.feed(input);
                    }
                    if (familyParser.isDone()) {
                        if (Array.isArray(family)) {
                            family.push(familyParser.bind());
                        }
                        else if (family !== void 0) {
                            family = [family, familyParser.bind()];
                        }
                        else {
                            family = familyParser.bind();
                        }
                        familyParser = void 0;
                        step = 12;
                    }
                    else if (familyParser.isError()) {
                        return familyParser.asError();
                    }
                }
                if (step === 12) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont() && c === 44) {
                        input.step();
                        step = 11;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(Font.from(style, variant, weight, stretch, size, height, family));
                    }
                }
                break;
            } while (true);
            return new FontParser(style, variant, weight, stretch, size, height, family, identOutput, lengthParser, familyParser, step);
        };
        FontParser.parseRest = function (input, style, variant, weight, stretch, size, height, family) {
            var step = family !== void 0 ? 12 : size !== void 0 ? 5 : 3;
            return FontParser.parse(input, style, variant, weight, stretch, size, height, family, void 0, void 0, void 0, step);
        };
        return FontParser;
    }(Parser));
    Font.Parser = FontParser;

    var FontForm = (function (_super) {
        __extends(FontForm, _super);
        function FontForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        FontForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new FontForm(unit);
            }
        };
        FontForm.prototype.mold = function (font) {
            font = Font.fromAny(font);
            var header = Record.create(7);
            if (font._style !== null) {
                header.slot("style", font._style);
            }
            if (font._variant !== null) {
                header.slot("variant", font._variant);
            }
            if (font._weight !== null) {
                header.slot("weight", font._weight);
            }
            if (font._stretch !== null) {
                header.slot("stretch", font._stretch);
            }
            if (font._size instanceof Length) {
                header.slot("size", Length.form().mold(font._size));
            }
            else if (font._size !== null) {
                header.slot("size", font._size);
            }
            if (font._height instanceof Length) {
                header.slot("height", Length.form().mold(font._height));
            }
            else if (font._height !== null) {
                header.slot("height", font._height);
            }
            if (Array.isArray(font._family)) {
                var family = Record.create(font._family.length);
                for (var i = 0; i < font._family.length; i += 1) {
                    family.push(font._family[i]);
                }
                header.slot("family", family);
            }
            else {
                header.slot("family", font._family);
            }
            return Record.of(Attr.of("font", header));
        };
        FontForm.prototype.cast = function (item) {
            var value = item.toValue();
            var font;
            try {
                font = Font.fromValue(value);
                if (!font) {
                    var string = value.stringValue();
                    if (string !== void 0) {
                        font = Font.parse(string);
                    }
                }
            }
            catch (e) {
            }
            return font;
        };
        return FontForm;
    }(Form));
    Font.Form = FontForm;

    var Transform = (function () {
        function Transform() {
        }
        Transform.prototype.translate = function (x, y) {
            return this.transform(Transform.translate(x, y));
        };
        Transform.prototype.translateX = function (x) {
            return this.transform(Transform.translateX(x));
        };
        Transform.prototype.translateY = function (y) {
            return this.transform(Transform.translateY(y));
        };
        Transform.prototype.scale = function (x, y) {
            return this.transform(Transform.scale(x, y));
        };
        Transform.prototype.scaleX = function (x) {
            return this.transform(Transform.scaleX(x));
        };
        Transform.prototype.scaleY = function (y) {
            return this.transform(Transform.scaleY(y));
        };
        Transform.prototype.rotate = function (a) {
            return this.transform(Transform.rotate(a));
        };
        Transform.prototype.skew = function (x, y) {
            return this.transform(Transform.skew(x, y));
        };
        Transform.prototype.skewX = function (x) {
            return this.transform(Transform.skewX(x));
        };
        Transform.prototype.skewY = function (y) {
            return this.transform(Transform.skewY(y));
        };
        Transform.prototype.toAttributeString = function () {
            return this.toString();
        };
        Transform.identity = function () {
            if (!Transform._identity) {
                Transform._identity = new Transform.Identity();
            }
            return Transform._identity;
        };
        Transform.translate = function (x, y) {
            return new Transform.Translate(x, y);
        };
        Transform.translateX = function (x) {
            return new Transform.Translate(x, 0);
        };
        Transform.translateY = function (y) {
            return new Transform.Translate(0, y);
        };
        Transform.scale = function (x, y) {
            return new Transform.Scale(x, y);
        };
        Transform.scaleX = function (x) {
            return new Transform.Scale(x, 1);
        };
        Transform.scaleY = function (y) {
            return new Transform.Scale(1, y);
        };
        Transform.rotate = function (a) {
            return new Transform.Rotate(a);
        };
        Transform.skew = function (x, y) {
            return new Transform.Skew(x, y);
        };
        Transform.skewX = function (x) {
            return new Transform.Skew(x, 0);
        };
        Transform.skewY = function (y) {
            return new Transform.Skew(0, y);
        };
        Transform.affine = function (x0, y0, x1, y1, tx, ty) {
            return new Transform.Affine(x0, y0, x1, y1, tx, ty);
        };
        Transform.list = function () {
            var transforms = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                transforms[_i] = arguments[_i];
            }
            return new Transform.List(transforms);
        };
        Transform.fromAny = function (value) {
            if (value instanceof Transform) {
                return value;
            }
            else if (typeof value === "string") {
                return Transform.parse(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Transform.fromValue = function (value) {
            var tag = value.tag();
            switch (tag) {
                case "identity": return Transform.Identity.fromValue(value);
                case "translate": return Transform.Translate.fromValue(value);
                case "scale": return Transform.Scale.fromValue(value);
                case "rotate": return Transform.Rotate.fromValue(value);
                case "skew": return Transform.Skew.fromValue(value);
                case "matrix": return Transform.Affine.fromValue(value);
                default: return Transform.List.fromValue(value);
            }
        };
        Transform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.ListParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        Transform.form = function (unit) {
            if (unit !== void 0) {
                return new Transform.Form(Transform.fromAny(unit));
            }
            else {
                if (!Transform._form) {
                    Transform._form = new Transform.Form();
                }
                return Transform._form;
            }
        };
        return Transform;
    }());

    var IdentityTransform = (function (_super) {
        __extends(IdentityTransform, _super);
        function IdentityTransform() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentityTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                return x;
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                if (typeof x === "number" && typeof y === "number") {
                    return [x, y];
                }
                else {
                    x = Length.fromAny(x);
                    y = Length.fromAny(y);
                    return [x, y];
                }
            }
        };
        IdentityTransform.prototype.transformX = function (x, y) {
            return x;
        };
        IdentityTransform.prototype.transformY = function (x, y) {
            return y;
        };
        IdentityTransform.prototype.inverse = function () {
            return this;
        };
        IdentityTransform.prototype.toAffine = function () {
            return new Transform.Affine(1, 0, 0, 1, 0, 0);
        };
        IdentityTransform.prototype.toValue = function () {
            return Record.of(Attr.of("identity"));
        };
        IdentityTransform.prototype.conformsTo = function (that) {
            return that instanceof IdentityTransform;
        };
        IdentityTransform.prototype.equals = function (that) {
            return that instanceof IdentityTransform;
        };
        IdentityTransform.prototype.hashCode = function () {
            if (IdentityTransform._hashSeed === void 0) {
                IdentityTransform._hashSeed = Murmur3.seed(IdentityTransform);
            }
            return IdentityTransform._hashSeed;
        };
        IdentityTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("identity")
                .write(40).write(41);
        };
        IdentityTransform.prototype.toString = function () {
            return "none";
        };
        IdentityTransform.fromValue = function (value) {
            if (value.tag() === "identity") {
                return Transform.identity();
            }
            return void 0;
        };
        return IdentityTransform;
    }(Transform));
    Transform.Identity = IdentityTransform;

    var TranslateTransform = (function (_super) {
        __extends(TranslateTransform, _super);
        function TranslateTransform(x, y) {
            var _this = _super.call(this) || this;
            _this._x = Length.fromAny(x);
            _this._y = Length.fromAny(y);
            return _this;
        }
        Object.defineProperty(TranslateTransform.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TranslateTransform.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        TranslateTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return new Transform.List([this, x]);
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                if (typeof x === "number" && typeof y === "number") {
                    return [x + this._x.pxValue(), y + this._y.pxValue()];
                }
                else {
                    x = Length.fromAny(x);
                    y = Length.fromAny(y);
                    return [x.plus(this._x), y.plus(this._y)];
                }
            }
        };
        TranslateTransform.prototype.transformX = function (x, y) {
            return x + this._x.pxValue();
        };
        TranslateTransform.prototype.transformY = function (x, y) {
            return y + this._y.pxValue();
        };
        TranslateTransform.prototype.inverse = function () {
            return new TranslateTransform(this._x.opposite(), this._y.opposite());
        };
        TranslateTransform.prototype.toAffine = function () {
            return new Transform.Affine(1, 0, 0, 1, this._x.pxValue(), this._y.pxValue());
        };
        TranslateTransform.prototype.toValue = function () {
            return Record.of(Attr.of("translate", Record.of(Slot.of("x", this._x.toString()), Slot.of("y", this._y.toString()))));
        };
        TranslateTransform.prototype.conformsTo = function (that) {
            return that instanceof TranslateTransform;
        };
        TranslateTransform.prototype.equals = function (that) {
            if (that instanceof TranslateTransform) {
                return this._x.equals(that._x) && this._y.equals(that._y);
            }
            return false;
        };
        TranslateTransform.prototype.hashCode = function () {
            if (TranslateTransform._hashSeed === void 0) {
                TranslateTransform._hashSeed = Murmur3.seed(TranslateTransform);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(TranslateTransform._hashSeed, this._x.hashCode()), this._y.hashCode()));
        };
        TranslateTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("translate");
            if (this._x.isDefined() && !this._y.isDefined()) {
                output = output.write("X").write(40).debug(this._x).write(41);
            }
            else if (!this._x.isDefined() && this._y.isDefined()) {
                output = output.write("Y").write(40).debug(this._y).write(41);
            }
            else {
                output = output.write(40).debug(this._x).write(", ").debug(this._y).write(41);
            }
        };
        TranslateTransform.prototype.toString = function () {
            if (this._x.isDefined() && !this._y.isDefined()) {
                return "translate(" + this._x + ",0)";
            }
            else if (!this._x.isDefined() && this._y.isDefined()) {
                return "translate(0," + this._y + ")";
            }
            else {
                return "translate(" + this._x + "," + this._y + ")";
            }
        };
        TranslateTransform.prototype.toAttributeString = function () {
            if (this._x.isDefined() && !this._y.isDefined()) {
                return "translate(" + this._x.pxValue() + ",0)";
            }
            else if (!this._x.isDefined() && this._y.isDefined()) {
                return "translate(0," + this._y.pxValue() + ")";
            }
            else {
                return "translate(" + this._x.pxValue() + "," + this._y.pxValue() + ")";
            }
        };
        TranslateTransform.fromAny = function (value) {
            if (value instanceof TranslateTransform) {
                return value;
            }
            else if (typeof value === "string") {
                return TranslateTransform.parse(value);
            }
            throw new TypeError("" + value);
        };
        TranslateTransform.fromValue = function (value) {
            var header = value.header("translate");
            if (header.isDefined()) {
                var x_1 = Length.zero();
                var y_1 = Length.zero();
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== void 0) {
                        if (key === "x") {
                            x_1 = item.toValue().cast(Length.form(), x_1);
                        }
                        else if (key === "y") {
                            y_1 = item.toValue().cast(Length.form(), y_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0) {
                            x_1 = item.cast(Length.form(), x_1);
                        }
                        else if (index === 1) {
                            y_1 = item.cast(Length.form(), y_1);
                        }
                    }
                }, this);
                return new TranslateTransform(x_1, y_1);
            }
            return void 0;
        };
        TranslateTransform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.TranslateParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return TranslateTransform;
    }(Transform));
    Transform.Translate = TranslateTransform;

    var ScaleTransform = (function (_super) {
        __extends(ScaleTransform, _super);
        function ScaleTransform(x, y) {
            var _this = _super.call(this) || this;
            _this._x = +x;
            _this._y = +y;
            return _this;
        }
        Object.defineProperty(ScaleTransform.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleTransform.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        ScaleTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return new Transform.List([this, x]);
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                if (typeof x === "number" && typeof y === "number") {
                    return [x * this._x, y * this._y];
                }
                else {
                    x = Length.fromAny(x);
                    y = Length.fromAny(y);
                    return [x.times(this._x), y.times(this._y)];
                }
            }
        };
        ScaleTransform.prototype.transformX = function (x, y) {
            return x * this._x;
        };
        ScaleTransform.prototype.transformY = function (x, y) {
            return y * this._y;
        };
        ScaleTransform.prototype.inverse = function () {
            return new ScaleTransform(1 / (this._x || 1), 1 / (this._y || 1));
        };
        ScaleTransform.prototype.toAffine = function () {
            return new Transform.Affine(this._x, 0, 0, this._y, 0, 0);
        };
        ScaleTransform.prototype.toValue = function () {
            return Record.of(Attr.of("scale", Record.of(Slot.of("x", this._x), Slot.of("y", this._y))));
        };
        ScaleTransform.prototype.conformsTo = function (that) {
            return that instanceof ScaleTransform;
        };
        ScaleTransform.prototype.equals = function (that) {
            if (that instanceof ScaleTransform) {
                return this._x === that._x && this._y === that._y;
            }
            return false;
        };
        ScaleTransform.prototype.hashCode = function () {
            if (ScaleTransform._hashSeed === void 0) {
                ScaleTransform._hashSeed = Murmur3.seed(ScaleTransform);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(ScaleTransform._hashSeed, Murmur3.hash(this._x)), Murmur3.hash(this._y)));
        };
        ScaleTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("scale");
            if (this._x && !this._y) {
                output = output.write("X").write(40).debug(this._x).write(41);
            }
            else if (!this._x && this._y) {
                output = output.write("Y").write(40).debug(this._y).write(41);
            }
            else {
                output = output.write(40).debug(this._x).write(", ").debug(this._y).write(41);
            }
        };
        ScaleTransform.prototype.toString = function () {
            if (this._x && !this._y) {
                return "scaleX(" + this._x + ")";
            }
            else if (!this._x && this._y) {
                return "scaleY(" + this._y + ")";
            }
            else {
                return "scale(" + this._x + "," + this._y + ")";
            }
        };
        ScaleTransform.fromAny = function (value) {
            if (value instanceof ScaleTransform) {
                return value;
            }
            else if (typeof value === "string") {
                return ScaleTransform.parse(value);
            }
            throw new TypeError("" + value);
        };
        ScaleTransform.fromValue = function (value) {
            var header = value.header("scale");
            if (header.isDefined()) {
                var x_1 = 0;
                var y_1 = 0;
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== void 0) {
                        if (key === "x") {
                            x_1 = item.toValue().numberValue(x_1);
                        }
                        else if (key === "y") {
                            y_1 = item.toValue().numberValue(y_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0) {
                            x_1 = item.numberValue(x_1);
                        }
                        else if (index === 1) {
                            y_1 = item.numberValue(y_1);
                        }
                    }
                }, this);
                return new ScaleTransform(x_1, y_1);
            }
            return void 0;
        };
        ScaleTransform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.ScaleParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return ScaleTransform;
    }(Transform));
    Transform.Scale = ScaleTransform;

    var RotateTransform = (function (_super) {
        __extends(RotateTransform, _super);
        function RotateTransform(a) {
            var _this = _super.call(this) || this;
            _this._a = Angle.fromAny(a, "deg");
            return _this;
        }
        Object.defineProperty(RotateTransform.prototype, "angle", {
            get: function () {
                return this._a;
            },
            enumerable: true,
            configurable: true
        });
        RotateTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return new Transform.List([this, x]);
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                x = Length.fromAny(x);
                y = Length.fromAny(y);
                var a = this._a.radValue();
                var cosA = Math.cos(a);
                var sinA = Math.sin(a);
                if (typeof x === "number" && typeof y === "number") {
                    return [x * cosA - y * sinA,
                        x * sinA + y * cosA];
                }
                else {
                    return [x.times(cosA).minus(y.times(sinA)),
                        x.times(sinA).plus(y.times(cosA))];
                }
            }
        };
        RotateTransform.prototype.transformX = function (x, y) {
            var a = this._a.radValue();
            return x * Math.cos(a) - y * Math.sin(a);
        };
        RotateTransform.prototype.transformY = function (x, y) {
            var a = this._a.radValue();
            return x * Math.sin(a) + y * Math.cos(a);
        };
        RotateTransform.prototype.inverse = function () {
            return new RotateTransform(this._a.opposite());
        };
        RotateTransform.prototype.toAffine = function () {
            var a = this._a.radValue();
            return new Transform.Affine(Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0);
        };
        RotateTransform.prototype.toValue = function () {
            return Record.of(Attr.of("rotate", this._a.toString()));
        };
        RotateTransform.prototype.conformsTo = function (that) {
            return that instanceof RotateTransform;
        };
        RotateTransform.prototype.equals = function (that) {
            if (that instanceof RotateTransform) {
                return this._a.equals(that._a);
            }
            return false;
        };
        RotateTransform.prototype.hashCode = function () {
            if (RotateTransform._hashSeed === void 0) {
                RotateTransform._hashSeed = Murmur3.seed(RotateTransform);
            }
            return Murmur3.mash(Murmur3.mix(RotateTransform._hashSeed, this._a.hashCode()));
        };
        RotateTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("rotate")
                .write(40).debug(this._a).write(41);
        };
        RotateTransform.prototype.toString = function () {
            return "rotate(" + this._a + ")";
        };
        RotateTransform.fromAny = function (value) {
            if (value instanceof RotateTransform) {
                return value;
            }
            else if (typeof value === "string") {
                return RotateTransform.parse(value);
            }
            throw new TypeError("" + value);
        };
        RotateTransform.fromValue = function (value) {
            var header = value.header("rotate");
            if (header.isDefined()) {
                var a_1 = Angle.zero();
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key === "a") {
                        a_1 = item.toValue().cast(Angle.form(), a_1);
                    }
                    else if (item instanceof Value && index === 0) {
                        a_1 = item.cast(Angle.form(), a_1);
                    }
                }, this);
                return new RotateTransform(a_1);
            }
            return void 0;
        };
        RotateTransform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.RotateParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return RotateTransform;
    }(Transform));
    Transform.Rotate = RotateTransform;

    var SkewTransform = (function (_super) {
        __extends(SkewTransform, _super);
        function SkewTransform(x, y) {
            var _this = _super.call(this) || this;
            _this._x = Angle.fromAny(x, "deg");
            _this._y = Angle.fromAny(y, "deg");
            return _this;
        }
        Object.defineProperty(SkewTransform.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SkewTransform.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        SkewTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return new Transform.List([this, x]);
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                x = Length.fromAny(x);
                y = Length.fromAny(y);
                if (typeof x === "number" && typeof y === "number") {
                    return [x + y * Math.tan(this._x.radValue()),
                        x * Math.tan(this._y.radValue()) + y];
                }
                else {
                    return [x.plus(y.times(Math.tan(this._x.radValue()))),
                        x.times(Math.tan(this._y.radValue())).plus(y)];
                }
            }
        };
        SkewTransform.prototype.transformX = function (x, y) {
            return x + y * Math.tan(this._x.radValue());
        };
        SkewTransform.prototype.transformY = function (x, y) {
            return x * Math.tan(this._y.radValue()) + y;
        };
        SkewTransform.prototype.inverse = function () {
            return new SkewTransform(this._x.opposite(), this._y.opposite());
        };
        SkewTransform.prototype.toAffine = function () {
            var x = this._x.radValue();
            var y = this._y.radValue();
            return new Transform.Affine(1, Math.tan(y), Math.tan(x), 1, 0, 0);
        };
        SkewTransform.prototype.toValue = function () {
            return Record.of(Attr.of("skew", Record.of(Slot.of("x", this._x.toString()), Slot.of("y", this._y.toString()))));
        };
        SkewTransform.prototype.conformsTo = function (that) {
            return that instanceof SkewTransform;
        };
        SkewTransform.prototype.equals = function (that) {
            if (that instanceof SkewTransform) {
                return this._x.equals(that._x) && this._y.equals(that._y);
            }
            return false;
        };
        SkewTransform.prototype.hashCode = function () {
            if (SkewTransform._hashSeed === void 0) {
                SkewTransform._hashSeed = Murmur3.seed(SkewTransform);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(SkewTransform._hashSeed, this._x.hashCode()), this._y.hashCode()));
        };
        SkewTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("skew");
            if (this._x.isDefined() && !this._y.isDefined()) {
                output = output.write("X").write(40).debug(this._x).write(41);
            }
            else if (!this._x.isDefined() && this._y.isDefined()) {
                output = output.write("Y").write(40).debug(this._y).write(41);
            }
            else {
                output = output.write(40).debug(this._x).write(", ").debug(this._y).write(41);
            }
        };
        SkewTransform.prototype.toString = function () {
            if (this._x.isDefined() && !this._y.isDefined()) {
                return "skewX(" + this._x + ")";
            }
            else if (!this._x.isDefined() && this._y.isDefined()) {
                return "skewY(" + this._y + ")";
            }
            else {
                return "skew(" + this._x + "," + this._y + ")";
            }
        };
        SkewTransform.fromAny = function (value) {
            if (value instanceof SkewTransform) {
                return value;
            }
            else if (typeof value === "string") {
                return SkewTransform.parse(value);
            }
            throw new TypeError("" + value);
        };
        SkewTransform.fromValue = function (value) {
            var header = value.header("skew");
            if (header.isDefined()) {
                var x_1 = Angle.zero();
                var y_1 = Angle.zero();
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== void 0) {
                        if (key === "x") {
                            x_1 = item.toValue().cast(Angle.form(), x_1);
                        }
                        else if (key === "y") {
                            y_1 = item.toValue().cast(Angle.form(), y_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0) {
                            x_1 = item.cast(Angle.form(), x_1);
                        }
                        else if (index === 1) {
                            y_1 = item.cast(Angle.form(), y_1);
                        }
                    }
                }, this);
                return new SkewTransform(x_1, y_1);
            }
            return void 0;
        };
        SkewTransform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.SkewParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return SkewTransform;
    }(Transform));
    Transform.Skew = SkewTransform;

    var AffineTransform = (function (_super) {
        __extends(AffineTransform, _super);
        function AffineTransform(x0, y0, x1, y1, tx, ty) {
            if (x0 === void 0) { x0 = 1; }
            if (y0 === void 0) { y0 = 0; }
            if (x1 === void 0) { x1 = 0; }
            if (y1 === void 0) { y1 = 1; }
            if (tx === void 0) { tx = 0; }
            if (ty === void 0) { ty = 0; }
            var _this = _super.call(this) || this;
            _this._x0 = +x0;
            _this._y0 = +y0;
            _this._x1 = +x1;
            _this._y1 = +y1;
            _this._tx = +tx;
            _this._ty = +ty;
            return _this;
        }
        Object.defineProperty(AffineTransform.prototype, "x0", {
            get: function () {
                return this._x0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AffineTransform.prototype, "y0", {
            get: function () {
                return this._y0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AffineTransform.prototype, "x1", {
            get: function () {
                return this._x1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AffineTransform.prototype, "y1", {
            get: function () {
                return this._y1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AffineTransform.prototype, "tx", {
            get: function () {
                return this._tx;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AffineTransform.prototype, "ty", {
            get: function () {
                return this._ty;
            },
            enumerable: true,
            configurable: true
        });
        AffineTransform.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return this.multiply(x.toAffine());
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                x = Length.fromAny(x);
                y = Length.fromAny(y);
                if (typeof x === "number" && typeof y === "number") {
                    return [x * this._x0 + y * this._x1 + this._tx,
                        x * this._y0 + y * this._y1 + this._ty];
                }
                else {
                    return [x.times(this._x0).plus(y.times(this._x1)).plus(this._tx),
                        x.times(this._y0).plus(y.times(this._y1)).plus(this._ty)];
                }
            }
        };
        AffineTransform.prototype.transformX = function (x, y) {
            return x * this._x0 + y * this._x1 + this._tx;
        };
        AffineTransform.prototype.transformY = function (x, y) {
            return x * this._y0 + y * this._y1 + this._ty;
        };
        AffineTransform.prototype.inverse = function () {
            var m00 = this._x0;
            var m10 = this._y0;
            var m01 = this._x1;
            var m11 = this._y1;
            var m02 = this._tx;
            var m12 = this._ty;
            var det = m00 * m11 - m01 * m10;
            if (Math.abs(det) >= Number.MIN_VALUE) {
                return new AffineTransform(m11 / det, -m10 / det, -m01 / det, m00 / det, (m01 * m12 - m11 * m02) / det, (m10 * m02 - m00 * m12) / det);
            }
            else {
                throw new Error("non-invertible affine transform with determinant " + det);
            }
        };
        AffineTransform.prototype.multiply = function (that) {
            var x0 = this._x0 * that._x0 + this._x1 * that._y0;
            var y0 = this._y0 * that._x0 + this._y1 * that._y0;
            var x1 = this._x0 * that._x1 + this._x1 * that._y1;
            var y1 = this._y0 * that._x1 + this._y1 * that._y1;
            var tx = this._x0 * that._tx + this._x1 * that._ty;
            var ty = this._y0 * that._tx + this._y1 * that._ty;
            return new AffineTransform(x0, y0, x1, y1, tx, ty);
        };
        AffineTransform.prototype.toAffine = function () {
            return this;
        };
        AffineTransform.prototype.toValue = function () {
            return Record.of(Attr.of("matrix", Record.of(this._x0, this._y0, this._x1, this._y1, this._tx, this._ty)));
        };
        AffineTransform.prototype.conformsTo = function (that) {
            return that instanceof AffineTransform;
        };
        AffineTransform.prototype.equals = function (that) {
            if (that instanceof AffineTransform) {
                return this._x0 === that._x0 && this._y0 === that._y0 &&
                    this._x1 === that._x1 && this._y1 === that._y1 &&
                    this._tx === that._tx && this._ty === that._ty;
            }
            return false;
        };
        AffineTransform.prototype.hashCode = function () {
            if (AffineTransform._hashSeed === void 0) {
                AffineTransform._hashSeed = Murmur3.seed(AffineTransform);
            }
            return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(AffineTransform._hashSeed, Murmur3.hash(this._x0)), Murmur3.hash(this._y0)), Murmur3.hash(this._x1)), Murmur3.hash(this._y1)), Murmur3.hash(this._tx)), Murmur3.hash(this._ty)));
        };
        AffineTransform.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("affine").write(40)
                .debug(this._x0).write(", ").debug(this._y0).write(", ")
                .debug(this._x1).write(", ").debug(this._y1).write(", ")
                .debug(this._tx).write(", ").debug(this._ty).write(41);
        };
        AffineTransform.prototype.toString = function () {
            return "matrix(" + this._x0 + "," + this._y0 + ","
                + this._x1 + "," + this._y1 + ","
                + this._tx + "," + this._ty + ")";
        };
        AffineTransform.identity = function () {
            if (!AffineTransform._identityMatrix) {
                AffineTransform._identityMatrix = new AffineTransform();
            }
            return AffineTransform._identityMatrix;
        };
        AffineTransform.fromAny = function (value) {
            if (value instanceof AffineTransform) {
                return value;
            }
            else if (typeof value === "string") {
                return AffineTransform.parse(value);
            }
            throw new TypeError("" + value);
        };
        AffineTransform.fromValue = function (value) {
            var header = value.header("matrix");
            if (header.isDefined()) {
                var x0_1 = 0;
                var y0_1 = 0;
                var x1_1 = 0;
                var y1_1 = 0;
                var tx_1 = 0;
                var ty_1 = 0;
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== void 0) {
                        if (key === "x0") {
                            x0_1 = item.toValue().numberValue(x0_1);
                        }
                        else if (key === "y0") {
                            y0_1 = item.toValue().numberValue(y0_1);
                        }
                        else if (key === "x1") {
                            x1_1 = item.toValue().numberValue(x1_1);
                        }
                        else if (key === "y1") {
                            y1_1 = item.toValue().numberValue(y1_1);
                        }
                        else if (key === "tx") {
                            tx_1 = item.toValue().numberValue(tx_1);
                        }
                        else if (key === "ty") {
                            ty_1 = item.toValue().numberValue(ty_1);
                        }
                    }
                    else if (item instanceof Value) {
                        switch (index) {
                            case 0:
                                x0_1 = item.numberValue(x0_1);
                                break;
                            case 1:
                                y0_1 = item.numberValue(y0_1);
                                break;
                            case 2:
                                x1_1 = item.numberValue(x1_1);
                                break;
                            case 3:
                                y1_1 = item.numberValue(y1_1);
                                break;
                            case 4:
                                tx_1 = item.numberValue(tx_1);
                                break;
                            case 5:
                                ty_1 = item.numberValue(ty_1);
                                break;
                            default:
                        }
                    }
                }, this);
                return new AffineTransform(x0_1, y0_1, x1_1, y1_1, tx_1, ty_1);
            }
            return void 0;
        };
        AffineTransform.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = Transform.AffineParser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return AffineTransform;
    }(Transform));
    Transform.Affine = AffineTransform;

    var TransformList = (function (_super) {
        __extends(TransformList, _super);
        function TransformList(transforms) {
            var _this = _super.call(this) || this;
            var list = [];
            for (var i = 0; i < transforms.length; i += 1) {
                var transform = Transform.fromAny(transforms[i]);
                if (transform instanceof TransformList) {
                    list.push.apply(list, transform._transforms);
                }
                else if (transform && !(transform instanceof Transform.Identity)) {
                    list.push(transform);
                }
            }
            _this._transforms = list;
            return _this;
        }
        Object.defineProperty(TransformList.prototype, "transforms", {
            get: function () {
                return this._transforms;
            },
            enumerable: true,
            configurable: true
        });
        TransformList.prototype.transform = function (x, y) {
            if (x instanceof Transform) {
                if (x instanceof Transform.Identity) {
                    return this;
                }
                else {
                    return new Transform.List([this, x]);
                }
            }
            else {
                if (Array.isArray(x)) {
                    y = x[1];
                    x = x[0];
                }
                var transforms = this._transforms;
                if (typeof x === "number" && typeof y === "number") {
                    var point = [x, y];
                    for (var i = 0, n = transforms.length; i < n; i += 1) {
                        point = transforms[i].transform(point);
                    }
                    return point;
                }
                else {
                    var point = [Length.fromAny(x), Length.fromAny(y)];
                    for (var i = 0, n = transforms.length; i < n; i += 1) {
                        point = transforms[i].transform(point);
                    }
                    return point;
                }
            }
        };
        TransformList.prototype.transformX = function (x, y) {
            var transforms = this._transforms;
            for (var i = 0, n = transforms.length; i < n; i += 1) {
                x = transforms[i].transformX(x, y);
                y = transforms[i].transformX(x, y);
            }
            return x;
        };
        TransformList.prototype.transformY = function (x, y) {
            var transforms = this._transforms;
            for (var i = 0, n = transforms.length; i < n; i += 1) {
                x = transforms[i].transformX(x, y);
                y = transforms[i].transformX(x, y);
            }
            return y;
        };
        TransformList.prototype.inverse = function () {
            var transforms = this._transforms;
            var n = transforms.length;
            var inverseTransforms = new Array(n);
            for (var i = 0; i < n; i += 1) {
                inverseTransforms[i] = transforms[n - i - 1].inverse();
            }
            return new TransformList(inverseTransforms);
        };
        TransformList.prototype.toAffine = function () {
            var matrix = AffineTransform.identity();
            var transforms = this._transforms;
            for (var i = 0, n = transforms.length; i < n; i += 1) {
                matrix = matrix.multiply(transforms[i].toAffine());
            }
            return matrix;
        };
        TransformList.prototype.toValue = function () {
            var transforms = this._transforms;
            var n = transforms.length;
            var record = Record.create(n);
            for (var i = 0; i < n; i += 1) {
                record.push(transforms[i].toValue());
            }
            return record;
        };
        TransformList.prototype.conformsTo = function (that) {
            if (that instanceof TransformList) {
                var n = this._transforms.length;
                if (n === that._transforms.length) {
                    for (var i = 0; i < n; i += 1) {
                        if (!this._transforms[i].conformsTo(that._transforms[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        TransformList.prototype.equals = function (that) {
            if (that instanceof TransformList) {
                var n = this._transforms.length;
                if (n === that._transforms.length) {
                    for (var i = 0; i < n; i += 1) {
                        if (!this._transforms[i].equals(that._transforms[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        TransformList.prototype.hashCode = function () {
            if (TransformList._hashSeed === void 0) {
                TransformList._hashSeed = Murmur3.seed(TransformList);
            }
            var code = TransformList._hashSeed;
            var transforms = this._transforms;
            for (var i = 0, n = transforms.length; i < n; i += 1) {
                code = Murmur3.mix(code, transforms[i].hashCode());
            }
            return Murmur3.mash(code);
        };
        TransformList.prototype.debug = function (output) {
            output = output.write("Transform").write(46).write("list").write(40);
            var transforms = this._transforms;
            var n = transforms.length;
            if (n > 0) {
                output = output.debug(transforms[0]);
                for (var i = 1; i < n; i += 1) {
                    output = output.write(", ").debug(transforms[i]);
                }
            }
            output = output.write(41);
        };
        TransformList.prototype.toString = function () {
            var transforms = this._transforms;
            var n = transforms.length;
            if (n > 0) {
                var s = transforms[0].toString();
                for (var i = 1; i < n; i += 1) {
                    s = s + " " + transforms[i].toString();
                }
                return s;
            }
            else {
                return "";
            }
        };
        TransformList.prototype.toAttributeString = function () {
            var transforms = this._transforms;
            var n = transforms.length;
            if (n > 0) {
                var s = transforms[0].toAttributeString();
                for (var i = 1; i < n; i += 1) {
                    s = s + " " + transforms[i].toAttributeString();
                }
                return s;
            }
            else {
                return "";
            }
        };
        TransformList.fromAny = function (value) {
            if (value instanceof TransformList) {
                return value;
            }
            else if (typeof value === "string") {
                return TransformList.parse(value);
            }
            throw new TypeError("" + value);
        };
        TransformList.fromValue = function (value) {
            var transforms = [];
            value.forEach(function (item) {
                var transform = Transform.fromValue(item.toValue());
                if (transform) {
                    transforms.push(transform);
                }
            }, this);
            if (transforms.length) {
                return new TransformList(transforms);
            }
            return undefined;
        };
        TransformList.parse = function (string) {
            var transform = Transform.parse(string);
            if (transform instanceof TransformList) {
                return transform;
            }
            else {
                return new TransformList([transform]);
            }
        };
        return TransformList;
    }(Transform));
    Transform.List = TransformList;

    var TranslateTransformParser = (function (_super) {
        __extends(TranslateTransformParser, _super);
        function TranslateTransformParser(identOutput, xParser, yParser, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.xParser = xParser;
            _this.yParser = yParser;
            _this.step = step;
            return _this;
        }
        TranslateTransformParser.prototype.feed = function (input) {
            return TranslateTransformParser.parse(input, this.identOutput, this.xParser, this.yParser, this.step);
        };
        TranslateTransformParser.parse = function (input, identOutput, xParser, yParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "translateX":
                        case "translateY":
                        case "translate":
                            step = 2;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 3) {
                if (!xParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        xParser = LengthParser.parse(input, "px");
                    }
                }
                else {
                    xParser = xParser.feed(input);
                }
                if (xParser) {
                    if (xParser.isDone()) {
                        step = 4;
                    }
                    else if (xParser.isError()) {
                        return xParser.asError();
                    }
                }
            }
            if (step === 4) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont()) {
                    c = input.head();
                    if (c === 41) {
                        input.step();
                        var ident = identOutput.bind();
                        switch (ident) {
                            case "translateX": return Parser.done(Transform.translateX(xParser.bind()));
                            case "translateY": return Parser.done(Transform.translateY(xParser.bind()));
                            default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                        }
                    }
                    else if (c === 44) {
                        input.step();
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(",", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 5) {
                if (!yParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        yParser = LengthParser.parse(input, "px");
                    }
                }
                else {
                    yParser = yParser.feed(input);
                }
                if (yParser) {
                    if (yParser.isDone()) {
                        step = 6;
                    }
                    else if (yParser.isError()) {
                        return yParser.asError();
                    }
                }
            }
            if (step === 6) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont() && input.head() === 41) {
                    input.step();
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "translate": return Parser.done(Transform.translate(xParser.bind(), yParser.bind()));
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new TranslateTransformParser(identOutput, xParser, yParser, step);
        };
        TranslateTransformParser.parseRest = function (input, identOutput) {
            return TranslateTransformParser.parse(input, identOutput, void 0, void 0, 2);
        };
        return TranslateTransformParser;
    }(Parser));
    Transform.TranslateParser = TranslateTransformParser;

    var ScaleTransformParser = (function (_super) {
        __extends(ScaleTransformParser, _super);
        function ScaleTransformParser(identOutput, xParser, yParser, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.xParser = xParser;
            _this.yParser = yParser;
            _this.step = step;
            return _this;
        }
        ScaleTransformParser.prototype.feed = function (input) {
            return ScaleTransformParser.parse(input, this.identOutput, this.xParser, this.yParser, this.step);
        };
        ScaleTransformParser.parse = function (input, identOutput, xParser, yParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "scaleX":
                        case "scaleY":
                        case "scale":
                            step = 2;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 3) {
                if (!xParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        xParser = Base10.parseNumber(input);
                    }
                }
                else {
                    xParser = xParser.feed(input);
                }
                if (xParser) {
                    if (xParser.isDone()) {
                        step = 4;
                    }
                    else if (xParser.isError()) {
                        return xParser.asError();
                    }
                }
            }
            if (step === 4) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont()) {
                    c = input.head();
                    if (c === 41) {
                        input.step();
                        var ident = identOutput.bind();
                        switch (ident) {
                            case "scaleX": return Parser.done(Transform.scaleX(xParser.bind()));
                            case "scaleY": return Parser.done(Transform.scaleY(xParser.bind()));
                            default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                        }
                    }
                    else if (c === 44) {
                        input.step();
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(",", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 5) {
                if (!yParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        yParser = Base10.parseNumber(input);
                    }
                }
                else {
                    yParser = yParser.feed(input);
                }
                if (yParser) {
                    if (yParser.isDone()) {
                        step = 6;
                    }
                    else if (yParser.isError()) {
                        return yParser.asError();
                    }
                }
            }
            if (step === 6) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont() && input.head() === 41) {
                    input.step();
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "scale": return Parser.done(Transform.scale(xParser.bind(), yParser.bind()));
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new ScaleTransformParser(identOutput, xParser, yParser, step);
        };
        ScaleTransformParser.parseRest = function (input, identOutput) {
            return ScaleTransformParser.parse(input, identOutput, void 0, void 0, 2);
        };
        return ScaleTransformParser;
    }(Parser));
    Transform.ScaleParser = ScaleTransformParser;

    var RotateTransformParser = (function (_super) {
        __extends(RotateTransformParser, _super);
        function RotateTransformParser(identOutput, aParser, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.aParser = aParser;
            _this.step = step;
            return _this;
        }
        RotateTransformParser.prototype.feed = function (input) {
            return RotateTransformParser.parse(input, this.identOutput, this.aParser, this.step);
        };
        RotateTransformParser.parse = function (input, identOutput, aParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "rotate":
                            step = 2;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 3) {
                if (!aParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        aParser = AngleParser.parse(input, "deg");
                    }
                }
                else {
                    aParser = aParser.feed(input);
                }
                if (aParser) {
                    if (aParser.isDone()) {
                        step = 4;
                    }
                    else if (aParser.isError()) {
                        return aParser.asError();
                    }
                }
            }
            if (step === 4) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont() && input.head() === 41) {
                    input.step();
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "rotate": return Parser.done(Transform.rotate(aParser.bind()));
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new RotateTransformParser(identOutput, aParser, step);
        };
        RotateTransformParser.parseRest = function (input, identOutput) {
            return RotateTransformParser.parse(input, identOutput, void 0, 2);
        };
        return RotateTransformParser;
    }(Parser));
    Transform.RotateParser = RotateTransformParser;

    var SkewTransformParser = (function (_super) {
        __extends(SkewTransformParser, _super);
        function SkewTransformParser(identOutput, xParser, yParser, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.xParser = xParser;
            _this.yParser = yParser;
            _this.step = step;
            return _this;
        }
        SkewTransformParser.prototype.feed = function (input) {
            return SkewTransformParser.parse(input, this.identOutput, this.xParser, this.yParser, this.step);
        };
        SkewTransformParser.parse = function (input, identOutput, xParser, yParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "skewX":
                        case "skewY":
                        case "skew":
                            step = 2;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            if (step === 3) {
                if (!xParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        xParser = AngleParser.parse(input, "deg");
                    }
                }
                else {
                    xParser = xParser.feed(input);
                }
                if (xParser) {
                    if (xParser.isDone()) {
                        step = 4;
                    }
                    else if (xParser.isError()) {
                        return xParser.asError();
                    }
                }
            }
            if (step === 4) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont()) {
                    c = input.head();
                    if (c === 41) {
                        input.step();
                        var ident = identOutput.bind();
                        switch (ident) {
                            case "skewX": return Parser.done(Transform.skewX(xParser.bind()));
                            case "skewY": return Parser.done(Transform.skewY(xParser.bind()));
                            default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                        }
                    }
                    else if (c === 44) {
                        input.step();
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(",", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 5) {
                if (!yParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        yParser = AngleParser.parse(input, "deg");
                    }
                }
                else {
                    yParser = yParser.feed(input);
                }
                if (yParser) {
                    if (yParser.isDone()) {
                        step = 6;
                    }
                    else if (yParser.isError()) {
                        return yParser.asError();
                    }
                }
            }
            if (step === 6) {
                while (input.isCont() && Unicode.isSpace(input.head())) {
                    input.step();
                }
                if (input.isCont() && input.head() === 41) {
                    input.step();
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "skew": return Parser.done(Transform.skew(xParser.bind(), yParser.bind()));
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(")", input));
                }
            }
            return new SkewTransformParser(identOutput, xParser, yParser, step);
        };
        SkewTransformParser.parseRest = function (input, identOutput) {
            return SkewTransformParser.parse(input, identOutput, void 0, void 0, 2);
        };
        return SkewTransformParser;
    }(Parser));
    Transform.SkewParser = SkewTransformParser;

    var AffineTransformParser = (function (_super) {
        __extends(AffineTransformParser, _super);
        function AffineTransformParser(identOutput, entries, entryParser, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.entries = entries;
            _this.entryParser = entryParser;
            _this.step = step;
            return _this;
        }
        AffineTransformParser.prototype.feed = function (input) {
            return AffineTransformParser.parse(input, this.identOutput, this.entries, this.entryParser, this.step);
        };
        AffineTransformParser.parse = function (input, identOutput, entries, entryParser, step) {
            if (entries === void 0) { entries = []; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "matrix":
                            step = 2;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                    }
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont() && c === 40) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("(", input));
                }
            }
            do {
                if (step === 3) {
                    if (!entryParser) {
                        while (input.isCont() && Unicode.isSpace(input.head())) {
                            input.step();
                        }
                        if (!input.isEmpty()) {
                            entryParser = Base10.parseNumber(input);
                        }
                    }
                    else {
                        entryParser = entryParser.feed(input);
                    }
                    if (entryParser) {
                        if (entryParser.isDone()) {
                            entries.push(entryParser.bind());
                            entryParser = void 0;
                            step = 4;
                        }
                        else if (entryParser.isError()) {
                            return entryParser.asError();
                        }
                    }
                }
                if (step === 4) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 41) {
                            input.step();
                            var ident = identOutput.bind();
                            switch (ident) {
                                case "matrix": return Parser.done(Transform.affine.apply(Transform, entries));
                                default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                            }
                        }
                        else if (entries.length >= 6) {
                            return Parser.error(Diagnostic.expected(")", input));
                        }
                        else if (c === 44) {
                            input.step();
                            step = 3;
                            continue;
                        }
                        else {
                            return Parser.error(Diagnostic.expected(",", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                break;
            } while (true);
            return new AffineTransformParser(identOutput, entries, entryParser, step);
        };
        AffineTransformParser.parseRest = function (input, identOutput) {
            return AffineTransformParser.parse(input, identOutput, void 0, void 0, 2);
        };
        return AffineTransformParser;
    }(Parser));
    Transform.AffineParser = AffineTransformParser;

    var TransformListParser = (function (_super) {
        __extends(TransformListParser, _super);
        function TransformListParser(transform, transformParser) {
            var _this = _super.call(this) || this;
            _this.transform = transform;
            _this.transformParser = transformParser;
            return _this;
        }
        TransformListParser.prototype.feed = function (input) {
            return TransformListParser.parse(input, this.transform, this.transformParser);
        };
        TransformListParser.parse = function (input, transform, transformParser) {
            if (transform === void 0) { transform = Transform.identity(); }
            do {
                if (!transformParser) {
                    while (input.isCont() && Unicode.isSpace(input.head())) {
                        input.step();
                    }
                    if (input.isCont()) {
                        transformParser = Transform.Parser.parse(input);
                    }
                    else if (input.isDone()) {
                        return Parser.done(transform);
                    }
                }
                if (transformParser) {
                    transformParser = transformParser.feed(input);
                    if (transformParser.isDone()) {
                        transform = transform.transform(transformParser.bind());
                        transformParser = void 0;
                        continue;
                    }
                    else if (transformParser.isError()) {
                        return transformParser.asError();
                    }
                }
                break;
            } while (true);
            return new TransformListParser(transform, transformParser);
        };
        return TransformListParser;
    }(Parser));
    Transform.ListParser = TransformListParser;

    var TransformParser = (function (_super) {
        __extends(TransformParser, _super);
        function TransformParser(identOutput) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            return _this;
        }
        TransformParser.prototype.feed = function (input) {
            return TransformParser.parse(input, this.identOutput);
        };
        TransformParser.parse = function (input, identOutput) {
            var c = 0;
            identOutput = identOutput || Unicode.stringOutput();
            while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                input = input.step();
                identOutput.write(c);
            }
            if (!input.isEmpty()) {
                var ident = identOutput.bind();
                switch (ident) {
                    case "translateX":
                    case "translateY":
                    case "translate": return Transform.TranslateParser.parseRest(input, identOutput);
                    case "scaleX":
                    case "scaleY":
                    case "scale": return Transform.ScaleParser.parseRest(input, identOutput);
                    case "rotate": return Transform.RotateParser.parseRest(input, identOutput);
                    case "skewX":
                    case "skewY":
                    case "skew": return Transform.SkewParser.parseRest(input, identOutput);
                    case "matrix": return Transform.AffineParser.parseRest(input, identOutput);
                    case "none": return Parser.done(Transform.identity());
                    default: return Parser.error(Diagnostic.message("unknown transform function: " + ident, input));
                }
            }
            return new TransformParser(identOutput);
        };
        return TransformParser;
    }(Parser));
    Transform.Parser = TransformParser;

    var TransformForm = (function (_super) {
        __extends(TransformForm, _super);
        function TransformForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        TransformForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new TransformForm(unit);
            }
        };
        TransformForm.prototype.mold = function (transform) {
            transform = Transform.fromAny(transform);
            return transform.toValue();
        };
        TransformForm.prototype.cast = function (item) {
            var value = item.toValue();
            try {
                if (value instanceof Record) {
                    return Transform.fromValue(value);
                }
                else {
                    var string = value.stringValue(void 0);
                    if (string !== void 0) {
                        return Transform.parse(string);
                    }
                }
            }
            catch (e) {
            }
            return void 0;
        };
        return TransformForm;
    }(Form));
    Transform.Form = TransformForm;

    var Interpolator = (function () {
        function Interpolator() {
        }
        Interpolator.prototype.map = function (f) {
            return new Interpolator.Map(this, f);
        };
        Interpolator.step = function (y0, y1) {
            return new Interpolator.Step(y0, y1);
        };
        Interpolator.number = function (y0, y1) {
            return new Interpolator.Number(y0, y1);
        };
        Interpolator.time = function (d0, d1) {
            return new Interpolator.DateTime(d0, d1);
        };
        Interpolator.angle = function (a0, a1) {
            return new Interpolator.Angle(a0, a1);
        };
        Interpolator.len = function (l0, l1) {
            return new Interpolator.Length(l0, l1);
        };
        Interpolator.array = function (a0, a1) {
            return new Interpolator.Array(a0, a1);
        };
        Interpolator.map = function (a, b, f) {
            return new Interpolator.Map(Interpolator.from(a, b), f);
        };
        Interpolator.interpolator = function (i0, i1) {
            return new Interpolator.Interpolator(i0, i1);
        };
        Interpolator.from = function (a, b) {
            if (a instanceof R2Shape || b instanceof R2Shape) {
                return Interpolator.shape(a, b);
            }
            else if (a instanceof DateTime || a instanceof Date || b instanceof DateTime || b instanceof Date) {
                return Interpolator.time(a, b);
            }
            else if (a instanceof Angle || b instanceof Angle) {
                return Interpolator.angle(a, b);
            }
            else if (a instanceof Length || b instanceof Length) {
                return Interpolator.len(a, b);
            }
            else if (a instanceof Color || b instanceof Color) {
                return Interpolator.color(a, b);
            }
            else if (a instanceof Transform || b instanceof Transform) {
                return Interpolator.transform(a, b);
            }
            else if (a instanceof Item || b instanceof Item) {
                return Interpolator.structure(a, b);
            }
            else if (typeof a === "number" || typeof b === "number") {
                return Interpolator.number(a, b);
            }
            else if (Array.isArray(a) || Array.isArray(b)) {
                return Interpolator.array(a, b);
            }
            else if (a instanceof Interpolator && b instanceof Interpolator) {
                return Interpolator.interpolator(a, b);
            }
            else {
                return Interpolator.step(a, b);
            }
        };
        Interpolator.fromAny = function (value) {
            if (value instanceof Interpolator) {
                return value;
            }
            else if (typeof value === "string") {
                switch (value) {
                    case "step": return Interpolator.step();
                    case "number": return Interpolator.number();
                    case "shape": return Interpolator.shape();
                    case "time": return Interpolator.time();
                    case "angle": return Interpolator.angle();
                    case "length": return Interpolator.len();
                    case "transform": return Interpolator.transform();
                    case "color": return Interpolator.color();
                    case "array": return Interpolator.array();
                }
            }
            throw new TypeError("" + value);
        };
        Interpolator.form = function (valueForm, unit) {
            if (valueForm === void 0) {
                valueForm = Interpolator.valueForm();
            }
            if (valueForm !== Interpolator.valueForm() || unit !== void 0) {
                return new Interpolator.Form(valueForm, unit !== void 0 ? Interpolator.fromAny(unit) : void 0);
            }
            else {
                if (!Interpolator._form) {
                    Interpolator._form = new Interpolator.Form(valueForm);
                }
                return Interpolator._form;
            }
        };
        Interpolator.valueForm = function () {
            throw new Error();
        };
        return Interpolator;
    }());

    var StepInterpolator = (function (_super) {
        __extends(StepInterpolator, _super);
        function StepInterpolator(y0, y1) {
            var _this = _super.call(this) || this;
            if (y1 === void 0) {
                y1 = y0;
            }
            else if (y0 === void 0) {
                y0 = y1;
            }
            _this.y0 = y0;
            _this.y1 = y1;
            return _this;
        }
        StepInterpolator.prototype.interpolate = function (u) {
            var v = u < 1 ? this.y0 : this.y1;
            if (v === void 0) {
                throw new TypeError();
            }
            return v;
        };
        StepInterpolator.prototype.deinterpolate = function (y) {
            return y === this.y1 ? 1 : 0;
        };
        StepInterpolator.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                if (this.y0 === void 0 || this.y1 === void 0) {
                    throw new TypeError();
                }
                return [this.y0, this.y1];
            }
            else if (y1 === void 0) {
                y0 = y0;
                return new StepInterpolator(y0[0], y0[1]);
            }
            else {
                return new StepInterpolator(y0, y1);
            }
        };
        StepInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof StepInterpolator) {
                return this.y0 === that.y0 && this.y1 === that.y1;
            }
            return false;
        };
        return StepInterpolator;
    }(Interpolator));
    Interpolator.Step = StepInterpolator;

    var NumberInterpolator = (function (_super) {
        __extends(NumberInterpolator, _super);
        function NumberInterpolator(y0, y1) {
            var _this = _super.call(this) || this;
            if (y0 === void 0 && y1 === void 0) {
                y1 = y0 = 0;
            }
            else if (y1 === void 0) {
                y1 = y0;
            }
            else if (y0 === void 0) {
                y0 = y1;
            }
            _this.y0 = +y0;
            _this.dy = +y1 - _this.y0;
            return _this;
        }
        NumberInterpolator.prototype.interpolate = function (u) {
            return this.y0 + this.dy * u;
        };
        NumberInterpolator.prototype.deinterpolate = function (y) {
            return this.dy ? (+y - this.y0) / this.dy : this.dy;
        };
        NumberInterpolator.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                return [this.y0, this.y0 + this.dy];
            }
            else if (y1 === void 0) {
                y0 = y0;
                return new NumberInterpolator(y0[0], y0[1]);
            }
            else {
                return new NumberInterpolator(y0, y1);
            }
        };
        NumberInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NumberInterpolator) {
                return this.y0 === that.y0 && this.dy === that.dy;
            }
            return false;
        };
        return NumberInterpolator;
    }(Interpolator));
    Interpolator.Number = NumberInterpolator;

    var ShapeInterpolator = (function (_super) {
        __extends(ShapeInterpolator, _super);
        function ShapeInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShapeInterpolator.prototype.range = function (s0, s1) {
            if (s0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (s1 === void 0) {
                s0 = s0;
                return Interpolator.shape(s0[0], s0[1]);
            }
            else {
                return Interpolator.shape(s0, s1);
            }
        };
        ShapeInterpolator.shape = function (s0, s1) {
            if (s0 === void 0 && s1 === void 0) {
                return new ShapeInterpolator.Identity();
            }
            if (s0 !== void 0) {
                s0 = Shape.fromAny(s0);
            }
            if (s1 !== void 0) {
                s1 = Shape.fromAny(s1);
            }
            if (!s0 && !s1) {
                s1 = s0 = PointR2.origin();
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            if (s0 instanceof PointR2 && s1 instanceof PointR2) {
                return new ShapeInterpolator.PointR2(s0, s1);
            }
            else if (s0 instanceof SegmentR2 && s1 instanceof SegmentR2) {
                return new ShapeInterpolator.SegmentR2(s0, s1);
            }
            else if (s0 instanceof BoxR2 && s1 instanceof BoxR2) {
                return new ShapeInterpolator.BoxR2(s0, s1);
            }
            else if (s0 instanceof CircleR2 && s1 instanceof CircleR2) {
                return new ShapeInterpolator.CircleR2(s0, s1);
            }
            else if (s0 instanceof R2Shape && s1 instanceof R2Shape) {
                if (!(s0 instanceof BoxR2)) {
                    s0 = new BoxR2(s0.xMin, s0.yMin, s0.xMax, s0.yMax);
                }
                if (!(s1 instanceof BoxR2)) {
                    s1 = new BoxR2(s1.xMin, s1.yMin, s1.xMax, s1.yMax);
                }
                return new ShapeInterpolator.BoxR2(s0, s1);
            }
            throw new TypeError(s0 + ", " + s1);
        };
        return ShapeInterpolator;
    }(Interpolator));
    Interpolator.Shape = ShapeInterpolator;
    Interpolator.shape = ShapeInterpolator.shape;

    var IdentityShapeInterpolator = (function (_super) {
        __extends(IdentityShapeInterpolator, _super);
        function IdentityShapeInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentityShapeInterpolator.prototype.interpolate = function (u) {
            return PointR2.origin();
        };
        IdentityShapeInterpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        IdentityShapeInterpolator.prototype.equals = function (that) {
            if (this === that || that instanceof IdentityShapeInterpolator) {
                return true;
            }
            return false;
        };
        return IdentityShapeInterpolator;
    }(ShapeInterpolator));
    ShapeInterpolator.Identity = IdentityShapeInterpolator;

    var PointR2Interpolator = (function (_super) {
        __extends(PointR2Interpolator, _super);
        function PointR2Interpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (s0 !== void 0) {
                s0 = Shape.fromAny(s0);
            }
            if (s1 !== void 0) {
                s1 = Shape.fromAny(s1);
            }
            if (!s0 && !s1) {
                s1 = s0 = PointR2.origin();
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.x = s0.x;
            _this.dx = s1.x - _this.x;
            _this.y = s0.y;
            _this.dy = s1.y - _this.y;
            return _this;
        }
        PointR2Interpolator.prototype.interpolate = function (u) {
            var x = this.x + this.dx * u;
            var y = this.y + this.dy * u;
            return new PointR2(x, y);
        };
        PointR2Interpolator.prototype.deinterpolate = function (s) {
            s = Shape.fromAny(s);
            if (s instanceof PointR2) {
                var sx = s.x - this.x;
                var sy = s.y - this.y;
                var dp = sx * this.dx + sy * this.dy;
                var lf = Math.sqrt(sx * sx + sy * sy);
                return lf ? dp / lf : lf;
            }
            return 0;
        };
        PointR2Interpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PointR2Interpolator) {
                return this.x === that.x && this.dx === that.dx
                    && this.y === that.y && this.dy === that.dy;
            }
            return false;
        };
        return PointR2Interpolator;
    }(ShapeInterpolator));
    ShapeInterpolator.PointR2 = PointR2Interpolator;

    var SegmentR2Interpolator = (function (_super) {
        __extends(SegmentR2Interpolator, _super);
        function SegmentR2Interpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (s0 !== void 0) {
                s0 = Shape.fromAny(s0);
            }
            if (s1 !== void 0) {
                s1 = Shape.fromAny(s1);
            }
            if (!s0 && !s1) {
                s1 = s0 = new SegmentR2(0, 0, 0, 0);
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.x0 = s0.x0;
            _this.dx0 = s1.x0 - _this.x0;
            _this.y0 = s0.y0;
            _this.dy0 = s1.y0 - _this.y0;
            _this.x1 = s0.x1;
            _this.dx1 = s1.x1 - _this.x1;
            _this.y1 = s0.y1;
            _this.dy1 = s1.y1 - _this.y1;
            return _this;
        }
        SegmentR2Interpolator.prototype.interpolate = function (u) {
            var x0 = this.x0 + this.dx0 * u;
            var y0 = this.y0 + this.dy0 * u;
            var x1 = this.x1 + this.dx1 * u;
            var y1 = this.y1 + this.dy1 * u;
            return new SegmentR2(x0, y0, x1, y1);
        };
        SegmentR2Interpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        SegmentR2Interpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof SegmentR2Interpolator) {
                return this.x0 === that.x0 && this.dx0 === that.dx0
                    && this.y0 === that.y0 && this.dy0 === that.dy0
                    && this.x1 === that.x1 && this.dx1 === that.dx1
                    && this.y1 === that.y1 && this.dy1 === that.dy1;
            }
            return false;
        };
        return SegmentR2Interpolator;
    }(ShapeInterpolator));
    ShapeInterpolator.SegmentR2 = SegmentR2Interpolator;

    var BoxR2Interpolator = (function (_super) {
        __extends(BoxR2Interpolator, _super);
        function BoxR2Interpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (s0 !== void 0) {
                s0 = Shape.fromAny(s0);
            }
            if (s1 !== void 0) {
                s1 = Shape.fromAny(s1);
            }
            if (!s0 && !s1) {
                s1 = s0 = new BoxR2(0, 0, 0, 0);
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.xMin = s0.xMin;
            _this.dxMin = s1.xMin - _this.xMin;
            _this.yMin = s0.yMin;
            _this.dyMin = s1.yMin - _this.yMin;
            _this.xMax = s0.xMax;
            _this.dxMax = s1.xMax - _this.xMax;
            _this.yMax = s0.yMax;
            _this.dyMax = s1.yMax - _this.yMax;
            return _this;
        }
        BoxR2Interpolator.prototype.interpolate = function (u) {
            var xMin = this.xMin + this.dxMin * u;
            var yMin = this.yMin + this.dyMin * u;
            var xMax = this.xMax + this.dxMax * u;
            var yMax = this.yMax + this.dyMax * u;
            return new BoxR2(xMin, yMin, xMax, yMax);
        };
        BoxR2Interpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        BoxR2Interpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BoxR2Interpolator) {
                return this.xMin === that.xMin && this.dxMin === that.dxMin
                    && this.yMin === that.yMin && this.dyMin === that.dyMin
                    && this.xMax === that.xMax && this.dxMax === that.dxMax
                    && this.yMax === that.yMax && this.dyMax === that.dyMax;
            }
            return false;
        };
        return BoxR2Interpolator;
    }(ShapeInterpolator));
    ShapeInterpolator.BoxR2 = BoxR2Interpolator;

    var CircleR2Interpolator = (function (_super) {
        __extends(CircleR2Interpolator, _super);
        function CircleR2Interpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (s0 !== void 0) {
                s0 = Shape.fromAny(s0);
            }
            if (s1 !== void 0) {
                s1 = Shape.fromAny(s1);
            }
            if (!s0 && !s1) {
                s1 = s0 = new CircleR2(0, 0, 0);
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.cx = s0.cx;
            _this.dcx = s1.cx - _this.cx;
            _this.cy = s0.cy;
            _this.dcy = s1.cy - _this.cy;
            _this.r = s0.r;
            _this.dr = s1.r - _this.r;
            return _this;
        }
        CircleR2Interpolator.prototype.interpolate = function (u) {
            var cx = this.cx + this.dcx * u;
            var cy = this.cy + this.dcy * u;
            var r = this.r + this.dr * u;
            return new CircleR2(cx, cy, r);
        };
        CircleR2Interpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        CircleR2Interpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof CircleR2Interpolator) {
                return this.cx === that.cx && this.dcx === that.dcx
                    && this.cy === that.cy && this.dcy === that.dcy
                    && this.r === that.r && this.dr === that.dr;
            }
            return false;
        };
        return CircleR2Interpolator;
    }(ShapeInterpolator));
    ShapeInterpolator.CircleR2 = CircleR2Interpolator;

    var DateTimeInterpolator = (function (_super) {
        __extends(DateTimeInterpolator, _super);
        function DateTimeInterpolator(d0, d1, zone) {
            var _this = _super.call(this) || this;
            if (d0 === void 0 && d1 === void 0) {
                d1 = d0 = 0;
            }
            else if (d1 === void 0) {
                d1 = d0;
            }
            else if (d0 === void 0) {
                d0 = d1;
            }
            d0 = DateTime.fromAny(d0);
            d1 = DateTime.fromAny(d1);
            _this.t0 = d0.time();
            _this.dt = d1.time() - _this.t0;
            _this.zone = zone || d0.zone();
            return _this;
        }
        DateTimeInterpolator.prototype.interpolate = function (u) {
            return new DateTime(this.t0 + this.dt * u, this.zone);
        };
        DateTimeInterpolator.prototype.deinterpolate = function (d) {
            d = DateTime.time(d);
            return this.dt ? (d - this.t0) / this.dt : this.dt;
        };
        DateTimeInterpolator.prototype.range = function (t0, t1) {
            if (t0 === void 0) {
                return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
            }
            else if (t1 === void 0) {
                t0 = t0;
                return new DateTimeInterpolator(t0[0], t0[1], this.zone);
            }
            else {
                return new DateTimeInterpolator(t0, t1, this.zone);
            }
        };
        DateTimeInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DateTimeInterpolator) {
                return this.t0 === that.t0 && this.dt === that.dt;
            }
            return false;
        };
        return DateTimeInterpolator;
    }(Interpolator));
    Interpolator.DateTime = DateTimeInterpolator;

    var AngleInterpolator = (function (_super) {
        __extends(AngleInterpolator, _super);
        function AngleInterpolator(a0, a1) {
            var _this = _super.call(this) || this;
            if (a0 !== void 0) {
                a0 = Angle.fromAny(a0);
            }
            if (a1 !== void 0) {
                a1 = Angle.fromAny(a1);
            }
            if (!a0 && !a1) {
                a1 = a0 = Angle.zero();
            }
            else if (!a1) {
                a1 = a0;
            }
            else if (!a0) {
                a0 = a1;
            }
            else {
                a0 = a0.to(a1.units());
            }
            _this.v0 = a0.value();
            _this.dv = a1.value() - _this.v0;
            _this.units = a1.units();
            return _this;
        }
        AngleInterpolator.prototype.interpolate = function (u) {
            return Angle.from(this.v0 + this.dv * u, this.units);
        };
        AngleInterpolator.prototype.deinterpolate = function (a) {
            var v = Angle.fromAny(a).toValue(this.units);
            return this.dv ? (v - this.v0) / this.dv : this.dv;
        };
        AngleInterpolator.prototype.range = function (a0, a1) {
            if (a0 === void 0) {
                return [Angle.from(this.v0, this.units), Angle.from(this.v0 + this.dv, this.units)];
            }
            else if (a1 === void 0) {
                a0 = a0;
                return new AngleInterpolator(a0[0], a0[1]);
            }
            else {
                return new AngleInterpolator(a0, a1);
            }
        };
        AngleInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof AngleInterpolator) {
                return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
            }
            return false;
        };
        return AngleInterpolator;
    }(Interpolator));
    Interpolator.Angle = AngleInterpolator;

    var LengthInterpolator = (function (_super) {
        __extends(LengthInterpolator, _super);
        function LengthInterpolator(l0, l1) {
            var _this = _super.call(this) || this;
            if (l0 !== void 0) {
                l0 = Length.fromAny(l0);
            }
            if (l1 !== void 0) {
                l1 = Length.fromAny(l1);
            }
            if (!l1 && !l1) {
                l1 = l0 = Length.zero();
            }
            else if (!l1) {
                l1 = l0;
            }
            else if (!l0) {
                l0 = l1;
            }
            else {
                l0 = l0.to(l1.units());
            }
            _this.v0 = l0.value();
            _this.dv = l1.value() - _this.v0;
            _this.units = l1.units();
            return _this;
        }
        LengthInterpolator.prototype.interpolate = function (u) {
            return Length.from(this.v0 + this.dv * u, this.units);
        };
        LengthInterpolator.prototype.deinterpolate = function (l) {
            var v = Length.fromAny(l).toValue(this.units);
            return this.dv ? (v - this.v0) / this.dv : this.dv;
        };
        LengthInterpolator.prototype.range = function (l0, l1) {
            if (l0 === void 0) {
                return [Length.from(this.v0, this.units), Length.from(this.v0 + this.dv, this.units)];
            }
            else if (l1 === void 0) {
                l0 = l0;
                return new LengthInterpolator(l0[0], l0[1]);
            }
            else {
                return new LengthInterpolator(l0, l1);
            }
        };
        LengthInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LengthInterpolator) {
                return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
            }
            return false;
        };
        return LengthInterpolator;
    }(Interpolator));
    Interpolator.Length = LengthInterpolator;

    var ColorInterpolator = (function (_super) {
        __extends(ColorInterpolator, _super);
        function ColorInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ColorInterpolator.prototype.range = function (c0, c1) {
            if (c0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (c1 === void 0) {
                c0 = c0;
                return Interpolator.color(c0[0], c0[1]);
            }
            else {
                return Interpolator.color(c0, c1);
            }
        };
        ColorInterpolator.color = function (c0, c1) {
            if (c0 === void 0 && c1 === void 0) {
                return new ColorInterpolator.Identity();
            }
            if (c0 !== void 0) {
                c0 = Color.fromAny(c0);
            }
            if (c1 !== void 0) {
                c1 = Color.fromAny(c1);
            }
            if (!c0 && !c1) {
                c1 = c0 = Color.transparent();
            }
            else if (!c1) {
                c1 = c0;
            }
            else if (!c0) {
                c0 = c1;
            }
            if (c0 instanceof HslColor && c1 instanceof HslColor) {
                return ColorInterpolator.hsl(c0, c1);
            }
            else {
                return ColorInterpolator.rgb(c0.rgb(), c1.rgb());
            }
        };
        ColorInterpolator.rgb = function (c0, c1) {
            return new ColorInterpolator.Rgb(c0, c1);
        };
        ColorInterpolator.hsl = function (c0, c1) {
            return new ColorInterpolator.Hsl(c0, c1);
        };
        return ColorInterpolator;
    }(Interpolator));
    Interpolator.Color = ColorInterpolator;
    Interpolator.color = ColorInterpolator.color;

    var IdentityColorInterpolator = (function (_super) {
        __extends(IdentityColorInterpolator, _super);
        function IdentityColorInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentityColorInterpolator.prototype.interpolate = function (u) {
            return Color.transparent();
        };
        IdentityColorInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        IdentityColorInterpolator.prototype.equals = function (that) {
            if (this === that || that instanceof IdentityColorInterpolator) {
                return true;
            }
            return false;
        };
        return IdentityColorInterpolator;
    }(ColorInterpolator));
    ColorInterpolator.Identity = IdentityColorInterpolator;

    var RgbColorInterpolator = (function (_super) {
        __extends(RgbColorInterpolator, _super);
        function RgbColorInterpolator(c0, c1) {
            var _this = _super.call(this) || this;
            if (c0 !== void 0) {
                c0 = Color.rgb(c0);
            }
            if (c1 !== void 0) {
                c1 = Color.rgb(c1);
            }
            if (!c0 && !c1) {
                c1 = c0 = RgbColor.transparent();
            }
            else if (!c1) {
                c1 = c0;
            }
            else if (!c0) {
                c0 = c1;
            }
            _this.r0 = c0.r;
            _this.dr = c1.r - _this.r0;
            _this.g0 = c0.g;
            _this.dg = c1.g - _this.g0;
            _this.b0 = c0.b;
            _this.db = c1.b - _this.b0;
            _this.a0 = c0.a;
            _this.da = c1.a - _this.a0;
            return _this;
        }
        RgbColorInterpolator.prototype.interpolate = function (u) {
            var r = this.r0 + this.dr * u;
            var g = this.g0 + this.dg * u;
            var b = this.b0 + this.db * u;
            var a = this.a0 + this.da * u;
            return new RgbColor(r, g, b, a);
        };
        RgbColorInterpolator.prototype.deinterpolate = function (c) {
            c = Color.rgb(c);
            var cr = c.r - this.r0;
            var cg = c.g - this.g0;
            var cb = c.b - this.b0;
            var ca = c.a - this.a0;
            var dp = cr * this.dr + cg * this.dg + cb * this.db + ca * this.da;
            var lc = Math.sqrt(cr * cr + cg * cg + cb * cb + ca * ca);
            return lc ? dp / lc : lc;
        };
        RgbColorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof RgbColorInterpolator) {
                return this.r0 === that.r0 && this.dr === that.dr
                    && this.g0 === that.g0 && this.dg === that.dg
                    && this.b0 === that.b0 && this.db === that.db
                    && this.a0 === that.a0 && this.da === that.da;
            }
            return false;
        };
        return RgbColorInterpolator;
    }(ColorInterpolator));
    ColorInterpolator.Rgb = RgbColorInterpolator;

    var HslColorInterpolator = (function (_super) {
        __extends(HslColorInterpolator, _super);
        function HslColorInterpolator(c0, c1) {
            var _this = _super.call(this) || this;
            if (c0 !== void 0) {
                c0 = Color.hsl(c0);
            }
            if (c1 !== void 0) {
                c1 = Color.hsl(c1);
            }
            if (!c0 && !c1) {
                c1 = c0 = HslColor.transparent();
            }
            else if (!c1) {
                c1 = c0;
            }
            else if (!c0) {
                c0 = c1;
            }
            _this.h0 = c0.h;
            _this.dh = c1.h - _this.h0;
            _this.s0 = c0.s;
            _this.ds = c1.s - _this.s0;
            _this.l0 = c0.l;
            _this.dl = c1.l - _this.l0;
            _this.a0 = c0.a;
            _this.da = c1.a - _this.a0;
            return _this;
        }
        HslColorInterpolator.prototype.interpolate = function (u) {
            var h = this.h0 + this.dh * u;
            var s = this.s0 + this.ds * u;
            var l = this.l0 + this.dl * u;
            var a = this.a0 + this.da * u;
            return new HslColor(h, s, l, a);
        };
        HslColorInterpolator.prototype.deinterpolate = function (c) {
            c = Color.hsl(c);
            var ch = c.h - this.h0;
            var cs = c.s - this.s0;
            var cl = c.l - this.l0;
            var ca = c.a - this.a0;
            var dp = ch * this.dh + cs * this.ds + cl * this.dl + ca * this.da;
            var lc = Math.sqrt(ch * ch + cs * cs + cl * cl + ca * ca);
            return lc ? dp / lc : lc;
        };
        HslColorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof HslColorInterpolator) {
                return this.h0 === that.h0 && this.dh === that.dh
                    && this.s0 === that.s0 && this.ds === that.ds
                    && this.l0 === that.l0 && this.dl === that.dl
                    && this.a0 === that.a0 && this.da === that.da;
            }
            return false;
        };
        return HslColorInterpolator;
    }(ColorInterpolator));
    ColorInterpolator.Hsl = HslColorInterpolator;

    var TransformInterpolator = (function (_super) {
        __extends(TransformInterpolator, _super);
        function TransformInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransformInterpolator.prototype.range = function (f0, f1) {
            if (f0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (f1 === void 0) {
                f0 = f0;
                return Interpolator.transform(f0[0], f0[1]);
            }
            else {
                return Interpolator.transform(f0, f1);
            }
        };
        TransformInterpolator.transform = function (f0, f1) {
            if (f0 === void 0 && f1 === void 0) {
                return new TransformInterpolator.Identity();
            }
            if (f0 !== void 0) {
                f0 = Transform.fromAny(f0);
            }
            if (f1 !== void 0) {
                f1 = Transform.fromAny(f1);
            }
            if (!f0 && !f1) {
                f1 = f0 = Transform.identity();
            }
            else if (!f1) {
                f1 = f0;
            }
            else if (!f0) {
                f0 = f1;
            }
            if (f0 instanceof TranslateTransform && f1 instanceof TranslateTransform) {
                return TransformInterpolator.translate(f0, f1);
            }
            else if (f0 instanceof ScaleTransform && f1 instanceof ScaleTransform) {
                return TransformInterpolator.scale(f0, f1);
            }
            else if (f0 instanceof RotateTransform && f1 instanceof RotateTransform) {
                return TransformInterpolator.rotate(f0, f1);
            }
            else if (f0 instanceof SkewTransform && f1 instanceof SkewTransform) {
                return TransformInterpolator.skew(f0, f1);
            }
            else if (f0 instanceof TransformList && f1 instanceof TransformList) {
                if (f0.conformsTo(f1)) {
                    return TransformInterpolator.list(f0, f1);
                }
            }
            return TransformInterpolator.affine(f0.toAffine(), f1.toAffine());
        };
        TransformInterpolator.translate = function (f0, f1) {
            return new TransformInterpolator.Translate(f0, f1);
        };
        TransformInterpolator.scale = function (f0, f1) {
            return new TransformInterpolator.Scale(f0, f1);
        };
        TransformInterpolator.rotate = function (f0, f1) {
            return new TransformInterpolator.Rotate(f0, f1);
        };
        TransformInterpolator.skew = function (f0, f1) {
            return new TransformInterpolator.Skew(f0, f1);
        };
        TransformInterpolator.affine = function (f0, f1) {
            return new TransformInterpolator.Affine(f0, f1);
        };
        TransformInterpolator.list = function (f0, f1) {
            return new TransformInterpolator.List(f0, f1);
        };
        return TransformInterpolator;
    }(Interpolator));
    Interpolator.Transform = TransformInterpolator;
    Interpolator.transform = TransformInterpolator.transform;

    var IdentityTransformInterpolator = (function (_super) {
        __extends(IdentityTransformInterpolator, _super);
        function IdentityTransformInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentityTransformInterpolator.prototype.interpolate = function (u) {
            return Transform.identity();
        };
        IdentityTransformInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        IdentityTransformInterpolator.prototype.equals = function (that) {
            if (this === that || that instanceof IdentityTransformInterpolator) {
                return true;
            }
            return false;
        };
        return IdentityTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Identity = IdentityTransformInterpolator;

    var TranslateTransformInterpolator = (function (_super) {
        __extends(TranslateTransformInterpolator, _super);
        function TranslateTransformInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            var x0;
            var y0;
            if (f0 !== void 0) {
                f0 = TranslateTransform.fromAny(f0);
                x0 = f0.x;
                y0 = f0.y;
            }
            else {
                x0 = void 0;
                y0 = void 0;
            }
            var x1;
            var y1;
            if (f1 !== void 0) {
                f1 = TranslateTransform.fromAny(f1);
                x1 = f1.x;
                y1 = f1.y;
            }
            else {
                x1 = void 0;
                y1 = void 0;
            }
            if (!x0 && !x1) {
                x1 = x0 = Length.zero();
            }
            else if (!x1) {
                x1 = x0;
            }
            else if (!x0) {
                x0 = x1;
            }
            else {
                x0 = x0.to(x1.units());
            }
            if (!y0 && !y1) {
                y1 = y0 = Length.zero();
            }
            else if (!y1) {
                y1 = y0;
            }
            else if (!y0) {
                y0 = y1;
            }
            else {
                y0 = y0.to(y1.units());
            }
            _this.x0 = x0.value();
            _this.dx = x1.value() - _this.x0;
            _this.xUnits = x1.units();
            _this.y0 = y0.value();
            _this.dy = y1.value() - _this.y0;
            _this.yUnits = y1.units();
            return _this;
        }
        TranslateTransformInterpolator.prototype.interpolate = function (u) {
            var x = Length.from(this.x0 + this.dx * u, this.xUnits);
            var y = Length.from(this.y0 + this.dy * u, this.yUnits);
            return new TranslateTransform(x, y);
        };
        TranslateTransformInterpolator.prototype.deinterpolate = function (f) {
            f = Transform.fromAny(f);
            if (f instanceof TranslateTransform) {
                var units = f.x.units();
                var x0 = Length.fromAny(this.x0, this.xUnits).toValue(units);
                var y0 = Length.fromAny(this.y0, this.yUnits).toValue(units);
                var dx = Length.fromAny(this.dx, this.xUnits).toValue(units);
                var dy = Length.fromAny(this.dy, this.yUnits).toValue(units);
                var fx = f.x.toValue(units) - x0;
                var fy = f.y.toValue(units) - y0;
                var dp = fx * dx + fy * dy;
                var lf = Math.sqrt(fx * fx + fy * fy);
                return lf ? dp / lf : lf;
            }
            return 0;
        };
        TranslateTransformInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TranslateTransformInterpolator) {
                return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits
                    && this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
            }
            return false;
        };
        return TranslateTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Translate = TranslateTransformInterpolator;

    var ScaleTransformInterpolator = (function (_super) {
        __extends(ScaleTransformInterpolator, _super);
        function ScaleTransformInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            var x0;
            var y0;
            if (f0 !== void 0) {
                f0 = ScaleTransform.fromAny(f0);
                x0 = f0.x;
                y0 = f0.y;
            }
            else {
                x0 = void 0;
                y0 = void 0;
            }
            var x1;
            var y1;
            if (f1 !== void 0) {
                f1 = ScaleTransform.fromAny(f1);
                x1 = f1.x;
                y1 = f1.y;
            }
            else {
                x1 = void 0;
                y1 = void 0;
            }
            if (x0 === void 0 && !x1) {
                x1 = x0 = 1;
            }
            else if (x1 === void 0) {
                x1 = x0;
            }
            else if (x0 === void 0) {
                x0 = x1;
            }
            if (y0 === void 0 && y1 === void 0) {
                y1 = y0 = 1;
            }
            else if (y1 === void 0) {
                y1 = y0;
            }
            else if (y0 === void 0) {
                y0 = y1;
            }
            _this.x0 = x0;
            _this.dx = x1 - _this.x0;
            _this.y0 = y0;
            _this.dy = y1 - _this.y0;
            return _this;
        }
        ScaleTransformInterpolator.prototype.interpolate = function (u) {
            var x = this.x0 + this.dx * u;
            var y = this.y0 + this.dy * u;
            return new ScaleTransform(x, y);
        };
        ScaleTransformInterpolator.prototype.deinterpolate = function (f) {
            f = Transform.fromAny(f);
            if (f instanceof ScaleTransform) {
                var fx = f.x - this.x0;
                var fy = f.y - this.y0;
                var dp = fx * this.dx + fy * this.dy;
                var lf = Math.sqrt(fx * fx + fy * fy);
                return lf ? dp / lf : lf;
            }
            return 0;
        };
        ScaleTransformInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ScaleTransformInterpolator) {
                return this.x0 === that.x0 && this.dx === that.dx
                    && this.y0 === that.y0 && this.dy === that.dy;
            }
            return false;
        };
        return ScaleTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Scale = ScaleTransformInterpolator;

    var RotateTransformInterpolator = (function (_super) {
        __extends(RotateTransformInterpolator, _super);
        function RotateTransformInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            var a0;
            if (f0 !== void 0) {
                f0 = RotateTransform.fromAny(f0);
                a0 = f0.angle;
            }
            else {
                a0 = void 0;
            }
            var a1;
            if (f1 !== void 0) {
                f1 = RotateTransform.fromAny(f1);
                a1 = f1.angle;
            }
            else {
                a1 = void 0;
            }
            if (!a0 && !a1) {
                a1 = a0 = Angle.zero();
            }
            else if (!a1) {
                a1 = a0;
            }
            else if (!a0) {
                a0 = a1;
            }
            else {
                a0 = a0.to(a1.units());
            }
            _this.v0 = a0.value();
            _this.dv = a1.value() - _this.v0;
            _this.units = a1.units();
            return _this;
        }
        RotateTransformInterpolator.prototype.interpolate = function (u) {
            var a = Angle.from(this.v0 + this.dv * u, this.units);
            return new RotateTransform(a);
        };
        RotateTransformInterpolator.prototype.deinterpolate = function (f) {
            f = Transform.fromAny(f);
            if (f instanceof RotateTransform) {
                var v = f.angle.toValue(this.units);
                return this.dv ? (v - this.v0) / this.dv : this.dv;
            }
            return 0;
        };
        RotateTransformInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof RotateTransformInterpolator) {
                return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
            }
            return false;
        };
        return RotateTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Rotate = RotateTransformInterpolator;

    var SkewTransformInterpolator = (function (_super) {
        __extends(SkewTransformInterpolator, _super);
        function SkewTransformInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            var x0;
            var y0;
            if (f0 !== void 0) {
                f0 = SkewTransform.fromAny(f0);
                x0 = f0.x;
                y0 = f0.y;
            }
            else {
                x0 = void 0;
                y0 = void 0;
            }
            var x1;
            var y1;
            if (f1 !== void 0) {
                f1 = SkewTransform.fromAny(f1);
                x1 = f1.x;
                y1 = f1.y;
            }
            else {
                x1 = void 0;
                y1 = void 0;
            }
            if (!x0 && !x1) {
                x1 = x0 = Angle.zero();
            }
            else if (!x1) {
                x1 = x0;
            }
            else if (!x0) {
                x0 = x1;
            }
            else {
                x0 = x0.to(x1.units());
            }
            if (!y0 && !y1) {
                y1 = y0 = Angle.zero();
            }
            else if (!y1) {
                y1 = y0;
            }
            else if (!y0) {
                y0 = y1;
            }
            else {
                y0 = y0.to(y1.units());
            }
            _this.x0 = x0.value();
            _this.dx = x1.value() - _this.x0;
            _this.xUnits = x1.units();
            _this.y0 = y0.value();
            _this.dy = y1.value() - _this.y0;
            _this.yUnits = y1.units();
            return _this;
        }
        SkewTransformInterpolator.prototype.interpolate = function (u) {
            var x = Angle.from(this.x0 + this.dx * u, this.xUnits);
            var y = Angle.from(this.y0 + this.dy * u, this.yUnits);
            return new SkewTransform(x, y);
        };
        SkewTransformInterpolator.prototype.deinterpolate = function (f) {
            f = Transform.fromAny(f);
            if (f instanceof SkewTransform) {
                var units = f.x.units();
                var x0 = Angle.fromAny(this.x0, this.xUnits).toValue(units);
                var y0 = Angle.fromAny(this.y0, this.yUnits).toValue(units);
                var dx = Angle.fromAny(this.dx, this.xUnits).toValue(units);
                var dy = Angle.fromAny(this.dy, this.yUnits).toValue(units);
                var fx = f.x.toValue(units) - x0;
                var fy = f.y.toValue(units) - y0;
                var dp = fx * dx + fy * dy;
                var lf = Math.sqrt(fx * fx + fy * fy);
                return lf ? dp / lf : lf;
            }
            return 0;
        };
        SkewTransformInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof SkewTransformInterpolator) {
                return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits
                    && this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
            }
            return false;
        };
        return SkewTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Skew = SkewTransformInterpolator;

    var AffineTransformInterpolator = (function (_super) {
        __extends(AffineTransformInterpolator, _super);
        function AffineTransformInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            if (f0 !== void 0) {
                f0 = AffineTransform.fromAny(f0);
            }
            if (f1 !== void 0) {
                f1 = AffineTransform.fromAny(f1);
            }
            if (!f0 && !f1) {
                f1 = f0 = new AffineTransform();
            }
            else if (!f1) {
                f1 = f0;
            }
            else if (!f0) {
                f0 = f1;
            }
            _this.f0 = f0;
            _this.f1 = f1;
            return _this;
        }
        AffineTransformInterpolator.prototype.interpolate = function (u) {
            return this.f1;
        };
        AffineTransformInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        AffineTransformInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof AffineTransformInterpolator) {
                return this.f0.equals(that.f0) && this.f1.equals(that.f1);
            }
            return false;
        };
        return AffineTransformInterpolator;
    }(TransformInterpolator));
    TransformInterpolator.Affine = AffineTransformInterpolator;

    var TransformListInterpolator = (function (_super) {
        __extends(TransformListInterpolator, _super);
        function TransformListInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            if (f0 !== void 0) {
                f0 = TransformList.fromAny(f0);
            }
            if (f1 !== void 0) {
                f1 = TransformList.fromAny(f1);
            }
            if (!f0 && !f1) {
                f1 = f0 = new TransformList([]);
            }
            else if (!f1) {
                f1 = f0;
            }
            else if (!f0) {
                f0 = f1;
            }
            _this.interpolators = [];
            var n = Math.min(f0.transforms.length, f1.transforms.length);
            for (var i = 0; i < n; i += 1) {
                _this.interpolators.push(Interpolator.transform(f0.transforms[i], f1.transforms[i]));
            }
            return _this;
        }
        TransformListInterpolator.prototype.interpolate = function (u) {
            var transforms = [];
            for (var i = 0; i < this.interpolators.length; i += 1) {
                transforms.push(this.interpolators[i].interpolate(u));
            }
            return new TransformList(transforms);
        };
        TransformListInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        TransformListInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TransformListInterpolator) {
                var n = this.interpolators.length;
                if (n === that.interpolators.length) {
                    for (var i = 0; i < n; i += 1) {
                        if (!this.interpolators[i].equals(that.interpolators[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        return TransformListInterpolator;
    }(TransformInterpolator));

    var StructureInterpolator = (function (_super) {
        __extends(StructureInterpolator, _super);
        function StructureInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StructureInterpolator.prototype.range = function (i0, i1) {
            if (i0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (i1 === void 0) {
                i0 = i0;
                return Interpolator.structure(i0[0], i0[1]);
            }
            else {
                return Interpolator.structure(i0, i1);
            }
        };
        StructureInterpolator.structure = function (i0, i1) {
            if (i0 === void 0 && i1 === void 0) {
                return new StructureInterpolator.Absent();
            }
            if (i0 !== void 0) {
                i0 = Item.fromAny(i0);
            }
            if (i1 !== void 0) {
                i1 = Item.fromAny(i1);
            }
            if (!i0 && !i1) {
                i1 = i0 = Item.absent();
            }
            else if (!i1) {
                i1 = i0;
            }
            else if (!i0) {
                i0 = i1;
            }
            if (i0 instanceof Field && i1 instanceof Field) {
                if (i0 instanceof Attr && i1 instanceof Attr
                    || i0 instanceof Attr && i1.key instanceof Text
                    || i1 instanceof Attr && i0.key instanceof Text) {
                    return new StructureInterpolator.Attr(i0, i1);
                }
                else {
                    return new StructureInterpolator.Slot(i0, i1);
                }
            }
            var v0 = i0.toValue();
            var v1 = i1.toValue();
            if (v0 instanceof Record && v1 instanceof Record) {
                return new StructureInterpolator.Record(v0, v1);
            }
            else if (v0 instanceof Num && v1 instanceof Num) {
                return new StructureInterpolator.Num(v0, v1);
            }
            else if (v0 instanceof BinaryOperator && v1 instanceof BinaryOperator) {
                return new StructureInterpolator.BinaryOperator(v0, v1);
            }
            else if (v0 instanceof UnaryOperator && v1 instanceof UnaryOperator) {
                return new StructureInterpolator.UnaryOperator(v0, v1);
            }
            else if (v0 instanceof InvokeOperator && v1 instanceof InvokeOperator) {
                return new StructureInterpolator.InvokeOperator(v0, v1);
            }
            return new StructureInterpolator.Value(v0, v1);
        };
        return StructureInterpolator;
    }(Interpolator));
    Interpolator.Structure = StructureInterpolator;
    Interpolator.structure = StructureInterpolator.structure;

    var AttrInterpolator = (function (_super) {
        __extends(AttrInterpolator, _super);
        function AttrInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            if (!f0 && !f1) {
                throw new TypeError();
            }
            else if (!f1) {
                f1 = f0;
            }
            else if (!f0) {
                f0 = f1;
            }
            if (!(f0.key instanceof Text$1)) {
                throw new TypeError("" + f0.key);
            }
            else if (!(f1.key instanceof Text$1)) {
                throw new TypeError("" + f1.key);
            }
            f0.commit();
            f1.commit();
            _this.keyInterpolator = Interpolator.structure(f0.key, f1.key);
            _this.valueInterpolator = Interpolator.structure(f0.value, f1.value);
            return _this;
        }
        AttrInterpolator.prototype.interpolate = function (u) {
            var key = this.keyInterpolator.interpolate(u);
            var value = this.valueInterpolator.interpolate(u);
            return Attr.of(key, value);
        };
        AttrInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        AttrInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof AttrInterpolator) {
                return this.keyInterpolator.equals(that.keyInterpolator)
                    && this.valueInterpolator.equals(that.valueInterpolator);
            }
            return false;
        };
        return AttrInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Attr = AttrInterpolator;

    var SlotInterpolator = (function (_super) {
        __extends(SlotInterpolator, _super);
        function SlotInterpolator(f0, f1) {
            var _this = _super.call(this) || this;
            if (!f0 && !f1) {
                throw new TypeError();
            }
            else if (!f1) {
                f1 = f0;
            }
            else if (!f0) {
                f0 = f1;
            }
            f0.commit();
            f1.commit();
            _this.keyInterpolator = Interpolator.structure(f0.key, f1.key);
            _this.valueInterpolator = Interpolator.structure(f0.value, f1.value);
            return _this;
        }
        SlotInterpolator.prototype.interpolate = function (u) {
            var key = this.keyInterpolator.interpolate(u);
            var value = this.valueInterpolator.interpolate(u);
            return Slot.of(key, value);
        };
        SlotInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        SlotInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof SlotInterpolator) {
                return this.keyInterpolator.equals(that.keyInterpolator)
                    && this.valueInterpolator.equals(that.valueInterpolator);
            }
            return false;
        };
        return SlotInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Slot = SlotInterpolator;

    var ValueInterpolator = (function (_super) {
        __extends(ValueInterpolator, _super);
        function ValueInterpolator(v0, v1) {
            var _this = _super.call(this) || this;
            if (v0 !== void 0) {
                v0 = Value.fromAny(v0);
            }
            if (v1 !== void 0) {
                v1 = Value.fromAny(v1);
            }
            if (!v0 && !v1) {
                v1 = v0 = Value.absent();
            }
            else if (!v1) {
                v1 = v0;
            }
            else if (!v0) {
                v0 = v1;
            }
            _this.v0 = v0.commit();
            _this.v1 = v1.commit();
            return _this;
        }
        ValueInterpolator.prototype.interpolate = function (u) {
            return u < 1 ? this.v0 : this.v1;
        };
        ValueInterpolator.prototype.deinterpolate = function (v) {
            v = Item.fromAny(v);
            return v.equals(this.v1) ? 1 : 0;
        };
        ValueInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ValueInterpolator) {
                return this.v0.equals(that.v0) && this.v1.equals(that.v1);
            }
            return false;
        };
        return ValueInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Value = ValueInterpolator;

    var RecordInterpolator = (function (_super) {
        __extends(RecordInterpolator, _super);
        function RecordInterpolator(r0, r1) {
            var _this = _super.call(this) || this;
            if (r0 !== void 0) {
                r0 = Record.fromAny(r0);
            }
            if (r1 !== void 0) {
                r1 = Record.fromAny(r1);
            }
            if (!r0 && !r1) {
                r1 = r0 = Record.empty();
            }
            else if (!r1) {
                r1 = r0;
            }
            else if (!r0) {
                r0 = r1;
            }
            r0.commit();
            r1.commit();
            _this.interpolators = [];
            var n = Math.min(r0.length, r1.length);
            for (var i = 0; i < n; i += 1) {
                _this.interpolators.push(Interpolator.structure(r0.getItem(i), r1.getItem(i)));
            }
            return _this;
        }
        RecordInterpolator.prototype.interpolate = function (u) {
            var n = this.interpolators.length;
            var record = Record.create(n);
            for (var i = 0; i < n; i += 1) {
                record.push(this.interpolators[i].interpolate(u));
            }
            return record;
        };
        RecordInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        RecordInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof RecordInterpolator) {
                var n = this.interpolators.length;
                if (n === that.interpolators.length) {
                    for (var i = 0; i < n; i += 1) {
                        if (!this.interpolators[i].equals(that.interpolators[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        return RecordInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Record = RecordInterpolator;

    var NumInterpolator = (function (_super) {
        __extends(NumInterpolator, _super);
        function NumInterpolator(y0, y1) {
            var _this = _super.call(this) || this;
            if (y0 === void 0 && y1 === void 0) {
                y1 = y0 = 0;
            }
            else if (y1 === void 0) {
                y1 = y0;
            }
            else if (y0 === void 0) {
                y0 = y1;
            }
            _this.y0 = +y0;
            _this.dy = +y1 - _this.y0;
            return _this;
        }
        NumInterpolator.prototype.interpolate = function (u) {
            return Num.from(this.y0 + this.dy * u);
        };
        NumInterpolator.prototype.deinterpolate = function (y) {
            y = Item.fromAny(y);
            if (y instanceof Num) {
                return this.dy ? (y.value - this.y0) / this.dy : this.dy;
            }
            return 0;
        };
        NumInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NumInterpolator) {
                return this.y0 === that.y0 && this.dy === that.dy;
            }
            return false;
        };
        return NumInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Num = NumInterpolator;

    var ConditionalOperatorInterpolator = (function (_super) {
        __extends(ConditionalOperatorInterpolator, _super);
        function ConditionalOperatorInterpolator(e0, e1) {
            var _this = _super.call(this) || this;
            if (!e0 && !e1) {
                throw new TypeError();
            }
            else if (!e1) {
                e1 = e0;
            }
            else if (!e0) {
                e0 = e1;
            }
            e0.commit();
            e1.commit();
            _this.ifTermInterpolator = Interpolator.structure(e0.ifTerm(), e1.ifTerm());
            _this.thenTermInterpolator = Interpolator.structure(e0.thenTerm(), e1.thenTerm());
            _this.elseTermInterpolator = Interpolator.structure(e0.elseTerm(), e1.elseTerm());
            return _this;
        }
        ConditionalOperatorInterpolator.prototype.interpolate = function (u) {
            var ifTerm = this.ifTermInterpolator.interpolate(u);
            var thenTerm = this.thenTermInterpolator.interpolate(u);
            var elseTerm = this.elseTermInterpolator.interpolate(u);
            return ifTerm.conditional(thenTerm, elseTerm);
        };
        ConditionalOperatorInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        ConditionalOperatorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ConditionalOperatorInterpolator) {
                return this.ifTermInterpolator.equals(that.ifTermInterpolator)
                    && this.thenTermInterpolator.equals(that.thenTermInterpolator)
                    && this.elseTermInterpolator.equals(that.elseTermInterpolator);
            }
            return false;
        };
        return ConditionalOperatorInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.ConditionalOperator = ConditionalOperatorInterpolator;

    var BinaryOperatorInterpolator = (function (_super) {
        __extends(BinaryOperatorInterpolator, _super);
        function BinaryOperatorInterpolator(e0, e1) {
            var _this = _super.call(this) || this;
            if (!e0 && !e1) {
                throw new TypeError();
            }
            else if (!e1) {
                e1 = e0;
            }
            else if (!e0) {
                e0 = e1;
            }
            _this.operator = e0.operator();
            if (_this.operator !== e1.operator()) {
                throw new Error(e1.operator());
            }
            e0.commit();
            e1.commit();
            _this.operand1Interpolator = Interpolator.structure(e0.operand1(), e1.operand1());
            _this.operand2Interpolator = Interpolator.structure(e0.operand2(), e1.operand2());
            return _this;
        }
        BinaryOperatorInterpolator.prototype.interpolate = function (u) {
            var operand1 = this.operand1Interpolator.interpolate(u);
            var operand2 = this.operand2Interpolator.interpolate(u);
            switch (this.operator) {
                case "||": return operand1.or(operand2);
                case "&&": return operand1.and(operand2);
                case "|": return operand1.bitwiseOr(operand2);
                case "^": return operand1.bitwiseXor(operand2);
                case "&": return operand1.bitwiseAnd(operand2);
                case "<": return operand1.lt(operand2);
                case "<=": return operand1.le(operand2);
                case "==": return operand1.eq(operand2);
                case "!=": return operand1.ne(operand2);
                case ">=": return operand1.ge(operand2);
                case ">": return operand1.gt(operand2);
                case "+": return operand1.plus(operand2);
                case "-": return operand1.minus(operand2);
                case "*": return operand1.times(operand2);
                case "/": return operand1.divide(operand2);
                case "%": return operand1.modulo(operand2);
                default: throw new Error(this.operator);
            }
        };
        BinaryOperatorInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        BinaryOperatorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BinaryOperatorInterpolator) {
                return this.operand1Interpolator.equals(that.operand1Interpolator)
                    && this.operator === that.operator
                    && this.operand2Interpolator.equals(that.operand2Interpolator);
            }
            return false;
        };
        return BinaryOperatorInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.BinaryOperator = BinaryOperatorInterpolator;

    var UnaryOperatorInterpolator = (function (_super) {
        __extends(UnaryOperatorInterpolator, _super);
        function UnaryOperatorInterpolator(e0, e1) {
            var _this = _super.call(this) || this;
            if (!e0 && !e1) {
                throw new TypeError();
            }
            else if (!e1) {
                e1 = e0;
            }
            else if (!e0) {
                e0 = e1;
            }
            _this.operator = e0.operator();
            if (_this.operator !== e1.operator()) {
                throw new Error(e1.operator());
            }
            e0.commit();
            e1.commit();
            _this.operandInterpolator = Interpolator.structure(e0.operand(), e1.operand());
            return _this;
        }
        UnaryOperatorInterpolator.prototype.interpolate = function (u) {
            var operand = this.operandInterpolator.interpolate(u);
            switch (this.operator) {
                case "!": return operand.not();
                case "~": return operand.bitwiseNot();
                case "-": return operand.negative();
                default: throw new Error(this.operator);
            }
        };
        UnaryOperatorInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        UnaryOperatorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UnaryOperatorInterpolator) {
                return this.operator === that.operator
                    && this.operandInterpolator.equals(that.operandInterpolator);
            }
            return false;
        };
        return UnaryOperatorInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.UnaryOperator = UnaryOperatorInterpolator;

    var InvokeOperatorInterpolator = (function (_super) {
        __extends(InvokeOperatorInterpolator, _super);
        function InvokeOperatorInterpolator(e0, e1) {
            var _this = _super.call(this) || this;
            if (!e0 && !e1) {
                throw new TypeError();
            }
            else if (!e1) {
                e1 = e0;
            }
            else if (!e0) {
                e0 = e1;
            }
            e0.commit();
            e1.commit();
            _this.funcInterpolator = Interpolator.structure(e0.func(), e1.func());
            _this.argsInterpolator = Interpolator.structure(e0.args(), e1.args());
            return _this;
        }
        InvokeOperatorInterpolator.prototype.interpolate = function (u) {
            var func = this.funcInterpolator.interpolate(u);
            var args = this.argsInterpolator.interpolate(u);
            return Selector.literal(func).invoke(args);
        };
        InvokeOperatorInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        InvokeOperatorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InvokeOperatorInterpolator) {
                return this.funcInterpolator.equals(that.funcInterpolator)
                    && this.argsInterpolator.equals(that.argsInterpolator);
            }
            return false;
        };
        return InvokeOperatorInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.InvokeOperator = InvokeOperatorInterpolator;

    var AbsentInterpolator = (function (_super) {
        __extends(AbsentInterpolator, _super);
        function AbsentInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbsentInterpolator.prototype.interpolate = function (u) {
            return Item.absent();
        };
        AbsentInterpolator.prototype.deinterpolate = function (f) {
            return 0;
        };
        AbsentInterpolator.prototype.equals = function (that) {
            if (this === that || that instanceof AbsentInterpolator) {
                return true;
            }
            return false;
        };
        return AbsentInterpolator;
    }(StructureInterpolator));
    StructureInterpolator.Absent = AbsentInterpolator;

    var ArrayInterpolator = (function (_super) {
        __extends(ArrayInterpolator, _super);
        function ArrayInterpolator(a0, a1) {
            var _this = _super.call(this) || this;
            if (!a0 && !a1) {
                a1 = a0 = [];
            }
            else if (!a1) {
                a1 = a0;
            }
            else if (!a0) {
                a0 = a1;
            }
            _this.interpolators = [];
            var n = Math.min(a0.length, a1.length);
            for (var i = 0; i < n; i += 1) {
                _this.interpolators.push(Interpolator.from(a0[i], a1[i]));
            }
            return _this;
        }
        ArrayInterpolator.prototype.interpolate = function (u) {
            var n = this.interpolators.length;
            var array = new Array(n);
            for (var i = 0; i < this.interpolators.length; i += 1) {
                array[i] = this.interpolators[i].interpolate(u);
            }
            return array;
        };
        ArrayInterpolator.prototype.deinterpolate = function (a) {
            return 0;
        };
        ArrayInterpolator.prototype.range = function (a0, a1) {
            if (a0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (a1 === void 0) {
                a0 = a0;
                return new ArrayInterpolator(a0[0], a0[1]);
            }
            else {
                return new ArrayInterpolator(a0, a1);
            }
        };
        ArrayInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ArrayInterpolator) {
                var n = this.interpolators.length;
                if (n === that.interpolators.length) {
                    for (var i = 0; i < n; i += 1) {
                        if (!this.interpolators[i].equals(that.interpolators[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        return ArrayInterpolator;
    }(Interpolator));
    Interpolator.Array = ArrayInterpolator;

    var InterpolatorInterpolator = (function (_super) {
        __extends(InterpolatorInterpolator, _super);
        function InterpolatorInterpolator(i0, i1) {
            var _this = _super.call(this) || this;
            if (!i0 && !i1) {
                throw new Error();
            }
            else if (!i1) {
                i1 = i0;
            }
            else if (!i0) {
                i0 = i1;
            }
            _this.i0 = i0;
            _this.i1 = i1;
            _this.i00 = _this.i1.range(_this.i0.interpolate(0), _this.i1.interpolate(0));
            _this.i11 = _this.i1.range(_this.i0.interpolate(1), _this.i1.interpolate(1));
            return _this;
        }
        InterpolatorInterpolator.prototype.interpolate = function (u) {
            if (u === 0) {
                return this.i0;
            }
            else if (u === 1) {
                return this.i1;
            }
            else {
                return this.i1.range(this.i00.interpolate(u), this.i11.interpolate(u));
            }
        };
        InterpolatorInterpolator.prototype.deinterpolate = function (i) {
            return 0;
        };
        InterpolatorInterpolator.prototype.range = function (i0, i1) {
            if (i0 === void 0) {
                return [this.i0, this.i1];
            }
            else if (i1 === void 0) {
                i0 = i0;
                return new InterpolatorInterpolator(Interpolator.fromAny(i0[0]), Interpolator.fromAny(i0[1]));
            }
            else {
                i0 = i0;
                return new InterpolatorInterpolator(Interpolator.fromAny(i0), Interpolator.fromAny(i1));
            }
        };
        InterpolatorInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InterpolatorInterpolator) {
                return this.i0.equals(that.i0) && this.i1.equals(that.i1);
            }
            return false;
        };
        return InterpolatorInterpolator;
    }(Interpolator));
    Interpolator.Interpolator = InterpolatorInterpolator;

    var InterpolatorMap = (function (_super) {
        __extends(InterpolatorMap, _super);
        function InterpolatorMap(interpolator, transform) {
            var _this = _super.call(this) || this;
            _this._interpolator = interpolator;
            _this._transform = transform;
            return _this;
        }
        InterpolatorMap.prototype.interpolate = function (u) {
            return this._transform(this._interpolator.interpolate(u));
        };
        InterpolatorMap.prototype.deinterpolate = function (y) {
            return 0;
        };
        InterpolatorMap.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                var range = this._interpolator.range();
                return [this._transform(range[0]), this._transform(range[1])];
            }
            else {
                return this;
            }
        };
        InterpolatorMap.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InterpolatorMap) {
                return this._interpolator.equals(that._interpolator)
                    && this._transform === that._transform;
            }
            return false;
        };
        return InterpolatorMap;
    }(Interpolator));
    Interpolator.Map = InterpolatorMap;

    var InterpolatorForm = (function (_super) {
        __extends(InterpolatorForm, _super);
        function InterpolatorForm(valueForm, unit) {
            var _this = _super.call(this) || this;
            _this._valueForm = valueForm;
            _this._unit = unit;
            return _this;
        }
        InterpolatorForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new InterpolatorForm(this._valueForm, unit);
            }
        };
        InterpolatorForm.prototype.mold = function (interpolator) {
            if (interpolator !== void 0) {
                interpolator = Interpolator.fromAny(interpolator);
                var a = this._valueForm.mold(interpolator.interpolate(0));
                var b = this._valueForm.mold(interpolator.interpolate(1));
                if (a.isDefined() && b.isDefined()) {
                    return Record.of(Attr.of("interpolate", Record.of(a, b)));
                }
            }
            return Item.extant();
        };
        InterpolatorForm.prototype.cast = function (item) {
            var value = item.toValue();
            var header = value.header("interpolate");
            if (header.length >= 2) {
                var a = this._valueForm.cast(header.getItem(0).toValue());
                var b = this._valueForm.cast(header.getItem(1).toValue());
                if (a !== void 0 && b !== void 0) {
                    return Interpolator.from(a, b);
                }
            }
            return void 0;
        };
        return InterpolatorForm;
    }(Form));
    Interpolator.Form = InterpolatorForm;

    var Scale = (function () {
        function Scale() {
        }
        Scale.linear = function (x0, x1, y0, y1) {
            if (Array.isArray(x0)) {
                if (!Array.isArray(x1)) {
                    x1 = x1;
                    return new Scale.Linear(x0[0], x0[1], Interpolator.fromAny(x1));
                }
                else {
                    x1 = x1;
                    return new Scale.Linear(x0[0], x0[1], Interpolator.from(x1[0], x1[1]));
                }
            }
            else {
                x0 = x0;
                x1 = x1;
                if (y1 === void 0) {
                    y0 = y0;
                    return new Scale.Linear(x0, x1, Interpolator.fromAny(y0));
                }
                else {
                    y0 = y0;
                    y1 = y1;
                    return new Scale.Linear(x0, x1, Interpolator.from(y0, y1));
                }
            }
        };
        Scale.time = function (t0, t1, y0, y1) {
            if (Array.isArray(t0)) {
                if (!Array.isArray(t1)) {
                    return new Scale.Time(t0[0], t0[1], Interpolator.fromAny(t1));
                }
                else {
                    t1 = t1;
                    return new Scale.Time(t0[0], t0[1], Interpolator.from(t1[0], t1[1]));
                }
            }
            else {
                t0 = t0;
                t1 = t1;
                if (y1 === void 0) {
                    y0 = y0;
                    return new Scale.Time(t0, t1, Interpolator.fromAny(y0));
                }
                else {
                    y0 = y0;
                    y1 = y1;
                    return new Scale.Time(t0, t1, Interpolator.from(y0, y1));
                }
            }
        };
        Scale.from = function (x0, x1, y0, y1) {
            if (x0 === "time") {
                y1 = y0;
                y0 = x1;
                var now = DateTime.current();
                x1 = now;
                x0 = now.time(now.time() - 86400000);
            }
            else if (x0 === "linear") {
                y1 = y0;
                y0 = x1;
                x1 = 1;
                x0 = 0;
            }
            if (x0 instanceof DateTime || x0 instanceof Date || x1 instanceof DateTime || x1 instanceof Date) {
                if (y1 === void 0) {
                    y0 = y0;
                    return new Scale.Time(x0, x1, Interpolator.fromAny(y0));
                }
                else {
                    return new Scale.Time(x0, x1, Interpolator.from(y0, y1));
                }
            }
            else if (typeof x0 === "number" && typeof x1 === "number") {
                if (y1 === void 0) {
                    y0 = y0;
                    return new Scale.Linear(x0, x1, Interpolator.fromAny(y0));
                }
                else {
                    return new Scale.Linear(x0, x1, Interpolator.from(y0, y1));
                }
            }
            throw new TypeError("" + arguments);
        };
        Scale.form = function (domainForm, interpolatorForm, unit) {
            if (domainForm === void 0) {
                domainForm = Scale.domainForm();
            }
            if (interpolatorForm === void 0) {
                interpolatorForm = Scale.interpolatorForm();
            }
            if (domainForm !== Scale.domainForm() || interpolatorForm !== Scale.interpolatorForm() || unit !== void 0) {
                return new Scale.Form(domainForm, interpolatorForm, unit);
            }
            else {
                if (!Scale._form) {
                    Scale._form = new Scale.Form(domainForm, interpolatorForm);
                }
                return Scale._form;
            }
        };
        Scale.domainForm = function () {
            throw new Error();
        };
        Scale.interpolatorForm = function () {
            throw new Error();
        };
        return Scale;
    }());

    var ContinuousScale = (function (_super) {
        __extends(ContinuousScale, _super);
        function ContinuousScale() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContinuousScale;
    }(Scale));
    Scale.Continuous = ContinuousScale;

    var LinearScale = (function (_super) {
        __extends(LinearScale, _super);
        function LinearScale(x0, x1, fx) {
            var _this = _super.call(this) || this;
            _this.x0 = x0;
            _this.dx = x1 - _this.x0;
            _this.fx = fx;
            return _this;
        }
        LinearScale.prototype.norm = function (x) {
            return this.dx ? (x - this.x0) / this.dx : this.dx;
        };
        LinearScale.prototype.scale = function (x) {
            var u = this.norm(x);
            return this.fx.interpolate(u);
        };
        LinearScale.prototype.unscale = function (y) {
            var u = this.fx.deinterpolate(y);
            return this.x0 + this.dx * u;
        };
        LinearScale.prototype.clampScale = function (x) {
            var u = Math.min(Math.max(0, this.norm(x)), 1);
            return this.fx.interpolate(u);
        };
        LinearScale.prototype.domain = function (x0, x1) {
            if (x0 === void 0) {
                return [this.x0, this.x0 + this.dx];
            }
            else {
                if (x1 === void 0) {
                    x1 = x0[1];
                    x0 = x0[0];
                }
                var dx = x1 - x0;
                if (x0 === this.x0 && dx === this.dx) {
                    return this;
                }
                else {
                    return new LinearScale(x0, x1, this.fx);
                }
            }
        };
        LinearScale.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                return this.fx.range();
            }
            else if (y1 === void 0) {
                y0 = y0;
                return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0));
            }
            else {
                y0 = y0;
                return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0, y1));
            }
        };
        LinearScale.prototype.interpolator = function (fx) {
            if (fx === void 0) {
                return this.fx;
            }
            else {
                fx = Interpolator.fromAny(fx);
                return new LinearScale(this.x0, this.x0 + this.dx, fx);
            }
        };
        LinearScale.prototype.clampDomain = function (xMin, xMax, zMin, zMax, epsilon) {
            var x0 = this.x0;
            var x1 = this.x0 + this.dx;
            if (xMin !== void 0) {
                if (x0 < x1 && x0 < xMin) {
                    x0 = xMin;
                }
                else if (x1 < x0 && x1 < xMin) {
                    x1 = xMin;
                }
            }
            if (xMax !== void 0) {
                if (x0 < x1 && x1 > xMax) {
                    x1 = xMax;
                }
                else if (x1 < x0 && x0 > xMax) {
                    x1 = xMax;
                }
            }
            var y0 = +this.scale(x0);
            var y1 = +this.scale(x1);
            var dy = y1 - y0;
            var z = Math.abs(dy / (x1 - x0));
            if (zMin !== void 0 && z < 1 / zMin) {
                var dx_1 = dy * zMin;
                var xSum = x0 + x1;
                x0 = (xSum - dx_1) / 2;
                x1 = (xSum + dx_1) / 2;
            }
            else if (zMax !== void 0 && z > 1 / zMax) {
                var dx_2 = dy * zMax;
                var xSum = x0 + x1;
                x0 = (xSum - dx_2) / 2;
                x1 = (xSum + dx_2) / 2;
            }
            var dx = x1 - x0;
            if (epsilon === void 0) {
                epsilon = 1e-12;
            }
            if (Math.abs(x0 - this.x0) < epsilon && Math.abs(dx - this.dx) < epsilon) {
                return this;
            }
            else {
                return new LinearScale(x0, x1, this.fx);
            }
        };
        LinearScale.prototype.solveDomain = function (x1, y1, x2, y2, epsilon) {
            var range = this.fx.range();
            var y0 = +range[0];
            var y3 = +range[1];
            var m;
            if (x2 === void 0 || y2 === void 0 || x1 === x2 || y1 === y2) {
                m = (y3 - y0) / (this.dx || 1);
            }
            else {
                m = (+y2 - +y1) / (x2 - x1);
            }
            var b = +y1 - m * x1;
            var x0 = (y0 - b) / m;
            var x3 = (y3 - b) / m;
            var dx = x3 - x0;
            if (epsilon === void 0) {
                epsilon = 1e-12;
            }
            if (Math.abs(x0 - this.x0) < epsilon && Math.abs(dx - this.dx) < epsilon) {
                return this;
            }
            else {
                return new LinearScale(x0, x3, this.fx);
            }
        };
        LinearScale.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LinearScale) {
                return this.x0 === that.x0 && this.dx === that.dx && this.fx.equals(that.fx);
            }
            return false;
        };
        return LinearScale;
    }(ContinuousScale));
    Scale.Linear = LinearScale;

    var TimeScale = (function (_super) {
        __extends(TimeScale, _super);
        function TimeScale(d0, d1, ft, zone) {
            var _this = _super.call(this) || this;
            d0 = DateTime.fromAny(d0);
            d1 = DateTime.fromAny(d1);
            _this.t0 = d0.time();
            _this.dt = d1.time() - _this.t0;
            _this.zone = zone || d0.zone();
            _this.ft = ft;
            return _this;
        }
        TimeScale.prototype.norm = function (d) {
            d = DateTime.time(d);
            return this.dt ? (d - this.t0) / this.dt : this.dt;
        };
        TimeScale.prototype.scale = function (d) {
            var u = this.norm(d);
            return this.ft.interpolate(u);
        };
        TimeScale.prototype.unscale = function (y) {
            var u = this.ft.deinterpolate(y);
            return new DateTime(this.t0 + this.dt * u);
        };
        TimeScale.prototype.clampScale = function (d) {
            var u = Math.min(Math.max(0, this.norm(d)), 1);
            return this.ft.interpolate(u);
        };
        TimeScale.prototype.domain = function (t0, t1) {
            if (t0 === void 0) {
                return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
            }
            else {
                if (t1 === void 0) {
                    t1 = t0[1];
                    t0 = t0[0];
                }
                t0 = DateTime.time(t0);
                t1 = DateTime.time(t1);
                var dt = t1 - t0;
                if (t0 === this.t0 && dt === this.dt) {
                    return this;
                }
                else {
                    return new TimeScale(t0, t1, this.ft, this.zone);
                }
            }
        };
        TimeScale.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                return this.ft.range();
            }
            else if (y1 === void 0) {
                y0 = y0;
                return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0), this.zone);
            }
            else {
                y0 = y0;
                return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0, y1), this.zone);
            }
        };
        TimeScale.prototype.interpolator = function (ft) {
            if (ft === void 0) {
                return this.ft;
            }
            else {
                ft = Interpolator.fromAny(ft);
                return new TimeScale(this.t0, this.t0 + this.dt, ft, this.zone);
            }
        };
        TimeScale.prototype.clampDomain = function (tMin, tMax, zMin, zMax, epsilon) {
            var t0 = this.t0;
            var t1 = this.t0 + this.dt;
            if (tMin !== void 0) {
                tMin = DateTime.time(tMin);
                if (t0 < t1 && t0 < tMin) {
                    t0 = tMin;
                }
                else if (t1 < t0 && t1 < tMin) {
                    t1 = tMin;
                }
            }
            if (tMax !== void 0) {
                tMax = DateTime.time(tMax);
                if (t0 < t1 && t1 > tMax) {
                    t1 = tMax;
                }
                else if (t1 < t0 && t0 > tMax) {
                    t1 = tMax;
                }
            }
            var y0 = +this.scale(t0);
            var y1 = +this.scale(t1);
            var dy = y1 - y0;
            var z = Math.abs(dy / (t1 - t0));
            if (zMin !== void 0 && z < 1 / zMin) {
                var dt_1 = dy * zMin;
                var tSum = t0 + t1;
                t0 = (tSum - dt_1) / 2;
                t1 = (tSum + dt_1) / 2;
            }
            else if (zMax !== void 0 && z > 1 / zMax) {
                var dt_2 = dy * zMax;
                var tSum = t0 + t1;
                t0 = (tSum - dt_2) / 2;
                t1 = (tSum + dt_2) / 2;
            }
            var dt = t1 - t0;
            if (epsilon === void 0) {
                epsilon = 1e-12;
            }
            if (Math.abs(t0 - this.t0) < epsilon && Math.abs(dt - this.dt) < epsilon) {
                return this;
            }
            else {
                return new TimeScale(t0, t1, this.ft, this.zone);
            }
        };
        TimeScale.prototype.solveDomain = function (t1, y1, t2, y2, epsilon) {
            t1 = DateTime.time(t1);
            t2 = t2 !== void 0 ? DateTime.time(t2) : t2;
            var range = this.ft.range();
            var y0 = +range[0];
            var y3 = +range[1];
            var m;
            if (t2 === void 0 || y2 === void 0 || t1 === t2 || y1 === y2) {
                m = (y3 - y0) / (this.dt || 1);
            }
            else {
                m = (+y2 - +y1) / (t2 - t1);
            }
            var b = +y1 - m * t1;
            var t0 = (y0 - b) / m;
            var t3 = (y3 - b) / m;
            var dt = t3 - t0;
            if (epsilon === void 0) {
                epsilon = 1e-12;
            }
            if (Math.abs(t0 - this.t0) < epsilon && Math.abs(dt - this.dt) < epsilon) {
                return this;
            }
            else {
                return new TimeScale(t0, t3, this.ft, this.zone);
            }
        };
        TimeScale.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TimeScale) {
                return this.t0 === that.t0 && this.dt === that.dt && this.ft.equals(that.ft);
            }
            return false;
        };
        return TimeScale;
    }(ContinuousScale));
    Scale.Time = TimeScale;

    var ScaleForm = (function (_super) {
        __extends(ScaleForm, _super);
        function ScaleForm(domainForm, interpolatorForm, unit) {
            var _this = _super.call(this) || this;
            _this._domainForm = domainForm;
            _this._interpolatorForm = interpolatorForm;
            _this._unit = unit;
            return _this;
        }
        ScaleForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ScaleForm(this._domainForm, this._interpolatorForm, unit);
            }
        };
        ScaleForm.prototype.mold = function (scale) {
            if (scale instanceof ContinuousScale) {
                var domain = scale.domain();
                var x0 = this._domainForm.mold(domain[0]);
                var x1 = this._domainForm.mold(domain[1]);
                var header = Record.of(x0, x1);
                var record = Record.of(Attr.of("scale", header));
                var f = this._interpolatorForm.mold(scale.interpolator());
                if (f.isDefined()) {
                    record = record.concat(f);
                }
                return record;
            }
            else {
                return Item.extant();
            }
        };
        ScaleForm.prototype.cast = function (item) {
            var value = item.toValue();
            var header = value.header("scale");
            if (header.length >= 2) {
                var x0_1;
                var x1_1;
                header.forEach(function (item, index) {
                    if (item instanceof Value) {
                        if (index === 0) {
                            x0_1 = item.cast(this._domainForm, x0_1);
                        }
                        else if (index === 1) {
                            x1_1 = item.cast(this._domainForm, x1_1);
                        }
                    }
                }, this);
                var fx = this._interpolatorForm.cast(value.body());
                if (x0_1 !== void 0 && x1_1 !== void 0 && fx) {
                    return Scale.from(x0_1, x1_1, fx);
                }
            }
            return void 0;
        };
        return ScaleForm;
    }(Form));
    Scale.Form = ScaleForm;

    var ScaleInterpolator = (function (_super) {
        __extends(ScaleInterpolator, _super);
        function ScaleInterpolator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScaleInterpolator.prototype.range = function (s0, s1) {
            if (s0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (s1 === void 0) {
                s0 = s0;
                return Interpolator.scale(s0[0], s0[1]);
            }
            else {
                s0 = s0;
                return Interpolator.scale(s0, s1);
            }
        };
        ScaleInterpolator.scale = function (s0, s1) {
            if (!s0 && !s1) {
                throw new Error();
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            if (s0 instanceof LinearScale && s1 instanceof LinearScale) {
                return new ScaleInterpolator.Linear(s0, s1);
            }
            else if (s0 instanceof TimeScale && s1 instanceof TimeScale) {
                return new ScaleInterpolator.Time(s0, s1);
            }
            else {
                throw new TypeError(s0 + ", " + s1);
            }
        };
        return ScaleInterpolator;
    }(Interpolator));
    Interpolator.scale = ScaleInterpolator.scale;
    var InterpolatorFrom = Interpolator.from;
    Interpolator.from = function (a, b) {
        if (a instanceof ContinuousScale || b instanceof ContinuousScale) {
            return Interpolator.scale(a, b);
        }
        else {
            return InterpolatorFrom(a, b);
        }
    };

    var LinearScaleInterpolator = (function (_super) {
        __extends(LinearScaleInterpolator, _super);
        function LinearScaleInterpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (!s0 && !s1) {
                throw new Error();
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.x0 = new NumberInterpolator(s0.x0, s1.x0);
            _this.dx = new NumberInterpolator(s0.dx, s1.dx);
            _this.fx = new InterpolatorInterpolator(s0.fx, s1.fx);
            return _this;
        }
        LinearScaleInterpolator.prototype.interpolate = function (u) {
            var x0 = this.x0.interpolate(u);
            var dx = this.dx.interpolate(u);
            var fx = this.fx.interpolate(u);
            return new LinearScale(x0, x0 + dx, fx);
        };
        LinearScaleInterpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        LinearScaleInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LinearScaleInterpolator) {
                return this.x0.equals(that.x0) && this.dx.equals(that.dx) && this.fx.equals(that.fx);
            }
            return false;
        };
        return LinearScaleInterpolator;
    }(ScaleInterpolator));
    ScaleInterpolator.Linear = LinearScaleInterpolator;

    var TimeScaleInterpolator = (function (_super) {
        __extends(TimeScaleInterpolator, _super);
        function TimeScaleInterpolator(s0, s1) {
            var _this = _super.call(this) || this;
            if (!s0 && !s1) {
                throw new Error();
            }
            else if (!s1) {
                s1 = s0;
            }
            else if (!s0) {
                s0 = s1;
            }
            _this.t0 = new NumberInterpolator(s0.t0, s1.t0);
            _this.dt = new NumberInterpolator(s0.dt, s1.dt);
            _this.ft = new InterpolatorInterpolator(s0.ft, s1.ft);
            return _this;
        }
        TimeScaleInterpolator.prototype.interpolate = function (u) {
            var t0 = this.t0.interpolate(u);
            var dt = this.dt.interpolate(u);
            var ft = this.ft.interpolate(u);
            return new TimeScale(t0, t0 + dt, ft);
        };
        TimeScaleInterpolator.prototype.deinterpolate = function (s) {
            return 0;
        };
        TimeScaleInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TimeScaleInterpolator) {
                return this.t0.equals(that.t0) && this.dt.equals(that.dt) && this.ft.equals(that.ft);
            }
            return false;
        };
        return TimeScaleInterpolator;
    }(ScaleInterpolator));
    ScaleInterpolator.Time = TimeScaleInterpolator;

    function linear(t) {
        return t;
    }
    linear.type = "linear";
    function quadIn(t) {
        return t * t;
    }
    quadIn.type = "quad-in";
    function quadOut(t) {
        return t * (2 - t);
    }
    quadOut.type = "quad-out";
    function quadInOut(t) {
        t *= 2;
        if (t <= 1) {
            t = t * t;
        }
        else {
            t -= 1;
            t = t * (2 - t);
            t += 1;
        }
        t /= 2;
        return t;
    }
    quadInOut.type = "quad-in-out";
    function cubicIn(t) {
        return t * t * t;
    }
    cubicIn.type = "cubic-in";
    function cubicOut(t) {
        t -= 1;
        t = t * t * t;
        t += 1;
        return t;
    }
    cubicOut.type = "cubic-out";
    function cubicInOut(t) {
        t *= 2;
        if (t <= 1) {
            t = t * t * t;
        }
        else {
            t -= 2;
            t = t * t * t;
            t += 2;
        }
        t /= 2;
        return t;
    }
    cubicInOut.type = "cubic-in-out";
    function quartIn(t) {
        return t * t * t * t;
    }
    quartIn.type = "quart-in";
    function quartOut(t) {
        t -= 1;
        return 1 - t * t * t * t;
    }
    quartOut.type = "quart-out";
    function quartInOut(t) {
        var t1 = t - 1;
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1;
    }
    quartInOut.type = "quart-in-out";
    function expoIn(t) {
        if (t === 0) {
            return 0;
        }
        return Math.pow(2, 10 * (t - 1));
    }
    expoIn.type = "expo-in";
    function expoOut(t) {
        if (t === 1) {
            return 1;
        }
        return (-Math.pow(2, -10 * t) + 1);
    }
    expoOut.type = "expo-out";
    function expoInOut(t) {
        if (t === 1 || t === 0) {
            return t;
        }
        t *= 2;
        if (t < 1) {
            return 0.5 * Math.pow(2, 10 * (t - 1));
        }
        return 0.5 * (-Math.pow(2, -10 * (t - 1)) + 2);
    }
    expoInOut.type = "expo-in-out";
    function circIn(t) {
        return -1 * (Math.sqrt(1 - (t / 1) * t) - 1);
    }
    circIn.type = "circ-in";
    function circOut(t) {
        t -= 1;
        return Math.sqrt(1 - t * t);
    }
    circOut.type = "circ-out";
    function circInOut(t) {
        t *= 2;
        if (t < 1) {
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
        }
        var st = t - 2;
        return 0.5 * (Math.sqrt(1 - st * st) + 1);
    }
    circInOut.type = "circ-in-out";
    function backIn(t) {
        var m = 1.70158;
        return t * t * ((m + 1) * t - m);
    }
    backIn.type = "back-in";
    function backOut(t) {
        var m = 1.70158;
        var st = (t / 1) - 1;
        return (st * st * ((m + 1) * m + m)) + 1;
    }
    backOut.type = "back-out";
    function backInOut(t) {
        var m = 1.70158;
        var s = m * 1.525;
        if ((t *= 2) < 1) {
            return 0.5 * t * t * (((s + 1) * t) - s);
        }
        var st = t - 2;
        return 0.5 * (st * st * ((s + 1) * st + s) + 2);
    }
    backInOut.type = "back-in-out";
    function elasticIn(t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var st = (t / 1) - 1;
        var s = (1 - m) / 2 * Math.PI * Math.asin(1);
        return -(Math.pow(2, 10 * st) * Math.sin((st - s) * 2 * Math.PI / (1 - m)));
    }
    elasticIn.type = "elastic-in";
    function elasticOut(t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        t *= 2;
        return (Math.pow(2, -10 * t) * Math.sin((t - s) * 2 * Math.PI / (1 - m))) + 1;
    }
    elasticOut.type = "elastic-out";
    function elasticInOut(t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.65;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        var st = t * 2;
        var st1 = st - 1;
        if (st < 1) {
            return -0.5 * (Math.pow(2, 10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)));
        }
        return (Math.pow(2, -10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)) * 0.5) + 1;
    }
    elasticInOut.type = "elastic-in-out";
    function bounceIn(t) {
        var p = 7.5625;
        if ((t = 1 - t) < 1 / 2.75) {
            return 1 - (p * t * t);
        }
        else if (t < 2 / 2.75) {
            return 1 - (p * (t -= 1.5 / 2.75) * t + 0.75);
        }
        else if (t < 2.5 / 2.75) {
            return 1 - (p * (t -= 2.25 / 2.75) * t + 0.9375);
        }
        return 1 - (p * (t -= 2.625 / 2.75) * t + 0.984375);
    }
    bounceIn.type = "bounce-in";
    function bounceOut(t) {
        var p = 7.5625;
        if (t < 1 / 2.75) {
            return p * t * t;
        }
        else if (t < 2 / 2.75) {
            return p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            return p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        return p * (t -= 2.625 / 2.75) * t + 0.984375;
    }
    bounceOut.type = "bounce-out";
    function bounceInOut(t) {
        var invert = t < 0.5;
        t = invert ? 1 - (t * 2) : (t * 2) - 1;
        var p = 7.5625;
        if (t < 1 / 2.75) {
            t = p * t * t;
        }
        else if (t < 2 / 2.75) {
            t = p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            t = p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        else {
            t = p * (t -= 2.625 / 2.75) * t + 0.984375;
        }
        return invert ? (1 - t) * 0.5 : t * 0.5 + 0.5;
    }
    bounceInOut.type = "bounce-in-out";
    var Ease = {
        linear: linear,
        quadIn: quadIn,
        quadOut: quadOut,
        quadInOut: quadInOut,
        cubicIn: cubicIn,
        cubicOut: cubicOut,
        cubicInOut: cubicInOut,
        quartIn: quartIn,
        quartOut: quartOut,
        quartInOut: quartInOut,
        expoIn: expoIn,
        expoOut: expoOut,
        expoInOut: expoInOut,
        circIn: circIn,
        circOut: circOut,
        circInOut: circInOut,
        backIn: backIn,
        backOut: backOut,
        backInOut: backInOut,
        elasticIn: elasticIn,
        elasticOut: elasticOut,
        elasticInOut: elasticInOut,
        bounceIn: bounceIn,
        bounceOut: bounceOut,
        bounceInOut: bounceInOut,
        fromAny: function (value) {
            if (typeof value === "function") {
                return value;
            }
            else if (typeof value === "string") {
                switch (value) {
                    case "linear": return Ease.linear;
                    case "quad-in": return Ease.quadIn;
                    case "quad-out": return Ease.quadOut;
                    case "quad-in-out": return Ease.quadInOut;
                    case "cubic-in": return Ease.cubicIn;
                    case "cubic-out": return Ease.cubicOut;
                    case "cubic-in-out": return Ease.cubicInOut;
                    case "quart-in": return Ease.quartIn;
                    case "quart-out": return Ease.quartOut;
                    case "quart-in-out": return Ease.quartInOut;
                    case "expo-in": return Ease.expoIn;
                    case "expo-out": return Ease.expoOut;
                    case "expo-in-out": return Ease.expoInOut;
                    case "circ-in": return Ease.circIn;
                    case "circ-out": return Ease.circOut;
                    case "circ-in-out": return Ease.circInOut;
                    case "back-in": return Ease.backIn;
                    case "back-out": return Ease.backOut;
                    case "back-in-out": return Ease.backInOut;
                    case "elastic-in": return Ease.elasticIn;
                    case "elastic-out": return Ease.elasticOut;
                    case "elastic-in-out": return Ease.elasticInOut;
                    case "bounce-in": return Ease.bounceIn;
                    case "bounce-out": return Ease.bounceOut;
                    case "bounce-in-out": return Ease.bounceInOut;
                }
            }
            throw new Error(value);
        },
        _form: void 0,
        form: function (unit) {
            if (unit !== void 0) {
                unit = Ease.fromAny(unit);
            }
            if (unit !== Ease.linear) {
                return new Ease.Form(unit);
            }
            else {
                if (!Ease._form) {
                    Ease._form = new Ease.Form(Ease.linear);
                }
                return Ease._form;
            }
        },
        Form: void 0,
    };

    var EaseForm = (function (_super) {
        __extends(EaseForm, _super);
        function EaseForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        EaseForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new EaseForm(unit);
            }
        };
        EaseForm.prototype.mold = function (ease) {
            ease = Ease.fromAny(ease);
            if (typeof ease.type === "string") {
                return Text$1.from(ease.type);
            }
            else {
                return Item.extant();
            }
        };
        EaseForm.prototype.cast = function (item) {
            var string = item.toValue().stringValue(void 0);
            if (string !== void 0) {
                try {
                    return Ease.fromAny(string);
                }
                catch (e) {
                }
            }
            return void 0;
        };
        return EaseForm;
    }(Form));
    Ease.Form = EaseForm;

    var Transition = (function () {
        function Transition(duration, ease, interpolator, onStart, onEnd, onInterrupt) {
            this._duration = duration;
            this._ease = ease;
            this._interpolator = interpolator;
            this._onStart = onStart;
            this._onEnd = onEnd;
            this._onInterrupt = onInterrupt;
        }
        Transition.prototype.duration = function (duration) {
            if (duration === void 0) {
                return this._duration;
            }
            else {
                return new Transition(duration, this._ease, this._interpolator, this._onStart, this._onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.ease = function (ease) {
            if (ease === void 0) {
                return this._ease;
            }
            else {
                ease = ease !== null ? Ease.fromAny(ease) : null;
                return new Transition(this._duration, ease, this._interpolator, this._onStart, this._onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.interpolator = function (interpolator) {
            if (interpolator === void 0) {
                return this._interpolator;
            }
            else {
                interpolator = interpolator !== null ? Interpolator.fromAny(interpolator) : null;
                return new Transition(this._duration, this._ease, interpolator, this._onStart, this._onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.range = function (y0, y1) {
            if (y0 === void 0) {
                return this._interpolator ? this._interpolator.range() : null;
            }
            else {
                var interpolator = void 0;
                if (this._interpolator) {
                    interpolator = this._interpolator.range(y0, y1);
                }
                else {
                    interpolator = Interpolator.from(y0, y1);
                }
                return new Transition(this._duration, this._ease, interpolator, this._onStart, this._onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.onStart = function (onStart) {
            if (onStart === void 0) {
                return this._onStart;
            }
            else {
                return new Transition(this._duration, this._ease, this._interpolator, onStart, this._onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.onEnd = function (onEnd) {
            if (onEnd === void 0) {
                return this._onEnd;
            }
            else {
                return new Transition(this._duration, this._ease, this._interpolator, this._onStart, onEnd, this._onInterrupt);
            }
        };
        Transition.prototype.onInterrupt = function (onInterrupt) {
            if (onInterrupt === void 0) {
                return this._onInterrupt;
            }
            else {
                return new Transition(this._duration, this._ease, this._interpolator, this._onStart, this._onEnd, onInterrupt);
            }
        };
        Transition.prototype.toAny = function () {
            var init = {};
            if (this._duration !== null) {
                init.duration = this._duration;
            }
            if (this._ease !== null) {
                init.ease = this._ease;
            }
            if (this._interpolator !== null) {
                init.interpolator = this._interpolator;
            }
            if (this._onStart !== null) {
                init.onStart = this._onStart;
            }
            if (this._onEnd !== null) {
                init.onEnd = this._onEnd;
            }
            if (this._onInterrupt !== null) {
                init.onInterrupt = this._onInterrupt;
            }
            return init;
        };
        Transition.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Transition) {
                return this._duration === that._duration && this._ease === that._ease
                    && Objects.equal(this._interpolator, that._interpolator);
            }
            return false;
        };
        Transition.duration = function (duration, ease, interpolator) {
            if (ease === void 0) { ease = null; }
            if (interpolator === void 0) { interpolator = null; }
            ease = ease !== null ? Ease.fromAny(ease) : null;
            interpolator = interpolator !== null ? Interpolator.fromAny(interpolator) : null;
            return new Transition(duration, ease, interpolator, null, null, null);
        };
        Transition.ease = function (ease, interpolator) {
            if (interpolator === void 0) { interpolator = null; }
            ease = Ease.fromAny(ease);
            interpolator = interpolator !== null ? Interpolator.fromAny(interpolator) : null;
            return new Transition(null, ease, interpolator, null, null, null);
        };
        Transition.interpolator = function (interpolator) {
            interpolator = Interpolator.fromAny(interpolator);
            return new Transition(null, null, interpolator, null, null, null);
        };
        Transition.range = function (y0, y1) {
            var interpolator;
            if (y1 === void 0 && Array.isArray(y0)) {
                y0 = y0;
                interpolator = Interpolator.from(y0[0], y0[1]);
            }
            else {
                interpolator = Interpolator.from(y0, y1);
            }
            return new Transition(null, null, interpolator, null, null, null);
        };
        Transition.from = function (duration, ease, interpolator, onStart, onEnd, onInterrupt) {
            if (duration === void 0) { duration = null; }
            if (ease === void 0) { ease = null; }
            if (interpolator === void 0) { interpolator = null; }
            if (onStart === void 0) { onStart = null; }
            if (onEnd === void 0) { onEnd = null; }
            if (onInterrupt === void 0) { onInterrupt = null; }
            ease = ease !== null ? Ease.fromAny(ease) : null;
            interpolator = interpolator !== null ? Interpolator.fromAny(interpolator) : null;
            return new Transition(duration, ease, interpolator, onStart, onEnd, onInterrupt);
        };
        Transition.fromAny = function (tween, value, duration, ease) {
            if (duration === void 0) { duration = null; }
            if (ease === void 0) { ease = null; }
            if (tween instanceof Transition) {
                return tween;
            }
            else if (typeof tween === "object" && tween) {
                return Transition.from(tween.duration, tween.ease, tween.interpolator, tween.onStart, tween.onEnd, tween.onInterrupt);
            }
            else if (tween === true) {
                return Transition.from(duration, ease, Interpolator.from(value));
            }
            else {
                return void 0;
            }
        };
        Transition.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.duration !== void 0 || init.ease !== void 0 || init.interpolator !== void 0;
            }
            return false;
        };
        Transition.form = function (interpolatorForm, unit) {
            if (interpolatorForm === void 0) {
                interpolatorForm = Transition.interpolatorForm();
            }
            if (interpolatorForm !== Transition.interpolatorForm() || unit !== void 0) {
                unit = unit !== void 0 ? Transition.fromAny(unit) : unit;
                return new Transition.Form(interpolatorForm, unit);
            }
            else {
                if (!Transition._form) {
                    Transition._form = new Transition.Form(interpolatorForm);
                }
                return Transition._form;
            }
        };
        Transition.interpolatorForm = function () {
            throw new Error();
        };
        return Transition;
    }());

    var TransitionForm = (function (_super) {
        __extends(TransitionForm, _super);
        function TransitionForm(interpolatorForm, unit) {
            var _this = _super.call(this) || this;
            _this._interpolatorForm = interpolatorForm;
            _this._unit = unit;
            return _this;
        }
        TransitionForm.prototype.unit = function (unit) {
            if (unit === void 0) {
                return this._unit;
            }
            else {
                unit = Transition.fromAny(unit);
                return new TransitionForm(this._interpolatorForm, unit);
            }
        };
        TransitionForm.prototype.mold = function (transition) {
            if (transition !== void 0) {
                transition = Transition.fromAny(transition);
                var header = Record.create();
                if (transition._duration !== null) {
                    header.slot("duration", transition._duration);
                }
                if (transition._ease !== null) {
                    header.slot("ease", Ease.form().mold(transition._ease));
                }
                var record = Record.of(Attr.of("transition", header));
                if (transition._interpolator !== null) {
                    var interpolator = this._interpolatorForm.mold(transition._interpolator);
                    if (interpolator.isDefined()) {
                        record = record.concat(interpolator);
                    }
                }
                return record;
            }
            else {
                return Item.extant();
            }
        };
        TransitionForm.prototype.cast = function (item) {
            var value = item.toValue();
            var header = value.header("transition");
            if (header.length >= 2) {
                var duration_1 = null;
                var ease_1 = null;
                header.forEach(function (item, index) {
                    var key = item.key.stringValue(void 0);
                    if (key !== void 0) {
                        if (key === "duration") {
                            duration_1 = item.toValue().numberValue(duration_1);
                        }
                        else if (key === "ease") {
                            ease_1 = item.toValue().cast(Ease.form(), ease_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0) {
                            duration_1 = item.numberValue(duration_1);
                        }
                        else if (index === 1) {
                            ease_1 = item.cast(Ease.form(), ease_1);
                        }
                    }
                }, this);
                var interpolator = this._interpolatorForm.cast(value.body());
                return Transition.from(duration_1, ease_1, interpolator);
            }
            return void 0;
        };
        return TransitionForm;
    }(Form));
    Transition.Form = TransitionForm;

    var Animator = (function () {
        function Animator() {
        }
        return Animator;
    }());

    var FrameAnimator = (function (_super) {
        __extends(FrameAnimator, _super);
        function FrameAnimator() {
            var _this = _super.call(this) || this;
            _this._animationFrame = 0;
            _this._disabled = false;
            _this._dirty = false;
            return _this;
        }
        Object.defineProperty(FrameAnimator.prototype, "enabled", {
            get: function () {
                return !this._disabled;
            },
            enumerable: true,
            configurable: true
        });
        FrameAnimator.prototype.setEnabled = function (enabled) {
            if (enabled && this._disabled) {
                this._disabled = false;
                this.didSetEnabled(false);
            }
            else if (!enabled && !this._disabled) {
                this._disabled = true;
                this.didSetEnabled(true);
            }
        };
        FrameAnimator.prototype.didSetEnabled = function (enabled) {
            if (enabled) {
                this.animate();
            }
            else {
                this.cancel();
            }
        };
        Object.defineProperty(FrameAnimator.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        FrameAnimator.prototype.setDirty = function (dirty) {
            if (dirty && !this._dirty) {
                this._dirty = true;
                this.didSetDirty(true);
            }
            else if (!dirty && this._dirty) {
                this._dirty = false;
                this.didSetDirty(false);
            }
        };
        FrameAnimator.prototype.didSetDirty = function (dirty) {
        };
        FrameAnimator.prototype.animate = function () {
            if (!this._animationFrame && !this._disabled) {
                if (!this.hasOwnProperty("onAnimationFrame")) {
                    this.onAnimationFrame = this.onAnimationFrame.bind(this);
                }
                this._animationFrame = requestAnimationFrame(this.onAnimationFrame);
            }
        };
        FrameAnimator.prototype.cancel = function () {
            if (this._animationFrame) {
                cancelAnimationFrame(this._animationFrame);
                this._animationFrame = 0;
            }
        };
        FrameAnimator.prototype.onAnimationFrame = function (timestamp) {
            this._animationFrame = 0;
            this.onFrame(timestamp);
        };
        return FrameAnimator;
    }(Animator));

    var ChildAnimator = (function (_super) {
        __extends(ChildAnimator, _super);
        function ChildAnimator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChildAnimator.prototype, "dirty", {
            get: function () {
                var parent = this.parent;
                return parent ? parent.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        ChildAnimator.prototype.setDirty = function (dirty) {
            if (dirty) {
                var parent_1 = this.parent;
                if (parent_1) {
                    parent_1.setDirty(dirty);
                }
            }
        };
        ChildAnimator.prototype.animate = function () {
            var parent = this.parent;
            if (parent) {
                parent.animate();
            }
        };
        return ChildAnimator;
    }(Animator));

    (function (TweenState) {
        TweenState[TweenState["Quiesced"] = 0] = "Quiesced";
        TweenState[TweenState["Diverged"] = 1] = "Diverged";
        TweenState[TweenState["Tracking"] = 2] = "Tracking";
        TweenState[TweenState["Converged"] = 3] = "Converged";
        TweenState[TweenState["Interrupt"] = 4] = "Interrupt";
    })(exports.TweenState || (exports.TweenState = {}));
    var TweenAnimator = (function (_super) {
        __extends(TweenAnimator, _super);
        function TweenAnimator(value, transition) {
            var _this = _super.call(this) || this;
            if (transition) {
                _this._duration = transition._duration !== null ? transition._duration : 0;
                _this._ease = transition._ease !== null ? transition._ease : Ease.linear;
                _this._interpolator = transition._interpolator;
                _this._onStart = transition._onStart;
                _this._onEnd = transition._onEnd;
                _this._onInterrupt = transition._onInterrupt;
            }
            else {
                _this._duration = 0;
                _this._ease = Ease.linear;
                _this._interpolator = null;
                _this._onStart = null;
                _this._onEnd = null;
                _this._onInterrupt = null;
            }
            _this._interrupt = null;
            _this._value = value;
            _this._state = value;
            _this._startTime = 0;
            _this._tweenState = 0;
            _this._disabled = false;
            _this._dirty = false;
            _this._input = null;
            _this._outputs = null;
            _this._version = -1;
            return _this;
        }
        Object.defineProperty(TweenAnimator.prototype, "enabled", {
            get: function () {
                return !this._disabled;
            },
            enumerable: true,
            configurable: true
        });
        TweenAnimator.prototype.setEnabled = function (enabled) {
            if (enabled && this._disabled) {
                this._disabled = false;
                this.didSetEnabled(false);
            }
            else if (!enabled && !this._disabled) {
                this._disabled = true;
                this.didSetEnabled(true);
            }
        };
        TweenAnimator.prototype.didSetEnabled = function (enabled) {
            if (enabled) {
                this.animate();
            }
            else {
                this.cancel();
            }
        };
        Object.defineProperty(TweenAnimator.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        TweenAnimator.prototype.setDirty = function (dirty) {
            if (dirty && !this._dirty) {
                this._dirty = true;
                this.didSetDirty(true);
            }
            else if (!dirty && this._dirty) {
                this._dirty = false;
                this.didSetDirty(false);
            }
        };
        TweenAnimator.prototype.didSetDirty = function (dirty) {
        };
        TweenAnimator.prototype.duration = function (duration) {
            if (duration === void 0) {
                return this._duration;
            }
            else {
                this._duration = Math.max(0, duration);
                return this;
            }
        };
        TweenAnimator.prototype.ease = function (ease) {
            if (ease === void 0) {
                return this._ease;
            }
            else {
                this._ease = Ease.fromAny(ease);
                return this;
            }
        };
        TweenAnimator.prototype.interpolator = function (a, b) {
            if (a === void 0) {
                return this._interpolator;
            }
            else {
                if (arguments.length === 1) {
                    this._interpolator = a;
                }
                else {
                    if (this._interpolator !== null && a !== null && a !== void 0) {
                        this._interpolator = this._interpolator.range(a, b);
                    }
                    else {
                        this._interpolator = Interpolator.from(a, b);
                    }
                }
                return this;
            }
        };
        TweenAnimator.prototype.transition = function (transition) {
            if (transition === void 0) {
                return new Transition(this._duration, this._ease, this._interpolator, null, null, null);
            }
            else {
                transition = Transition.fromAny(transition);
                if (transition._duration !== null) {
                    this._duration = transition._duration;
                }
                if (transition._ease !== null) {
                    this._ease = transition._ease;
                }
                if (transition._interpolator !== null) {
                    this._interpolator = transition._interpolator;
                }
                this._onStart = transition._onStart;
                this._onEnd = transition._onEnd;
                this._onInterrupt = transition._onInterrupt;
                return this;
            }
        };
        Object.defineProperty(TweenAnimator.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TweenAnimator.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        TweenAnimator.prototype.setState = function (state, tween) {
            var interrupt = this._onInterrupt;
            this._onInterrupt = null;
            if (tween instanceof Transition || typeof tween === "object" && tween) {
                this.transition(tween);
            }
            else if (!tween) {
                this._duration = 0;
                this._onStart = null;
                this._onEnd = null;
                this._onInterrupt = null;
                this.cancel();
            }
            this._interrupt = interrupt;
            if (state !== null && state !== void 0) {
                if (this._tweenState === 0 && Objects.equal(this._state, state)) ;
                else {
                    this.interpolator(this.value, state);
                    this._state = state;
                    this._startTime = 0;
                    if (this._tweenState === 2) {
                        this._tweenState = 4;
                    }
                    else {
                        this._tweenState = 1;
                    }
                    if (tween) {
                        this.animate();
                    }
                    else {
                        this.onFrame(0);
                    }
                }
            }
            else {
                this._state = state;
                this._startTime = 0;
                if (this._tweenState === 2) {
                    this.onInterrupt(this._value);
                    var interruptCallback = this._interrupt;
                    if (interruptCallback) {
                        this._interrupt = null;
                        interruptCallback(this._value);
                    }
                }
                this._tweenState = 0;
                this._value = state;
                if (this._value === void 0) {
                    this._interpolator = null;
                    this.delete();
                }
            }
        };
        TweenAnimator.prototype.onFrame = function (t) {
            if (this._tweenState === 0 || this._disabled) {
                return;
            }
            if (this._tweenState === 4) {
                this.onInterrupt(this._value);
                var interruptCallback = this._interrupt;
                if (interruptCallback) {
                    this._interrupt = null;
                    interruptCallback(this._value);
                }
                this._tweenState = 1;
            }
            if (this._tweenState === 1) {
                if (!Objects.equal(this._value, this._state)) {
                    this._startTime = t;
                    this.onStart(this._value);
                    var startCallback = this._onStart;
                    if (startCallback) {
                        this._onStart = null;
                        startCallback(this._value);
                    }
                    this._tweenState = 2;
                }
                else {
                    this.tween(1);
                }
            }
            if (this._tweenState === 2) {
                var u = this._duration ? Math.min(Math.max(0, (t - this._startTime) / this._duration), 1) : 1;
                this.tween(u);
            }
            if (this._tweenState === 3) {
                this._onInterrupt = null;
                this._startTime = 0;
                this._tweenState = 0;
                this.onEnd(this._value);
                var endCallback = this._onEnd;
                if (endCallback) {
                    this._onEnd = null;
                    endCallback(this._value);
                }
            }
            else {
                this.animate();
            }
        };
        TweenAnimator.prototype.interpolate = function (u) {
            return this._interpolator ? this._interpolator.interpolate(u) : this._state;
        };
        TweenAnimator.prototype.tween = function (u) {
            u = this._ease(u);
            var oldValue = this._value;
            var newValue = this.interpolate(u);
            this._value = newValue;
            this.update(newValue, oldValue);
            if (u === 1) {
                this._tweenState = 3;
            }
        };
        TweenAnimator.prototype.onStart = function (value) {
        };
        TweenAnimator.prototype.onEnd = function (value) {
        };
        TweenAnimator.prototype.onInterrupt = function (value) {
        };
        TweenAnimator.prototype.get = function () {
            var state = this.state;
            if (state === null) {
                state = void 0;
            }
            return state;
        };
        TweenAnimator.prototype.input = function () {
            return this._input;
        };
        TweenAnimator.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        TweenAnimator.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        TweenAnimator.prototype.disconnectInputs = function () {
            if (this._outputs === null) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        TweenAnimator.prototype.outputIterator = function () {
            return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
        };
        TweenAnimator.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        TweenAnimator.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        TweenAnimator.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        TweenAnimator.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        TweenAnimator.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        TweenAnimator.prototype.invalidateInput = function () {
            this.invalidate();
        };
        TweenAnimator.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        TweenAnimator.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        TweenAnimator.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        TweenAnimator.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcile(version);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        TweenAnimator.prototype.willInvalidate = function () {
        };
        TweenAnimator.prototype.onInvalidate = function () {
        };
        TweenAnimator.prototype.didInvalidate = function () {
        };
        TweenAnimator.prototype.willReconcile = function (version) {
        };
        TweenAnimator.prototype.onReconcile = function (version) {
            if (this._input !== null) {
                var value = this._input.get();
                if (value !== void 0) {
                    this.setState(value, true);
                }
            }
        };
        TweenAnimator.prototype.didReconcile = function (version) {
        };
        TweenAnimator.prototype.memoize = function () {
            return this;
        };
        TweenAnimator.prototype.map = function (func) {
            var combinator = new MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        TweenAnimator.prototype.watch = function (func) {
            var combinator = new WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return TweenAnimator;
    }(Animator));

    var TweenFrameAnimator = (function (_super) {
        __extends(TweenFrameAnimator, _super);
        function TweenFrameAnimator(value, transition) {
            var _this = _super.call(this, value, transition) || this;
            _this._animationFrame = 0;
            return _this;
        }
        TweenFrameAnimator.prototype.animate = function () {
            if (!this._animationFrame && !this._disabled) {
                if (!this.hasOwnProperty("onAnimationFrame")) {
                    this.onAnimationFrame = this.onAnimationFrame.bind(this);
                }
                this._animationFrame = requestAnimationFrame(this.onAnimationFrame);
            }
        };
        TweenFrameAnimator.prototype.cancel = function () {
            if (this._animationFrame) {
                cancelAnimationFrame(this._animationFrame);
                this._animationFrame = 0;
            }
        };
        TweenFrameAnimator.prototype.onAnimationFrame = function (timestamp) {
            this._animationFrame = 0;
            this.onFrame(timestamp);
        };
        return TweenFrameAnimator;
    }(TweenAnimator));

    var TweenChildAnimator = (function (_super) {
        __extends(TweenChildAnimator, _super);
        function TweenChildAnimator(parent, value, transition) {
            if (transition === void 0) { transition = null; }
            var _this = _super.call(this, value, transition) || this;
            _this.parent = parent;
            return _this;
        }
        Object.defineProperty(TweenChildAnimator.prototype, "dirty", {
            get: function () {
                var parent = this.parent;
                return parent ? parent.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        TweenChildAnimator.prototype.setDirty = function (dirty) {
            if (dirty) {
                var parent_1 = this.parent;
                if (parent_1) {
                    parent_1.setDirty(dirty);
                }
            }
        };
        TweenChildAnimator.prototype.animate = function () {
            var parent = this.parent;
            if (parent && !this._disabled) {
                parent.animate();
            }
        };
        TweenChildAnimator.prototype.cancel = function () {
        };
        TweenChildAnimator.prototype.update = function (newValue, oldValue) {
            if (!Objects.equal(oldValue, newValue)) {
                this.setDirty(true);
            }
        };
        TweenChildAnimator.prototype.delete = function () {
        };
        return TweenChildAnimator;
    }(TweenAnimator));

    var PropertyAnimator = (function (_super) {
        __extends(PropertyAnimator, _super);
        function PropertyAnimator(target, key, value, transition) {
            if (transition === void 0) { transition = null; }
            var _this = _super.call(this, value, transition) || this;
            _this.target = target;
            _this.key = key;
            return _this;
        }
        PropertyAnimator.prototype.update = function (newValue, oldValue) {
            if (!Objects.equal(oldValue, newValue)) {
                this.willUpdate(newValue, oldValue);
                this.target[this.key] = newValue;
                this.didUpdate(newValue, oldValue);
            }
        };
        PropertyAnimator.prototype.willUpdate = function (newValue, oldValue) {
        };
        PropertyAnimator.prototype.didUpdate = function (newValue, oldValue) {
        };
        PropertyAnimator.prototype.delete = function () {
            delete this.target[this.key];
        };
        return PropertyAnimator;
    }(TweenFrameAnimator));

    var CustomEventConstructor = function (type, init) {
        if (init === void 0) { init = {}; }
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(type, init.bubbles || false, init.cancelable || false, init.detail);
        event.__proto__ = this.__proto__;
        return event;
    };
    if (typeof Event !== "undefined") {
        CustomEventConstructor.prototype = Event.prototype;
    }

    var ResizeObserverPolyfill = (function () {
        function ResizeObserverPolyfill(callback) {
            this.callback = callback;
            this.observationTargets = [];
            this.activeTargets = [];
            this.skippedTargets = [];
            DETECTOR.addObserver(this);
        }
        ResizeObserverPolyfill.prototype.observe = function (target) {
            for (var i = 0; i < this.observationTargets.length; i += 1) {
                if (target === this.observationTargets[i].target) {
                    return;
                }
            }
            var observation = new ResizeObservationPolyfill(target);
            this.observationTargets.push(observation);
            DETECTOR.redetect();
        };
        ResizeObserverPolyfill.prototype.unobserve = function (target) {
            for (var i = 0; i < this.observationTargets.length; i += 1) {
                if (target === this.observationTargets[i].target) {
                    this.observationTargets.splice(i, 1);
                }
            }
            if (!this.observationTargets.length) {
                DETECTOR.removeObserver(this);
            }
        };
        ResizeObserverPolyfill.prototype.gatherActive = function (depth) {
            this.clearActive();
            this.clearSkipped();
            for (var i = 0; i < this.observationTargets.length; i += 1) {
                var observation = this.observationTargets[i];
                if (observation.isActive()) {
                    var targetDepth = calculateDepth(observation.target);
                    if (targetDepth > depth) {
                        this.activeTargets.push(observation);
                    }
                    else {
                        this.skippedTargets.push(observation);
                    }
                }
            }
        };
        ResizeObserverPolyfill.prototype.broadcastActive = function (shallowestTargetDepth) {
            if (this.hasActive()) {
                var entries = [];
                for (var i = 0; i < this.activeTargets.length; i += 1) {
                    var observation = this.observationTargets[i];
                    var entry = new ResizeObserverEntryPolyfill(observation.target);
                    entries.push(entry);
                    observation.broadcastWidth = entry.contentRect.width;
                    observation.broadcastHeight = entry.contentRect.height;
                    var targetDepth = calculateDepth(observation.target);
                    if (targetDepth < shallowestTargetDepth) {
                        shallowestTargetDepth = targetDepth;
                    }
                }
                this.callback(entries, this);
                this.clearActive();
            }
            return shallowestTargetDepth;
        };
        ResizeObserverPolyfill.prototype.hasActive = function () {
            return this.activeTargets.length > 0;
        };
        ResizeObserverPolyfill.prototype.hasSkipped = function () {
            return this.skippedTargets.length > 0;
        };
        ResizeObserverPolyfill.prototype.clearActive = function () {
            this.activeTargets.length = 0;
        };
        ResizeObserverPolyfill.prototype.clearSkipped = function () {
            this.skippedTargets.length = 0;
        };
        ResizeObserverPolyfill.prototype.disconnect = function () {
            this.clearActive();
            this.observationTargets.length = 0;
            DETECTOR.removeObserver(this);
        };
        return ResizeObserverPolyfill;
    }());
    var ResizeObserver = (typeof window !== "undefined" && typeof window.ResizeObserver !== "undefined")
        ? window.ResizeObserver
        : ResizeObserverPolyfill;
    var ResizeObserverEntryPolyfill = (function () {
        function ResizeObserverEntryPolyfill(target, contentRect) {
            this.target = target;
            this.contentRect = contentRect || getContentRect(target);
        }
        return ResizeObserverEntryPolyfill;
    }());
    var ResizeObservationPolyfill = (function () {
        function ResizeObservationPolyfill(target) {
            this.target = target;
            this.broadcastWidth = 0;
            this.broadcastHeight = 0;
        }
        ResizeObservationPolyfill.prototype.isActive = function () {
            var contentRect = getContentRect(this.target);
            return !!contentRect && (Math.round(contentRect.width) !== Math.round(this.broadcastWidth) ||
                Math.round(contentRect.height) !== Math.round(this.broadcastHeight));
        };
        return ResizeObservationPolyfill;
    }());
    var ResizeDetector = (function () {
        function ResizeDetector() {
            this.resizeObservers = [];
            this.mutationObserver = void 0;
            this.detectAnimationFrame = 0;
            this.connected = false;
            this.onResize = this.onResize.bind(this);
            this.onTransitionEnd = this.onTransitionEnd.bind(this);
            this.onMutation = this.onMutation.bind(this);
            this.onSubtreeModified = void 0;
            this.onDetectAnimationFrame = this.onDetectAnimationFrame.bind(this);
        }
        ResizeDetector.prototype.addObserver = function (observer) {
            if (this.resizeObservers.indexOf(observer) < 0) {
                this.resizeObservers.push(observer);
            }
            this.connect();
        };
        ResizeDetector.prototype.removeObserver = function (observer) {
            var index = this.resizeObservers.indexOf(observer);
            if (index >= 0) {
                this.resizeObservers.splice(index, 1);
            }
            if (!this.resizeObservers.length) {
                this.disconnect();
            }
        };
        ResizeDetector.prototype.gatherActive = function (depth) {
            for (var i = 0; i < this.resizeObservers.length; i += 1) {
                this.resizeObservers[i].gatherActive(depth);
            }
        };
        ResizeDetector.prototype.hasActive = function () {
            for (var i = 0; i < this.resizeObservers.length; i += 1) {
                if (this.resizeObservers[i].hasActive()) {
                    return true;
                }
            }
            return false;
        };
        ResizeDetector.prototype.hasSkipped = function () {
            for (var i = 0; i < this.resizeObservers.length; i += 1) {
                if (this.resizeObservers[i].hasSkipped()) {
                    return true;
                }
            }
            return false;
        };
        ResizeDetector.prototype.broadcastActive = function () {
            var shallowestTargetDepth = Number.POSITIVE_INFINITY;
            for (var i = 0; i < this.resizeObservers.length; i += 1) {
                shallowestTargetDepth = this.resizeObservers[i].broadcastActive(shallowestTargetDepth);
            }
            return shallowestTargetDepth;
        };
        ResizeDetector.prototype.detect = function () {
            var depth = 0;
            this.gatherActive(depth);
            do {
                depth = this.broadcastActive();
                this.gatherActive(depth);
            } while (this.hasActive());
            if (this.hasSkipped()) {
                window.dispatchEvent(new ErrorEvent("ResizeObserver loop completed with undelivered notifications."));
            }
        };
        ResizeDetector.prototype.redetect = function () {
            if (!this.detectAnimationFrame) {
                this.detectAnimationFrame = requestAnimationFrame(this.onDetectAnimationFrame);
            }
        };
        ResizeDetector.prototype.onDetectAnimationFrame = function (timestamp) {
            this.detectAnimationFrame = 0;
            this.detect();
        };
        ResizeDetector.prototype.onResize = function (event) {
            this.redetect();
        };
        ResizeDetector.prototype.onTransitionEnd = function (event) {
            var reflow = false;
            for (var i = 0; i < REFLOW_KEYS.length; i += 1) {
                if (event.propertyName.indexOf(REFLOW_KEYS[i]) >= 0) {
                    reflow = true;
                    break;
                }
            }
            if (reflow) {
                this.redetect();
            }
        };
        ResizeDetector.prototype.onMutation = function (mutations) {
            for (var i = 0; i < mutations.length; i += 1) {
                var mutation = mutations[i];
                if (mutation.type === "childList") {
                    if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                        for (var j = 0; j < mutation.addedNodes.length; j += 1) {
                            this.addShadows(mutation.addedNodes[j]);
                        }
                    }
                }
            }
            this.redetect();
        };
        ResizeDetector.prototype.addShadows = function (node) {
            if (node instanceof Element) {
                for (var i = 0; i < node.childNodes.length; i += 1) {
                    this.addShadows(node.childNodes[i]);
                }
                if (node.shadowRoot) {
                    this.observe(node.shadowRoot);
                    this.addShadows(node.shadowRoot);
                }
            }
        };
        ResizeDetector.prototype.observe = function (target) {
            this.mutationObserver.observe(target, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true,
            });
        };
        ResizeDetector.prototype.connect = function () {
            if (this.connected) {
                return;
            }
            window.addEventListener("resize", this.onResize);
            document.addEventListener("transitionend", this.onTransitionEnd);
            var isIE11 = typeof navigator !== "undefined" && (/Trident\/.*rv:11/).test(navigator.userAgent);
            if (typeof MutationObserver !== "undefined" && !isIE11) {
                this.mutationObserver = new MutationObserver(this.onMutation);
                this.observe(document);
                this.addShadows(document);
            }
            else {
                this.onSubtreeModified = this.onResize;
                document.addEventListener("DOMSubtreeModified", this.onSubtreeModified);
            }
            this.connected = true;
        };
        ResizeDetector.prototype.disconnect = function () {
            if (!this.connected) {
                return;
            }
            window.removeEventListener("resize", this.onResize);
            document.removeEventListener("transitionend", this.onTransitionEnd);
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
                this.mutationObserver = void 0;
            }
            if (this.onSubtreeModified) {
                document.removeEventListener("DOMSubtreeModified", this.onSubtreeModified);
                this.onSubtreeModified = void 0;
            }
            if (this.detectAnimationFrame) {
                cancelAnimationFrame(this.detectAnimationFrame);
                this.detectAnimationFrame = 0;
            }
            this.connected = false;
        };
        return ResizeDetector;
    }());
    var REFLOW_KEYS = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    var DETECTOR = new ResizeDetector();
    function calculateDepth(node) {
        var k = 0;
        while (node.parentNode) {
            node = node.parentNode;
            k += 1;
        }
        return k;
    }
    function isSVGGraphicsElement(target) {
        return typeof SVGGraphicsElement !== "undefined" ?
            target instanceof SVGGraphicsElement :
            target instanceof SVGElement && typeof target.getBBox === "function";
    }
    function getContentRect(target) {
        if (target instanceof HTMLElement) {
            return getHTMLContentRect(target);
        }
        else if (isSVGGraphicsElement(target)) {
            return getSVGContentRect(target);
        }
        else {
            return createContentRect(0, 0, 0, 0);
        }
    }
    function getHTMLContentRect(target) {
        if (!target.clientWidth && !target.clientHeight) {
            return createContentRect(0, 0, 0, 0);
        }
        var style = getComputedStyle(target);
        var paddingLeft = toFloat(style.getPropertyValue("padding-left"));
        var paddingTop = toFloat(style.getPropertyValue("padding-top"));
        var xPadding = paddingLeft + toFloat(style.getPropertyValue("padding-right"));
        var yPadding = paddingTop + toFloat(style.getPropertyValue("padding-bottom"));
        var width = toFloat(style.getPropertyValue("width"));
        var height = toFloat(style.getPropertyValue("height"));
        if (style.getPropertyValue("box-sizing") === "border-box") {
            if (Math.round(width + xPadding) !== target.clientWidth) {
                width -= xPadding + toFloat(style.getPropertyValue("border-left-width")) +
                    toFloat(style.getPropertyValue("border-right-width"));
            }
            if (Math.round(height + yPadding) !== target.clientHeight) {
                height -= yPadding + toFloat(style.getPropertyValue("border-top-width")) +
                    toFloat(style.getPropertyValue("border-bottom-width"));
            }
        }
        if (target !== document.documentElement) {
            var yScrollbar = Math.round(width + xPadding) - target.clientWidth;
            var xScrollbar = Math.round(height + yPadding) - target.clientHeight;
            if (Math.abs(yScrollbar) !== 1) {
                width -= yScrollbar;
            }
            if (Math.abs(xScrollbar) !== 1) {
                height -= xScrollbar;
            }
        }
        return createContentRect(paddingLeft, paddingTop, width, height);
    }
    function getSVGContentRect(target) {
        var bbox = target.getBBox();
        return createContentRect(0, 0, bbox.width, bbox.height);
    }
    function toFloat(value) {
        return parseFloat(value) || 0;
    }
    function createContentRect(x, y, width, height) {
        return {
            x: x,
            y: y,
            width: width,
            height: height,
            top: y,
            right: x + width,
            bottom: y + height,
            left: x,
        };
    }

    var BoxShadow = (function () {
        function BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, next) {
            this.inset = inset;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            this.blurRadius = blurRadius;
            this.spreadRadius = spreadRadius;
            this.color = color;
            this.next = next;
        }
        BoxShadow.prototype.isDefined = function () {
            return this.inset || this.offsetX.isDefined() || this.offsetY.isDefined()
                || this.blurRadius.isDefined() || this.spreadRadius.isDefined()
                || this.color.isDefined() || (this.next ? this.next.isDefined() : false);
        };
        BoxShadow.prototype.and = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
            var next = this.next ? this.next.and.apply(this.next, arguments) : BoxShadow.of.apply(null, arguments);
            return new BoxShadow(this.inset, this.offsetX, this.offsetY, this.blurRadius, this.spreadRadius, this.color, next);
        };
        BoxShadow.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BoxShadow) {
                return this.inset === that.inset && this.offsetX.equals(that.offsetX)
                    && this.offsetY.equals(that.offsetY) && this.blurRadius.equals(that.blurRadius)
                    && this.spreadRadius.equals(that.spreadRadius) && this.color.equals(that.color)
                    && Objects.equal(this.next, that.next);
            }
            return false;
        };
        BoxShadow.prototype.toString = function () {
            if (this.isDefined()) {
                var s = "";
                var boxShadow = this;
                do {
                    if (boxShadow.inset) {
                        s += "inset";
                        s += " ";
                    }
                    s += boxShadow.offsetX.toString();
                    s += " ";
                    s += boxShadow.offsetY.toString();
                    s += " ";
                    s += boxShadow.blurRadius.toString();
                    s += " ";
                    s += boxShadow.spreadRadius.toString();
                    s += " ";
                    s += boxShadow.color.toString();
                    if (boxShadow.next) {
                        s += ", ";
                        boxShadow = boxShadow.next;
                        continue;
                    }
                    break;
                } while (true);
                return s;
            }
            else {
                return "none";
            }
        };
        BoxShadow.none = function () {
            if (!BoxShadow._none) {
                BoxShadow._none = new BoxShadow(false, Length.zero(), Length.zero(), Length.zero(), Length.zero(), Color.black(), null);
            }
            return BoxShadow._none;
        };
        BoxShadow.of = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
            if (arguments.length === 1) {
                return BoxShadow.fromAny(arguments[0]);
            }
            else if (typeof inset !== "boolean") {
                if (arguments.length === 3) {
                    color = Color.fromAny(arguments[2]);
                    spreadRadius = Length.zero();
                    blurRadius = Length.zero();
                    offsetY = Length.fromAny(arguments[1]);
                    offsetX = Length.fromAny(arguments[0]);
                }
                else if (arguments.length === 4) {
                    color = Color.fromAny(arguments[3]);
                    spreadRadius = Length.zero();
                    blurRadius = Length.fromAny(arguments[2]);
                    offsetY = Length.fromAny(arguments[1]);
                    offsetX = Length.fromAny(arguments[0]);
                }
                else if (arguments.length === 5) {
                    color = Color.fromAny(arguments[4]);
                    spreadRadius = Length.fromAny(arguments[3]);
                    blurRadius = Length.fromAny(arguments[2]);
                    offsetY = Length.fromAny(arguments[1]);
                    offsetX = Length.fromAny(arguments[0]);
                }
                else {
                    throw new TypeError("" + arguments);
                }
                inset = false;
            }
            else {
                if (arguments.length === 4) {
                    color = Color.fromAny(arguments[3]);
                    spreadRadius = Length.zero();
                    blurRadius = Length.zero();
                    offsetX = Length.fromAny(arguments[1]);
                    offsetY = Length.fromAny(arguments[2]);
                }
                else if (arguments.length === 5) {
                    color = Color.fromAny(arguments[4]);
                    spreadRadius = Length.zero();
                    blurRadius = Length.fromAny(arguments[3]);
                    offsetX = Length.fromAny(arguments[1]);
                    offsetY = Length.fromAny(arguments[2]);
                }
                else if (arguments.length === 6) {
                    color = Color.fromAny(arguments[5]);
                    spreadRadius = Length.fromAny(arguments[4]);
                    blurRadius = Length.fromAny(arguments[3]);
                    offsetY = Length.fromAny(arguments[2]);
                    offsetX = Length.fromAny(arguments[1]);
                }
                else {
                    throw new TypeError("" + arguments);
                }
            }
            return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
        };
        BoxShadow.fromAny = function () {
            var values = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                values[_i] = arguments[_i];
            }
            var value;
            if (arguments.length === 0) {
                value = BoxShadow.none();
            }
            else if (arguments.length === 1) {
                value = arguments[0];
            }
            else {
                value = arguments;
            }
            if (value instanceof BoxShadow) {
                return value;
            }
            else if (typeof value === "string") {
                return BoxShadow.parse(value);
            }
            else if (typeof value === "object" && value && value.length === void 0) {
                value = value;
                var inset = value.inset || false;
                var offsetX = value.offsetX !== void 0 ? Length.fromAny(value.offsetX) : Length.zero();
                var offsetY = value.offsetY !== void 0 ? Length.fromAny(value.offsetY) : Length.zero();
                var blurRadius = value.blurRadius !== void 0 ? Length.fromAny(value.blurRadius) : Length.zero();
                var spreadRadius = value.spreadRadius !== void 0 ? Length.fromAny(value.spreadRadius) : Length.zero();
                var color = value.color !== void 0 ? Color.fromAny(value.color) : Color.black();
                return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
            }
            else if (typeof value === "object" && value && value.length > 0) {
                value = value;
                var boxShadow = BoxShadow.fromAny(value[0]);
                for (var i = 1; i < value.length; i += 1) {
                    boxShadow = boxShadow.and(value[i]);
                }
                return boxShadow;
            }
            throw new TypeError("" + value);
        };
        BoxShadow.fromValue = function (value) {
            var boxShadow;
            value.forEach(function (item, index) {
                var header = item.header("boxShadow");
                if (header) {
                    var inset_1;
                    var offsetX_1;
                    var offsetY_1;
                    var blurRadius_1;
                    var spreadRadius_1;
                    var color_1;
                    header.forEach(function (item, index) {
                        var key = item.key.stringValue();
                        if (key !== void 0) {
                            if (key === "inset") {
                                inset_1 = item.toValue().booleanValue(inset_1);
                            }
                            else if (key === "offsetX") {
                                offsetX_1 = item.toValue().cast(Length.form(), offsetX_1);
                            }
                            else if (key === "offsetY") {
                                offsetY_1 = item.toValue().cast(Length.form(), offsetY_1);
                            }
                            else if (key === "blurRadius") {
                                blurRadius_1 = item.toValue().cast(Length.form(), blurRadius_1);
                            }
                            else if (key === "spreadRadius") {
                                spreadRadius_1 = item.toValue().cast(Length.form(), spreadRadius_1);
                            }
                            else if (key === "color") {
                                color_1 = item.toValue().cast(Color.form(), color_1);
                            }
                        }
                        else if (item instanceof Value) {
                            if (index === 0 && item instanceof Text$1 && item.value === "inset") {
                                inset_1 = true;
                            }
                            else if (index === 0 || index === 1 && inset_1 !== void 0) {
                                offsetX_1 = item.cast(Length.form(), offsetX_1);
                            }
                            else if (index === 1 || index === 2 && inset_1 !== void 0) {
                                offsetY_1 = item.cast(Length.form(), offsetY_1);
                            }
                            else if (index === 2 || index === 3 && inset_1 !== void 0) {
                                blurRadius_1 = item.cast(Length.form(), blurRadius_1);
                                if (blurRadius_1 === void 0) {
                                    color_1 = item.cast(Color.form(), color_1);
                                }
                            }
                            else if ((index === 3 || index === 4 && inset_1 === void 0) && color_1 === void 0) {
                                spreadRadius_1 = item.cast(Length.form(), spreadRadius_1);
                                if (spreadRadius_1 === void 0) {
                                    color_1 = item.cast(Color.form(), color_1);
                                }
                            }
                            else if ((index === 4 || index === 5 && inset_1 === void 0) && color_1 === void 0) {
                                color_1 = item.cast(Color.form(), color_1);
                            }
                        }
                    });
                    inset_1 = inset_1 !== void 0 ? inset_1 : false;
                    offsetX_1 = offsetX_1 !== void 0 ? offsetX_1 : Length.zero();
                    offsetY_1 = offsetY_1 !== void 0 ? offsetY_1 : Length.zero();
                    blurRadius_1 = blurRadius_1 !== void 0 ? blurRadius_1 : Length.zero();
                    spreadRadius_1 = spreadRadius_1 !== void 0 ? spreadRadius_1 : Length.zero();
                    color_1 = color_1 !== void 0 ? color_1 : Color.black();
                    var next = new BoxShadow(inset_1 || false, offsetX_1, offsetY_1, blurRadius_1, spreadRadius_1, color_1, null);
                    if (boxShadow) {
                        boxShadow = boxShadow.and(next);
                    }
                    else {
                        boxShadow = next;
                    }
                }
            });
            return boxShadow;
        };
        BoxShadow.parse = function (string) {
            var input = Unicode.stringInput(string);
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = BoxShadow.Parser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        BoxShadow.isInit = function (value) {
            if (value && typeof value === "object") {
                var init = value;
                return init.offsetX !== void 0 && init.offsetY !== void 0 && init.color !== void 0;
            }
            return false;
        };
        BoxShadow.form = function (unit) {
            if (unit !== void 0) {
                unit = BoxShadow.fromAny(unit);
            }
            if (unit !== BoxShadow.none()) {
                return new BoxShadow.Form(unit);
            }
            else {
                if (!BoxShadow._form) {
                    BoxShadow._form = new BoxShadow.Form(BoxShadow.none());
                }
                return BoxShadow._form;
            }
        };
        return BoxShadow;
    }());

    var BoxShadowParser = (function (_super) {
        __extends(BoxShadowParser, _super);
        function BoxShadowParser(boxShadow, identOutput, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
            var _this = _super.call(this) || this;
            _this.boxShadow = boxShadow;
            _this.identOutput = identOutput;
            _this.offsetXParser = offsetXParser;
            _this.offsetYParser = offsetYParser;
            _this.blurRadiusParser = blurRadiusParser;
            _this.spreadRadiusParser = spreadRadiusParser;
            _this.colorParser = colorParser;
            _this.step = step;
            return _this;
        }
        BoxShadowParser.prototype.feed = function (input) {
            return BoxShadowParser.parse(input, this.boxShadow, this.identOutput, this.offsetXParser, this.offsetYParser, this.blurRadiusParser, this.spreadRadiusParser, this.colorParser, this.step);
        };
        BoxShadowParser.parse = function (input, boxShadow, identOutput, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont()) {
                        if (Unicode.isAlpha(c)) {
                            step = 2;
                        }
                        else {
                            step = 4;
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 2) {
                    identOutput = identOutput || Unicode.stringOutput();
                    while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {
                        input = input.step();
                        identOutput.write(c);
                    }
                    if (!input.isEmpty()) {
                        var ident = identOutput.bind();
                        switch (ident) {
                            case "inset":
                                step = 3;
                                break;
                            case "none": return Parser.done(BoxShadow.none());
                            default: return Parser.error(Diagnostic.message("unknown box-shadow: " + ident, input));
                        }
                    }
                }
                if (step === 3) {
                    if (input.isCont()) {
                        if (Unicode.isSpace(input.head())) {
                            input.step();
                            step = 4;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("space", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 4) {
                    if (!offsetXParser) {
                        while (input.isCont() && Unicode.isSpace(input.head())) {
                            input.step();
                        }
                        if (!input.isEmpty()) {
                            offsetXParser = LengthParser.parse(input);
                        }
                    }
                    else {
                        offsetXParser = offsetXParser.feed(input);
                    }
                    if (offsetXParser) {
                        if (offsetXParser.isDone()) {
                            step = 5;
                        }
                        else if (offsetXParser.isError()) {
                            return offsetXParser.asError();
                        }
                    }
                }
                if (step === 5) {
                    if (input.isCont()) {
                        if (Unicode.isSpace(input.head())) {
                            input.step();
                            step = 6;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("space", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 6) {
                    if (!offsetYParser) {
                        while (input.isCont() && Unicode.isSpace(input.head())) {
                            input.step();
                        }
                        if (!input.isEmpty()) {
                            offsetYParser = LengthParser.parse(input);
                        }
                    }
                    else {
                        offsetYParser = offsetYParser.feed(input);
                    }
                    if (offsetYParser) {
                        if (offsetYParser.isDone()) {
                            step = 7;
                        }
                        else if (offsetYParser.isError()) {
                            return offsetYParser.asError();
                        }
                    }
                }
                if (step === 7) {
                    if (input.isCont()) {
                        if (Unicode.isSpace(input.head())) {
                            input.step();
                            step = 8;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("space", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 8) {
                    if (!blurRadiusParser) {
                        while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                            input.step();
                        }
                        if (input.isCont() && (c === 45 || c >= 48 && c <= 57)) {
                            blurRadiusParser = LengthParser.parse(input);
                        }
                        else if (!input.isEmpty()) {
                            step = 12;
                        }
                    }
                    else {
                        blurRadiusParser = blurRadiusParser.feed(input);
                    }
                    if (blurRadiusParser) {
                        if (blurRadiusParser.isDone()) {
                            step = 9;
                        }
                        else if (blurRadiusParser.isError()) {
                            return blurRadiusParser.asError();
                        }
                    }
                }
                if (step === 9) {
                    if (input.isCont()) {
                        if (Unicode.isSpace(input.head())) {
                            input.step();
                            step = 10;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("space", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 10) {
                    if (!spreadRadiusParser) {
                        while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                            input.step();
                        }
                        if (input.isCont() && (c === 45 || c >= 48 && c <= 57)) {
                            spreadRadiusParser = LengthParser.parse(input);
                        }
                        else if (!input.isEmpty()) {
                            step = 12;
                        }
                    }
                    else {
                        spreadRadiusParser = spreadRadiusParser.feed(input);
                    }
                    if (spreadRadiusParser) {
                        if (spreadRadiusParser.isDone()) {
                            step = 11;
                        }
                        else if (spreadRadiusParser.isError()) {
                            return spreadRadiusParser.asError();
                        }
                    }
                }
                if (step === 11) {
                    if (input.isCont()) {
                        if (Unicode.isSpace(input.head())) {
                            input.step();
                            step = 12;
                        }
                        else {
                            return Parser.error(Diagnostic.expected("space", input));
                        }
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                if (step === 12) {
                    if (!colorParser) {
                        while (input.isCont() && Unicode.isSpace(input.head())) {
                            input.step();
                        }
                        if (!input.isEmpty()) {
                            colorParser = ColorParser.parse(input);
                        }
                    }
                    else {
                        colorParser = colorParser.feed(input);
                    }
                    if (colorParser) {
                        if (colorParser.isDone()) {
                            var inset = identOutput ? identOutput.bind() === "inset" : false;
                            var offsetX = offsetXParser.bind();
                            var offsetY = offsetYParser.bind();
                            var blurRadius = blurRadiusParser ? blurRadiusParser.bind() : Length.zero();
                            var spreadRadius = spreadRadiusParser ? spreadRadiusParser.bind() : Length.zero();
                            var color = colorParser.bind();
                            var next = new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
                            if (!boxShadow) {
                                boxShadow = next;
                            }
                            else {
                                boxShadow = boxShadow.and(next);
                            }
                            identOutput = void 0;
                            offsetXParser = void 0;
                            offsetYParser = void 0;
                            blurRadiusParser = void 0;
                            spreadRadiusParser = void 0;
                            colorParser = void 0;
                            step = 13;
                        }
                        else if (colorParser.isError()) {
                            return colorParser.asError();
                        }
                    }
                }
                if (step === 13) {
                    while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                        input.step();
                    }
                    if (input.isCont() && c === 44) {
                        input.step();
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(boxShadow);
                    }
                }
                break;
            } while (true);
            return new BoxShadowParser(boxShadow, identOutput, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step);
        };
        return BoxShadowParser;
    }(Parser));
    BoxShadow.Parser = BoxShadowParser;

    var BoxShadowForm = (function (_super) {
        __extends(BoxShadowForm, _super);
        function BoxShadowForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        BoxShadowForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new BoxShadowForm(unit);
            }
        };
        BoxShadowForm.prototype.mold = function (boxShadow) {
            var shadow = BoxShadow.fromAny(boxShadow);
            var record = Record.create();
            do {
                var header = Record.create(5);
                if (shadow.inset) {
                    header.push("inset");
                }
                header.push(Length.form().mold(shadow.offsetX));
                header.push(Length.form().mold(shadow.offsetY));
                header.push(Length.form().mold(shadow.blurRadius));
                header.push(Length.form().mold(shadow.spreadRadius));
                header.push(Color.form().mold(shadow.color));
                record.attr("boxShadow", header);
                if (shadow.next) {
                    shadow = shadow.next;
                    continue;
                }
                break;
            } while (true);
            return record;
        };
        BoxShadowForm.prototype.cast = function (item) {
            var value = item.toValue();
            var boxShadow;
            try {
                boxShadow = BoxShadow.fromValue(value);
                if (!boxShadow) {
                    var string = value.stringValue();
                    if (string !== void 0) {
                        boxShadow = BoxShadow.parse(string);
                    }
                }
            }
            catch (e) {
            }
            return boxShadow;
        };
        return BoxShadowForm;
    }(Form));
    BoxShadow.Form = BoxShadowForm;

    var StyleValue = {
        fromAny: function (value) {
            if (value instanceof DateTime
                || value instanceof Angle
                || value instanceof Length
                || value instanceof Color
                || value instanceof Font
                || value instanceof Transform
                || value instanceof Interpolator
                || value instanceof Scale
                || value instanceof Transition
                || value instanceof BoxShadow
                || typeof value === "number"
                || typeof value === "boolean") {
                return value;
            }
            else if (value instanceof Date || DateTime.isInit(value)) {
                return DateTime.fromAny(value);
            }
            else if (Color.isInit(value)) {
                return Color.fromAny(value);
            }
            else if (Font.isInit(value)) {
                return Font.fromAny(value);
            }
            else if (Transition.isInit(value)) {
                return Transition.fromAny(value);
            }
            else if (BoxShadow.isInit(value)) {
                return BoxShadow.fromAny(value);
            }
            else if (typeof value === "string") {
                return StyleValue.parse(value);
            }
            throw new TypeError("" + value);
        },
        parse: function (input) {
            if (typeof input === "string") {
                input = Unicode.stringInput(input);
            }
            while (input.isCont() && Unicode.isWhitespace(input.head())) {
                input = input.step();
            }
            var parser = StyleValue.Parser.parse(input);
            if (parser.isDone()) {
                while (input.isCont() && Unicode.isWhitespace(input.head())) {
                    input = input.step();
                }
            }
            if (input.isCont() && !parser.isError()) {
                parser = Parser.error(Diagnostic.unexpected(input));
            }
            return parser.bind();
        },
        _form: void 0,
        form: function (unit) {
            if (unit !== void 0) {
                unit = StyleValue.fromAny(unit);
                return new StyleValue.Form(unit);
            }
            else {
                if (!StyleValue._form) {
                    StyleValue._form = new StyleValue.Form();
                }
                return StyleValue._form;
            }
        },
        Parser: void 0,
        Form: void 0,
    };

    var ISO_8601_REST = DateTimeFormat.pattern('%m-%dT%H:%M:%S.%LZ');
    var StyleValueParser = (function (_super) {
        __extends(StyleValueParser, _super);
        function StyleValueParser(identOutput, valueParser, unitsOutput, step) {
            var _this = _super.call(this) || this;
            _this.identOutput = identOutput;
            _this.valueParser = valueParser;
            _this.unitsOutput = unitsOutput;
            _this.step = step;
            return _this;
        }
        StyleValueParser.prototype.feed = function (input) {
            return StyleValueParser.parse(input, this.identOutput, this.valueParser, this.unitsOutput, this.step);
        };
        StyleValueParser.parse = function (input, identOutput, valueParser, unitsOutput, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {
                    input.step();
                }
                if (input.isCont()) {
                    if (c === 35) {
                        return HexColorParser.parse(input);
                    }
                    else if (Unicode.isAlpha(c)) {
                        step = 2;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 2) {
                identOutput = identOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 45)) {
                    input = input.step();
                    identOutput.write(c);
                }
                if (!input.isEmpty()) {
                    var ident = identOutput.bind();
                    switch (ident) {
                        case "rgb":
                        case "rgba": return RgbColorParser.parseRest(input);
                        case "hsl":
                        case "hsla": return HslColorParser.parseRest(input);
                        case "normal":
                        case "italic":
                        case "oblique": return FontParser.parseRest(input, ident);
                        case "small-caps": return FontParser.parseRest(input, void 0, ident);
                        case "bold":
                        case "bolder":
                        case "lighter": return FontParser.parseRest(input, void 0, void 0, ident);
                        case "ultra-condensed":
                        case "extra-condensed":
                        case "semi-condensed":
                        case "condensed":
                        case "expanded":
                        case "semi-expanded":
                        case "extra-expanded":
                        case "ultra-expanded": return FontParser.parseRest(input, void 0, void 0, void 0, ident);
                        case "large":
                        case "larger":
                        case "medium":
                        case "small":
                        case "smaller":
                        case "x-large":
                        case "x-small":
                        case "xx-large":
                        case "xx-small": return FontParser.parseRest(input, void 0, void 0, void 0, void 0, ident);
                        case "translateX":
                        case "translateY":
                        case "translate": return TranslateTransformParser.parseRest(input, identOutput);
                        case "scaleX":
                        case "scaleY":
                        case "scale": return ScaleTransformParser.parseRest(input, identOutput);
                        case "rotate": return RotateTransformParser.parseRest(input, identOutput);
                        case "skewX":
                        case "skewY":
                        case "skew": return SkewTransformParser.parseRest(input, identOutput);
                        case "matrix": return AffineTransformParser.parseRest(input, identOutput);
                        case "none": return Parser.done(Transform.identity());
                        case "true": return Parser.done(true);
                        case "false": return Parser.done(false);
                        default:
                            var color = Color.fromName(ident);
                            if (color !== void 0) {
                                return Parser.done(color);
                            }
                            return Parser.error(Diagnostic.message("unknown style value: " + ident, input));
                    }
                }
            }
            if (step === 3) {
                if (!valueParser) {
                    valueParser = Base10.parseDecimal(input);
                }
                else {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 4;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                if (input.isCont() && (c = input.head(), c === 45)) {
                    input.step();
                    var date = {};
                    date.year = valueParser.bind();
                    return ISO_8601_REST.parseDate(input, date);
                }
                else if (!input.isEmpty()) {
                    step = 5;
                }
            }
            if (step === 5) {
                unitsOutput = unitsOutput || Unicode.stringOutput();
                while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 37)) {
                    input.step();
                    unitsOutput.push(c);
                }
                if (!input.isEmpty()) {
                    step = 6;
                }
            }
            if (step === 6) {
                if (!input.isEmpty()) {
                    var value = valueParser.bind();
                    var units = unitsOutput.bind();
                    var styleValue = void 0;
                    switch (units) {
                        case "deg":
                            styleValue = Angle.deg(value);
                            break;
                        case "rad":
                            styleValue = Angle.rad(value);
                            break;
                        case "grad":
                            styleValue = Angle.grad(value);
                            break;
                        case "turn":
                            styleValue = Angle.turn(value);
                            break;
                        case "px":
                            styleValue = Length.px(value);
                            break;
                        case "em":
                            styleValue = Length.em(value);
                            break;
                        case "rem":
                            styleValue = Length.rem(value);
                            break;
                        case "%":
                            styleValue = Length.pct(value);
                            break;
                        case "":
                            styleValue = value;
                            break;
                        default: return Parser.error(Diagnostic.message("unknown style units: " + units, input));
                    }
                    if (input.isCont() && (c = input.head(), Unicode.isSpace(c) || c === 47)) {
                        if (styleValue instanceof Length) {
                            return FontParser.parseRest(input, void 0, void 0, void 0, void 0, styleValue);
                        }
                        else if (typeof styleValue === "number") {
                            switch (value) {
                                case 100:
                                case 200:
                                case 300:
                                case 400:
                                case 500:
                                case 600:
                                case 700:
                                case 800:
                                case 900: return FontParser.parseRest(input, void 0, void 0, String(value));
                            }
                        }
                    }
                    return Parser.done(styleValue);
                }
            }
            return new StyleValueParser(identOutput, valueParser, unitsOutput, step);
        };
        return StyleValueParser;
    }(Parser));
    StyleValue.Parser = StyleValueParser;

    var StyleValueForm = (function (_super) {
        __extends(StyleValueForm, _super);
        function StyleValueForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        StyleValueForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                unit = unit !== void 0 ? StyleValue.fromAny(unit) : void 0;
                return new StyleValueForm(unit);
            }
        };
        StyleValueForm.prototype.mold = function (value) {
            if (value !== void 0) {
                value = StyleValue.fromAny(value);
                if (value instanceof DateTime) {
                    return DateTime.form().mold(value);
                }
                else if (value instanceof Angle) {
                    return Angle.form().mold(value);
                }
                else if (value instanceof Length) {
                    return Length.form().mold(value);
                }
                else if (value instanceof Color) {
                    return Color.form().mold(value);
                }
                else if (value instanceof Font) {
                    return Font.form().mold(value);
                }
                else if (value instanceof Transform) {
                    return Transform.form().mold(value);
                }
                else if (value instanceof Interpolator) {
                    return Interpolator.form().mold(value);
                }
                else if (value instanceof Scale) {
                    return Scale.form().mold(value);
                }
                else if (value instanceof Transition) {
                    return Transition.form().mold(value);
                }
                else if (value instanceof BoxShadow) {
                    return BoxShadow.form().mold(value);
                }
                else if (typeof value === "number") {
                    return Num.from(value);
                }
                throw new TypeError("" + value);
            }
            else {
                return Item.extant();
            }
        };
        StyleValueForm.prototype.cast = function (item) {
            var value = item.toValue();
            if (value instanceof Num) {
                return value.numberValue();
            }
            if (value instanceof Bool) {
                return value.booleanValue();
            }
            var string = value.stringValue(void 0);
            if (string !== void 0) {
                try {
                    return StyleValue.parse(string);
                }
                catch (e) {
                }
            }
            if (value instanceof Record) {
                var date = DateTime.fromValue(value);
                if (date) {
                    return date;
                }
                var angle = Angle.fromValue(value);
                if (angle) {
                    return angle;
                }
                var length_1 = Length.fromValue(value);
                if (length_1) {
                    return length_1;
                }
                var color = Color.fromValue(value);
                if (color) {
                    return color;
                }
                var font = Font.fromValue(value);
                if (font) {
                    return font;
                }
                var transform = Transform.fromValue(value);
                if (transform) {
                    return transform;
                }
                var interpolator = Interpolator.form().cast(value);
                if (interpolator) {
                    return interpolator;
                }
                var scale = Scale.form().cast(value);
                if (scale) {
                    return scale;
                }
                var transition = Transition.form().cast(value);
                if (transition) {
                    return transition;
                }
                var boxShadow = BoxShadow.fromValue(value);
                if (boxShadow) {
                    return boxShadow;
                }
            }
            return void 0;
        };
        return StyleValueForm;
    }(Form));
    StyleValue.Form = StyleValueForm;
    Interpolator.valueForm = StyleValue.form;
    Scale.domainForm = StyleValue.form;
    Scale.interpolatorForm = Interpolator.form;
    Transition.interpolatorForm = Interpolator.form;

    function AttributeString(value) {
        if (value && typeof value === "object" && typeof value.toAttributeString === "function") {
            return value.toAttributeString();
        }
        else {
            return "" + value;
        }
    }

    function StyleString(value) {
        if (value && typeof value === "object" && typeof value.toStyleString === "function") {
            return value.toStyleString();
        }
        else {
            return "" + value;
        }
    }

    var PI = Math.PI;
    var TAU = 2 * PI;
    var EPSILON = 1e-6;
    var PathContext = (function () {
        function PathContext() {
            this.x0 = null;
            this.y0 = null;
            this.x1 = null;
            this.y1 = null;
            this.d = "";
        }
        PathContext.prototype.moveTo = function (x, y) {
            this.d += "M" + (this.x0 = this.x1 = x) + "," + (this.y0 = this.y1 = y);
        };
        PathContext.prototype.closePath = function () {
            if (this.x1 !== undefined) {
                this.x1 = this.x0;
                this.y1 = this.y0;
                this.d += "Z";
            }
        };
        PathContext.prototype.lineTo = function (x, y) {
            this.d += "L" + (this.x1 = x) + "," + (this.y1 = y);
        };
        PathContext.prototype.quadraticCurveTo = function (x1, y1, x, y) {
            this.d += "Q" + x1 + "," + y1 + "," + (this.x1 = x) + "," + (this.y1 = y);
        };
        PathContext.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
            this.d += "C" + x1 + "," + y1 + "," + x2 + "," + y2 + "," + (this.x1 = x) + "," + (this.y1 = y);
        };
        PathContext.prototype.arcTo = function (x1, y1, x2, y2, r) {
            var x0 = +this.x1;
            var y0 = +this.y1;
            var x21 = x2 - x1;
            var y21 = y2 - y1;
            var x01 = x0 - x1;
            var y01 = y0 - y1;
            var l01_2 = x01 * x01 + y01 * y01;
            if (r < 0) {
                throw new Error("negative radius: " + r);
            }
            else if (this.x1 === null) {
                this.d += "M" + (this.x1 = x1) + "," + (this.y1 = y1);
            }
            else if (!(l01_2 > EPSILON)) ;
            else if (!(Math.abs(y01 * x21 - y21 * x01) > EPSILON) || !r) {
                this.d += "L" + (this.x1 = x1) + "," + (this.y1 = y1);
            }
            else {
                var x20 = x2 - x0;
                var y20 = y2 - y0;
                var l21_2 = x21 * x21 + y21 * y21;
                var l20_2 = x20 * x20 + y20 * y20;
                var l21 = Math.sqrt(l21_2);
                var l01 = Math.sqrt(l01_2);
                var l = r * Math.tan((PI - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2);
                var t01 = l / l01;
                var t21 = l / l21;
                if (Math.abs(t01 - 1) > EPSILON) {
                    this.d += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
                }
                this.d += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," +
                    (this.x1 = x1 + t21 * x21) + "," + (this.y1 = y1 + t21 * y21);
            }
        };
        PathContext.prototype.arc = function (x, y, r, a0, a1, ccw) {
            if (ccw === void 0) { ccw = false; }
            var dx = r * Math.cos(a0);
            var dy = r * Math.sin(a0);
            var x0 = x + dx;
            var y0 = y + dy;
            var cw = 1 ^ +ccw;
            var da = ccw ? a0 - a1 : a1 - a0;
            if (r < 0) {
                throw new Error("negative radius: " + r);
            }
            else if (this.x1 === null) {
                this.d += "M" + x0 + "," + y0;
            }
            else if (Math.abs(+this.x1 - x0) > EPSILON || Math.abs(+this.y1 - y0) > EPSILON) {
                this.d += "L" + x0 + "," + y0;
            }
            if (!r) {
                return;
            }
            else if (da < 0) {
                da = da % TAU + TAU;
            }
            if (da > TAU - EPSILON) {
                this.d += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) +
                    "A" + r + "," + r + ",0,1," + cw + "," + (this.x1 = x0) + "," + (this.y1 = y0);
            }
            else if (da > EPSILON) {
                this.d += "A" + r + "," + r + ",0," + (+(da >= PI)) + "," + cw + "," +
                    (this.x1 = x + r * Math.cos(a1)) + "," + (this.y1 = y + r * Math.sin(a1));
            }
        };
        PathContext.prototype.rect = function (x, y, w, h) {
            this.d += "M" + (this.x0 = this.x1 = x) + "," + (this.y0 = this.y1 = y) + "h" + w + "v" + h + "h" + -w + "Z";
        };
        PathContext.prototype.toString = function () {
            return this.d;
        };
        return PathContext;
    }());

    var ConstraintMap = (function () {
        function ConstraintMap(index, array) {
            if (index === void 0) { index = {}; }
            if (array === void 0) { array = []; }
            this._index = index;
            this._array = array;
        }
        Object.defineProperty(ConstraintMap.prototype, "size", {
            get: function () {
                return this._array.length;
            },
            enumerable: true,
            configurable: true
        });
        ConstraintMap.prototype.isEmpty = function () {
            return this._array.length === 0;
        };
        ConstraintMap.prototype.has = function (key) {
            return this._index[key.id] !== void 0;
        };
        ConstraintMap.prototype.get = function (key) {
            var index = this._index[key.id];
            return index !== void 0 ? this._array[index][1] : void 0;
        };
        ConstraintMap.prototype.getField = function (key) {
            var index = this._index[key.id];
            return index !== void 0 ? this._array[index] : void 0;
        };
        ConstraintMap.prototype.getEntry = function (index) {
            return this._array[index];
        };
        ConstraintMap.prototype.set = function (key, newValue) {
            var index = this._index[key.id];
            if (index !== void 0) {
                this._array[index][1] = newValue;
            }
            else {
                this._index[key.id] = this._array.length;
                this._array.push([key, newValue]);
            }
            return this;
        };
        ConstraintMap.prototype.delete = function (key) {
            var index = this._index[key.id];
            if (index !== void 0) {
                delete this._index[key.id];
                var item = this._array[index];
                var last = this._array.pop();
                if (item !== last) {
                    this._array[index] = last;
                    this._index[last[0].id] = index;
                }
                return true;
            }
            else {
                return false;
            }
        };
        ConstraintMap.prototype.remove = function (key) {
            var index = this._index[key.id];
            if (index !== void 0) {
                delete this._index[key.id];
                var item = this._array[index];
                var last = this._array.pop();
                if (item !== last) {
                    this._array[index] = last;
                    this._index[last[0].id] = index;
                }
                return item[1];
            }
            else {
                return void 0;
            }
        };
        ConstraintMap.prototype.clear = function () {
            this._index = {};
            this._array.length = 0;
        };
        ConstraintMap.prototype.forEach = function (callback, thisArg) {
            var array = this._array;
            for (var i = 0, n = array.length; i < n; i += 1) {
                var item = array[i];
                var result = callback.call(thisArg, item[0], item[1]);
                if (result !== void 0) {
                    return result;
                }
            }
            return void 0;
        };
        ConstraintMap.prototype.keys = function () {
            return void 0;
        };
        ConstraintMap.prototype.values = function () {
            return void 0;
        };
        ConstraintMap.prototype.entries = function () {
            return void 0;
        };
        ConstraintMap.prototype.clone = function () {
            var oldArray = this._array;
            var n = oldArray.length;
            var newIndex = {};
            var newArray = new Array(n);
            for (var i = 0; i < n; i += 1) {
                var _a = oldArray[i], key = _a[0], value = _a[1];
                newArray[i] = [key, value];
                newIndex[key.id] = i;
            }
            return new ConstraintMap(newIndex, newArray);
        };
        ConstraintMap.nextId = function () {
            var nextId = ConstraintMap._nextId;
            ConstraintMap._nextId = nextId + 1;
            return nextId;
        };
        ConstraintMap._nextId = 1;
        return ConstraintMap;
    }());

    var ConstraintSymbol = {
        Invalid: void 0,
    };
    var ConstraintSlack = (function () {
        function ConstraintSlack() {
            this._id = ConstraintMap.nextId();
        }
        Object.defineProperty(ConstraintSlack.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        ConstraintSlack.prototype.isExternal = function () {
            return false;
        };
        ConstraintSlack.prototype.isDummy = function () {
            return false;
        };
        ConstraintSlack.prototype.isInvalid = function () {
            return false;
        };
        return ConstraintSlack;
    }());
    var ConstraintDummy = (function () {
        function ConstraintDummy() {
            this._id = ConstraintMap.nextId();
        }
        Object.defineProperty(ConstraintDummy.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        ConstraintDummy.prototype.isExternal = function () {
            return false;
        };
        ConstraintDummy.prototype.isDummy = function () {
            return true;
        };
        ConstraintDummy.prototype.isInvalid = function () {
            return false;
        };
        return ConstraintDummy;
    }());
    var ConstraintError = (function () {
        function ConstraintError() {
            this._id = ConstraintMap.nextId();
        }
        Object.defineProperty(ConstraintError.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        ConstraintError.prototype.isExternal = function () {
            return false;
        };
        ConstraintError.prototype.isDummy = function () {
            return false;
        };
        ConstraintError.prototype.isInvalid = function () {
            return false;
        };
        return ConstraintError;
    }());
    var ConstraintInvalid = (function () {
        function ConstraintInvalid() {
        }
        Object.defineProperty(ConstraintInvalid.prototype, "id", {
            get: function () {
                return -1;
            },
            enumerable: true,
            configurable: true
        });
        ConstraintInvalid.prototype.isExternal = function () {
            return false;
        };
        ConstraintInvalid.prototype.isDummy = function () {
            return false;
        };
        ConstraintInvalid.prototype.isInvalid = function () {
            return true;
        };
        return ConstraintInvalid;
    }());
    ConstraintSymbol.Invalid = new ConstraintInvalid();

    var Constrain = (function () {
        function Constrain() {
            this._id = ConstraintMap.nextId();
        }
        Object.defineProperty(Constrain.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        Constrain.sum = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var terms = new ConstraintMap();
            var constant = 0;
            for (var i = 0, n = args.length; i < n; i += 1) {
                var arg = args[i];
                if (typeof arg === "number") {
                    constant += arg;
                }
                else if (arg instanceof Constrain.Term) {
                    var variable = arg.variable;
                    if (variable !== null) {
                        var field = terms.getField(variable);
                        if (field !== void 0) {
                            field[1] += arg.coefficient;
                        }
                        else {
                            terms.set(variable, arg.coefficient);
                        }
                    }
                    else {
                        constant += arg.constant;
                    }
                }
                else {
                    var subterms = arg.terms;
                    for (var j = 0, k = subterms.size; j < k; j += 1) {
                        var _a = subterms.getEntry(j), variable = _a[0], coefficient = _a[1];
                        var field = terms.getField(variable);
                        if (field !== void 0) {
                            field[1] += coefficient;
                        }
                        else {
                            terms.set(variable, coefficient);
                        }
                    }
                    constant += arg.constant;
                }
            }
            return new Constrain.Sum(terms, constant);
        };
        Constrain.product = function (coefficient, variable) {
            return new Constrain.Product(coefficient, variable);
        };
        Constrain.constant = function (value) {
            return new Constrain.Constant(value);
        };
        Constrain.zero = function () {
            return new Constrain.Constant(0);
        };
        return Constrain;
    }());

    var ConstrainSum = (function (_super) {
        __extends(ConstrainSum, _super);
        function ConstrainSum(terms, constant) {
            var _this = _super.call(this) || this;
            _this._terms = terms;
            _this._constant = constant;
            return _this;
        }
        ConstrainSum.prototype.isConstant = function () {
            return this._terms.isEmpty();
        };
        Object.defineProperty(ConstrainSum.prototype, "terms", {
            get: function () {
                return this._terms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainSum.prototype, "constant", {
            get: function () {
                return this._constant;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainSum.prototype.plus = function (that) {
            return Constrain.sum(this, that);
        };
        ConstrainSum.prototype.opposite = function () {
            var oldTerms = this._terms;
            var newTerms = new ConstraintMap();
            for (var i = 0, n = oldTerms.size; i < n; i += 1) {
                var _a = oldTerms.getEntry(i), variable = _a[0], coefficient = _a[1];
                newTerms.set(variable, -coefficient);
            }
            return new ConstrainSum(newTerms, -this._constant);
        };
        ConstrainSum.prototype.minus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            else {
                that = that.opposite();
            }
            return Constrain.sum(this, that);
        };
        ConstrainSum.prototype.times = function (scalar) {
            var oldTerms = this._terms;
            var newTerms = new ConstraintMap();
            for (var i = 0, n = oldTerms.size; i < n; i += 1) {
                var _a = oldTerms.getEntry(i), variable = _a[0], coefficient = _a[1];
                newTerms.set(variable, coefficient * scalar);
            }
            return new ConstrainSum(newTerms, this._constant * scalar);
        };
        ConstrainSum.prototype.divide = function (scalar) {
            var oldTerms = this._terms;
            var newTerms = new ConstraintMap();
            for (var i = 0, n = oldTerms.size; i < n; i += 1) {
                var _a = oldTerms.getEntry(i), variable = _a[0], coefficient = _a[1];
                newTerms.set(variable, coefficient / scalar);
            }
            return new ConstrainSum(newTerms, this._constant / scalar);
        };
        ConstrainSum.prototype.debug = function (output) {
            output = output.write("Constrain").write(46).write("sum").write(40);
            var n = this._terms.size;
            for (var i = 0; i < n; i += 1) {
                var _a = this._terms.getEntry(i), variable = _a[0], coefficient = _a[1];
                if (i > 0) {
                    output = output.write(", ");
                }
                if (coefficient === 1) {
                    output = output.debug(variable);
                }
                else {
                    output = output.debug(Constrain.product(coefficient, variable));
                }
            }
            if (this._constant !== 0) {
                if (n > 0) {
                    output = output.write(", ");
                }
                output = output.debug(this._constant);
            }
            output = output.write(41);
        };
        ConstrainSum.prototype.toString = function () {
            return Format.debug(this);
        };
        return ConstrainSum;
    }(Constrain));
    Constrain.Sum = ConstrainSum;

    var ConstrainTerm = (function (_super) {
        __extends(ConstrainTerm, _super);
        function ConstrainTerm() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConstrainTerm;
    }(Constrain));
    Constrain.Term = ConstrainTerm;

    var ConstrainProduct = (function (_super) {
        __extends(ConstrainProduct, _super);
        function ConstrainProduct(coefficient, variable) {
            var _this = _super.call(this) || this;
            _this._coefficient = coefficient;
            _this._variable = variable;
            return _this;
        }
        ConstrainProduct.prototype.isConstant = function () {
            return false;
        };
        Object.defineProperty(ConstrainProduct.prototype, "coefficient", {
            get: function () {
                return this._coefficient;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainProduct.prototype, "variable", {
            get: function () {
                return this._variable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainProduct.prototype, "terms", {
            get: function () {
                var terms = new ConstraintMap();
                terms.set(this._variable, this._coefficient);
                return terms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainProduct.prototype, "constant", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainProduct.prototype.plus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (that instanceof ConstrainProduct && this._variable === that._variable) {
                return Constrain.product(this._coefficient + that._coefficient, this._variable);
            }
            else if (that instanceof Constrain.Variable && this._variable === that) {
                return Constrain.product(this._coefficient + 1, this._variable);
            }
            else {
                return Constrain.sum(this, that);
            }
        };
        ConstrainProduct.prototype.opposite = function () {
            return Constrain.product(-this._coefficient, this._variable);
        };
        ConstrainProduct.prototype.minus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (that instanceof ConstrainProduct && this._variable === that._variable) {
                return Constrain.product(this._coefficient - that._coefficient, this._variable);
            }
            else if (that instanceof Constrain.Variable && this._variable === that) {
                return Constrain.product(this._coefficient - 1, this._variable);
            }
            else {
                return Constrain.sum(this, that.opposite());
            }
        };
        ConstrainProduct.prototype.times = function (scalar) {
            return Constrain.product(this._coefficient * scalar, this._variable);
        };
        ConstrainProduct.prototype.divide = function (scalar) {
            return Constrain.product(this._coefficient / scalar, this._variable);
        };
        ConstrainProduct.prototype.debug = function (output) {
            output = output.write("Constrain").write(46).write("product").write(40)
                .debug(this._coefficient).write(", ").debug(this._variable).write(41);
        };
        ConstrainProduct.prototype.toString = function () {
            return Format.debug(this);
        };
        return ConstrainProduct;
    }(ConstrainTerm));
    Constrain.Product = ConstrainProduct;

    var ConstrainConstant = (function (_super) {
        __extends(ConstrainConstant, _super);
        function ConstrainConstant(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        ConstrainConstant.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(ConstrainConstant.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainConstant.prototype, "coefficient", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainConstant.prototype, "variable", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainConstant.prototype, "terms", {
            get: function () {
                return new ConstraintMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainConstant.prototype, "constant", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainConstant.prototype.plus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (that instanceof ConstrainConstant) {
                return Constrain.constant(this._value + that._value);
            }
            else {
                return Constrain.sum(this, that);
            }
        };
        ConstrainConstant.prototype.opposite = function () {
            return Constrain.constant(-this._value);
        };
        ConstrainConstant.prototype.minus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (that instanceof ConstrainConstant) {
                return Constrain.constant(this._value - that._value);
            }
            else {
                return Constrain.sum(this, that.opposite());
            }
        };
        ConstrainConstant.prototype.times = function (scalar) {
            return Constrain.constant(this._value * scalar);
        };
        ConstrainConstant.prototype.divide = function (scalar) {
            return Constrain.constant(this._value / scalar);
        };
        ConstrainConstant.prototype.debug = function (output) {
            output = output.write("Constrain").write(46).write("constant").write(40)
                .debug(this._value).write(41);
        };
        ConstrainConstant.prototype.toString = function () {
            return Format.debug(this);
        };
        return ConstrainConstant;
    }(ConstrainTerm));
    Constrain.Constant = ConstrainConstant;

    var ConstrainVariable = (function (_super) {
        __extends(ConstrainVariable, _super);
        function ConstrainVariable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConstrainVariable.prototype.isExternal = function () {
            return true;
        };
        ConstrainVariable.prototype.isDummy = function () {
            return false;
        };
        ConstrainVariable.prototype.isInvalid = function () {
            return false;
        };
        ConstrainVariable.prototype.isConstant = function () {
            return false;
        };
        Object.defineProperty(ConstrainVariable.prototype, "coefficient", {
            get: function () {
                return 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainVariable.prototype, "variable", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainVariable.prototype, "terms", {
            get: function () {
                var terms = new ConstraintMap();
                terms.set(this, 1);
                return terms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainVariable.prototype, "constant", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainVariable.prototype.plus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (this === that) {
                return Constrain.product(2, this);
            }
            else {
                return Constrain.sum(this, that);
            }
        };
        ConstrainVariable.prototype.opposite = function () {
            return Constrain.product(-1, this);
        };
        ConstrainVariable.prototype.minus = function (that) {
            if (typeof that === "number") {
                that = Constrain.constant(that);
            }
            if (this === that) {
                return Constrain.zero();
            }
            else {
                return Constrain.sum(this, that.opposite());
            }
        };
        ConstrainVariable.prototype.times = function (coefficient) {
            return Constrain.product(coefficient, this);
        };
        ConstrainVariable.prototype.divide = function (scalar) {
            return Constrain.product(1 / scalar, this);
        };
        ConstrainVariable.prototype.debug = function (output) {
            output = output.debug(this.scope).write(46).write("variable").write(40)
                .debug(this.name).write(", ").debug(this.value).write(41);
        };
        ConstrainVariable.prototype.toString = function () {
            return Format.debug(this);
        };
        return ConstrainVariable;
    }(ConstrainTerm));
    Constrain.Variable = ConstrainVariable;

    var ConstraintStrength = {
        Required: 1001001000,
        Strong: 1000000,
        Medium: 1000,
        Weak: 1,
        Unbound: -1,
        clip: function (strength) {
            return Math.min(Math.max(0, strength), ConstraintStrength.Required);
        },
        fromAny: function (strength) {
            if (typeof strength === "number") {
                return ConstraintStrength.clip(strength);
            }
            else if (strength === "required") {
                return ConstraintStrength.Required;
            }
            else if (strength === "strong") {
                return ConstraintStrength.Strong;
            }
            else if (strength === "medium") {
                return ConstraintStrength.Medium;
            }
            else if (strength === "weak") {
                return ConstraintStrength.Weak;
            }
            throw new TypeError("" + strength);
        },
    };

    var ConstrainBinding = (function (_super) {
        __extends(ConstrainBinding, _super);
        function ConstrainBinding(scope, name, value, strength) {
            var _this = _super.call(this) || this;
            _this._scope = scope;
            Object.defineProperty(_this, "name", {
                value: name,
                enumerable: true,
                configurable: true,
            });
            _this._value = value;
            _this._state = NaN;
            _this._strength = strength;
            return _this;
        }
        Object.defineProperty(ConstrainBinding.prototype, "scope", {
            get: function () {
                return this._scope;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstrainBinding.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainBinding.prototype.setValue = function (value) {
            this._value = value;
        };
        Object.defineProperty(ConstrainBinding.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainBinding.prototype.setState = function (newState) {
            var oldState = this._state;
            if (isFinite(oldState) && !isFinite(newState)) {
                this._scope.removeVariable(this);
            }
            this._state = newState;
            if (isFinite(newState)) {
                if (!isFinite(oldState)) {
                    this._scope.addVariable(this);
                }
                else {
                    this._scope.setVariableState(this, newState);
                }
            }
        };
        Object.defineProperty(ConstrainBinding.prototype, "strength", {
            get: function () {
                return this._strength;
            },
            enumerable: true,
            configurable: true
        });
        ConstrainBinding.prototype.setStrength = function (newStrength) {
            var state = this._state;
            var oldStrength = this._strength;
            newStrength = ConstraintStrength.fromAny(newStrength);
            if (isFinite(state) && oldStrength !== newStrength) {
                this._scope.removeVariable(this);
            }
            this._strength = newStrength;
            if (isFinite(state) && oldStrength !== newStrength) {
                this._scope.addVariable(this);
            }
        };
        return ConstrainBinding;
    }(ConstrainVariable));
    Constrain.Binding = ConstrainBinding;

    var Constraint = (function () {
        function Constraint(scope, constrain, relation, strength) {
            this._id = ConstraintMap.nextId();
            this._scope = scope;
            this._constrain = constrain;
            this._relation = relation;
            this._strength = strength;
        }
        Object.defineProperty(Constraint.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constraint.prototype, "scope", {
            get: function () {
                return this._scope;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constraint.prototype, "constrain", {
            get: function () {
                return this._constrain;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constraint.prototype, "relation", {
            get: function () {
                return this._relation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constraint.prototype, "strength", {
            get: function () {
                return this._strength;
            },
            enumerable: true,
            configurable: true
        });
        Constraint.prototype.enabled = function (enabled) {
            if (enabled === void 0) {
                return this._scope.hasConstraint(this);
            }
            else {
                if (enabled) {
                    this._scope.addConstraint(this);
                }
                else {
                    this._scope.removeConstraint(this);
                }
                return this;
            }
        };
        Constraint.prototype.debug = function (output) {
            output = output.debug(this._scope).write(46).write("constraint").write(40)
                .debug(this._constrain).write(", ").debug(this._relation).write(", ").debug(void 0).write(", ");
            if (this._strength === ConstraintStrength.Required) {
                output = output.debug("required");
            }
            else if (this._strength === ConstraintStrength.Strong) {
                output = output.debug("strong");
            }
            else if (this._strength === ConstraintStrength.Medium) {
                output = output.debug("medium");
            }
            else if (this._strength === ConstraintStrength.Weak) {
                output = output.debug("weak");
            }
            else {
                output = output.debug(this._strength);
            }
            output = output.write(41);
        };
        Constraint.prototype.toString = function () {
            return Format.debug(this);
        };
        return Constraint;
    }());

    var EPSILON$1 = 1.0e-8;
    var ConstraintRow = (function () {
        function ConstraintRow(cells, constant) {
            if (cells === void 0) { cells = new ConstraintMap(); }
            if (constant === void 0) { constant = 0; }
            this._cells = cells;
            this._constant = constant;
        }
        ConstraintRow.prototype.isConstant = function () {
            return this._cells.isEmpty();
        };
        ConstraintRow.prototype.isDummy = function () {
            for (var i = 0, n = this._cells.size; i < n; i += 1) {
                var symbol = this._cells.getEntry(i)[0];
                if (!(symbol instanceof ConstraintDummy)) {
                    return false;
                }
            }
            return true;
        };
        ConstraintRow.prototype.clone = function () {
            return new ConstraintRow(this._cells.clone(), this._constant);
        };
        ConstraintRow.prototype.add = function (value) {
            this._constant += value;
            return this._constant;
        };
        ConstraintRow.prototype.insertSymbol = function (symbol, coefficient) {
            if (coefficient === void 0) { coefficient = 1; }
            coefficient += this._cells.get(symbol) || 0;
            if (Math.abs(coefficient) < EPSILON$1) {
                this._cells.remove(symbol);
            }
            else {
                this._cells.set(symbol, coefficient);
            }
        };
        ConstraintRow.prototype.insertRow = function (that, coefficient) {
            this._constant += that._constant * coefficient;
            for (var i = 0, n = that._cells.size; i < n; i += 1) {
                var _a = that._cells.getEntry(i), symbol = _a[0], value = _a[1];
                this.insertSymbol(symbol, value * coefficient);
            }
        };
        ConstraintRow.prototype.removeSymbol = function (symbol) {
            this._cells.remove(symbol);
        };
        ConstraintRow.prototype.negate = function () {
            this._constant = -this._constant;
            for (var i = 0, n = this._cells.size; i < n; i += 1) {
                var entry = this._cells.getEntry(i);
                entry[1] = -entry[1];
            }
        };
        ConstraintRow.prototype.solveFor = function (symbol) {
            var value = this._cells.remove(symbol);
            if (value !== void 0) {
                var coefficient = -1 / value;
                this._constant *= coefficient;
                for (var i = 0, n = this._cells.size; i < n; i += 1) {
                    var entry = this._cells.getEntry(i);
                    entry[1] *= coefficient;
                }
            }
        };
        ConstraintRow.prototype.solveForEx = function (lhs, rhs) {
            this.insertSymbol(lhs, -1.0);
            this.solveFor(rhs);
        };
        ConstraintRow.prototype.coefficientFor = function (symbol) {
            var value = this._cells.get(symbol);
            return value !== void 0 ? value : 0;
        };
        ConstraintRow.prototype.substitute = function (symbol, row) {
            var value = this._cells.remove(symbol);
            if (value !== void 0) {
                this.insertRow(row, value);
            }
        };
        return ConstraintRow;
    }());
    var ConstraintSolver = (function () {
        function ConstraintSolver() {
            this._constraints = new ConstraintMap();
            this._variables = new ConstraintMap();
            this._rows = new ConstraintMap();
            this._infeasible = [];
            this._objective = new ConstraintRow();
            this._artificial = null;
        }
        ConstraintSolver.prototype.variable = function (name, value, strength) {
            if (value === void 0) {
                value = 0;
            }
            if (strength === void 0) {
                strength = ConstraintStrength.Strong;
            }
            else {
                strength = ConstraintStrength.fromAny(strength);
            }
            return new ConstrainBinding(this, name, value, strength);
        };
        ConstraintSolver.prototype.constraint = function (lhs, relation, rhs, strength) {
            if (typeof lhs === "number") {
                lhs = Constrain.constant(lhs);
            }
            if (typeof rhs === "number") {
                rhs = Constrain.constant(rhs);
            }
            var constrain = rhs ? lhs.minus(rhs) : lhs;
            if (strength === void 0) {
                strength = ConstraintStrength.Required;
            }
            else {
                strength = ConstraintStrength.fromAny(strength);
            }
            return new Constraint(this, constrain, relation, strength);
        };
        ConstraintSolver.prototype.hasConstraint = function (constraint) {
            return this._constraints.has(constraint);
        };
        ConstraintSolver.prototype.addConstraint = function (constraint) {
            if (this._constraints.has(constraint)) {
                return;
            }
            this.willAddConstraint(constraint);
            var _a = this.createRow(constraint), row = _a.row, tag = _a.tag;
            var subject = this.chooseSubject(row, tag);
            if (subject.isInvalid() && row.isDummy()) {
                if (Math.abs(row._constant) < EPSILON$1) {
                    subject = tag.marker;
                }
                else {
                    throw new Error("unsatisfiable constraint");
                }
            }
            if (subject.isInvalid()) {
                if (!this.addWithArtificialVariable(row)) {
                    throw new Error("unsatisfiable constraint");
                }
            }
            else {
                row.solveFor(subject);
                this.substitute(subject, row);
                this._rows.set(subject, row);
            }
            this._constraints.set(constraint, tag);
            this.optimize(this._objective);
            this.didAddConstraint(constraint);
        };
        ConstraintSolver.prototype.willAddConstraint = function (constraint) {
        };
        ConstraintSolver.prototype.didAddConstraint = function (constraint) {
        };
        ConstraintSolver.prototype.removeConstraint = function (constraint) {
            var tag = this._constraints.remove(constraint);
            if (tag === void 0) {
                return;
            }
            this.willRemoveConstraint(constraint);
            this.removeConstraintEffects(constraint, tag);
            var marker = tag.marker;
            if (this._rows.remove(marker) === void 0) {
                var leaving = this.getMarkerLeavingSymbol(marker);
                if (leaving.isInvalid()) {
                    throw new Error("failed to find leaving row");
                }
                var row = this._rows.remove(leaving);
                row.solveForEx(leaving, marker);
                this.substitute(marker, row);
            }
            this.optimize(this._objective);
            this.didRemoveConstraint(constraint);
        };
        ConstraintSolver.prototype.willRemoveConstraint = function (constraint) {
        };
        ConstraintSolver.prototype.didRemoveConstraint = function (constraint) {
        };
        ConstraintSolver.prototype.hasVariable = function (variable) {
            return this._variables.has(variable);
        };
        ConstraintSolver.prototype.addVariable = function (variable) {
            if (this._variables.has(variable)) {
                return;
            }
            var strength = ConstraintStrength.clip(variable.strength);
            if (strength === ConstraintStrength.Required) {
                throw new Error("invalid variable strength");
            }
            this.willAddVariable(variable);
            var constraint = new Constraint(this, variable, "eq", strength);
            this.addConstraint(constraint);
            var tag = this._constraints.get(constraint);
            var binding = { constraint: constraint, tag: tag, state: 0 };
            this._variables.set(variable, binding);
            this.didAddVariable(variable);
            var state = variable.state;
            if (isFinite(state)) {
                this.setVariableState(variable, state);
            }
        };
        ConstraintSolver.prototype.willAddVariable = function (variable) {
        };
        ConstraintSolver.prototype.didAddVariable = function (variable) {
        };
        ConstraintSolver.prototype.removeVariable = function (variable) {
            var binding = this._variables.remove(variable);
            if (binding === void 0) {
                return;
            }
            this.willRemoveVariable(variable);
            this.removeConstraint(binding.constraint);
            this.didRemoveVariable(variable);
        };
        ConstraintSolver.prototype.willRemoveVariable = function (variable) {
        };
        ConstraintSolver.prototype.didRemoveVariable = function (variable) {
        };
        ConstraintSolver.prototype.setVariableState = function (variable, state) {
            var binding = this._variables.get(variable);
            if (binding === void 0) {
                throw new Error("unknown variable");
            }
            this.willSetVariableState(variable, state);
            var delta = state - binding.state;
            binding.state = state;
            var marker = binding.tag.marker;
            var row = this._rows.get(marker);
            if (row !== void 0) {
                if (row.add(-delta) < 0) {
                    this._infeasible.push(marker);
                }
                this.dualOptimize();
                return;
            }
            var other = binding.tag.other;
            row = this._rows.get(other);
            if (row !== void 0) {
                if (row.add(delta) < 0) {
                    this._infeasible.push(other);
                }
                this.dualOptimize();
                return;
            }
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                var _a = this._rows.getEntry(i), symbol = _a[0], row_1 = _a[1];
                var coefficient = row_1.coefficientFor(marker);
                if (coefficient !== 0 && row_1.add(delta * coefficient) < 0 && !symbol.isExternal()) {
                    this._infeasible.push(symbol);
                }
            }
            this.dualOptimize();
            this.didSetVariableState(variable, state);
        };
        ConstraintSolver.prototype.willSetVariableState = function (variable, state) {
        };
        ConstraintSolver.prototype.didSetVariableState = function (variable, state) {
        };
        ConstraintSolver.prototype.updateVariables = function () {
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                var _a = this._rows.getEntry(i), symbol = _a[0], row = _a[1];
                if (symbol instanceof ConstrainVariable) {
                    symbol.setValue(row._constant);
                }
            }
        };
        ConstraintSolver.prototype.createRow = function (constraint) {
            var constrain = constraint.constrain;
            var row = new ConstraintRow(void 0, constrain.constant);
            var terms = constrain.terms;
            for (var i = 0, n = terms.size; i < n; i += 1) {
                var _a = terms.getEntry(i), variable = _a[0], coefficient = _a[1];
                if (variable !== null && Math.abs(coefficient) >= EPSILON$1) {
                    var basic = this._rows.get(variable);
                    if (basic !== void 0) {
                        row.insertRow(basic, coefficient);
                    }
                    else {
                        row.insertSymbol(variable, coefficient);
                    }
                }
            }
            var objective = this._objective;
            var relation = constraint.relation;
            var strength = constraint.strength;
            var tag = { marker: ConstraintSymbol.Invalid, other: ConstraintSymbol.Invalid };
            if (relation === "le" || relation === "ge") {
                var coefficient = relation === "le" ? 1 : -1;
                var slack = new ConstraintSlack();
                tag.marker = slack;
                row.insertSymbol(slack, coefficient);
                if (strength < ConstraintStrength.Required) {
                    var error = new ConstraintError();
                    tag.other = error;
                    row.insertSymbol(error, -coefficient);
                    objective.insertSymbol(error, strength);
                }
            }
            else {
                if (strength < ConstraintStrength.Required) {
                    var eplus = new ConstraintError();
                    var eminus = new ConstraintError();
                    tag.marker = eplus;
                    tag.other = eminus;
                    row.insertSymbol(eplus, -1);
                    row.insertSymbol(eminus, 1);
                    objective.insertSymbol(eplus, strength);
                    objective.insertSymbol(eminus, strength);
                }
                else {
                    var dummy = new ConstraintDummy();
                    tag.marker = dummy;
                    row.insertSymbol(dummy);
                }
            }
            if (row._constant < 0) {
                row.negate();
            }
            return { row: row, tag: tag };
        };
        ConstraintSolver.prototype.chooseSubject = function (row, tag) {
            for (var i = 0, n = row._cells.size; i < n; i += 1) {
                var symbol = row._cells.getEntry(i)[0];
                if (symbol.isExternal()) {
                    return symbol;
                }
            }
            if (tag.marker instanceof ConstraintSlack || tag.marker instanceof ConstraintError) {
                if (row.coefficientFor(tag.marker) < 0) {
                    return tag.marker;
                }
            }
            if (tag.other instanceof ConstraintSlack || tag.other instanceof ConstraintError) {
                if (row.coefficientFor(tag.other) < 0) {
                    return tag.other;
                }
            }
            return ConstraintSymbol.Invalid;
        };
        ConstraintSolver.prototype.addWithArtificialVariable = function (row) {
            var artificial = new ConstraintSlack();
            this._rows.set(artificial, row.clone());
            this._artificial = row.clone();
            this.optimize(this._artificial);
            var success = Math.abs(this._artificial._constant) < EPSILON$1;
            this._artificial = null;
            var basic = this._rows.remove(artificial);
            if (basic !== void 0) {
                if (basic.isConstant()) {
                    return success;
                }
                var entering = this.anyPivotableSymbol(basic);
                if (entering.isInvalid()) {
                    return false;
                }
                basic.solveForEx(artificial, entering);
                this.substitute(entering, basic);
                this._rows.set(entering, basic);
            }
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                this._rows.getEntry(i)[1].removeSymbol(artificial);
            }
            this._objective.removeSymbol(artificial);
            return success;
        };
        ConstraintSolver.prototype.substitute = function (symbol, row) {
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                var _a = this._rows.getEntry(i), key = _a[0], value = _a[1];
                value.substitute(symbol, row);
                if (value._constant < 0 && !key.isExternal()) {
                    this._infeasible.push(key);
                }
            }
            this._objective.substitute(symbol, row);
            if (this._artificial) {
                this._artificial.substitute(symbol, row);
            }
        };
        ConstraintSolver.prototype.optimize = function (objective) {
            do {
                var entering = this.getEnteringSymbol(objective);
                if (entering.isInvalid()) {
                    return;
                }
                var leaving = this.getLeavingSymbol(entering);
                if (leaving.isInvalid()) {
                    throw new Error("objective is unbounded");
                }
                var row = this._rows.remove(leaving);
                row.solveForEx(leaving, entering);
                this.substitute(entering, row);
                this._rows.set(entering, row);
            } while (true);
        };
        ConstraintSolver.prototype.dualOptimize = function () {
            var leaving;
            while (leaving = this._infeasible.pop()) {
                var row = this._rows.get(leaving);
                if (row !== void 0 && row._constant < 0) {
                    var entering = this.getDualEnteringSymbol(row);
                    if (entering.isInvalid()) {
                        throw new Error("dual optimize failed");
                    }
                    this._rows.remove(leaving);
                    row.solveForEx(leaving, entering);
                    this.substitute(entering, row);
                    this._rows.set(entering, row);
                }
            }
        };
        ConstraintSolver.prototype.getEnteringSymbol = function (objective) {
            for (var i = 0, n = objective._cells.size; i < n; i += 1) {
                var _a = objective._cells.getEntry(i), symbol = _a[0], value = _a[1];
                if (value < 0 && !symbol.isDummy()) {
                    return symbol;
                }
            }
            return ConstraintSymbol.Invalid;
        };
        ConstraintSolver.prototype.getDualEnteringSymbol = function (row) {
            var ratio = Number.MAX_VALUE;
            var entering = ConstraintSymbol.Invalid;
            for (var i = 0, n = row._cells.size; i < n; i += 1) {
                var _a = row._cells.getEntry(i), symbol = _a[0], value = _a[1];
                if (value > 0 && !symbol.isDummy()) {
                    var coefficient = this._objective.coefficientFor(symbol);
                    var coratio = coefficient / value;
                    if (coratio < ratio) {
                        ratio = coratio;
                        entering = symbol;
                    }
                }
            }
            return entering;
        };
        ConstraintSolver.prototype.getLeavingSymbol = function (entering) {
            var ratio = Number.MAX_VALUE;
            var found = ConstraintSymbol.Invalid;
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                var _a = this._rows.getEntry(i), symbol = _a[0], row = _a[1];
                if (!symbol.isExternal()) {
                    var coefficient = row.coefficientFor(entering);
                    if (coefficient < 0) {
                        var coratio = -row._constant / coefficient;
                        if (coratio < ratio) {
                            ratio = coratio;
                            found = symbol;
                        }
                    }
                }
            }
            return found;
        };
        ConstraintSolver.prototype.getMarkerLeavingSymbol = function (marker) {
            var r1 = Number.MAX_VALUE;
            var r2 = Number.MAX_VALUE;
            var first = ConstraintSymbol.Invalid;
            var second = ConstraintSymbol.Invalid;
            var third = ConstraintSymbol.Invalid;
            for (var i = 0, n = this._rows.size; i < n; i += 1) {
                var _a = this._rows.getEntry(i), symbol = _a[0], row = _a[1];
                var coefficient = row.coefficientFor(marker);
                if (coefficient === 0) {
                    continue;
                }
                if (symbol.isExternal()) {
                    third = symbol;
                }
                else if (coefficient < 0) {
                    var ratio = -row._constant / coefficient;
                    if (ratio < r1) {
                        r1 = ratio;
                        first = symbol;
                    }
                }
                else {
                    var ratio = row._constant / coefficient;
                    if (ratio < r2) {
                        r2 = ratio;
                        second = symbol;
                    }
                }
            }
            if (!first.isInvalid()) {
                return first;
            }
            else if (!second.isInvalid()) {
                return second;
            }
            else {
                return third;
            }
        };
        ConstraintSolver.prototype.removeConstraintEffects = function (constraint, tag) {
            if (tag.marker instanceof ConstraintError) {
                this.removeMarkerEffects(tag.marker, constraint.strength);
            }
            if (tag.other instanceof ConstraintError) {
                this.removeMarkerEffects(tag.other, constraint.strength);
            }
        };
        ConstraintSolver.prototype.removeMarkerEffects = function (marker, strength) {
            var row = this._rows.get(marker);
            if (row !== void 0) {
                this._objective.insertRow(row, -strength);
            }
            else {
                this._objective.insertSymbol(marker, -strength);
            }
        };
        ConstraintSolver.prototype.anyPivotableSymbol = function (row) {
            for (var i = 0, n = row._cells.size; i < n; i += 1) {
                var symbol = row._cells.getEntry(i)[0];
                if (symbol instanceof ConstraintSlack || symbol instanceof ConstraintError) {
                    return symbol;
                }
            }
            return ConstraintSymbol.Invalid;
        };
        return ConstraintSolver;
    }());

    var View = (function () {
        function View() {
        }
        View.prototype.willSetKey = function (key) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillSetKey) {
                    viewObserver.viewWillSetKey(key, this);
                }
            });
        };
        View.prototype.onSetKey = function (key) {
        };
        View.prototype.didSetKey = function (key) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetKey) {
                    viewObserver.viewDidSetKey(key, this);
                }
            });
        };
        View.prototype.willSetViewController = function (viewController) {
        };
        View.prototype.onSetViewController = function (viewController) {
        };
        View.prototype.didSetViewController = function (viewController) {
        };
        View.prototype.willAddViewObserver = function (viewObserver) {
        };
        View.prototype.onAddViewObserver = function (viewObserver) {
        };
        View.prototype.didAddViewObserver = function (viewObserver) {
        };
        View.prototype.willRemoveViewObserver = function (viewObserver) {
        };
        View.prototype.onRemoveViewObserver = function (viewObserver) {
        };
        View.prototype.didRemoveViewObserver = function (viewObserver) {
        };
        View.prototype.willObserve = function (callback) {
            var viewController = this.viewController;
            if (viewController) {
                callback.call(this, viewController);
            }
            var viewObservers = this.viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                callback.call(this, viewObservers[i]);
            }
        };
        View.prototype.didObserve = function (callback) {
            var viewObservers = this.viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                callback.call(this, viewObservers[i]);
            }
            var viewController = this.viewController;
            if (viewController) {
                callback.call(this, viewController);
            }
        };
        Object.defineProperty(View.prototype, "appView", {
            get: function () {
                var parentView = this.parentView;
                return parentView ? parentView.appView : null;
            },
            enumerable: true,
            configurable: true
        });
        View.prototype.willSetParentView = function (parentView) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillSetParentView) {
                    viewObserver.viewWillSetParentView(parentView, this);
                }
            });
        };
        View.prototype.onSetParentView = function (parentView) {
            if (parentView) {
                if (parentView.isMounted()) {
                    this.cascadeMount();
                }
            }
            else {
                this.cascadeUnmount();
            }
        };
        View.prototype.didSetParentView = function (parentView) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetParentView) {
                    viewObserver.viewDidSetParentView(parentView, this);
                }
            });
        };
        View.prototype.getChildView = function (key) {
            var childViews = this.childViews;
            for (var i = childViews.length - 1; i >= 0; i -= 1) {
                var childView = childViews[i];
                if (childView.key() === key) {
                    return childView;
                }
            }
            return null;
        };
        View.prototype.willInsertChildView = function (childView, targetView) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillInsertChildView) {
                    viewObserver.viewWillInsertChildView(childView, targetView, this);
                }
            });
        };
        View.prototype.onInsertChildView = function (childView, targetView) {
        };
        View.prototype.didInsertChildView = function (childView, targetView) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidInsertChildView) {
                    viewObserver.viewDidInsertChildView(childView, targetView, this);
                }
            });
        };
        View.prototype.willRemoveChildView = function (childView) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillRemoveChildView) {
                    viewObserver.viewWillRemoveChildView(childView, this);
                }
            });
        };
        View.prototype.onRemoveChildView = function (childView) {
        };
        View.prototype.didRemoveChildView = function (childView) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidRemoveChildView) {
                    viewObserver.viewDidRemoveChildView(childView, this);
                }
            });
        };
        View.prototype.isMounted = function () {
            var parentView = this.parentView;
            return parentView ? parentView.isMounted() : false;
        };
        View.prototype.cascadeMount = function () {
            this.willMount();
            this.onMount();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeMount();
            }
            this.didMount();
        };
        View.prototype.willMount = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillMount) {
                    viewObserver.viewWillMount(this);
                }
            });
        };
        View.prototype.onMount = function () {
        };
        View.prototype.didMount = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidMount) {
                    viewObserver.viewDidMount(this);
                }
            });
        };
        View.prototype.cascadeUnmount = function () {
            this.willMount();
            this.onUnmount();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeUnmount();
            }
            this.didMount();
        };
        View.prototype.willUnmount = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillUnmount) {
                    viewObserver.viewWillUnmount(this);
                }
            });
        };
        View.prototype.onUnmount = function () {
        };
        View.prototype.didUnmount = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidUnmount) {
                    viewObserver.viewDidUnmount(this);
                }
            });
        };
        View.prototype.cascadeResize = function () {
            this.willResize();
            this.onResize();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeResize();
            }
            this.didResize();
        };
        View.prototype.willResize = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillResize) {
                    viewObserver.viewWillResize(this);
                }
            });
        };
        View.prototype.onResize = function () {
        };
        View.prototype.didResize = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidResize) {
                    viewObserver.viewDidResize(this);
                }
            });
        };
        View.prototype.cascadeLayout = function () {
            this.willLayout();
            this.onLayout();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeLayout();
            }
            this.didLayout();
        };
        View.prototype.willLayout = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillLayout) {
                    viewObserver.viewWillLayout(this);
                }
            });
        };
        View.prototype.onLayout = function () {
        };
        View.prototype.didLayout = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidLayout) {
                    viewObserver.viewDidLayout(this);
                }
            });
        };
        View.prototype.cascadeScroll = function () {
            this.willScroll();
            this.onScroll();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeScroll();
            }
            this.didScroll();
        };
        View.prototype.willScroll = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillScroll) {
                    viewObserver.viewWillScroll(this);
                }
            });
        };
        View.prototype.onScroll = function () {
        };
        View.prototype.didScroll = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidScroll) {
                    viewObserver.viewDidScroll(this);
                }
            });
        };
        Object.defineProperty(View.prototype, "pageTransform", {
            get: function () {
                var parentView = this.parentView;
                if (parentView) {
                    return parentView.pageTransform.transform(this.parentTransform);
                }
                else {
                    return Transform.identity();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "pageBounds", {
            get: function () {
                var clientBounds = this.clientBounds;
                var clientTransform = this.clientTransform;
                return clientBounds.transform(clientTransform);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "popoverBounds", {
            get: function () {
                return this.pageBounds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "clientTransform", {
            get: function () {
                var clientTransform;
                var scrollX = window.pageXOffset;
                var scrollY = window.pageYOffset;
                if (scrollX !== 0 || scrollY !== 0) {
                    clientTransform = Transform.translate(scrollX, scrollY);
                }
                else {
                    clientTransform = Transform.identity();
                }
                var pageTransform = this.pageTransform;
                return clientTransform.transform(pageTransform);
            },
            enumerable: true,
            configurable: true
        });
        View.prototype.isVisible = function () {
            var bounds = this.clientBounds;
            var windowWidth = document.documentElement.clientWidth;
            var windowHeight = document.documentElement.clientHeight;
            return (bounds.top <= 0 && 0 < bounds.bottom || 0 <= bounds.top && bounds.top < windowHeight)
                && (bounds.left <= 0 && 0 < bounds.right || 0 <= bounds.left && bounds.left < windowWidth);
        };
        View.fromNode = function (node) {
            if (node.view instanceof View) {
                return node.view;
            }
            else if (node instanceof Element) {
                if (node instanceof HTMLElement) {
                    if (node instanceof HTMLCanvasElement) {
                        return new View.Canvas(node);
                    }
                    else {
                        return new View.Html(node);
                    }
                }
                else if (node instanceof SVGElement) {
                    return new View.Svg(node);
                }
                else {
                    return new View.Element(node);
                }
            }
            else if (node instanceof Text) {
                return new View.Text(node);
            }
            else {
                return new View.Node(node);
            }
        };
        View.create = function (tag, key) {
            if (typeof tag === "string") {
                if (tag === "svg") {
                    return new View.Svg(document.createElementNS(View.Svg.NS, tag));
                }
                else if (tag === "canvas") {
                    return new View.Canvas(document.createElement(tag));
                }
                else {
                    return View.fromNode(document.createElement(tag));
                }
            }
            else if (typeof tag === "function") {
                var ns = tag.NS;
                var view = void 0;
                if (ns === void 0) {
                    view = new tag(document.createElement(tag.tag));
                }
                else {
                    view = new tag(document.createElementNS(ns, tag.tag));
                }
                if (key !== void 0) {
                    view = view.key(key);
                }
                return view;
            }
            throw new TypeError("" + tag);
        };
        View.decorateMemberAnimator = function (MemberAnimator, inherit, target, key) {
            if (inherit === "inherit") {
                inherit = key;
            }
            Object.defineProperty(target, key, {
                get: function () {
                    var animator = new MemberAnimator(this, void 0, void 0, inherit);
                    Object.defineProperty(animator, "name", {
                        value: key,
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(this, key, {
                        value: animator,
                        configurable: true,
                        enumerable: true,
                    });
                    return animator;
                },
                configurable: true,
                enumerable: true,
            });
        };
        View.decorateLayoutAnchor = function (LayoutAnchor, value, strength, target, key) {
            Object.defineProperty(target, key, {
                get: function () {
                    var anchor = new LayoutAnchor(this, key, value, strength);
                    Object.defineProperty(this, key, {
                        value: anchor,
                        configurable: true,
                        enumerable: true,
                    });
                    return anchor;
                },
                configurable: true,
                enumerable: true,
            });
        };
        return View;
    }());

    var MemberAnimator = (function (_super) {
        var MemberAnimator = function (view, value, transition, inherit) {
            if (this instanceof MemberAnimator) {
                if (transition === void 0) {
                    transition = null;
                }
                var _this = _super.call(this, value, transition) || this;
                _this._view = view;
                _this._inherit = inherit !== void 0 ? inherit : null;
                return _this;
            }
            else {
                var type = view;
                inherit = value;
                if (type === Object) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Object, inherit);
                }
                else if (type === String) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.String, inherit);
                }
                else if (type === Boolean) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Boolean, inherit);
                }
                else if (type === Number) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Number, inherit);
                }
                else if (type === Angle) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Angle, inherit);
                }
                else if (type === Length) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Length, inherit);
                }
                else if (type === Color) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Color, inherit);
                }
                else if (type === Font) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Font, inherit);
                }
                else if (type === Transform) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Transform, inherit);
                }
                else if (FromAny.is(type)) {
                    return View.decorateMemberAnimator.bind(void 0, MemberAnimator.Any.bind(void 0, type), inherit);
                }
                throw new TypeError("" + type);
            }
        };
        __extends(MemberAnimator, _super);
        Object.defineProperty(MemberAnimator.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(MemberAnimator.prototype, "inherit", {
            get: function () {
                return this._inherit;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(MemberAnimator.prototype, "dirty", {
            get: function () {
                return this._view.dirty;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(MemberAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var inherit = this._inherit;
                    if (inherit !== null) {
                        var view = this._view.parentView;
                        while (view) {
                            var animator = view[inherit];
                            if (animator instanceof TweenAnimator) {
                                value = animator.value;
                                break;
                            }
                            view = view.parentView;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(MemberAnimator.prototype, "state", {
            get: function () {
                var state = this._state;
                if (state === void 0) {
                    var inherit = this._inherit;
                    if (inherit !== null) {
                        var view = this._view.parentView;
                        while (view) {
                            var animator = view[inherit];
                            if (animator instanceof TweenAnimator) {
                                state = animator.state;
                                break;
                            }
                            view = view.parentView;
                        }
                    }
                }
                return state;
            },
            enumerable: true,
            configurable: true,
        });
        MemberAnimator.prototype.setDirty = function (dirty) {
            if (dirty) {
                this._view.setDirty(dirty);
            }
        };
        MemberAnimator.prototype.animate = function () {
            if (!this._disabled) {
                this._view.animate();
            }
        };
        MemberAnimator.prototype.cancel = function () {
        };
        MemberAnimator.prototype.update = function (newValue, oldValue) {
            if (!Objects.equal(oldValue, newValue)) {
                this.setDirty(true);
            }
        };
        MemberAnimator.prototype.delete = function () {
        };
        return MemberAnimator;
    }(TweenAnimator));

    var AnyMemberAnimator = (function (_super) {
        var AnyMemberAnimator = function (type, view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = _this._type.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            _this._type = type;
            return _this;
        };
        __extends(AnyMemberAnimator, _super);
        Object.defineProperty(AnyMemberAnimator.prototype, "type", {
            get: function () {
                return this._type;
            },
            enumerable: true,
            configurable: true,
        });
        return AnyMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Any = AnyMemberAnimator;

    var ObjectMemberAnimator = (function (_super) {
        var ObjectMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(ObjectMemberAnimator, _super);
        return ObjectMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Object = ObjectMemberAnimator;

    var StringMemberAnimator = (function (_super) {
        var StringMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(StringMemberAnimator, _super);
        return StringMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.String = StringMemberAnimator;

    var BooleanMemberAnimator = (function (_super) {
        var BooleanMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string") {
                        value = value ? true : false;
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(BooleanMemberAnimator, _super);
        return BooleanMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Boolean = BooleanMemberAnimator;

    var NumberMemberAnimator = (function (_super) {
        var NumberMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string") {
                        value = +value;
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(NumberMemberAnimator, _super);
        return NumberMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Number = NumberMemberAnimator;

    var AngleMemberAnimator = (function (_super) {
        var AngleMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Angle.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(AngleMemberAnimator, _super);
        return AngleMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Angle = AngleMemberAnimator;

    var LengthMemberAnimator = (function (_super) {
        var LengthMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Length.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(LengthMemberAnimator, _super);
        return LengthMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Length = LengthMemberAnimator;

    var ColorMemberAnimator = (function (_super) {
        var ColorMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Color.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(ColorMemberAnimator, _super);
        return ColorMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Color = ColorMemberAnimator;

    var FontMemberAnimator = (function (_super) {
        var FontMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Font.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(FontMemberAnimator, _super);
        return FontMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Font = FontMemberAnimator;

    var TransformMemberAnimator = (function (_super) {
        var TransformMemberAnimator = function (view, value, transition, inherit) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Transform.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, value, transition, inherit) || _this;
            return _this;
        };
        __extends(TransformMemberAnimator, _super);
        return TransformMemberAnimator;
    }(MemberAnimator));
    MemberAnimator.Transform = TransformMemberAnimator;

    var NodeView = (function (_super) {
        __extends(NodeView, _super);
        function NodeView(node, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this) || this;
            _this.onAnimationFrame = _this.onAnimationFrame.bind(_this);
            _this._node = node;
            _this._node.view = _this;
            _this._key = key;
            _this._viewController = null;
            _this._viewObservers = [];
            _this._dirty = false;
            _this._animationFrame = 0;
            _this.initNode(_this._node);
            return _this;
        }
        Object.defineProperty(NodeView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.initNode = function (node) {
        };
        NodeView.prototype.key = function (key) {
            if (key === void 0) {
                return this._key;
            }
            else {
                this.willSetKey(key);
                this._key = key;
                this.onSetKey(key);
                this.didSetKey(key);
                return this;
            }
        };
        Object.defineProperty(NodeView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.setViewController = function (viewController) {
            if (this._viewController !== viewController) {
                this.willSetViewController(viewController);
                if (this._viewController && this._viewController.setView) {
                    this._viewController.setView(null);
                }
                this._viewController = viewController;
                if (this._viewController && this._viewController.setView) {
                    this._viewController.setView(this);
                }
                this.onSetViewController(viewController);
                this.didSetViewController(viewController);
            }
        };
        Object.defineProperty(NodeView.prototype, "viewObservers", {
            get: function () {
                return this._viewObservers;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.addViewObserver = function (viewObserver) {
            var viewObservers = this._viewObservers;
            var index = viewObservers.indexOf(viewObserver);
            if (index < 0) {
                this.willAddViewObserver(viewObserver);
                viewObservers.push(viewObserver);
                this.onAddViewObserver(viewObserver);
                this.didAddViewObserver(viewObserver);
            }
        };
        NodeView.prototype.removeViewObserver = function (viewObserver) {
            var viewObservers = this._viewObservers;
            var index = viewObservers.indexOf(viewObserver);
            if (index >= 0) {
                this.willRemoveViewObserver(viewObserver);
                viewObservers.splice(index, 1);
                this.onRemoveViewObserver(viewObserver);
                this.didRemoveViewObserver(viewObserver);
            }
        };
        Object.defineProperty(NodeView.prototype, "parentView", {
            get: function () {
                var parentNode = this._node.parentNode;
                if (parentNode) {
                    var parentView = parentNode.view;
                    if (parentView instanceof View) {
                        return parentView;
                    }
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.setParentView = function (parentView) {
            this.willSetParentView(parentView);
            this.onSetParentView(parentView);
            this.didSetParentView(parentView);
        };
        Object.defineProperty(NodeView.prototype, "childViews", {
            get: function () {
                var childNodes = this._node.childNodes;
                var childViews = [];
                for (var i = 0, n = childNodes.length; i < n; i += 1) {
                    var childView = childNodes[i].view;
                    if (childView) {
                        childViews.push(childView);
                    }
                }
                return childViews;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.getChildView = function (key) {
            var childNodes = this._node.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i -= 1) {
                var childView = childNodes[i].view;
                if (childView && childView.key() === key) {
                    return childView;
                }
            }
            return null;
        };
        NodeView.prototype.setChildView = function (key, newChildView) {
            if (!(newChildView instanceof NodeView)) {
                throw new TypeError("" + newChildView);
            }
            var oldChildView = null;
            var targetNode = null;
            var childNodes = this._node.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i -= 1) {
                var childView = childNodes[i].view;
                if (childView && childView.key() === key) {
                    oldChildView = childView;
                    targetNode = childNodes[i + 1] || null;
                    this.removeChildView(childView);
                    break;
                }
            }
            if (newChildView) {
                newChildView.key(key);
                this.insertChild(newChildView, targetNode);
            }
            return oldChildView;
        };
        NodeView.prototype.appendChild = function (child) {
            if (child instanceof View) {
                this.appendChildView(child);
            }
            else if (child instanceof Node) {
                this.appendChildNode(child);
            }
            else {
                throw new TypeError("" + child);
            }
        };
        NodeView.prototype.appendChildView = function (childView) {
            if (!(childView instanceof NodeView)) {
                throw new TypeError("" + childView);
            }
            var childNode = childView._node;
            this.willInsertChildView(childView, null);
            this.willInsertChildNode(childNode, null);
            this._node.appendChild(childNode);
            childView.setParentView(this);
            this.onInsertChildNode(childNode, null);
            this.onInsertChildView(childView, null);
            this.didInsertChildNode(childNode, null);
            this.didInsertChildView(childView, null);
        };
        NodeView.prototype.appendChildNode = function (childNode) {
            var childView = childNode.view;
            if (childView !== void 0) {
                this.willInsertChildView(childView, null);
            }
            this.willInsertChildNode(childNode, null);
            this._node.appendChild(childNode);
            if (childView !== void 0) {
                childView.setParentView(this);
            }
            this.onInsertChildNode(childNode, null);
            if (childView !== void 0) {
                this.onInsertChildView(childView, null);
            }
            this.didInsertChildNode(childNode, null);
            if (childView !== void 0) {
                this.didInsertChildView(childView, null);
            }
        };
        NodeView.prototype.prependChild = function (child) {
            if (child instanceof View) {
                this.prependChildView(child);
            }
            else if (child instanceof Node) {
                this.prependChildNode(child);
            }
            else {
                throw new TypeError("" + child);
            }
        };
        NodeView.prototype.prependChildView = function (childView) {
            if (!(childView instanceof NodeView)) {
                throw new TypeError("" + childView);
            }
            var childNode = childView._node;
            var targetNode = this._node.firstChild;
            var targetView = targetNode ? targetNode.view : null;
            this.willInsertChildView(childView, targetView);
            this.willInsertChildNode(childNode, targetNode);
            this._node.insertBefore(childNode, targetNode);
            childView.setParentView(this);
            this.onInsertChildNode(childNode, targetNode);
            this.onInsertChildView(childView, targetView);
            this.didInsertChildNode(childNode, targetNode);
            this.didInsertChildView(childView, targetView);
        };
        NodeView.prototype.prependChildNode = function (childNode) {
            var childView = childNode.view;
            var targetNode = this._node.firstChild;
            var targetView = targetNode ? targetNode.view : null;
            if (childView !== void 0) {
                this.willInsertChildView(childView, targetView);
            }
            this.willInsertChildNode(childNode, targetNode);
            this._node.insertBefore(childNode, targetNode);
            if (childView !== void 0) {
                childView.setParentView(this);
            }
            this.onInsertChildNode(childNode, targetNode);
            if (childView !== void 0) {
                this.onInsertChildView(childView, targetView);
            }
            this.didInsertChildNode(childNode, targetNode);
            if (childView !== void 0) {
                this.didInsertChildView(childView, targetView);
            }
        };
        NodeView.prototype.insertChild = function (child, target) {
            if (child instanceof NodeView) {
                if (target instanceof View) {
                    this.insertChildView(child, target);
                }
                else if (target instanceof Node || target === null) {
                    this.insertChildNode(child._node, target);
                }
                else {
                    throw new TypeError("" + target);
                }
            }
            else if (child instanceof Node) {
                if (target instanceof NodeView) {
                    this.insertChildNode(child, target._node);
                }
                else if (target instanceof Node || target === null) {
                    this.insertChildNode(child, target);
                }
                else {
                    throw new TypeError("" + target);
                }
            }
            else {
                throw new TypeError("" + child);
            }
        };
        NodeView.prototype.insertChildView = function (childView, targetView) {
            if (!(childView instanceof NodeView)) {
                throw new TypeError("" + childView);
            }
            if (targetView !== null && !(targetView instanceof NodeView)) {
                throw new TypeError("" + targetView);
            }
            var childNode = childView._node;
            var targetNode = targetView ? targetView._node : null;
            this.willInsertChildView(childView, targetView);
            this.willInsertChildNode(childNode, targetNode);
            this._node.insertBefore(childNode, targetNode);
            childView.setParentView(this);
            this.onInsertChildNode(childNode, targetNode);
            this.onInsertChildView(childView, targetView);
            this.didInsertChildNode(childNode, targetNode);
            this.didInsertChildView(childView, targetView);
        };
        NodeView.prototype.insertChildNode = function (childNode, targetNode) {
            var childView = childNode.view;
            var targetView = targetNode ? targetNode.view : null;
            if (childView !== void 0) {
                this.willInsertChildView(childView, targetView);
            }
            this.willInsertChildNode(childNode, targetNode);
            this._node.insertBefore(childNode, targetNode);
            if (childView !== void 0) {
                childView.setParentView(this);
            }
            this.onInsertChildNode(childNode, targetNode);
            if (childView !== void 0) {
                this.onInsertChildView(childView, targetView);
            }
            this.didInsertChildNode(childNode, targetNode);
            if (childView !== void 0) {
                this.didInsertChildView(childView, targetView);
            }
        };
        NodeView.prototype.injectChildView = function (childView, targetView) {
            var childNode = childView._node;
            var targetNode = targetView ? targetView._node : null;
            this.willInsertChildView(childView, targetView);
            this.willInsertChildNode(childNode, targetNode);
            childView.setParentView(this);
            this.onInsertChildNode(childNode, targetNode);
            this.onInsertChildView(childView, targetView);
            this.didInsertChildNode(childNode, targetNode);
            this.didInsertChildView(childView, targetView);
        };
        NodeView.prototype.willInsertChildNode = function (childNode, targetNode) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillInsertChildNode) {
                    viewObserver.viewWillInsertChildNode(childNode, targetNode, this);
                }
            });
        };
        NodeView.prototype.onInsertChildNode = function (childNode, targetNode) {
        };
        NodeView.prototype.didInsertChildNode = function (childNode, targetNode) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidInsertChildNode) {
                    viewObserver.viewDidInsertChildNode(childNode, targetNode, this);
                }
            });
        };
        NodeView.prototype.removeChild = function (child) {
            if (child instanceof View) {
                this.removeChildView(child);
            }
            else if (child instanceof Node) {
                this.removeChildNode(child);
            }
            else {
                throw new TypeError("" + child);
            }
        };
        NodeView.prototype.removeChildView = function (childView) {
            if (!(childView instanceof NodeView)) {
                throw new TypeError("" + childView);
            }
            var childNode = childView._node;
            this.willRemoveChildView(childView);
            this.willRemoveChildNode(childNode);
            childView.setParentView(null);
            this._node.removeChild(childNode);
            this.onRemoveChildNode(childNode);
            this.onRemoveChildView(childView);
            this.didRemoveChildNode(childNode);
            this.didRemoveChildView(childView);
        };
        NodeView.prototype.removeChildNode = function (childNode) {
            var childView = childNode.view;
            if (childView !== void 0) {
                this.willRemoveChildView(childView);
            }
            this.willRemoveChildNode(childNode);
            this._node.removeChild(childNode);
            if (childView !== void 0) {
                childView.setParentView(null);
            }
            this.onRemoveChildNode(childNode);
            if (childView !== void 0) {
                this.onRemoveChildView(childView);
            }
            this.didRemoveChildNode(childNode);
            if (childView !== void 0) {
                this.didRemoveChildView(childView);
            }
        };
        NodeView.prototype.removeAll = function () {
            do {
                var childNode = this._node.lastChild;
                if (childNode) {
                    var childView = childNode.view;
                    if (childView !== void 0) {
                        this.willRemoveChildView(childView);
                    }
                    this.willRemoveChildNode(childNode);
                    this._node.removeChild(childNode);
                    if (childView !== void 0) {
                        childView.setParentView(null);
                    }
                    this.onRemoveChildNode(childNode);
                    if (childView !== void 0) {
                        this.onRemoveChildView(childView);
                    }
                    this.didRemoveChildNode(childNode);
                    if (childView !== void 0) {
                        this.didRemoveChildView(childView);
                    }
                    continue;
                }
                break;
            } while (true);
        };
        NodeView.prototype.remove = function () {
            var node = this._node;
            var parentNode = node.parentNode;
            if (parentNode) {
                var parentView = parentNode.view;
                if (parentView) {
                    parentView.removeChildView(this);
                }
                else {
                    parentNode.removeChild(node);
                    this.setParentView(null);
                }
            }
        };
        NodeView.prototype.willRemoveChildNode = function (childNode) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillRemoveChildNode) {
                    viewObserver.viewWillRemoveChildNode(childNode, this);
                }
            });
        };
        NodeView.prototype.onRemoveChildNode = function (childNode) {
        };
        NodeView.prototype.didRemoveChildNode = function (childNode) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidRemoveChildNode) {
                    viewObserver.viewDidRemoveChildNode(childNode, this);
                }
            });
        };
        NodeView.prototype.text = function (value) {
            if (value === void 0) {
                return this._node.textContent;
            }
            else {
                this._node.textContent = value;
                return this;
            }
        };
        NodeView.prototype.isMounted = function () {
            var node = this._node;
            do {
                var parentNode = node.parentNode;
                if (parentNode) {
                    if (parentNode.nodeType === Node.DOCUMENT_NODE) {
                        return true;
                    }
                    node = parentNode;
                    continue;
                }
                break;
            } while (true);
            return false;
        };
        NodeView.prototype.cascadeMount = function () {
            this.willMount();
            this.onMount();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeMount();
                }
            }
            this.didMount();
        };
        NodeView.prototype.cascadeUnmount = function () {
            this.willUnmount();
            this.onUnmount();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeUnmount();
                }
            }
            this.didUnmount();
        };
        NodeView.prototype.cascadeResize = function () {
            this.willResize();
            this.onResize();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeResize();
                }
            }
            this.didResize();
        };
        NodeView.prototype.cascadeLayout = function () {
            this.willLayout();
            this.onLayout();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeLayout();
                }
            }
            this.didLayout();
        };
        NodeView.prototype.cascadeScroll = function () {
            this.willScroll();
            this.onScroll();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeScroll();
                }
            }
            this.didScroll();
        };
        NodeView.prototype.animate = function (force) {
            if (force === void 0) { force = false; }
            if (!this._animationFrame && !force) {
                this._animationFrame = requestAnimationFrame(this.onAnimationFrame);
            }
            else if (force) {
                if (this._animationFrame) {
                    cancelAnimationFrame(this._animationFrame);
                }
                this.onAnimationFrame(performance.now());
            }
        };
        NodeView.prototype.onAnimationFrame = function (timestamp) {
            this._animationFrame = 0;
            this.cascadeAnimate(timestamp);
        };
        NodeView.prototype.cascadeAnimate = function (frame) {
            this.willAnimate(frame);
            this.onAnimate(frame);
            this.didAnimate(frame);
        };
        NodeView.prototype.willAnimate = function (frame) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillAnimate) {
                    viewObserver.viewWillAnimate(frame, this);
                }
            });
        };
        NodeView.prototype.onAnimate = function (frame) {
        };
        NodeView.prototype.didAnimate = function (frame) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidAnimate) {
                    viewObserver.viewDidAnimate(frame, this);
                }
            });
            this.setDirty(false);
        };
        Object.defineProperty(NodeView.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.setDirty = function (dirty) {
            if (dirty && !this._dirty) {
                this._dirty = true;
                this.didSetDirty(true);
            }
            else if (!dirty && this._dirty) {
                this._dirty = false;
                this.didSetDirty(false);
            }
        };
        NodeView.prototype.didSetDirty = function (dirty) {
            if (dirty) {
                this.animate();
            }
        };
        Object.defineProperty(NodeView.prototype, "parentTransform", {
            get: function () {
                return Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeView.prototype, "clientBounds", {
            get: function () {
                var range = document.createRange();
                range.selectNode(this._node);
                var bounds = range.getBoundingClientRect();
                range.detach();
                return new BoxR2(bounds.left, bounds.top, bounds.right, bounds.bottom);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeView.prototype, "pageBounds", {
            get: function () {
                var range = document.createRange();
                range.selectNode(this._node);
                var bounds = range.getBoundingClientRect();
                range.detach();
                var scrollX = window.pageXOffset;
                var scrollY = window.pageYOffset;
                return new BoxR2(bounds.left + scrollX, bounds.top + scrollY, bounds.right + scrollX, bounds.bottom + scrollY);
            },
            enumerable: true,
            configurable: true
        });
        NodeView.prototype.dispatchEvent = function (event) {
            return this._node.dispatchEvent(event);
        };
        NodeView.prototype.on = function (type, listener, options) {
            this._node.addEventListener(type, listener, options);
            return this;
        };
        NodeView.prototype.off = function (type, listener, options) {
            this._node.removeEventListener(type, listener, options);
            return this;
        };
        return NodeView;
    }(View));
    View.Node = NodeView;

    var ElementView = (function (_super) {
        __extends(ElementView, _super);
        function ElementView(node, key) {
            if (key === void 0) { key = null; }
            return _super.call(this, node, key) || this;
        }
        Object.defineProperty(ElementView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        ElementView.prototype.initNode = function (node) {
        };
        Object.defineProperty(ElementView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        ElementView.prototype.getAttribute = function (name) {
            return this._node.getAttribute(name);
        };
        ElementView.prototype.setAttribute = function (name, value) {
            this.willSetAttribute(name, value);
            if (value !== null) {
                this._node.setAttribute(name, AttributeString(value));
            }
            else {
                this._node.removeAttribute(name);
            }
            this.onSetAttribute(name, value);
            this.didSetAttribute(name, value);
            return this;
        };
        ElementView.prototype.willSetAttribute = function (name, value) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillSetAttribute) {
                    viewObserver.viewWillSetAttribute(name, value, this);
                }
            });
        };
        ElementView.prototype.onSetAttribute = function (name, value) {
        };
        ElementView.prototype.didSetAttribute = function (name, value) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetAttribute) {
                    viewObserver.viewDidSetAttribute(name, value, this);
                }
            });
        };
        ElementView.prototype.setStyle = function (name, value, priority) {
            this.willSetStyle(name, value, priority);
            this._node.style.setProperty(name, StyleString(value), priority);
            this.onSetStyle(name, value, priority);
            this.didSetStyle(name, value, priority);
            return this;
        };
        ElementView.prototype.willSetStyle = function (name, value, priority) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillSetStyle) {
                    viewObserver.viewWillSetStyle(name, value, priority, this);
                }
            });
        };
        ElementView.prototype.onSetStyle = function (name, value, priority) {
        };
        ElementView.prototype.didSetStyle = function (name, value, priority) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetStyle) {
                    viewObserver.viewDidSetStyle(name, value, priority, this);
                }
            });
        };
        ElementView.prototype.id = function (value) {
            if (value === void 0) {
                return this.getAttribute("id");
            }
            else {
                this.setAttribute("id", value);
                return this;
            }
        };
        ElementView.prototype.className = function (value) {
            if (value === void 0) {
                return this.getAttribute("class");
            }
            else {
                this.setAttribute("class", value);
                return this;
            }
        };
        Object.defineProperty(ElementView.prototype, "classList", {
            get: function () {
                return this._node.classList;
            },
            enumerable: true,
            configurable: true
        });
        ElementView.prototype.hasClass = function (className) {
            return this._node.classList.contains(className);
        };
        ElementView.prototype.addClass = function () {
            var classNames = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                classNames[_i] = arguments[_i];
            }
            var classList = this._node.classList;
            for (var i = 0, n = classNames.length; i < n; i += 1) {
                classList.add(classNames[i]);
            }
            return this;
        };
        ElementView.prototype.removeClass = function () {
            var classNames = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                classNames[_i] = arguments[_i];
            }
            var classList = this._node.classList;
            for (var i = 0, n = classNames.length; i < n; i += 1) {
                classList.remove(classNames[i]);
            }
            return this;
        };
        ElementView.prototype.toggleClass = function (className, state) {
            var classList = this._node.classList;
            if (state === void 0) {
                classList.toggle(className);
            }
            else if (state === true) {
                classList.add(className);
            }
            else if (state === false) {
                classList.remove(className);
            }
            return this;
        };
        Object.defineProperty(ElementView.prototype, "clientBounds", {
            get: function () {
                var bounds = this._node.getBoundingClientRect();
                return new BoxR2(bounds.left, bounds.top, bounds.right, bounds.bottom);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementView.prototype, "pageBounds", {
            get: function () {
                var bounds = this._node.getBoundingClientRect();
                var scrollX = window.pageXOffset;
                var scrollY = window.pageYOffset;
                return new BoxR2(bounds.left + scrollX, bounds.top + scrollY, bounds.right + scrollX, bounds.bottom + scrollY);
            },
            enumerable: true,
            configurable: true
        });
        ElementView.prototype.on = function (type, listener, options) {
            this._node.addEventListener(type, listener, options);
            return this;
        };
        ElementView.prototype.off = function (type, listener, options) {
            this._node.removeEventListener(type, listener, options);
            return this;
        };
        ElementView.decorateAttributeAnimator = function (AttributeAnimator, name, target, key) {
            Object.defineProperty(target, key, {
                get: function () {
                    var animator = new AttributeAnimator(this, name);
                    Object.defineProperty(animator, "name", {
                        value: key,
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(this, key, {
                        value: animator,
                        configurable: true,
                        enumerable: true,
                    });
                    return animator;
                },
                configurable: true,
                enumerable: true,
            });
        };
        ElementView.decorateStyleAnimator = function (StyleAnimator, names, target, key) {
            Object.defineProperty(target, key, {
                get: function () {
                    var animator = new StyleAnimator(this, names);
                    Object.defineProperty(animator, "name", {
                        value: key,
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(this, key, {
                        value: animator,
                        configurable: true,
                        enumerable: true,
                    });
                    return animator;
                },
                configurable: true,
                enumerable: true,
            });
        };
        return ElementView;
    }(NodeView));
    View.Element = ElementView;

    var AttributeAnimator = (function (_super) {
        var AttributeAnimator = function (view, name, value, transition) {
            if (this instanceof AttributeAnimator) {
                if (transition === void 0) {
                    transition = null;
                }
                var _this = _super.call(this, value, transition) || this;
                _this._view = view;
                _this._name = name;
                return _this;
            }
            else {
                var type = name;
                name = view;
                if (type === String) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.String, name);
                }
                else if (type === Boolean) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.Boolean, name);
                }
                else if (type === Number) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.Number, name);
                }
                else if (type === Length) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.Length, name);
                }
                else if (type === Color) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.Color, name);
                }
                else if (type === Transform) {
                    return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.Transform, name);
                }
                else if (Array.isArray(type) && type.length === 2) {
                    var type0 = type[0], type1 = type[1];
                    if (type0 === Number && type1 === String) {
                        return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.NumberOrString, name);
                    }
                    else if (type0 === Length && type1 === String) {
                        return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.LengthOrString, name);
                    }
                    else if (type0 === Color && type1 === String) {
                        return ElementView.decorateAttributeAnimator.bind(void 0, AttributeAnimator.ColorOrString, name);
                    }
                }
                throw new TypeError("" + type);
            }
        };
        __extends(AttributeAnimator, _super);
        Object.defineProperty(AttributeAnimator.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(AttributeAnimator.prototype, "node", {
            get: function () {
                return this._view._node;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(AttributeAnimator.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(AttributeAnimator.prototype, "attributeValue", {
            get: function () {
                return this._view._node.getAttribute(this._name);
            },
            enumerable: true,
            configurable: true,
        });
        AttributeAnimator.prototype.update = function (newValue, oldValue) {
            if (!Objects.equal(oldValue, newValue)) {
                this.willUpdate(newValue, oldValue);
                this._view.setAttribute(this._name, newValue);
                this.didUpdate(newValue, oldValue);
            }
        };
        AttributeAnimator.prototype.willUpdate = function (newValue, oldValue) {
        };
        AttributeAnimator.prototype.didUpdate = function (newValue, oldValue) {
        };
        AttributeAnimator.prototype.delete = function () {
            this._view._node.removeAttribute(this._name);
        };
        return AttributeAnimator;
    }(TweenFrameAnimator));

    var StringAttributeAnimator = (function (_super) {
        var StringAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(StringAttributeAnimator, _super);
        Object.defineProperty(StringAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        value = attributeValue;
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return StringAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.String = StringAttributeAnimator;

    var BooleanAttributeAnimator = (function (_super) {
        var BooleanAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string") {
                        value = value ? true : false;
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(BooleanAttributeAnimator, _super);
        Object.defineProperty(BooleanAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        value = !!attributeValue;
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return BooleanAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.Boolean = BooleanAttributeAnimator;

    var NumberAttributeAnimator = (function (_super) {
        var NumberAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string") {
                        value = +value;
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(NumberAttributeAnimator, _super);
        Object.defineProperty(NumberAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        value = +attributeValue;
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return NumberAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.Number = NumberAttributeAnimator;

    var LengthAttributeAnimator = (function (_super) {
        var LengthAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Length.fromAny(value, _this._view._node);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(LengthAttributeAnimator, _super);
        Object.defineProperty(LengthAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        try {
                            value = Length.parse(attributeValue, this._view._node);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return LengthAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.Length = LengthAttributeAnimator;

    var ColorAttributeAnimator = (function (_super) {
        var ColorAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Color.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(ColorAttributeAnimator, _super);
        Object.defineProperty(ColorAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        try {
                            value = Color.parse(attributeValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return ColorAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.Color = ColorAttributeAnimator;

    var TransformAttributeAnimator = (function (_super) {
        var TransformAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Transform.fromAny(value);
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(TransformAttributeAnimator, _super);
        Object.defineProperty(TransformAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        try {
                            value = Transform.parse(attributeValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return TransformAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.Transform = TransformAttributeAnimator;

    var NumberOrStringAttributeAnimator = (function (_super) {
        var NumberOrStringAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string" && isFinite(+value)) {
                        value = +value;
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(NumberOrStringAttributeAnimator, _super);
        Object.defineProperty(NumberOrStringAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        if (isFinite(+attributeValue)) {
                            value = +attributeValue;
                        }
                        else {
                            value = attributeValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return NumberOrStringAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.NumberOrString = NumberOrStringAttributeAnimator;

    var LengthOrStringAttributeAnimator = (function (_super) {
        var LengthOrStringAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        if (typeof value === "string") {
                            try {
                                value = Length.parse(value, _this._view._node);
                            }
                            catch (swallow) {
                            }
                        }
                        else {
                            value = Length.fromAny(value, _this._view._node);
                        }
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(LengthOrStringAttributeAnimator, _super);
        Object.defineProperty(LengthOrStringAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        try {
                            value = Length.parse(attributeValue, this._view._node);
                        }
                        catch (swallow) {
                            value = attributeValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return LengthOrStringAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.LengthOrString = LengthOrStringAttributeAnimator;

    var ColorOrStringAttributeAnimator = (function (_super) {
        var ColorOrStringAttributeAnimator = function (view, name, value, transition) {
            var _this = function (value, tween) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        if (typeof value === "string") {
                            try {
                                value = Color.parse(value);
                            }
                            catch (swallow) {
                            }
                        }
                        else {
                            value = Color.fromAny(value);
                        }
                    }
                    _this.setState(value, tween);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, name, value, transition) || _this;
            return _this;
        };
        __extends(ColorOrStringAttributeAnimator, _super);
        Object.defineProperty(ColorOrStringAttributeAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var attributeValue = this.attributeValue;
                    if (attributeValue) {
                        try {
                            value = Color.parse(attributeValue);
                        }
                        catch (swallow) {
                            value = attributeValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return ColorOrStringAttributeAnimator;
    }(AttributeAnimator));
    AttributeAnimator.ColorOrString = ColorOrStringAttributeAnimator;

    var StyleAnimator = (function (_super) {
        var StyleAnimator = function (view, names, value, transition, priority) {
            if (this instanceof StyleAnimator) {
                if (transition === void 0) {
                    transition = null;
                }
                var _this = _super.call(this, value, transition) || this;
                _this._view = view;
                _this._names = names;
                _this._priority = priority;
                return _this;
            }
            else {
                var type = names;
                names = view;
                if (type === String) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.String, names);
                }
                else if (type === Number) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.Number, names);
                }
                else if (type === Length) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.Length, names);
                }
                else if (type === Color) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.Color, names);
                }
                else if (type === LineHeight) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.LineHeight, names);
                }
                else if (type === FontFamily) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.FontFamily, names);
                }
                else if (type === Transform) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.Transform, names);
                }
                else if (type === BoxShadow) {
                    return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.BoxShadow, names);
                }
                else if (Array.isArray(type) && type.length === 2) {
                    var type0 = type[0], type1 = type[1];
                    if (type0 === Number && type1 === String) {
                        return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.NumberOrString, names);
                    }
                    else if (type0 === Length && type1 === String) {
                        return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.LengthOrString, names);
                    }
                    else if (type0 === Color && type1 === String) {
                        return ElementView.decorateStyleAnimator.bind(void 0, StyleAnimator.ColorOrString, names);
                    }
                }
                throw new TypeError("" + type);
            }
        };
        __extends(StyleAnimator, _super);
        Object.defineProperty(StyleAnimator.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(StyleAnimator.prototype, "node", {
            get: function () {
                return this._view._node;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(StyleAnimator.prototype, "names", {
            get: function () {
                return this._names;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(StyleAnimator.prototype, "priority", {
            get: function () {
                return this._priority;
            },
            set: function (value) {
                this._priority = value;
            },
            enumerable: true,
            configurable: true,
        });
        Object.defineProperty(StyleAnimator.prototype, "propertyValue", {
            get: function () {
                var style = this._view._node.style;
                var names = this._names;
                if (typeof names === "string") {
                    return style.getPropertyValue(names);
                }
                else {
                    for (var i = 0, n = names.length; i < n; i += 1) {
                        var value = style.getPropertyValue(names[i]);
                        if (value) {
                            return value;
                        }
                    }
                    return "";
                }
            },
            enumerable: true,
            configurable: true,
        });
        StyleAnimator.prototype.setState = function (state, tween, priority) {
            if (typeof priority === "string") {
                this.priority = priority;
            }
            else if (priority === null) {
                this.priority = void 0;
            }
            _super.prototype.setState.call(this, state, tween);
        };
        StyleAnimator.prototype.update = function (newValue, oldValue) {
            if (!Objects.equal(oldValue, newValue)) {
                this.willUpdate(newValue, oldValue);
                var names = this._names;
                if (typeof names === "string") {
                    this._view.setStyle(names, newValue, this.priority);
                }
                else {
                    for (var i = 0, n = names.length; i < n; i += 1) {
                        this._view.setStyle(names[i], newValue, this.priority);
                    }
                }
                this.didUpdate(newValue, oldValue);
            }
        };
        StyleAnimator.prototype.willUpdate = function (newValue, oldValue) {
        };
        StyleAnimator.prototype.didUpdate = function (newValue, oldValue) {
        };
        StyleAnimator.prototype.delete = function () {
            var style = this._view._node.style;
            var names = this._names;
            if (typeof names === "string") {
                style.removeProperty(names);
            }
            else {
                for (var i = 0, n = names.length; i < n; i += 1) {
                    style.removeProperty(names[i]);
                }
            }
        };
        return StyleAnimator;
    }(TweenFrameAnimator));

    var StringStyleAnimator = (function (_super) {
        var StringStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(StringStyleAnimator, _super);
        Object.defineProperty(StringStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        value = propertyValue;
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return StringStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.String = StringStyleAnimator;

    var NumberStyleAnimator = (function (_super) {
        var NumberStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string") {
                        value = +value;
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(NumberStyleAnimator, _super);
        Object.defineProperty(NumberStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        value = +propertyValue;
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return NumberStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.Number = NumberStyleAnimator;

    var LengthStyleAnimator = (function (_super) {
        var LengthStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Length.fromAny(value, view._node);
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(LengthStyleAnimator, _super);
        Object.defineProperty(LengthStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Length.parse(propertyValue, this._view._node);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return LengthStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.Length = LengthStyleAnimator;

    var ColorStyleAnimator = (function (_super) {
        var ColorStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Color.fromAny(value);
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(ColorStyleAnimator, _super);
        Object.defineProperty(ColorStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Color.parse(propertyValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return ColorStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.Color = ColorStyleAnimator;

    var LineHeightStyleAnimator = (function (_super) {
        var LineHeightStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = LineHeight.fromAny(value);
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(LineHeightStyleAnimator, _super);
        Object.defineProperty(LineHeightStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = LineHeight.fromAny(propertyValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return LineHeightStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.LineHeight = LineHeightStyleAnimator;

    var FontFamilyStyleAnimator = (function (_super) {
        var FontFamilyStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Font.family(value).family();
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(FontFamilyStyleAnimator, _super);
        Object.defineProperty(FontFamilyStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Font.parse(propertyValue).family();
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return FontFamilyStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.FontFamily = FontFamilyStyleAnimator;

    var TransformStyleAnimator = (function (_super) {
        var TransformStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = Transform.fromAny(value);
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(TransformStyleAnimator, _super);
        Object.defineProperty(TransformStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Transform.parse(propertyValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return TransformStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.Transform = TransformStyleAnimator;

    var BoxShadowStyleAnimator = (function (_super) {
        var BoxShadowStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        value = BoxShadow.fromAny(value);
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(BoxShadowStyleAnimator, _super);
        Object.defineProperty(BoxShadowStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = BoxShadow.parse(propertyValue);
                        }
                        catch (swallow) {
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return BoxShadowStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.BoxShadow = BoxShadowStyleAnimator;

    var NumberOrStringStyleAnimator = (function (_super) {
        var NumberOrStringStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (typeof value === "string" && isFinite(+value)) {
                        value = +value;
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(NumberOrStringStyleAnimator, _super);
        Object.defineProperty(NumberOrStringStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        if (isFinite(+propertyValue)) {
                            value = +propertyValue;
                        }
                        else {
                            value = propertyValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return NumberOrStringStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.NumberOrString = NumberOrStringStyleAnimator;

    var LengthOrStringStyleAnimator = (function (_super) {
        var LengthOrStringStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        if (typeof value === "string") {
                            try {
                                value = Length.parse(value, _this._view._node);
                            }
                            catch (swallow) {
                            }
                        }
                        else {
                            value = Length.fromAny(value, _this._view._node);
                        }
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(LengthOrStringStyleAnimator, _super);
        Object.defineProperty(LengthOrStringStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Length.parse(propertyValue, this._view._node);
                        }
                        catch (swallow) {
                            value = propertyValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return LengthOrStringStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.LengthOrString = LengthOrStringStyleAnimator;

    var ColorOrStringStyleAnimator = (function (_super) {
        var ColorOrStringStyleAnimator = function (view, names, value, transition, priority) {
            var _this = function (value, tween, priority) {
                if (value === void 0) {
                    return _this.value;
                }
                else {
                    if (value !== null) {
                        if (typeof value === "string") {
                            try {
                                value = Color.parse(value);
                            }
                            catch (swallow) {
                            }
                        }
                        else {
                            value = Color.fromAny(value);
                        }
                    }
                    _this.setState(value, tween, priority);
                    return _this._view;
                }
            };
            _this.__proto__ = this;
            _this = _super.call(_this, view, names, value, transition, priority) || _this;
            return _this;
        };
        __extends(ColorOrStringStyleAnimator, _super);
        Object.defineProperty(ColorOrStringStyleAnimator.prototype, "value", {
            get: function () {
                var value = this._value;
                if (value === void 0) {
                    var propertyValue = this.propertyValue;
                    if (propertyValue) {
                        try {
                            value = Color.parse(propertyValue);
                        }
                        catch (swallow) {
                            value = propertyValue;
                        }
                    }
                }
                return value;
            },
            enumerable: true,
            configurable: true,
        });
        return ColorOrStringStyleAnimator;
    }(StyleAnimator));
    StyleAnimator.ColorOrString = ColorOrStringStyleAnimator;

    var LayoutManager = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return typeof view.throttleLayout === "function";
            }
            return false;
        },
    };

    var LayoutSolver = (function (_super) {
        __extends(LayoutSolver, _super);
        function LayoutSolver(manager) {
            var _this = _super.call(this) || this;
            _this._manager = manager;
            return _this;
        }
        Object.defineProperty(LayoutSolver.prototype, "manager", {
            get: function () {
                return this._manager;
            },
            enumerable: true,
            configurable: true
        });
        LayoutSolver.prototype.didAddConstraint = function (constraint) {
            this._manager.throttleLayout();
        };
        LayoutSolver.prototype.didRemoveConstraint = function (constraint) {
            this._manager.throttleLayout();
        };
        LayoutSolver.prototype.didAddVariable = function (variable) {
            this._manager.throttleLayout();
        };
        LayoutSolver.prototype.didRemoveVariable = function (variable) {
            this._manager.throttleLayout();
        };
        LayoutSolver.prototype.didSetVariableState = function (variable, state) {
            this._manager.throttleLayout();
        };
        return LayoutSolver;
    }(ConstraintSolver));

    var LayoutAnchor = (function (_super) {
        var LayoutAnchor = function (scope, name, value, strength) {
            if (this instanceof LayoutAnchor) {
                var _this_1 = function (state) {
                    if (state === void 0) {
                        return _this_1.state;
                    }
                    else {
                        _this_1.enabled(true).setState(state);
                        return _this_1._scope;
                    }
                };
                _this_1.__proto__ = this;
                _this_1 = _super.call(_this_1, scope, name, value, strength) || _this_1;
                _this_1._enabled = false;
                return _this_1;
            }
            else {
                strength = ConstraintStrength.fromAny(scope);
                return View.decorateLayoutAnchor.bind(void 0, LayoutAnchor, 0, strength);
            }
        };
        __extends(LayoutAnchor, _super);
        LayoutAnchor.prototype.enabled = function (enabled) {
            if (enabled === void 0) {
                return this._enabled;
            }
            else {
                this._enabled = enabled;
                return this;
            }
        };
        return LayoutAnchor;
    }(ConstrainBinding));

    var ViewController = (function () {
        function ViewController() {
            this._view = null;
        }
        Object.defineProperty(ViewController.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: true,
            configurable: true
        });
        ViewController.prototype.setView = function (view) {
            this.willSetView(view);
            this._view = view;
            this.onSetView(view);
            this.didSetView(view);
        };
        ViewController.prototype.willSetView = function (view) {
        };
        ViewController.prototype.onSetView = function (view) {
        };
        ViewController.prototype.didSetView = function (view) {
        };
        ViewController.prototype.key = function () {
            var view = this._view;
            return view ? view.key() : null;
        };
        ViewController.prototype.viewWillSetKey = function (key, view) {
        };
        ViewController.prototype.viewDidSetKey = function (key, view) {
        };
        Object.defineProperty(ViewController.prototype, "appView", {
            get: function () {
                var view = this._view;
                return view ? view.appView : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewController.prototype, "appViewController", {
            get: function () {
                var appView = this.appView;
                return appView ? appView.viewController : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewController.prototype, "parentView", {
            get: function () {
                var view = this._view;
                return view ? view.parentView : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewController.prototype, "parentViewController", {
            get: function () {
                var parentView = this.parentView;
                return parentView ? parentView.viewController : null;
            },
            enumerable: true,
            configurable: true
        });
        ViewController.prototype.viewWillSetParentView = function (parentView, view) {
        };
        ViewController.prototype.viewDidSetParentView = function (parentView, view) {
        };
        Object.defineProperty(ViewController.prototype, "childViews", {
            get: function () {
                var view = this._view;
                return view ? view.childViews : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewController.prototype, "childViewControllers", {
            get: function () {
                return this.childViews.map(function (view) {
                    return view.viewController;
                });
            },
            enumerable: true,
            configurable: true
        });
        ViewController.prototype.getChildView = function (key) {
            var view = this._view;
            return view ? view.getChildView(key) : null;
        };
        ViewController.prototype.getChildViewController = function (key) {
            var childView = this.getChildView(key);
            return childView ? childView.viewController : null;
        };
        ViewController.prototype.setChildView = function (key, newChildView) {
            var view = this._view;
            if (view) {
                return view.setChildView(key, newChildView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.setChildViewController = function (key, newChildViewController) {
            var newChildView = newChildViewController ? newChildViewController.view : null;
            if (newChildView !== void 0) {
                var oldChildView = this.setChildView(key, newChildView);
                return oldChildView ? oldChildView.viewController : null;
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.appendChildView = function (childView) {
            var view = this._view;
            if (view) {
                view.appendChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.appendChildViewController = function (childViewController) {
            var childView = childViewController.view;
            if (childView) {
                this.appendChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.prependChildView = function (childView) {
            var view = this._view;
            if (view) {
                view.prependChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.prependChildViewController = function (childViewController) {
            var childView = childViewController.view;
            if (childView) {
                this.prependChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.insertChildView = function (childView, targetView) {
            var view = this._view;
            if (view) {
                view.insertChildView(childView, targetView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.insertChildViewController = function (childViewController, targetViewController) {
            var childView = childViewController.view;
            var targetView;
            if (targetViewController && !(targetViewController instanceof View)) {
                targetView = targetViewController.view;
            }
            else {
                targetView = targetViewController;
            }
            if (childView && targetView !== void 0) {
                this.insertChildView(childView, targetView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.viewWillInsertChildView = function (childView, targetView, view) {
        };
        ViewController.prototype.viewDidInsertChildView = function (childView, targetView, view) {
        };
        ViewController.prototype.removeChildView = function (childView) {
            var view = this._view;
            if (view) {
                view.removeChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.removeChildViewController = function (childViewController) {
            var childView = childViewController.view;
            if (childView) {
                this.removeChildView(childView);
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.removeAll = function () {
            var view = this._view;
            if (view) {
                view.removeAll();
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.remove = function () {
            var view = this._view;
            if (view) {
                view.remove();
            }
            else {
                throw new Error("no view");
            }
        };
        ViewController.prototype.viewWillRemoveChildView = function (childView, view) {
        };
        ViewController.prototype.viewDidRemoveChildView = function (childView, view) {
        };
        ViewController.prototype.isMounted = function () {
            var view = this._view;
            return view ? view.isMounted() : false;
        };
        ViewController.prototype.viewWillMount = function (view) {
        };
        ViewController.prototype.viewDidMount = function (view) {
        };
        ViewController.prototype.viewWillUnmount = function (view) {
        };
        ViewController.prototype.viewDidUnmount = function (view) {
        };
        ViewController.prototype.viewWillResize = function (view) {
        };
        ViewController.prototype.viewDidResize = function (view) {
        };
        ViewController.prototype.viewWillLayout = function (view) {
        };
        ViewController.prototype.viewDidLayout = function (view) {
        };
        ViewController.prototype.viewWillScroll = function (view) {
        };
        ViewController.prototype.viewDidScroll = function (view) {
        };
        return ViewController;
    }());

    var AppView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.togglePopover === "function"
                    && typeof view.showPopover === "function"
                    && typeof view.hidePopover === "function"
                    && typeof view.hidePopovers === "function";
            }
            return false;
        },
    };
    View.App = AppView;

    var AnimatedView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View.Graphic || view instanceof View
                    && typeof view.cascadeAnimate === "function";
            }
            return false;
        },
    };
    View.Animated = AnimatedView;

    var RenderView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View.Graphic || view instanceof View
                    && typeof view.cascadeAnimate === "function"
                    && typeof view.cascadeRender === "function"
                    && typeof view.cascadeCull === "function";
            }
            return false;
        },
    };
    View.Render = RenderView;

    var LayoutView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.addConstraint === "function"
                    && typeof view.removeConstraint === "function";
            }
            return false;
        },
    };
    View.Layout = LayoutView;

    var FillView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.fill === "function";
            }
            return false;
        },
    };

    var StrokeView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.stroke === "function"
                    && typeof view.strokeWidth === "function";
            }
            return false;
        },
    };

    var TypesetView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.font === "function"
                    && typeof view.textColor === "function"
                    && typeof view.textAlign === "function"
                    && typeof view.textBaseline === "function";
            }
            return false;
        },
    };

    var GraphicView = (function (_super) {
        __extends(GraphicView, _super);
        function GraphicView(key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._viewController = null;
            _this._viewObservers = [];
            _this._parentView = null;
            _this._childViews = [];
            _this._bounds = BoxR2.empty();
            _this._anchor = PointR2.origin();
            _this._hidden = false;
            _this._culled = false;
            _this._dirty = true;
            _this._hover = false;
            _this._eventHandlers = {};
            return _this;
        }
        GraphicView.prototype.key = function (key) {
            if (key === void 0) {
                return this._key;
            }
            else {
                this.willSetKey(key);
                this._key = key;
                this.onSetKey(key);
                this.didSetKey(key);
                return this;
            }
        };
        Object.defineProperty(GraphicView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setViewController = function (viewController) {
            if (this._viewController !== viewController) {
                this.willSetViewController(viewController);
                if (this._viewController) {
                    this._viewController.setView(null);
                }
                this._viewController = viewController;
                if (this._viewController) {
                    this._viewController.setView(this);
                }
                this.onSetViewController(viewController);
                this.didSetViewController(viewController);
            }
        };
        Object.defineProperty(GraphicView.prototype, "viewObservers", {
            get: function () {
                return this._viewObservers;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.addViewObserver = function (viewObserver) {
            var viewObservers = this._viewObservers;
            var index = viewObservers.indexOf(viewObserver);
            if (index < 0) {
                this.willAddViewObserver(viewObserver);
                viewObservers.push(viewObserver);
                this.onAddViewObserver(viewObserver);
                this.didAddViewObserver(viewObserver);
            }
        };
        GraphicView.prototype.removeViewObserver = function (viewObserver) {
            var viewObservers = this._viewObservers;
            var index = viewObservers.indexOf(viewObserver);
            if (index >= 0) {
                this.willRemoveViewObserver(viewObserver);
                viewObservers.splice(index, 1);
                this.onRemoveViewObserver(viewObserver);
                this.didRemoveViewObserver(viewObserver);
            }
        };
        Object.defineProperty(GraphicView.prototype, "canvasView", {
            get: function () {
                var parentView = this.parentView;
                return RenderView.is(parentView) ? parentView.canvasView : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphicView.prototype, "parentView", {
            get: function () {
                return this._parentView;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setParentView = function (parentView) {
            this.willSetParentView(parentView);
            this._parentView = parentView;
            this.onSetParentView(parentView);
            this.didSetParentView(parentView);
        };
        Object.defineProperty(GraphicView.prototype, "childViews", {
            get: function () {
                return this._childViews;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.getChildView = function (key) {
            var childViews = this._childViews;
            for (var i = childViews.length - 1; i >= 0; i -= 1) {
                var childView = childViews[i];
                if (childView.key() === key) {
                    return childView;
                }
            }
            return null;
        };
        GraphicView.prototype.setChildView = function (key, newChildView) {
            if (newChildView !== null && !RenderView.is(newChildView)) {
                throw new TypeError("" + newChildView);
            }
            var oldChildView = null;
            var targetView = null;
            var childViews = this._childViews;
            var index = childViews.length - 1;
            while (index >= 0) {
                var childView = childViews[index];
                if (childView.key() === key) {
                    oldChildView = childView;
                    targetView = childViews[index + 1] || null;
                    this.willRemoveChildView(childView);
                    childView.setParentView(null);
                    childViews.splice(index, 1);
                    this.onRemoveChildView(childView);
                    this.didRemoveChildView(childView);
                    break;
                }
                index -= 1;
            }
            if (newChildView) {
                newChildView.key(key);
                this.willInsertChildView(newChildView, targetView);
                if (index >= 0) {
                    childViews.splice(index, 0, newChildView);
                }
                else {
                    childViews.push(newChildView);
                }
                newChildView.setParentView(this);
                this.onInsertChildView(newChildView, targetView);
                this.didInsertChildView(newChildView, targetView);
                this.setDirty(true);
                this.animate();
            }
            return oldChildView;
        };
        GraphicView.prototype.append = function (child) {
            this.appendChildView(child);
            return child;
        };
        GraphicView.prototype.appendChildView = function (childView) {
            if (!RenderView.is(childView)) {
                throw new TypeError("" + childView);
            }
            this.willInsertChildView(childView, null);
            this._childViews.push(childView);
            childView.setParentView(this);
            this.onInsertChildView(childView, null);
            this.didInsertChildView(childView, null);
            this.setDirty(true);
            this.animate();
        };
        GraphicView.prototype.prepend = function (child) {
            this.prependChildView(child);
            return child;
        };
        GraphicView.prototype.prependChildView = function (childView) {
            if (!RenderView.is(childView)) {
                throw new TypeError("" + childView);
            }
            this.willInsertChildView(childView, null);
            this._childViews.unshift(childView);
            childView.setParentView(this);
            this.onInsertChildView(childView, null);
            this.didInsertChildView(childView, null);
            this.setDirty(true);
            this.animate();
        };
        GraphicView.prototype.insert = function (child, target) {
            this.insertChildView(child, target);
            return child;
        };
        GraphicView.prototype.insertChildView = function (childView, targetView) {
            if (!RenderView.is(childView)) {
                throw new TypeError("" + childView);
            }
            if (targetView !== null && !RenderView.is(childView)) {
                throw new TypeError("" + targetView);
            }
            if (targetView !== null && targetView.parentView !== this) {
                throw new TypeError("" + targetView);
            }
            var childViews = this._childViews;
            this.willInsertChildView(childView, targetView);
            var index = targetView ? childViews.indexOf(targetView) : -1;
            if (index >= 0) {
                childViews.splice(index, 0, childView);
            }
            else {
                childViews.push(childView);
            }
            childView.setParentView(this);
            this.onInsertChildView(childView, targetView);
            this.didInsertChildView(childView, targetView);
            this.setDirty(true);
            this.animate();
        };
        GraphicView.prototype.onInsertChildView = function (childView, targetView) {
            if (RenderView.is(childView)) {
                this.setChildViewBounds(childView, this._bounds);
                this.setChildViewAnchor(childView, this._anchor);
                if (this._culled) {
                    childView.setCulled(true);
                }
            }
        };
        GraphicView.prototype.removeChildView = function (childView) {
            if (!RenderView.is(childView)) {
                throw new TypeError("" + childView);
            }
            if (childView.parentView !== this) {
                throw new TypeError("" + childView);
            }
            var childViews = this._childViews;
            this.willRemoveChildView(childView);
            childView.setParentView(null);
            var index = childViews.indexOf(childView);
            if (index >= 0) {
                childViews.splice(index, 1);
            }
            this.onRemoveChildView(childView);
            this.didRemoveChildView(childView);
            this.setDirty(true);
            this.animate();
        };
        GraphicView.prototype.removeAll = function () {
            var childViews = this._childViews;
            do {
                var count = childViews.length;
                if (count > 0) {
                    var childView = childViews[count - 1];
                    this.willRemoveChildView(childView);
                    childView.setParentView(null);
                    childViews.pop();
                    this.onRemoveChildView(childView);
                    this.didRemoveChildView(childView);
                    this.setDirty(true);
                    this.animate();
                    continue;
                }
                break;
            } while (true);
        };
        GraphicView.prototype.remove = function () {
            if (this._parentView) {
                this._parentView.removeChildView(this);
            }
        };
        GraphicView.prototype.isMounted = function () {
            var parentView = this._parentView;
            return parentView ? parentView.isMounted() : false;
        };
        GraphicView.prototype.cascadeMount = function () {
            this.willMount();
            this.onMount();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeMount();
            }
            this.didMount();
        };
        GraphicView.prototype.onMount = function () {
            _super.prototype.onMount.call(this);
            this.setDirty(true);
        };
        GraphicView.prototype.cascadeUnmount = function () {
            this.willUnmount();
            this.onUnmount();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeUnmount();
            }
            this.didUnmount();
        };
        GraphicView.prototype.cascadeResize = function () {
            this.willResize();
            this.onResize();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeResize();
            }
            this.didResize();
        };
        GraphicView.prototype.cascadeLayout = function () {
            this.willLayout();
            this.onLayout();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeLayout();
            }
            this.didLayout();
        };
        GraphicView.prototype.cascadeScroll = function () {
            this.willScroll();
            this.onScroll();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                childView.cascadeScroll();
            }
            this.didScroll();
        };
        GraphicView.prototype.animate = function () {
            var parentView = this._parentView;
            if (AnimatedView.is(parentView)) {
                parentView.animate();
            }
        };
        GraphicView.prototype.cascadeAnimate = function (frame) {
            this.willAnimate(frame);
            this.onAnimate(frame);
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (AnimatedView.is(childView)) {
                    childView.cascadeAnimate(frame);
                }
            }
            this.didAnimate(frame);
        };
        GraphicView.prototype.willAnimate = function (frame) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillAnimate) {
                    viewObserver.viewWillAnimate(frame, this);
                }
            });
        };
        GraphicView.prototype.onAnimate = function (frame) {
        };
        GraphicView.prototype.didAnimate = function (frame) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidAnimate) {
                    viewObserver.viewDidAnimate(frame, this);
                }
            });
            this.setDirty(false);
        };
        GraphicView.prototype.cascadeRender = function (context) {
            if (!this._hidden && !this._culled) {
                this.willRender(context);
                this.onRender(context);
                var childViews = this._childViews;
                for (var i = 0, n = childViews.length; i < n; i += 1) {
                    var childView = childViews[i];
                    if (RenderView.is(childView)) {
                        childView.cascadeRender(context);
                    }
                }
                this.didRender(context);
            }
        };
        GraphicView.prototype.willRender = function (context) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillRender) {
                    viewObserver.viewWillRender(context, this);
                }
            });
        };
        GraphicView.prototype.onRender = function (context) {
        };
        GraphicView.prototype.didRender = function (context) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidRender) {
                    viewObserver.viewDidRender(context, this);
                }
            });
        };
        Object.defineProperty(GraphicView.prototype, "hidden", {
            get: function () {
                return this._hidden;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setHidden = function (hidden) {
            var newHidden = this.willSetHidden(hidden);
            if (newHidden !== void 0) {
                hidden = newHidden;
            }
            if (this._hidden !== hidden) {
                this._hidden = hidden;
                this.onSetHidden(hidden);
            }
            this.didSetHidden(hidden);
        };
        GraphicView.prototype.willSetHidden = function (hidden) {
            var viewController = this._viewController;
            if (viewController) {
                var newHidden = viewController.viewWillSetHidden(hidden, this);
                if (newHidden !== void 0) {
                    hidden = newHidden;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetHidden) {
                    viewObserver.viewWillSetHidden(hidden, this);
                }
            }
            return hidden;
        };
        GraphicView.prototype.onSetHidden = function (hidden) {
            this.setDirty(true);
        };
        GraphicView.prototype.didSetHidden = function (hidden) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetHidden) {
                    viewObserver.viewDidSetHidden(hidden, this);
                }
            });
        };
        GraphicView.prototype.cascadeCull = function () {
            this.willCull();
            this.onCull();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (RenderView.is(childView)) {
                    childView.cascadeCull();
                }
            }
            this.didCull();
        };
        GraphicView.prototype.willCull = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillCull) {
                    viewObserver.viewWillCull(this);
                }
            });
        };
        GraphicView.prototype.onCull = function () {
        };
        GraphicView.prototype.didCull = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidCull) {
                    viewObserver.viewDidCull(this);
                }
            });
        };
        Object.defineProperty(GraphicView.prototype, "culled", {
            get: function () {
                return this._culled;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setCulled = function (culled) {
            var newCulled = this.willSetCulled(culled);
            if (newCulled !== void 0) {
                culled = newCulled;
            }
            if (this._culled !== culled) {
                this._culled = culled;
                this.onSetCulled(culled);
                var childViews = this._childViews;
                for (var i = 0, n = childViews.length; i < n; i += 1) {
                    var childView = childViews[i];
                    if (RenderView.is(childView)) {
                        this.setChildViewCulled(childView, culled);
                    }
                }
            }
            this.didSetCulled(culled);
        };
        GraphicView.prototype.willSetCulled = function (culled) {
            var viewController = this._viewController;
            if (viewController) {
                var newCulled = viewController.viewWillSetCulled(culled, this);
                if (newCulled !== void 0) {
                    culled = newCulled;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetCulled) {
                    viewObserver.viewWillSetCulled(culled, this);
                }
            }
            return culled;
        };
        GraphicView.prototype.onSetCulled = function (culled) {
            if (!culled) {
                this.setDirty(true);
            }
        };
        GraphicView.prototype.didSetCulled = function (culled) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetCulled) {
                    viewObserver.viewDidSetCulled(culled, this);
                }
            });
        };
        GraphicView.prototype.setChildViewCulled = function (childView, culled) {
            childView.setCulled(culled);
        };
        Object.defineProperty(GraphicView.prototype, "parentTransform", {
            get: function () {
                var parentView = this._parentView;
                if (RenderView.is(parentView)) {
                    var parentBounds = parentView.bounds;
                    var bounds = this.bounds;
                    var dx = bounds.x - parentBounds.x;
                    var dy = bounds.y - parentBounds.y;
                    if (dx !== 0 || dy !== 0) {
                        return Transform.translate(dx, dy);
                    }
                }
                return Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphicView.prototype, "clientBounds", {
            get: function () {
                var inverseClientTransform = this.clientTransform.inverse();
                return this.bounds.transform(inverseClientTransform);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphicView.prototype, "popoverBounds", {
            get: function () {
                var inversePageTransform = this.pageTransform.inverse();
                var pageAnchor = this.anchor.transform(inversePageTransform);
                var pageX = Math.round(pageAnchor.x);
                var pageY = Math.round(pageAnchor.y);
                return new BoxR2(pageX, pageY, pageX, pageY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphicView.prototype, "bounds", {
            get: function () {
                return this._bounds;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setBounds = function (bounds) {
            var newBounds = this.willSetBounds(bounds);
            if (newBounds !== void 0) {
                bounds = newBounds;
            }
            var oldBounds = this._bounds;
            this._bounds = bounds;
            this.onSetBounds(bounds, oldBounds);
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (RenderView.is(childView)) {
                    this.setChildViewBounds(childView, bounds);
                }
            }
            this.didSetBounds(bounds, oldBounds);
        };
        GraphicView.prototype.willSetBounds = function (bounds) {
            var viewController = this._viewController;
            if (viewController) {
                var newBounds = viewController.viewWillSetBounds(bounds, this);
                if (newBounds !== void 0) {
                    bounds = newBounds;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetBounds) {
                    viewObserver.viewWillSetBounds(bounds, this);
                }
            }
        };
        GraphicView.prototype.onSetBounds = function (newBounds, oldBounds) {
            if (!newBounds.equals(oldBounds)) {
                this.setDirty(true);
            }
        };
        GraphicView.prototype.didSetBounds = function (newBounds, oldBounds) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetBounds) {
                    viewObserver.viewDidSetBounds(newBounds, oldBounds, this);
                }
            });
        };
        GraphicView.prototype.setChildViewBounds = function (childView, bounds) {
            childView.setBounds(bounds);
        };
        Object.defineProperty(GraphicView.prototype, "anchor", {
            get: function () {
                return this._anchor;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setAnchor = function (anchor) {
            var newAnchor = this.willSetAnchor(anchor);
            if (newAnchor !== void 0) {
                anchor = newAnchor;
            }
            var oldAnchor = this._anchor;
            this._anchor = anchor;
            this.onSetAnchor(anchor, oldAnchor);
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (RenderView.is(childView)) {
                    this.setChildViewAnchor(childView, anchor);
                }
            }
            this.didSetAnchor(anchor, oldAnchor);
        };
        GraphicView.prototype.willSetAnchor = function (anchor) {
            var viewController = this._viewController;
            if (viewController) {
                var newAnchor = viewController.viewWillSetAnchor(anchor, this);
                if (newAnchor !== void 0) {
                    anchor = newAnchor;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetAnchor) {
                    viewObserver.viewWillSetAnchor(anchor, this);
                }
            }
        };
        GraphicView.prototype.onSetAnchor = function (newAnchor, oldAnchor) {
        };
        GraphicView.prototype.didSetAnchor = function (newAnchor, oldAnchor) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetAnchor) {
                    viewObserver.viewDidSetAnchor(newAnchor, oldAnchor, this);
                }
            });
        };
        GraphicView.prototype.setChildViewAnchor = function (childView, anchor) {
            childView.setAnchor(anchor);
        };
        Object.defineProperty(GraphicView.prototype, "pixelRatio", {
            get: function () {
                var parentView = this._parentView;
                if (RenderView.is(parentView)) {
                    return parentView.pixelRatio;
                }
                else {
                    return window.devicePixelRatio || 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphicView.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.setDirty = function (dirty) {
            if (this._dirty !== dirty) {
                this._dirty = dirty;
                this.didSetDirty(dirty);
            }
        };
        GraphicView.prototype.didSetDirty = function (dirty) {
            if (dirty) {
                var parentView = this._parentView;
                if (RenderView.is(parentView)) {
                    parentView.setDirty(dirty);
                }
            }
        };
        Object.defineProperty(GraphicView.prototype, "hitBounds", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.hitTest = function (x, y, context) {
            var hit = null;
            var childViews = this._childViews;
            for (var i = childViews.length - 1; i >= 0; i -= 1) {
                var childView = childViews[i];
                if (RenderView.is(childView) && !childView.culled) {
                    var hitBounds = childView.hitBounds || childView.bounds;
                    if (hitBounds.contains(x, y)) {
                        hit = childView.hitTest(x, y, context);
                        if (hit !== null) {
                            break;
                        }
                    }
                }
            }
            return hit;
        };
        GraphicView.prototype.on = function (type, listener, options) {
            var handlers = this._eventHandlers[type];
            var capture = typeof options === "boolean" ? options : options && typeof options === "object" && options.capture || false;
            var passive = options && typeof options === "object" && options.passive || false;
            var once = options && typeof options === "object" && options.once || false;
            var handler;
            if (handlers === void 0) {
                handler = { listener: listener, capture: capture, passive: passive, once: once };
                handlers = [handler];
                this._eventHandlers[type] = handlers;
            }
            else {
                var n = handlers.length;
                var i = 0;
                while (i < n) {
                    handler = handlers[i];
                    if (handler.listener === listener && handler.capture === capture) {
                        break;
                    }
                    i += 1;
                }
                if (i < n) {
                    handler.passive = passive;
                    handler.once = once;
                }
                else {
                    handler = { listener: listener, capture: capture, passive: passive, once: once };
                    handlers.push(handler);
                }
            }
            return this;
        };
        GraphicView.prototype.off = function (type, listener, options) {
            var handlers = this._eventHandlers[type];
            if (handlers !== void 0) {
                var capture = typeof options === "boolean" ? options : options && typeof options === "object" && options.capture || false;
                var n = handlers.length;
                var i = 0;
                while (i < n) {
                    var handler = handlers[i];
                    if (handler.listener === listener && handler.capture === capture) {
                        handlers.splice(i, 1);
                        if (handlers.length === 0) {
                            delete this._eventHandlers[type];
                        }
                        break;
                    }
                    i += 1;
                }
            }
            return this;
        };
        GraphicView.prototype.handleEvent = function (event) {
            var type = event.type;
            var handlers = this._eventHandlers[type];
            if (handlers !== void 0) {
                var i = 0;
                while (i < handlers.length) {
                    var handler = handlers[i];
                    if (!handler.capture) {
                        var listener = handler.listener;
                        if (typeof listener === "function") {
                            listener(event);
                        }
                        else if (listener && typeof listener === "object") {
                            listener.handleEvent(event);
                        }
                        if (handler.once) {
                            handlers.splice(i, 1);
                            continue;
                        }
                    }
                    i += 1;
                }
                if (handlers.length === 0) {
                    delete this._eventHandlers[type];
                }
            }
            if (type === "mouseover") {
                this.onMouseOver(event);
            }
            else if (type === "mouseout") {
                this.onMouseOut(event);
            }
        };
        GraphicView.prototype.bubbleEvent = function (event) {
            this.handleEvent(event);
            if (event.bubbles && !event.cancelBubble) {
                var parentView = this._parentView;
                if (RenderView.is(parentView)) {
                    return parentView.bubbleEvent(event);
                }
                else {
                    return parentView;
                }
            }
            else {
                return null;
            }
        };
        GraphicView.prototype.dispatchEvent = function (event) {
            event.targetView = this;
            var next = this.bubbleEvent(event);
            if (next) {
                return next.dispatchEvent(event);
            }
            else {
                return !event.cancelBubble;
            }
        };
        Object.defineProperty(GraphicView.prototype, "hover", {
            get: function () {
                return this._hover;
            },
            enumerable: true,
            configurable: true
        });
        GraphicView.prototype.onMouseOver = function (event) {
            if (!this._hover) {
                this._hover = true;
                if (this._eventHandlers.mouseenter !== void 0) {
                    var enterEvent = new MouseEvent("mouseenter", {
                        clientX: event.clientX,
                        clientY: event.clientY,
                        screenX: event.screenX,
                        screenY: event.screenY,
                        bubbles: false,
                    });
                    enterEvent.targetView = this;
                    enterEvent.relatedTargetView = event.relatedTargetView;
                    this.handleEvent(enterEvent);
                }
            }
        };
        GraphicView.prototype.onMouseOut = function (event) {
            if (this._hover) {
                this._hover = false;
                if (this._eventHandlers.mouseleave !== void 0) {
                    var leaveEvent = new MouseEvent("mouseleave", {
                        clientX: event.clientX,
                        clientY: event.clientY,
                        screenX: event.screenX,
                        screenY: event.screenY,
                        bubbles: false,
                    });
                    leaveEvent.targetView = this;
                    leaveEvent.relatedTargetView = event.relatedTargetView;
                    this.handleEvent(leaveEvent);
                }
            }
        };
        return GraphicView;
    }(View));
    View.Graphic = GraphicView;

    var GraphicViewController = (function (_super) {
        __extends(GraphicViewController, _super);
        function GraphicViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(GraphicViewController.prototype, "canvasView", {
            get: function () {
                var view = this._view;
                return view ? view.canvasView : null;
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.animate = function () {
            var view = this._view;
            if (view) {
                view.animate();
            }
        };
        GraphicViewController.prototype.viewWillAnimate = function (frame, view) {
        };
        GraphicViewController.prototype.viewDidAnimate = function (frame, view) {
        };
        GraphicViewController.prototype.viewWillRender = function (context, view) {
        };
        GraphicViewController.prototype.viewDidRender = function (context, view) {
        };
        Object.defineProperty(GraphicViewController.prototype, "hidden", {
            get: function () {
                var view = this._view;
                return view ? view.hidden : false;
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.viewWillSetHidden = function (hidden, view) {
        };
        GraphicViewController.prototype.viewDidSetHidden = function (hidden, view) {
        };
        GraphicViewController.prototype.viewWillCull = function (view) {
        };
        GraphicViewController.prototype.viewDidCull = function (view) {
        };
        Object.defineProperty(GraphicViewController.prototype, "culled", {
            get: function () {
                var view = this._view;
                return view ? view.culled : false;
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.viewWillSetCulled = function (culled, view) {
        };
        GraphicViewController.prototype.viewDidSetCulled = function (culled, view) {
        };
        Object.defineProperty(GraphicViewController.prototype, "bounds", {
            get: function () {
                var view = this._view;
                return view ? view.bounds : BoxR2.empty();
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.viewWillSetBounds = function (bounds, view) {
        };
        GraphicViewController.prototype.viewDidSetBounds = function (newBounds, oldBounds, view) {
        };
        Object.defineProperty(GraphicViewController.prototype, "anchor", {
            get: function () {
                var view = this._view;
                return view ? view.anchor : PointR2.origin();
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.viewWillSetAnchor = function (anchor, view) {
        };
        GraphicViewController.prototype.viewDidSetAnchor = function (newAnchor, oldAnchor, view) {
        };
        Object.defineProperty(GraphicViewController.prototype, "dirty", {
            get: function () {
                var view = this._view;
                return view ? view.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        GraphicViewController.prototype.setDirty = function (dirty) {
            var view = this._view;
            if (view) {
                view.setDirty(dirty);
            }
        };
        return GraphicViewController;
    }(ViewController));

    var LayerView = (function (_super) {
        __extends(LayerView, _super);
        function LayerView(key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, key) || this;
            _this._canvas = _this.createCanvas();
            return _this;
        }
        Object.defineProperty(LayerView.prototype, "canvas", {
            get: function () {
                return this._canvas;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayerView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        LayerView.prototype.cascadeRender = function (context) {
            var layerContext = this.getContext();
            this.willRender(context, layerContext);
            if (this._dirty) {
                this.onRender(context, layerContext);
                var childViews = this.childViews;
                for (var i = 0, n = childViews.length; i < n; i += 1) {
                    var childView = childViews[i];
                    if (RenderView.is(childView)) {
                        childView.cascadeRender(layerContext);
                    }
                }
            }
            this.didRender(context, layerContext);
        };
        LayerView.prototype.willRender = function (context, layerContext) {
            _super.prototype.willRender.call(this, context);
        };
        LayerView.prototype.onRender = function (context, layerContext) {
            var bounds = this._bounds;
            layerContext.clearRect(0, 0, bounds.width, bounds.height);
            _super.prototype.onRender.call(this, context);
        };
        LayerView.prototype.didRender = function (context, layerContext) {
            this.copyLayerImage(context, layerContext);
            _super.prototype.didRender.call(this, context);
        };
        LayerView.prototype.copyLayerImage = function (context, layerContext) {
            var bounds = this._bounds;
            var pixelRatio = this.pixelRatio;
            var imageData = layerContext.getImageData(0, 0, bounds.width * pixelRatio, bounds.height * pixelRatio);
            context.putImageData(imageData, bounds.x * pixelRatio, bounds.y * pixelRatio);
        };
        Object.defineProperty(LayerView.prototype, "parentTransform", {
            get: function () {
                return Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        LayerView.prototype.willSetBounds = function (bounds) {
            var newBounds = _super.prototype.willSetBounds.call(this, bounds);
            if (newBounds instanceof BoxR2) {
                bounds = newBounds;
            }
            var xMin = Math.round(bounds.xMin);
            var yMin = Math.round(bounds.yMin);
            var xMax = Math.round(bounds.xMax);
            var yMax = Math.round(bounds.yMax);
            return new BoxR2(xMin, yMin, xMax, yMax);
        };
        LayerView.prototype.onSetBounds = function (newBounds, oldBounds) {
            if (!newBounds.equals(oldBounds)) {
                this.resizeCanvas(this._canvas, newBounds);
                this.setDirty(true);
            }
        };
        LayerView.prototype.setChildViewBounds = function (childView, bounds) {
            if (bounds.x !== 0 || bounds.y !== 0) {
                var width = bounds.width;
                var height = bounds.height;
                bounds = new BoxR2(0, 0, width, height);
            }
            childView.setBounds(bounds);
        };
        LayerView.prototype.setChildViewAnchor = function (childView, anchor) {
            var bounds = this._bounds;
            var x = bounds.x;
            var y = bounds.y;
            if (x !== 0 || y !== 0) {
                anchor = new PointR2(anchor.x - x, anchor.y - y);
            }
            childView.setAnchor(anchor);
        };
        LayerView.prototype.hitTest = function (x, y, context) {
            var layerContext = this.getContext();
            var bounds = this._bounds;
            x -= bounds.x;
            y -= bounds.y;
            var hit = null;
            var childViews = this._childViews;
            for (var i = childViews.length - 1; i >= 0; i -= 1) {
                var childView = childViews[i];
                if (RenderView.is(childView) && childView.bounds.contains(x, y)) {
                    hit = childView.hitTest(x, y, layerContext);
                    if (hit !== null) {
                        break;
                    }
                }
            }
            return hit;
        };
        LayerView.prototype.getContext = function () {
            return this._canvas.getContext("2d");
        };
        LayerView.prototype.createCanvas = function () {
            return document.createElement("canvas");
        };
        LayerView.prototype.resizeCanvas = function (node, bounds) {
            var width = Math.floor(bounds.width);
            var height = Math.floor(bounds.height);
            var pixelRatio = this.pixelRatio;
            node.width = width * pixelRatio;
            node.height = height * pixelRatio;
            node.style.width = width + "px";
            node.style.height = height + "px";
            var context = this.getContext();
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        };
        return LayerView;
    }(GraphicView));
    View.Layer = LayerView;

    var LayerViewController = (function (_super) {
        __extends(LayerViewController, _super);
        function LayerViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LayerViewController;
    }(GraphicViewController));

    var NodeViewController = (function (_super) {
        __extends(NodeViewController, _super);
        function NodeViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NodeViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        NodeViewController.prototype.appendChildNode = function (childNode) {
            var view = this._view;
            if (view) {
                view.appendChildNode(childNode);
            }
            else {
                throw new Error("no view");
            }
        };
        NodeViewController.prototype.prependChildNode = function (childNode) {
            var view = this._view;
            if (view) {
                view.prependChildNode(childNode);
            }
            else {
                throw new Error("no view");
            }
        };
        NodeViewController.prototype.insertChildNode = function (childNode, targetNode) {
            var view = this._view;
            if (view) {
                view.insertChildNode(childNode, targetNode);
            }
            else {
                throw new Error("no view");
            }
        };
        NodeViewController.prototype.viewWillInsertChildNode = function (childNode, targetNode, view) {
        };
        NodeViewController.prototype.viewDidInsertChildNode = function (childNode, targetNode, view) {
        };
        NodeViewController.prototype.removeChildNode = function (childNode) {
            var view = this._view;
            if (view) {
                view.removeChildNode(childNode);
            }
            else {
                throw new Error("no view");
            }
        };
        NodeViewController.prototype.viewWillRemoveChildNode = function (childNode, view) {
        };
        NodeViewController.prototype.viewDidRemoveChildNode = function (childNode, view) {
        };
        NodeViewController.prototype.viewWillAnimate = function (frame, view) {
        };
        NodeViewController.prototype.viewDidAnimate = function (frame, view) {
        };
        return NodeViewController;
    }(ViewController));

    var TextView = (function (_super) {
        __extends(TextView, _super);
        function TextView(node, key) {
            if (key === void 0) { key = null; }
            return _super.call(this, node, key) || this;
        }
        Object.defineProperty(TextView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        TextView.prototype.initNode = function (node) {
        };
        Object.defineProperty(TextView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        return TextView;
    }(NodeView));
    View.Text = TextView;

    var TextViewController = (function (_super) {
        __extends(TextViewController, _super);
        function TextViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TextViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        return TextViewController;
    }(NodeViewController));

    var ElementViewController = (function (_super) {
        __extends(ElementViewController, _super);
        function ElementViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ElementViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        ElementViewController.prototype.isVisible = function () {
            var view = this._view;
            return view ? view.isVisible() : false;
        };
        ElementViewController.prototype.viewWillSetAttribute = function (name, value, view) {
        };
        ElementViewController.prototype.viewDidSetAttribute = function (name, value, view) {
        };
        ElementViewController.prototype.viewWillSetStyle = function (name, value, priority, view) {
        };
        ElementViewController.prototype.viewDidSetStyle = function (name, value, priority, view) {
        };
        return ElementViewController;
    }(NodeViewController));

    var SvgView = (function (_super) {
        __extends(SvgView, _super);
        function SvgView(node, key) {
            if (key === void 0) { key = null; }
            return _super.call(this, node, key) || this;
        }
        Object.defineProperty(SvgView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        SvgView.prototype.initNode = function (node) {
        };
        Object.defineProperty(SvgView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        SvgView.prototype.append = function (child, key) {
            if (typeof child === "string") {
                child = SvgView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.appendChildView(child);
            return child;
        };
        SvgView.prototype.prepend = function (child, key) {
            if (typeof child === "string") {
                child = SvgView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.prependChildView(child);
            return child;
        };
        SvgView.prototype.insert = function (child, target, key) {
            if (typeof child === "string") {
                child = SvgView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.insertChild(child, target);
            return child;
        };
        Object.defineProperty(SvgView.prototype, "parentTransform", {
            get: function () {
                var transform = this.transform();
                return transform || Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        SvgView.prototype.on = function (type, listener, options) {
            this._node.addEventListener(type, listener, options);
            return this;
        };
        SvgView.prototype.off = function (type, listener, options) {
            this._node.removeEventListener(type, listener, options);
            return this;
        };
        SvgView.prototype.font = function (value, tween, priority) {
            if (value === void 0) {
                var style = this.fontStyle();
                var variant = this.fontVariant();
                var weight = this.fontWeight();
                var stretch = this.fontStretch();
                var size = this.fontSize();
                var height = this.lineHeight();
                var family = this.fontFamily();
                if (family !== null && family !== void 0) {
                    return Font.from(style, variant, weight, stretch, size, height, family);
                }
                else {
                    return void 0;
                }
            }
            else {
                value = value !== null ? Font.fromAny(value) : null;
                if (value === null || value.style() !== null) {
                    this.fontStyle(value !== null ? value.style() : null, tween, priority);
                }
                if (value === null || value.variant() !== null) {
                    this.fontVariant(value !== null ? value.variant() : null, tween, priority);
                }
                if (value === null || value.weight() !== null) {
                    this.fontWeight(value !== null ? value.weight() : null, tween, priority);
                }
                if (value === null || value.stretch() !== null) {
                    this.fontStretch(value !== null ? value.stretch() : null, tween, priority);
                }
                if (value === null || value.size() !== null) {
                    this.fontSize(value !== null ? value.size() : null, tween, priority);
                }
                if (value === null || value.height() !== null) {
                    this.lineHeight(value !== null ? value.height() : null, tween, priority);
                }
                this.fontFamily(value !== null ? value.family() : null, tween, priority);
                return this;
            }
        };
        SvgView.create = function (tag) {
            if (typeof tag === "string") {
                if (tag === "canvas") {
                    return new View.Canvas(document.createElement(tag));
                }
                else {
                    return new SvgView(document.createElementNS(SvgView.NS, tag));
                }
            }
            else if (typeof tag === "function") {
                return new tag(document.createElementNS(SvgView.NS, tag.tag));
            }
            throw new TypeError("" + tag);
        };
        SvgView.tag = "svg";
        SvgView.NS = "http://www.w3.org/2000/svg";
        __decorate([
            AttributeAnimator("alignment-baseline", String)
        ], SvgView.prototype, "alignmentBaseline", void 0);
        __decorate([
            AttributeAnimator("clip-path", String)
        ], SvgView.prototype, "clipPath", void 0);
        __decorate([
            AttributeAnimator("cursor", String)
        ], SvgView.prototype, "cursor", void 0);
        __decorate([
            AttributeAnimator("cx", Number)
        ], SvgView.prototype, "cx", void 0);
        __decorate([
            AttributeAnimator("cy", Number)
        ], SvgView.prototype, "cy", void 0);
        __decorate([
            AttributeAnimator("d", String)
        ], SvgView.prototype, "d", void 0);
        __decorate([
            AttributeAnimator("dx", [Number, String])
        ], SvgView.prototype, "dx", void 0);
        __decorate([
            AttributeAnimator("dy", [Number, String])
        ], SvgView.prototype, "dy", void 0);
        __decorate([
            AttributeAnimator("edgeMode", String)
        ], SvgView.prototype, "edgeMode", void 0);
        __decorate([
            AttributeAnimator("fill", [Color, String])
        ], SvgView.prototype, "fill", void 0);
        __decorate([
            AttributeAnimator("fill-rule", String)
        ], SvgView.prototype, "fillRuke", void 0);
        __decorate([
            AttributeAnimator("height", Length)
        ], SvgView.prototype, "height", void 0);
        __decorate([
            AttributeAnimator("in", String)
        ], SvgView.prototype, "in", void 0);
        __decorate([
            AttributeAnimator("in2", String)
        ], SvgView.prototype, "in2", void 0);
        __decorate([
            AttributeAnimator("mode", String)
        ], SvgView.prototype, "mode", void 0);
        __decorate([
            AttributeAnimator("opacity", Number)
        ], SvgView.prototype, "opacity", void 0);
        __decorate([
            AttributeAnimator("points", String)
        ], SvgView.prototype, "points", void 0);
        __decorate([
            AttributeAnimator("preserveAspectRatio", Boolean)
        ], SvgView.prototype, "preserveAspectRatio", void 0);
        __decorate([
            AttributeAnimator("r", Number)
        ], SvgView.prototype, "r", void 0);
        __decorate([
            AttributeAnimator("result", String)
        ], SvgView.prototype, "result", void 0);
        __decorate([
            AttributeAnimator("stdDeviation", String)
        ], SvgView.prototype, "stdDeviation", void 0);
        __decorate([
            AttributeAnimator("stroke", [Color, String])
        ], SvgView.prototype, "stroke", void 0);
        __decorate([
            AttributeAnimator("stroke-dasharray", String)
        ], SvgView.prototype, "strokeDasharray", void 0);
        __decorate([
            AttributeAnimator("stroke-width", Number)
        ], SvgView.prototype, "strokeWidth", void 0);
        __decorate([
            AttributeAnimator("text-anchor", String)
        ], SvgView.prototype, "textAnchor", void 0);
        __decorate([
            AttributeAnimator("transform", Transform)
        ], SvgView.prototype, "transform", void 0);
        __decorate([
            AttributeAnimator("type", String)
        ], SvgView.prototype, "type", void 0);
        __decorate([
            AttributeAnimator("values", String)
        ], SvgView.prototype, "values", void 0);
        __decorate([
            AttributeAnimator("viewBox", String)
        ], SvgView.prototype, "viewBox", void 0);
        __decorate([
            AttributeAnimator("width", Length)
        ], SvgView.prototype, "width", void 0);
        __decorate([
            AttributeAnimator("x", Number)
        ], SvgView.prototype, "x", void 0);
        __decorate([
            AttributeAnimator("x1", Number)
        ], SvgView.prototype, "x1", void 0);
        __decorate([
            AttributeAnimator("x2", Number)
        ], SvgView.prototype, "x2", void 0);
        __decorate([
            AttributeAnimator("y", Number)
        ], SvgView.prototype, "y", void 0);
        __decorate([
            AttributeAnimator("y1", Number)
        ], SvgView.prototype, "y1", void 0);
        __decorate([
            AttributeAnimator("y2", Number)
        ], SvgView.prototype, "y2", void 0);
        __decorate([
            StyleAnimator("font-family", FontFamily)
        ], SvgView.prototype, "fontFamily", void 0);
        __decorate([
            StyleAnimator("font-size", [Length, String])
        ], SvgView.prototype, "fontSize", void 0);
        __decorate([
            StyleAnimator("font-stretch", String)
        ], SvgView.prototype, "fontStretch", void 0);
        __decorate([
            StyleAnimator("font-style", String)
        ], SvgView.prototype, "fontStyle", void 0);
        __decorate([
            StyleAnimator("font-variant", String)
        ], SvgView.prototype, "fontVariant", void 0);
        __decorate([
            StyleAnimator("font-weight", String)
        ], SvgView.prototype, "fontWeight", void 0);
        __decorate([
            StyleAnimator("line-height", LineHeight)
        ], SvgView.prototype, "lineHeight", void 0);
        return SvgView;
    }(ElementView));
    View.Svg = SvgView;

    var SvgViewController = (function (_super) {
        __extends(SvgViewController, _super);
        function SvgViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SvgViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        return SvgViewController;
    }(ElementViewController));

    var HtmlView = (function (_super) {
        __extends(HtmlView, _super);
        function HtmlView(node, key) {
            if (key === void 0) { key = null; }
            return _super.call(this, node, key) || this;
        }
        Object.defineProperty(HtmlView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        HtmlView.prototype.initNode = function (node) {
        };
        Object.defineProperty(HtmlView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        HtmlView.prototype.append = function (child, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.appendChildView(child);
            return child;
        };
        HtmlView.prototype.prepend = function (child, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.prependChildView(child);
            return child;
        };
        HtmlView.prototype.insert = function (child, target, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.insertChild(child, target);
            return child;
        };
        Object.defineProperty(HtmlView.prototype, "parentTransform", {
            get: function () {
                var transform = this.transform();
                return transform || Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        HtmlView.prototype.variable = function (name, value, strength) {
            if (value === void 0) {
                value = 0;
            }
            if (strength === void 0) {
                strength = ConstraintStrength.Strong;
            }
            else {
                strength = ConstraintStrength.fromAny(strength);
            }
            return new ConstrainBinding(this, name, value, strength);
        };
        HtmlView.prototype.constraint = function (lhs, relation, rhs, strength) {
            if (typeof lhs === "number") {
                lhs = Constrain.constant(lhs);
            }
            if (typeof rhs === "number") {
                rhs = Constrain.constant(rhs);
            }
            var constrain = rhs ? lhs.minus(rhs) : lhs;
            if (strength === void 0) {
                strength = ConstraintStrength.Required;
            }
            else {
                strength = ConstraintStrength.fromAny(strength);
            }
            return new Constraint(this, constrain, relation, strength);
        };
        Object.defineProperty(HtmlView.prototype, "variables", {
            get: function () {
                if (this._variables === void 0) {
                    this._variables = [];
                }
                return this._variables;
            },
            enumerable: true,
            configurable: true
        });
        HtmlView.prototype.hasVariable = function (variable) {
            return this._variables !== void 0 && this._variables.indexOf(variable) >= 0;
        };
        HtmlView.prototype.addVariable = function (variable) {
            if (this._variables === void 0) {
                this._variables = [];
            }
            if (this._variables.indexOf(variable) < 0) {
                this._variables.push(variable);
                this.activateVariable(variable);
            }
        };
        HtmlView.prototype.activateVariable = function (variable) {
            var appView = this.appView;
            if (LayoutManager.is(appView)) {
                appView.activateVariable(variable);
            }
        };
        HtmlView.prototype.removeVariable = function (variable) {
            if (this._variables !== void 0) {
                var index = this._variables.indexOf(variable);
                if (index >= 0) {
                    this._variables.splice(index, 1);
                    this.deactivateVariable(variable);
                }
            }
        };
        HtmlView.prototype.deactivateVariable = function (variable) {
            var appView = this.appView;
            if (LayoutManager.is(appView)) {
                appView.deactivateVariable(variable);
            }
        };
        HtmlView.prototype.setVariableState = function (variable, state) {
            var appView = this.appView;
            if (LayoutManager.is(appView)) {
                appView.setVariableState(variable, state);
            }
        };
        Object.defineProperty(HtmlView.prototype, "constraints", {
            get: function () {
                if (this._constraints === void 0) {
                    this._constraints = [];
                }
                return this._constraints;
            },
            enumerable: true,
            configurable: true
        });
        HtmlView.prototype.hasConstraint = function (constraint) {
            return this._constraints !== void 0 && this._constraints.indexOf(constraint) >= 0;
        };
        HtmlView.prototype.addConstraint = function (constraint) {
            if (this._constraints === void 0) {
                this._constraints = [];
            }
            if (this._constraints.indexOf(constraint) < 0) {
                this._constraints.push(constraint);
                this.activateConstraint(constraint);
            }
        };
        HtmlView.prototype.activateConstraint = function (constraint) {
            var appView = this.appView;
            if (LayoutManager.is(appView)) {
                appView.activateConstraint(constraint);
            }
        };
        HtmlView.prototype.removeConstraint = function (constraint) {
            if (this._constraints !== void 0) {
                var index = this._constraints.indexOf(constraint);
                if (index >= 0) {
                    this._constraints.splice(index, 1);
                    this.deactivateConstraint(constraint);
                }
            }
        };
        HtmlView.prototype.deactivateConstraint = function (constraint) {
            var appView = this.appView;
            if (LayoutManager.is(appView)) {
                appView.deactivateConstraint(constraint);
            }
        };
        HtmlView.prototype.activateLayout = function () {
            var variables = this._variables;
            var constraints = this._constraints;
            var appView;
            if ((variables !== void 0 || constraints !== void 0)
                && (appView = this.appView, LayoutManager.is(appView))) {
                for (var i = 0, n = variables !== void 0 ? variables.length : 0; i < n; i += 1) {
                    var variable = variables[i];
                    if (variable instanceof LayoutAnchor) {
                        appView.activateVariable(variable);
                    }
                }
                for (var i = 0, n = constraints !== void 0 ? constraints.length : 0; i < n; i += 1) {
                    appView.activateConstraint(constraints[i]);
                }
            }
        };
        HtmlView.prototype.deactivateLayout = function () {
            var variables = this._variables;
            var constraints = this._constraints;
            var appView;
            if ((variables !== void 0 || constraints !== void 0)
                && (appView = this.appView, LayoutManager.is(appView))) {
                for (var i = 0, n = constraints !== void 0 ? constraints.length : 0; i < n; i += 1) {
                    appView.deactivateConstraint(constraints[i]);
                }
                for (var i = 0, n = variables !== void 0 ? variables.length : 0; i < n; i += 1) {
                    appView.deactivateVariable(variables[i]);
                }
            }
        };
        HtmlView.prototype.updateLayoutStates = function () {
            var offsetParent = this._node.offsetParent;
            if (offsetParent) {
                var offsetBounds = offsetParent.getBoundingClientRect();
                var bounds = this._node.getBoundingClientRect();
                var topAnchor = this.hasOwnProperty("topAnchor") ? this.topAnchor : void 0;
                var rightAnchor = this.hasOwnProperty("rightAnchor") ? this.rightAnchor : void 0;
                var bottomAnchor = this.hasOwnProperty("bottomAnchor") ? this.bottomAnchor : void 0;
                var leftAnchor = this.hasOwnProperty("leftAnchor") ? this.leftAnchor : void 0;
                var widthAnchor = this.hasOwnProperty("widthAnchor") ? this.widthAnchor : void 0;
                var heightAnchor = this.hasOwnProperty("heightAnchor") ? this.heightAnchor : void 0;
                var centerXAnchor = this.hasOwnProperty("centerXAnchor") ? this.centerXAnchor : void 0;
                var centerYAnchor = this.hasOwnProperty("centerYAnchor") ? this.centerYAnchor : void 0;
                if (topAnchor && !topAnchor.enabled()) {
                    topAnchor.setState(bounds.top - offsetBounds.top);
                }
                if (rightAnchor && !rightAnchor.enabled()) {
                    rightAnchor.setState(offsetBounds.right + bounds.right);
                }
                if (bottomAnchor && !bottomAnchor.enabled()) {
                    bottomAnchor.setState(offsetBounds.bottom + bounds.bottom);
                }
                if (leftAnchor && !leftAnchor.enabled()) {
                    leftAnchor.setState(bounds.left - offsetBounds.left);
                }
                if (widthAnchor && !widthAnchor.enabled()) {
                    widthAnchor.setState(bounds.width);
                }
                if (heightAnchor && !heightAnchor.enabled()) {
                    heightAnchor.setState(bounds.height);
                }
                if (centerXAnchor && !centerXAnchor.enabled()) {
                    centerXAnchor.setState(bounds.left + 0.5 * bounds.width - offsetBounds.left);
                }
                if (centerYAnchor && !centerYAnchor.enabled()) {
                    centerYAnchor.setState(bounds.top + 0.5 * bounds.height - offsetBounds.top);
                }
            }
        };
        HtmlView.prototype.updateLayoutValues = function () {
            var offsetParent = this._node.offsetParent;
            if (offsetParent) {
                var topAnchor = this.hasOwnProperty("topAnchor") ? this.topAnchor : void 0;
                var rightAnchor = this.hasOwnProperty("rightAnchor") ? this.rightAnchor : void 0;
                var bottomAnchor = this.hasOwnProperty("bottomAnchor") ? this.bottomAnchor : void 0;
                var leftAnchor = this.hasOwnProperty("leftAnchor") ? this.leftAnchor : void 0;
                var widthAnchor = this.hasOwnProperty("widthAnchor") ? this.widthAnchor : void 0;
                var heightAnchor = this.hasOwnProperty("heightAnchor") ? this.heightAnchor : void 0;
                var centerXAnchor = this.hasOwnProperty("centerXAnchor") ? this.centerXAnchor : void 0;
                var centerYAnchor = this.hasOwnProperty("centerYAnchor") ? this.centerYAnchor : void 0;
                if (topAnchor && topAnchor.enabled()) {
                    this.top.setState(Length.px(topAnchor.value));
                }
                if (rightAnchor && rightAnchor.enabled()) {
                    this.right.setState(Length.px(rightAnchor.value));
                }
                if (bottomAnchor && bottomAnchor.enabled()) {
                    this.bottom.setState(Length.px(bottomAnchor.value));
                }
                if (leftAnchor && leftAnchor.enabled()) {
                    this.left.setState(Length.px(leftAnchor.value));
                }
                if (widthAnchor && widthAnchor.enabled()) {
                    this.width.setState(Length.px(widthAnchor.value));
                }
                if (heightAnchor && heightAnchor.enabled()) {
                    this.height.setState(Length.px(heightAnchor.value));
                }
                if (centerXAnchor && centerXAnchor.enabled()) {
                    if (leftAnchor && leftAnchor.enabled()) {
                        this.width.setState(Length.px(2 * (centerXAnchor.value - leftAnchor.value)));
                    }
                    else if (rightAnchor && rightAnchor.enabled()) {
                        this.width.setState(Length.px(2 * (rightAnchor.value - centerXAnchor.value)));
                    }
                    else if (widthAnchor && widthAnchor.enabled()) {
                        this.left.setState(Length.px(centerXAnchor.value - 0.5 * widthAnchor.value));
                    }
                }
                if (centerYAnchor && centerYAnchor.enabled()) {
                    if (topAnchor && topAnchor.enabled()) {
                        this.height.setState(Length.px(2 * (centerYAnchor.value - topAnchor.value)));
                    }
                    else if (bottomAnchor && bottomAnchor.enabled()) {
                        this.height.setState(Length.px(2 * (bottomAnchor.value - centerYAnchor.value)));
                    }
                    else if (heightAnchor && heightAnchor.enabled()) {
                        this.top.setState(Length.px(centerYAnchor.value - 0.5 * heightAnchor.value));
                    }
                }
            }
        };
        HtmlView.prototype.didMount = function () {
            _super.prototype.didMount.call(this);
            this.activateLayout();
        };
        HtmlView.prototype.willUnmount = function () {
            this.deactivateLayout();
            _super.prototype.willUnmount.call(this);
        };
        HtmlView.prototype.didResize = function () {
            _super.prototype.didResize.call(this);
            this.updateLayoutStates();
        };
        HtmlView.prototype.willLayout = function () {
            this.updateLayoutValues();
            _super.prototype.willLayout.call(this);
        };
        HtmlView.prototype.on = function (type, listener, options) {
            this._node.addEventListener(type, listener, options);
            return this;
        };
        HtmlView.prototype.off = function (type, listener, options) {
            this._node.removeEventListener(type, listener, options);
            return this;
        };
        HtmlView.prototype.borderColor = function (value, tween, priority) {
            if (value === void 0) {
                var borderTopColor = this.borderTopColor();
                var borderRightColor = this.borderRightColor();
                var borderBottomColor = this.borderBottomColor();
                var borderLeftColor = this.borderLeftColor();
                if (Objects.equal(borderTopColor, borderRightColor)
                    && Objects.equal(borderRightColor, borderBottomColor)
                    && Objects.equal(borderBottomColor, borderLeftColor)) {
                    return borderTopColor;
                }
                else {
                    return [borderTopColor, borderRightColor, borderBottomColor, borderLeftColor];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.borderTopColor(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.borderRightColor(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.borderBottomColor(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.borderLeftColor(value[3], tween, priority);
                    }
                }
                else {
                    this.borderTopColor(value, tween, priority);
                    this.borderRightColor(value, tween, priority);
                    this.borderBottomColor(value, tween, priority);
                    this.borderLeftColor(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.prototype.borderRadius = function (value, tween, priority) {
            if (value === void 0) {
                var borderTopLeftRadius = this.borderTopLeftRadius();
                var borderTopRightRadius = this.borderTopRightRadius();
                var borderBottomRightRadius = this.borderBottomRightRadius();
                var borderBottomLeftRadius = this.borderBottomLeftRadius();
                if (Objects.equal(borderTopLeftRadius, borderTopRightRadius)
                    && Objects.equal(borderTopRightRadius, borderBottomRightRadius)
                    && Objects.equal(borderBottomRightRadius, borderBottomLeftRadius)) {
                    return borderTopLeftRadius;
                }
                else {
                    return [borderTopLeftRadius, borderTopRightRadius, borderBottomRightRadius, borderBottomLeftRadius];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.borderTopLeftRadius(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.borderTopRightRadius(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.borderBottomRightRadius(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.borderBottomLeftRadius(value[3], tween, priority);
                    }
                }
                else {
                    this.borderTopLeftRadius(value, tween, priority);
                    this.borderTopRightRadius(value, tween, priority);
                    this.borderBottomRightRadius(value, tween, priority);
                    this.borderBottomLeftRadius(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.prototype.borderStyle = function (value, tween, priority) {
            if (value === void 0) {
                var borderTopStyle = this.borderTopStyle();
                var borderRightStyle = this.borderRightStyle();
                var borderBottomStyle = this.borderBottomStyle();
                var borderLeftStyle = this.borderLeftStyle();
                if (Objects.equal(borderTopStyle, borderRightStyle)
                    && Objects.equal(borderRightStyle, borderBottomStyle)
                    && Objects.equal(borderBottomStyle, borderLeftStyle)) {
                    return borderTopStyle;
                }
                else {
                    return [borderTopStyle, borderRightStyle, borderBottomStyle, borderLeftStyle];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.borderTopStyle(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.borderRightStyle(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.borderBottomStyle(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.borderLeftStyle(value[3], tween, priority);
                    }
                }
                else {
                    this.borderTopStyle(value, tween, priority);
                    this.borderRightStyle(value, tween, priority);
                    this.borderBottomStyle(value, tween, priority);
                    this.borderLeftStyle(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.prototype.borderWidth = function (value, tween, priority) {
            if (value === void 0) {
                var borderTopWidth = this.borderTopWidth();
                var borderRightWidth = this.borderRightWidth();
                var borderBottomWidth = this.borderBottomWidth();
                var borderLeftWidth = this.borderLeftWidth();
                if (Objects.equal(borderTopWidth, borderRightWidth)
                    && Objects.equal(borderRightWidth, borderBottomWidth)
                    && Objects.equal(borderBottomWidth, borderLeftWidth)) {
                    return borderTopWidth;
                }
                else {
                    return [borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.borderTopWidth(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.borderRightWidth(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.borderBottomWidth(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.borderLeftWidth(value[3], tween, priority);
                    }
                }
                else {
                    this.borderTopWidth(value, tween, priority);
                    this.borderRightWidth(value, tween, priority);
                    this.borderBottomWidth(value, tween, priority);
                    this.borderLeftWidth(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.prototype.font = function (value, tween, priority) {
            if (value === void 0) {
                var style = this.fontStyle();
                var variant = this.fontVariant();
                var weight = this.fontWeight();
                var stretch = this.fontStretch();
                var size = this.fontSize();
                var height = this.lineHeight();
                var family = this.fontFamily();
                if (family !== null && family !== void 0) {
                    return Font.from(style, variant, weight, stretch, size, height, family);
                }
                else {
                    return void 0;
                }
            }
            else {
                value = value !== null ? Font.fromAny(value) : null;
                if (value === null || value.style() !== null) {
                    this.fontStyle(value !== null ? value.style() : null, tween, priority);
                }
                if (value === null || value.variant() !== null) {
                    this.fontVariant(value !== null ? value.variant() : null, tween, priority);
                }
                if (value === null || value.weight() !== null) {
                    this.fontWeight(value !== null ? value.weight() : null, tween, priority);
                }
                if (value === null || value.stretch() !== null) {
                    this.fontStretch(value !== null ? value.stretch() : null, tween, priority);
                }
                if (value === null || value.size() !== null) {
                    this.fontSize(value !== null ? value.size() : null, tween, priority);
                }
                if (value === null || value.height() !== null) {
                    this.lineHeight(value !== null ? value.height() : null, tween, priority);
                }
                this.fontFamily(value !== null ? value.family() : null, tween, priority);
                return this;
            }
        };
        HtmlView.prototype.margin = function (value, tween, priority) {
            if (value === void 0) {
                var marginTop = this.marginTop();
                var marginRight = this.marginRight();
                var marginBottom = this.marginBottom();
                var marginLeft = this.marginLeft();
                if (Objects.equal(marginTop, marginRight)
                    && Objects.equal(marginRight, marginBottom)
                    && Objects.equal(marginBottom, marginLeft)) {
                    return marginTop;
                }
                else {
                    return [marginTop, marginRight, marginBottom, marginLeft];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.marginTop(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.marginRight(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.marginBottom(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.marginLeft(value[3], tween, priority);
                    }
                }
                else {
                    this.marginTop(value, tween, priority);
                    this.marginRight(value, tween, priority);
                    this.marginBottom(value, tween, priority);
                    this.marginLeft(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.prototype.padding = function (value, tween, priority) {
            if (value === void 0) {
                var paddingTop = this.paddingTop();
                var paddingRight = this.paddingRight();
                var paddingBottom = this.paddingBottom();
                var paddingLeft = this.paddingLeft();
                if (Objects.equal(paddingTop, paddingRight)
                    && Objects.equal(paddingRight, paddingBottom)
                    && Objects.equal(paddingBottom, paddingLeft)) {
                    return paddingTop;
                }
                else {
                    return [paddingTop, paddingRight, paddingBottom, paddingLeft];
                }
            }
            else {
                if (Array.isArray(value)) {
                    if (value.length >= 1) {
                        this.paddingTop(value[0], tween, priority);
                    }
                    if (value.length >= 2) {
                        this.paddingRight(value[1], tween, priority);
                    }
                    if (value.length >= 3) {
                        this.paddingBottom(value[2], tween, priority);
                    }
                    if (value.length >= 4) {
                        this.paddingLeft(value[3], tween, priority);
                    }
                }
                else {
                    this.paddingTop(value, tween, priority);
                    this.paddingRight(value, tween, priority);
                    this.paddingBottom(value, tween, priority);
                    this.paddingLeft(value, tween, priority);
                }
                return this;
            }
        };
        HtmlView.create = function (tag) {
            if (typeof tag === "string") {
                if (tag === "svg") {
                    return new View.Svg(document.createElementNS(View.Svg.NS, tag));
                }
                else if (tag === "canvas") {
                    return new View.Canvas(document.createElement(tag));
                }
                else {
                    return new HtmlView(document.createElement(tag));
                }
            }
            else if (typeof tag === "function") {
                return new tag(document.createElement(tag.tag));
            }
            throw new TypeError("" + tag);
        };
        HtmlView.tag = "div";
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "topAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "rightAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "bottomAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "leftAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "widthAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "heightAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "centerXAnchor", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlView.prototype, "centerYAnchor", void 0);
        __decorate([
            AttributeAnimator("autocomplete", String)
        ], HtmlView.prototype, "autocomplete", void 0);
        __decorate([
            AttributeAnimator("checked", Boolean)
        ], HtmlView.prototype, "checked", void 0);
        __decorate([
            AttributeAnimator("disabled", Boolean)
        ], HtmlView.prototype, "disabled", void 0);
        __decorate([
            AttributeAnimator("placeholder", String)
        ], HtmlView.prototype, "placeholder", void 0);
        __decorate([
            AttributeAnimator("selected", Boolean)
        ], HtmlView.prototype, "selected", void 0);
        __decorate([
            AttributeAnimator("title", String)
        ], HtmlView.prototype, "title", void 0);
        __decorate([
            AttributeAnimator("type", String)
        ], HtmlView.prototype, "type", void 0);
        __decorate([
            AttributeAnimator("value", String)
        ], HtmlView.prototype, "value", void 0);
        __decorate([
            StyleAnimator("align-content", String)
        ], HtmlView.prototype, "alignContent", void 0);
        __decorate([
            StyleAnimator("align-items", String)
        ], HtmlView.prototype, "alignItems", void 0);
        __decorate([
            StyleAnimator("align-self", String)
        ], HtmlView.prototype, "alignSelf", void 0);
        __decorate([
            StyleAnimator("appearance", String)
        ], HtmlView.prototype, "appearance", void 0);
        __decorate([
            StyleAnimator(["backdrop-filter", "-webkit-backdrop-filter"], String)
        ], HtmlView.prototype, "backdropFilter", void 0);
        __decorate([
            StyleAnimator("background-color", Color)
        ], HtmlView.prototype, "backgroundColor", void 0);
        __decorate([
            StyleAnimator("border-collapse", String)
        ], HtmlView.prototype, "borderCollapse", void 0);
        __decorate([
            StyleAnimator("border-top-color", [Color, String])
        ], HtmlView.prototype, "borderTopColor", void 0);
        __decorate([
            StyleAnimator("border-right-color", [Color, String])
        ], HtmlView.prototype, "borderRightColor", void 0);
        __decorate([
            StyleAnimator("border-bottom-color", [Color, String])
        ], HtmlView.prototype, "borderBottomColor", void 0);
        __decorate([
            StyleAnimator("border-left-color", [Color, String])
        ], HtmlView.prototype, "borderLeftColor", void 0);
        __decorate([
            StyleAnimator("border-top-left-radius", Length)
        ], HtmlView.prototype, "borderTopLeftRadius", void 0);
        __decorate([
            StyleAnimator("border-top-right-radius", Length)
        ], HtmlView.prototype, "borderTopRightRadius", void 0);
        __decorate([
            StyleAnimator("border-bottom-right-radius", Length)
        ], HtmlView.prototype, "borderBottomRightRadius", void 0);
        __decorate([
            StyleAnimator("border-bottom-left-radius", Length)
        ], HtmlView.prototype, "borderBottomLeftRadius", void 0);
        __decorate([
            StyleAnimator("border-spacing", String)
        ], HtmlView.prototype, "borderSpacing", void 0);
        __decorate([
            StyleAnimator("border-top-style", String)
        ], HtmlView.prototype, "borderTopStyle", void 0);
        __decorate([
            StyleAnimator("border-right-style", String)
        ], HtmlView.prototype, "borderRightStyle", void 0);
        __decorate([
            StyleAnimator("border-bottom-style", String)
        ], HtmlView.prototype, "borderBottomStyle", void 0);
        __decorate([
            StyleAnimator("border-left-style", String)
        ], HtmlView.prototype, "borderLeftStyle", void 0);
        __decorate([
            StyleAnimator("border-top-width", [Length, String])
        ], HtmlView.prototype, "borderTopWidth", void 0);
        __decorate([
            StyleAnimator("border-right-width", [Length, String])
        ], HtmlView.prototype, "borderRightWidth", void 0);
        __decorate([
            StyleAnimator("border-bottom-width", [Length, String])
        ], HtmlView.prototype, "borderBottomWidth", void 0);
        __decorate([
            StyleAnimator("border-left-width", [Length, String])
        ], HtmlView.prototype, "borderLeftWidth", void 0);
        __decorate([
            StyleAnimator("bottom", [Length, String])
        ], HtmlView.prototype, "bottom", void 0);
        __decorate([
            StyleAnimator("box-shadow", BoxShadow)
        ], HtmlView.prototype, "boxShadow", void 0);
        __decorate([
            StyleAnimator("box-sizing", String)
        ], HtmlView.prototype, "boxSizing", void 0);
        __decorate([
            StyleAnimator("color", [Color, String])
        ], HtmlView.prototype, "color", void 0);
        __decorate([
            StyleAnimator("cursor", String)
        ], HtmlView.prototype, "cursor", void 0);
        __decorate([
            StyleAnimator("display", String)
        ], HtmlView.prototype, "display", void 0);
        __decorate([
            StyleAnimator("filter", String)
        ], HtmlView.prototype, "filter", void 0);
        __decorate([
            StyleAnimator("flex-basis", [Length, String])
        ], HtmlView.prototype, "flexBasis", void 0);
        __decorate([
            StyleAnimator("flex-direction", String)
        ], HtmlView.prototype, "flexDirection", void 0);
        __decorate([
            StyleAnimator("flex-grow", Number)
        ], HtmlView.prototype, "flexGrow", void 0);
        __decorate([
            StyleAnimator("flex-shrink", Number)
        ], HtmlView.prototype, "flexShrink", void 0);
        __decorate([
            StyleAnimator("flex-wrap", String)
        ], HtmlView.prototype, "flexWrap", void 0);
        __decorate([
            StyleAnimator("font-family", FontFamily)
        ], HtmlView.prototype, "fontFamily", void 0);
        __decorate([
            StyleAnimator("font-size", [Length, String])
        ], HtmlView.prototype, "fontSize", void 0);
        __decorate([
            StyleAnimator("font-stretch", String)
        ], HtmlView.prototype, "fontStretch", void 0);
        __decorate([
            StyleAnimator("font-style", String)
        ], HtmlView.prototype, "fontStyle", void 0);
        __decorate([
            StyleAnimator("font-variant", String)
        ], HtmlView.prototype, "fontVariant", void 0);
        __decorate([
            StyleAnimator("font-weight", String)
        ], HtmlView.prototype, "fontWeight", void 0);
        __decorate([
            StyleAnimator("height", [Length, String])
        ], HtmlView.prototype, "height", void 0);
        __decorate([
            StyleAnimator("justify-content", String)
        ], HtmlView.prototype, "justifyContent", void 0);
        __decorate([
            StyleAnimator("left", [Length, String])
        ], HtmlView.prototype, "left", void 0);
        __decorate([
            StyleAnimator("line-height", LineHeight)
        ], HtmlView.prototype, "lineHeight", void 0);
        __decorate([
            StyleAnimator("margin-top", [Length, String])
        ], HtmlView.prototype, "marginTop", void 0);
        __decorate([
            StyleAnimator("margin-right", [Length, String])
        ], HtmlView.prototype, "marginRight", void 0);
        __decorate([
            StyleAnimator("margin-bottom", [Length, String])
        ], HtmlView.prototype, "marginBottom", void 0);
        __decorate([
            StyleAnimator("margin-left", [Length, String])
        ], HtmlView.prototype, "marginLeft", void 0);
        __decorate([
            StyleAnimator("max-height", [Length, String])
        ], HtmlView.prototype, "maxHeight", void 0);
        __decorate([
            StyleAnimator("max-width", [Length, String])
        ], HtmlView.prototype, "maxWidth", void 0);
        __decorate([
            StyleAnimator("min-height", [Length, String])
        ], HtmlView.prototype, "minHeight", void 0);
        __decorate([
            StyleAnimator("min-width", [Length, String])
        ], HtmlView.prototype, "minWidth", void 0);
        __decorate([
            StyleAnimator("opacity", Number)
        ], HtmlView.prototype, "opacity", void 0);
        __decorate([
            StyleAnimator("order", Number)
        ], HtmlView.prototype, "order", void 0);
        __decorate([
            StyleAnimator("outline-color", [Color, String])
        ], HtmlView.prototype, "outlineColor", void 0);
        __decorate([
            StyleAnimator("outline-style", String)
        ], HtmlView.prototype, "outlineStyle", void 0);
        __decorate([
            StyleAnimator("outline-width", [Length, String])
        ], HtmlView.prototype, "outlineWidth", void 0);
        __decorate([
            StyleAnimator("overflow", String)
        ], HtmlView.prototype, "overflow", void 0);
        __decorate([
            StyleAnimator("overflow-x", String)
        ], HtmlView.prototype, "overflowX", void 0);
        __decorate([
            StyleAnimator("overflow-y", String)
        ], HtmlView.prototype, "overflowY", void 0);
        __decorate([
            StyleAnimator("padding-top", Length)
        ], HtmlView.prototype, "paddingTop", void 0);
        __decorate([
            StyleAnimator("padding-right", Length)
        ], HtmlView.prototype, "paddingRight", void 0);
        __decorate([
            StyleAnimator("padding-bottom", Length)
        ], HtmlView.prototype, "paddingBottom", void 0);
        __decorate([
            StyleAnimator("padding-left", Length)
        ], HtmlView.prototype, "paddingLeft", void 0);
        __decorate([
            StyleAnimator("pointer-events", String)
        ], HtmlView.prototype, "pointerEvents", void 0);
        __decorate([
            StyleAnimator("position", String)
        ], HtmlView.prototype, "position", void 0);
        __decorate([
            StyleAnimator("right", [Length, String])
        ], HtmlView.prototype, "right", void 0);
        __decorate([
            StyleAnimator("text-align", String)
        ], HtmlView.prototype, "textAlign", void 0);
        __decorate([
            StyleAnimator("text-decoration-color", [Color, String])
        ], HtmlView.prototype, "textDecorationColor", void 0);
        __decorate([
            StyleAnimator("text-decoration-line", String)
        ], HtmlView.prototype, "textDecorationLine", void 0);
        __decorate([
            StyleAnimator("text-decoration-style", String)
        ], HtmlView.prototype, "textDecorationStyle", void 0);
        __decorate([
            StyleAnimator("text-overflow", String)
        ], HtmlView.prototype, "textOverflow", void 0);
        __decorate([
            StyleAnimator("text-transform", String)
        ], HtmlView.prototype, "textTransform", void 0);
        __decorate([
            StyleAnimator("top", [Length, String])
        ], HtmlView.prototype, "top", void 0);
        __decorate([
            StyleAnimator("transform", Transform)
        ], HtmlView.prototype, "transform", void 0);
        __decorate([
            StyleAnimator(["user-select", "-webkit-user-select", "-moz-user-select", "-ms-user-select"], String)
        ], HtmlView.prototype, "userSelect", void 0);
        __decorate([
            StyleAnimator("vertical-align", [Length, String])
        ], HtmlView.prototype, "verticalAlign", void 0);
        __decorate([
            StyleAnimator("visibility", String)
        ], HtmlView.prototype, "visibility", void 0);
        __decorate([
            StyleAnimator("white-space", String)
        ], HtmlView.prototype, "whiteSpace", void 0);
        __decorate([
            StyleAnimator("width", [Length, String])
        ], HtmlView.prototype, "width", void 0);
        __decorate([
            StyleAnimator("z-index", [Number, String])
        ], HtmlView.prototype, "zIndex", void 0);
        return HtmlView;
    }(ElementView));
    View.Html = HtmlView;

    var HtmlViewController = (function (_super) {
        __extends(HtmlViewController, _super);
        function HtmlViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(HtmlViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        return HtmlViewController;
    }(ElementViewController));

    var CanvasView = (function (_super) {
        __extends(CanvasView, _super);
        function CanvasView(node, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, node, key) || this;
            _this.onClick = _this.onClick.bind(_this);
            _this.onDblClick = _this.onDblClick.bind(_this);
            _this.onContextMenu = _this.onContextMenu.bind(_this);
            _this.onMouseDown = _this.onMouseDown.bind(_this);
            _this.onMouseMove = _this.onMouseMove.bind(_this);
            _this.onMouseUp = _this.onMouseUp.bind(_this);
            _this.onWheel = _this.onWheel.bind(_this);
            _this.onTouchStart = _this.onTouchStart.bind(_this);
            _this.onTouchMove = _this.onTouchMove.bind(_this);
            _this.onTouchCancel = _this.onTouchCancel.bind(_this);
            _this.onTouchEnd = _this.onTouchEnd.bind(_this);
            _this._renderViews = [];
            _this._bounds = BoxR2.empty();
            _this._anchor = PointR2.origin();
            _this._dirty = true;
            _this._clientX = 0;
            _this._clientY = 0;
            _this._screenX = 0;
            _this._screenY = 0;
            _this._hoverView = null;
            _this._touches = {};
            return _this;
        }
        Object.defineProperty(CanvasView.prototype, "node", {
            get: function () {
                return this._node;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.initNode = function (node) {
            node.style.position = "absolute";
        };
        Object.defineProperty(CanvasView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasView.prototype, "canvasView", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasView.prototype, "childViews", {
            get: function () {
                var childNodes = this._node.childNodes;
                var childViews = [];
                for (var i = 0, n = childNodes.length; i < n; i += 1) {
                    var childView = childNodes[i].view;
                    if (childView) {
                        childViews.push(childView);
                    }
                }
                childViews.push.apply(childViews, this._renderViews);
                return childViews;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.getChildView = function (key) {
            var renderViews = this._renderViews;
            for (var i = renderViews.length - 1; i >= 0; i -= 1) {
                var renderView = renderViews[i];
                if (renderView.key() === key) {
                    return renderView;
                }
            }
            var childNodes = this._node.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i -= 1) {
                var childView = childNodes[i].view;
                if (childView && childView.key() === key) {
                    return childView;
                }
            }
            return null;
        };
        CanvasView.prototype.setChildView = function (key, newChildView) {
            if (RenderView.is(newChildView)) {
                return this.setRenderView(key, newChildView);
            }
            else {
                return _super.prototype.setChildView.call(this, key, newChildView);
            }
        };
        CanvasView.prototype.setRenderView = function (key, newChildView) {
            if (!RenderView.is(newChildView)) {
                throw new TypeError("" + newChildView);
            }
            var oldChildView = null;
            var targetView = null;
            var renderViews = this._renderViews;
            var index = renderViews.length - 1;
            while (index >= 0) {
                var childView = renderViews[index];
                if (childView.key() === key) {
                    oldChildView = childView;
                    targetView = renderViews[index + 1] || null;
                    this.willRemoveChildView(childView);
                    childView.setParentView(null);
                    renderViews.splice(index, 1);
                    this.onRemoveChildView(childView);
                    this.didRemoveChildView(childView);
                    break;
                }
                index -= 1;
            }
            if (newChildView) {
                newChildView.key(key);
                this.willInsertChildView(newChildView, targetView);
                if (index >= 0) {
                    renderViews.splice(index, 0, newChildView);
                }
                else {
                    renderViews.push(newChildView);
                }
                newChildView.setParentView(this);
                this.onInsertChildView(newChildView, targetView);
                this.didInsertChildView(newChildView, targetView);
                this.animate();
            }
            return oldChildView;
        };
        Object.defineProperty(CanvasView.prototype, "renderViews", {
            get: function () {
                return this._renderViews;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.append = function (child, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.appendChildView(child);
            return child;
        };
        CanvasView.prototype.appendChildView = function (childView) {
            if (RenderView.is(childView)) {
                this.appendRenderView(childView);
            }
            else {
                _super.prototype.appendChildView.call(this, childView);
            }
        };
        CanvasView.prototype.appendRenderView = function (renderView) {
            this.willInsertChildView(renderView, null);
            this._renderViews.push(renderView);
            renderView.setParentView(this);
            this.onInsertChildView(renderView, null);
            this.didInsertChildView(renderView, null);
            this.animate();
        };
        CanvasView.prototype.prepend = function (child, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.prependChildView(child);
            return child;
        };
        CanvasView.prototype.prependChildView = function (childView) {
            if (RenderView.is(childView)) {
                this.prependRenderView(childView);
            }
            else {
                _super.prototype.prependChildView.call(this, childView);
            }
        };
        CanvasView.prototype.prependRenderView = function (renderView) {
            this.willInsertChildView(renderView, null);
            this._renderViews.unshift(renderView);
            renderView.setParentView(this);
            this.onInsertChildView(renderView, null);
            this.didInsertChildView(renderView, null);
            this.animate();
        };
        CanvasView.prototype.insert = function (child, target, key) {
            if (typeof child === "string") {
                child = HtmlView.create(child);
            }
            if (child instanceof Node) {
                child = View.fromNode(child);
            }
            if (typeof child === "function") {
                child = View.create(child, key);
            }
            this.insertChild(child, target);
            return child;
        };
        CanvasView.prototype.insertChildView = function (childView, targetView) {
            if (RenderView.is(childView) && RenderView.is(targetView)) {
                this.insertRenderView(childView, targetView);
            }
            else {
                _super.prototype.insertChildView.call(this, childView, targetView);
            }
        };
        CanvasView.prototype.insertRenderView = function (renderView, targetView) {
            if (targetView !== null && !RenderView.is(targetView)) {
                throw new TypeError("" + targetView);
            }
            if (targetView !== null && targetView.parentView !== this) {
                throw new TypeError("" + targetView);
            }
            var renderViews = this._renderViews;
            this.willInsertChildView(renderView, targetView);
            var index = targetView ? renderViews.indexOf(targetView) : -1;
            if (index >= 0) {
                renderViews.splice(index, 0, renderView);
            }
            else {
                renderViews.push(renderView);
            }
            renderView.setParentView(this);
            this.onInsertChildView(renderView, targetView);
            this.didInsertChildView(renderView, targetView);
            this.animate();
        };
        CanvasView.prototype.onInsertChildView = function (childView, targetView) {
            _super.prototype.onInsertChildView.call(this, childView, targetView);
            if (RenderView.is(childView)) {
                this.setChildViewBounds(childView, this._bounds);
                this.setChildViewAnchor(childView, this._anchor);
            }
        };
        CanvasView.prototype.removeChildView = function (childView) {
            if (RenderView.is(childView)) {
                this.removeRenderView(childView);
            }
            else {
                _super.prototype.removeChildView.call(this, childView);
            }
        };
        CanvasView.prototype.removeRenderView = function (renderView) {
            if (renderView.parentView !== this) {
                throw new TypeError("" + renderView);
            }
            var renderViews = this._renderViews;
            this.willRemoveChildView(renderView);
            renderView.setParentView(null);
            var index = renderViews.indexOf(renderView);
            if (index >= 0) {
                renderViews.splice(index, 1);
            }
            this.onRemoveChildView(renderView);
            this.didRemoveChildView(renderView);
            this.animate();
        };
        CanvasView.prototype.removeAll = function () {
            _super.prototype.removeAll.call(this);
            var renderViews = this._renderViews;
            do {
                var count = renderViews.length;
                if (count > 0) {
                    var childView = renderViews[count - 1];
                    this.willRemoveChildView(childView);
                    childView.setParentView(null);
                    renderViews.pop();
                    this.onRemoveChildView(childView);
                    this.didRemoveChildView(childView);
                    this.animate();
                    continue;
                }
                break;
            } while (true);
        };
        CanvasView.prototype.cascadeMount = function () {
            this.willMount();
            this.onMount();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeMount();
                }
            }
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeMount();
            }
            this.didMount();
        };
        CanvasView.prototype.onMount = function () {
            _super.prototype.onMount.call(this);
            this.resizeCanvas(this._node);
            this.animate();
            this.addEventListeners(this._node);
        };
        CanvasView.prototype.cascadeUnmount = function () {
            this.willUnmount();
            this.onUnmount();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeUnmount();
                }
            }
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeUnmount();
            }
            this.didUnmount();
        };
        CanvasView.prototype.onUnmount = function () {
            this.removeEventListeners(this._node);
            if (this._animationFrame) {
                cancelAnimationFrame(this._animationFrame);
                this._animationFrame = 0;
            }
            _super.prototype.onUnmount.call(this);
        };
        CanvasView.prototype.cascadeResize = function () {
            this.willResize();
            this.onResize();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeResize();
                }
            }
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeResize();
            }
            this.didResize();
        };
        CanvasView.prototype.onResize = function () {
            _super.prototype.onResize.call(this);
            this.resizeCanvas(this._node);
            this.setDirty(true);
        };
        CanvasView.prototype.didResize = function () {
            this.cascadeRender();
            _super.prototype.didResize.call(this);
        };
        CanvasView.prototype.cascadeLayout = function () {
            this.willLayout();
            this.onLayout();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeLayout();
                }
            }
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeLayout();
            }
            this.didLayout();
        };
        CanvasView.prototype.cascadeScroll = function () {
            this.willScroll();
            this.onScroll();
            var childNodes = this._node.childNodes;
            for (var i = 0, n = childNodes.length; i < n; i += 1) {
                var childView = childNodes[i].view;
                if (childView) {
                    childView.cascadeScroll();
                }
            }
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeScroll();
            }
            this.didScroll();
        };
        CanvasView.prototype.onAnimationFrame = function (timestamp) {
            this._animationFrame = 0;
            this.cascadeAnimate(timestamp);
            this.cascadeCull();
            this.cascadeRender();
            this.detectMouseHover();
        };
        CanvasView.prototype.cascadeAnimate = function (frame) {
            this.willAnimate(frame);
            this.onAnimate(frame);
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeAnimate(frame);
            }
            this.didAnimate(frame);
        };
        CanvasView.prototype.cascadeRender = function (context) {
            if (context === void 0) { context = this.getContext(); }
            this.willRender(context);
            this.onRender(context);
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                var renderView = renderViews[i];
                renderView.cascadeRender(context);
            }
            this.didRender(context);
        };
        CanvasView.prototype.willRender = function (context) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillRender) {
                    viewObserver.viewWillRender(context, this);
                }
            });
        };
        CanvasView.prototype.onRender = function (context) {
            var bounds = this._bounds;
            context.clearRect(0, 0, bounds.width, bounds.height);
        };
        CanvasView.prototype.didRender = function (context) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidRender) {
                    viewObserver.viewDidRender(context, this);
                }
            });
        };
        Object.defineProperty(CanvasView.prototype, "hidden", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.setHidden = function (hidden) {
        };
        CanvasView.prototype.cascadeCull = function () {
            this.willCull();
            this.onCull();
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (RenderView.is(childView)) {
                    childView.cascadeCull();
                }
            }
            this.didCull();
        };
        CanvasView.prototype.willCull = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillCull) {
                    viewObserver.viewWillCull(this);
                }
            });
        };
        CanvasView.prototype.onCull = function () {
        };
        CanvasView.prototype.didCull = function () {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidCull) {
                    viewObserver.viewDidCull(this);
                }
            });
        };
        Object.defineProperty(CanvasView.prototype, "culled", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.setCulled = function (culled) {
        };
        Object.defineProperty(CanvasView.prototype, "bounds", {
            get: function () {
                return this._bounds;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.setBounds = function (bounds) {
            var newBounds = this.willSetBounds(bounds);
            if (newBounds !== void 0) {
                bounds = newBounds;
            }
            var oldBounds = this._bounds;
            this._bounds = bounds;
            this.onSetBounds(bounds, oldBounds);
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                this.setChildViewBounds(renderViews[i], bounds);
            }
            this.didSetBounds(bounds, oldBounds);
        };
        CanvasView.prototype.willSetBounds = function (bounds) {
            var viewController = this._viewController;
            if (viewController) {
                var newBounds = viewController.viewWillSetBounds(bounds, this);
                if (newBounds !== void 0) {
                    bounds = newBounds;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetBounds) {
                    viewObserver.viewWillSetBounds(bounds, this);
                }
            }
        };
        CanvasView.prototype.onSetBounds = function (newBounds, oldBounds) {
        };
        CanvasView.prototype.didSetBounds = function (newBounds, oldBounds) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetBounds) {
                    viewObserver.viewDidSetBounds(newBounds, oldBounds, this);
                }
            });
        };
        CanvasView.prototype.setChildViewBounds = function (childView, bounds) {
            childView.setBounds(bounds);
        };
        Object.defineProperty(CanvasView.prototype, "anchor", {
            get: function () {
                return this._anchor;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.setAnchor = function (anchor) {
            var newAnchor = this.willSetAnchor(anchor);
            if (newAnchor !== void 0) {
                anchor = newAnchor;
            }
            var oldAnchor = this._anchor;
            this._anchor = anchor;
            this.onSetAnchor(anchor, oldAnchor);
            var renderViews = this._renderViews;
            for (var i = 0, n = renderViews.length; i < n; i += 1) {
                this.setChildViewAnchor(renderViews[i], anchor);
            }
            this.didSetAnchor(anchor, oldAnchor);
        };
        CanvasView.prototype.willSetAnchor = function (anchor) {
            var viewController = this._viewController;
            if (viewController) {
                var newAnchor = viewController.viewWillSetAnchor(anchor, this);
                if (newAnchor !== void 0) {
                    anchor = newAnchor;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetAnchor) {
                    viewObserver.viewWillSetAnchor(anchor, this);
                }
            }
        };
        CanvasView.prototype.onSetAnchor = function (newAnchor, oldAnchor) {
        };
        CanvasView.prototype.didSetAnchor = function (newAnchor, oldAnchor) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetAnchor) {
                    viewObserver.viewDidSetAnchor(newAnchor, oldAnchor, this);
                }
            });
        };
        CanvasView.prototype.setChildViewAnchor = function (childView, anchor) {
            childView.setAnchor(anchor);
        };
        Object.defineProperty(CanvasView.prototype, "pixelRatio", {
            get: function () {
                return window.devicePixelRatio || 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasView.prototype, "hitBounds", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        CanvasView.prototype.hitTest = function (x, y, context) {
            if (context === void 0) { context = this.getContext(); }
            var hit = null;
            var renderViews = this._renderViews;
            for (var i = renderViews.length - 1; i >= 0; i -= 1) {
                var renderView = renderViews[i];
                if (!renderView.hidden && !renderView.culled) {
                    var hitBounds = renderView.hitBounds || renderView.bounds;
                    if (hitBounds.contains(x, y)) {
                        hit = renderView.hitTest(x, y, context);
                        if (hit !== null) {
                            break;
                        }
                    }
                }
            }
            return hit;
        };
        CanvasView.prototype.handleEvent = function (event) {
        };
        CanvasView.prototype.bubbleEvent = function (event) {
            return this;
        };
        CanvasView.prototype.addEventListeners = function (node) {
            node.addEventListener("click", this.onClick);
            node.addEventListener("dblclick", this.onDblClick);
            node.addEventListener("contextmenu", this.onContextMenu);
            node.addEventListener("mousedown", this.onMouseDown);
            window.addEventListener("mousemove", this.onMouseMove);
            node.addEventListener("mouseup", this.onMouseUp);
            node.addEventListener("wheel", this.onWheel);
            node.addEventListener("touchstart", this.onTouchStart);
            node.addEventListener("touchmove", this.onTouchMove);
            node.addEventListener("touchcancel", this.onTouchCancel);
            node.addEventListener("touchend", this.onTouchEnd);
        };
        CanvasView.prototype.removeEventListeners = function (node) {
            node.removeEventListener("click", this.onClick);
            node.removeEventListener("dblclick", this.onDblClick);
            node.removeEventListener("contextmenu", this.onContextMenu);
            node.removeEventListener("mousedown", this.onMouseDown);
            window.removeEventListener("mousemove", this.onMouseMove);
            node.removeEventListener("mouseup", this.onMouseUp);
            node.removeEventListener("wheel", this.onWheel);
            node.removeEventListener("touchstart", this.onTouchStart);
            node.removeEventListener("touchmove", this.onTouchMove);
            node.removeEventListener("touchcancel", this.onTouchCancel);
            node.removeEventListener("touchend", this.onTouchEnd);
        };
        CanvasView.prototype.fireEvent = function (event, clientX, clientY) {
            var bounds = this.clientBounds;
            if (bounds.contains(clientX, clientY)) {
                var x = clientX - bounds.x;
                var y = clientY - bounds.y;
                var hit = this.hitTest(x, y);
                if (hit) {
                    event.targetView = hit;
                    hit.bubbleEvent(event);
                    return hit;
                }
            }
            return null;
        };
        CanvasView.prototype.fireMouseEvent = function (event) {
            return this.fireEvent(event, event.clientX, event.clientY);
        };
        CanvasView.prototype.onClick = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onDblClick = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onContextMenu = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onMouseDown = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onMouseMove = function (event) {
            this._clientX = event.clientX;
            this._clientY = event.clientY;
            this._screenX = event.screenX;
            this._screenY = event.screenY;
            var oldHoverView = this._hoverView;
            var newHoverView = this.fireMouseEvent(event);
            if (newHoverView !== this._hoverView) {
                this.onMouseHoverChange(newHoverView, oldHoverView);
            }
        };
        CanvasView.prototype.onMouseUp = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onWheel = function (event) {
            this.fireMouseEvent(event);
        };
        CanvasView.prototype.onMouseHoverChange = function (newHoverView, oldHoverView) {
            var eventInit = {
                clientX: this._clientX,
                clientY: this._clientY,
                screenX: this._screenX,
                screenY: this._screenY,
                bubbles: true,
            };
            if (oldHoverView) {
                var outEvent = new MouseEvent("mouseout", eventInit);
                outEvent.targetView = oldHoverView;
                outEvent.relatedTargetView = newHoverView;
                oldHoverView.bubbleEvent(outEvent);
            }
            this._hoverView = newHoverView;
            if (newHoverView) {
                var overEvent = new MouseEvent("mouseover", eventInit);
                overEvent.targetView = newHoverView;
                overEvent.relatedTargetView = oldHoverView;
                newHoverView.bubbleEvent(overEvent);
            }
        };
        CanvasView.prototype.detectMouseHover = function () {
            var bounds = this.clientBounds;
            if (bounds.contains(this._clientX, this._clientY)) {
                var x = this._clientX - bounds.x;
                var y = this._clientY - bounds.y;
                var oldHoverView = this._hoverView;
                var newHoverView = this.hitTest(x, y);
                if (newHoverView !== this._hoverView) {
                    this.onMouseHoverChange(newHoverView, oldHoverView);
                }
            }
        };
        CanvasView.prototype.fireTouchEvent = function (type, originalEvent, dispatched) {
            var changedTouches = originalEvent.changedTouches;
            for (var i = 0, n = changedTouches.length; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                var targetView = changedTouch.targetView;
                if (targetView && dispatched.indexOf(targetView) < 0) {
                    var startEvent = new TouchEvent(type, {
                        changedTouches: changedTouches,
                        targetTouches: originalEvent.targetTouches,
                        touches: originalEvent.touches,
                        bubbles: true,
                    });
                    startEvent.targetView = targetView;
                    var targetViewTouches = [changedTouch];
                    for (var j = i + 1; j < n; j += 1) {
                        var nextTouch = changedTouches[j];
                        if (nextTouch.targetView === targetView) {
                            targetViewTouches.push(nextTouch);
                        }
                    }
                    startEvent.targetViewTouches = document.createTouchList.apply(document, targetViewTouches);
                    targetView.bubbleEvent(startEvent);
                    dispatched.push(targetView);
                }
            }
        };
        CanvasView.prototype.onTouchStart = function (event) {
            var bounds = this.clientBounds;
            var changedTouches = event.changedTouches;
            for (var i = 0, n = changedTouches.length; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                var clientX = changedTouch.clientX;
                var clientY = changedTouch.clientY;
                if (bounds.contains(clientX, clientY)) {
                    var x = clientX - bounds.x;
                    var y = clientY - bounds.y;
                    var hit = this.hitTest(x, y);
                    if (hit) {
                        changedTouch.targetView = hit;
                    }
                }
                this._touches[changedTouch.identifier] = changedTouch;
            }
            var dispatched = [];
            this.fireTouchEvent("touchstart", event, dispatched);
        };
        CanvasView.prototype.onTouchMove = function (event) {
            var changedTouches = event.changedTouches;
            for (var i = 0, n = changedTouches.length; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                var touch = this._touches[changedTouch.identifier];
                if (touch) {
                    changedTouch.targetView = touch.targetView;
                }
            }
            var dispatched = [];
            this.fireTouchEvent("touchmove", event, dispatched);
        };
        CanvasView.prototype.onTouchCancel = function (event) {
            var changedTouches = event.changedTouches;
            var n = changedTouches.length;
            for (var i = 0; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                var touch = this._touches[changedTouch.identifier];
                if (touch) {
                    changedTouch.targetView = touch.targetView;
                }
            }
            var dispatched = [];
            this.fireTouchEvent("touchcancel", event, dispatched);
            for (var i = 0; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                delete this._touches[changedTouch.identifier];
            }
        };
        CanvasView.prototype.onTouchEnd = function (event) {
            var changedTouches = event.changedTouches;
            var n = changedTouches.length;
            for (var i = 0; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                var touch = this._touches[changedTouch.identifier];
                if (touch) {
                    changedTouch.targetView = touch.targetView;
                }
            }
            var dispatched = [];
            this.fireTouchEvent("touchend", event, dispatched);
            for (var i = 0; i < n; i += 1) {
                var changedTouch = changedTouches[i];
                delete this._touches[changedTouch.identifier];
            }
        };
        CanvasView.prototype.getContext = function () {
            return this._node.getContext("2d");
        };
        CanvasView.prototype.resizeCanvas = function (node) {
            var width;
            var height;
            var pixelRatio;
            var parentNode = node.parentNode;
            if (parentNode instanceof HTMLElement) {
                var bounds = void 0;
                do {
                    bounds = parentNode.getBoundingClientRect();
                    if (bounds.width && bounds.height) {
                        break;
                    }
                    parentNode = parentNode.parentNode;
                } while (parentNode instanceof HTMLElement);
                width = Math.floor(bounds.width);
                height = Math.floor(bounds.height);
                pixelRatio = this.pixelRatio;
                node.width = width * pixelRatio;
                node.height = height * pixelRatio;
                node.style.width = width + "px";
                node.style.height = height + "px";
            }
            else {
                width = Math.floor(node.width);
                height = Math.floor(node.height);
                pixelRatio = 1;
            }
            var context = this.getContext();
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            this.setBounds(new BoxR2(0, 0, width, height));
            this.setAnchor(new PointR2(width / 2, height / 2));
        };
        CanvasView.tag = "canvas";
        return CanvasView;
    }(HtmlView));
    View.Canvas = CanvasView;

    var CanvasViewController = (function (_super) {
        __extends(CanvasViewController, _super);
        function CanvasViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CanvasViewController.prototype, "node", {
            get: function () {
                var view = this._view;
                return view ? view.node : null;
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.animate = function () {
            var view = this._view;
            if (view) {
                view.animate();
            }
        };
        CanvasViewController.prototype.viewWillAnimate = function (frame, view) {
        };
        CanvasViewController.prototype.viewDidAnimate = function (frame, view) {
        };
        CanvasViewController.prototype.viewWillRender = function (context, view) {
        };
        CanvasViewController.prototype.viewDidRender = function (context, view) {
        };
        Object.defineProperty(CanvasViewController.prototype, "hidden", {
            get: function () {
                var view = this._view;
                return view ? view.hidden : false;
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.viewWillSetHidden = function (hidden, view) {
        };
        CanvasViewController.prototype.viewDidSetHidden = function (hidden, view) {
        };
        CanvasViewController.prototype.viewWillCull = function (view) {
        };
        CanvasViewController.prototype.viewDidCull = function (view) {
        };
        Object.defineProperty(CanvasViewController.prototype, "culled", {
            get: function () {
                var view = this._view;
                return view ? view.culled : false;
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.viewWillSetCulled = function (culled, view) {
        };
        CanvasViewController.prototype.viewDidSetCulled = function (culled, view) {
        };
        Object.defineProperty(CanvasViewController.prototype, "bounds", {
            get: function () {
                var view = this._view;
                return view ? view.bounds : BoxR2.empty();
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.viewWillSetBounds = function (bounds, view) {
        };
        CanvasViewController.prototype.viewDidSetBounds = function (newBounds, oldBounds, view) {
        };
        Object.defineProperty(CanvasViewController.prototype, "anchor", {
            get: function () {
                var view = this._view;
                return view ? view.anchor : PointR2.origin();
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.viewWillSetAnchor = function (anchor, view) {
        };
        CanvasViewController.prototype.viewDidSetAnchor = function (newAnchor, oldAnchor, view) {
        };
        Object.defineProperty(CanvasViewController.prototype, "dirty", {
            get: function () {
                var view = this._view;
                return view ? view.dirty : false;
            },
            enumerable: true,
            configurable: true
        });
        CanvasViewController.prototype.setDirty = function (dirty) {
            var view = this._view;
            if (view) {
                view.setDirty(dirty);
            }
        };
        return CanvasViewController;
    }(HtmlViewController));

    var HtmlAppView = (function (_super) {
        __extends(HtmlAppView, _super);
        function HtmlAppView(node, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, node, key) || this;
            _this.doLayout = _this.doLayout.bind(_this);
            _this.throttleResize = _this.throttleResize.bind(_this);
            _this.doResize = _this.doResize.bind(_this);
            _this.throttleScroll = _this.throttleScroll.bind(_this);
            _this.doScroll = _this.doScroll.bind(_this);
            _this.onClick = _this.onClick.bind(_this);
            _this._popovers = [];
            _this._layoutTimer = 0;
            _this._resizeTimer = 0;
            _this._scrollTimer = 0;
            if (typeof window !== "undefined") {
                window.addEventListener("resize", _this.throttleResize);
                window.addEventListener("scroll", _this.throttleScroll, { passive: true });
                window.addEventListener('click', _this.onClick);
            }
            return _this;
        }
        Object.defineProperty(HtmlAppView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HtmlAppView.prototype, "appView", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HtmlAppView.prototype, "popovers", {
            get: function () {
                return this._popovers;
            },
            enumerable: true,
            configurable: true
        });
        HtmlAppView.prototype.togglePopover = function (popover, options) {
            var popoverState = popover.popoverState;
            if (popoverState === "hidden" || popoverState === "hiding") {
                this.showPopover(popover, options);
            }
            else if (popoverState === "shown" || popoverState === "showing") {
                this.hidePopover(popover);
            }
        };
        HtmlAppView.prototype.showPopover = function (popover, options) {
            if (options === void 0) { options = {}; }
            this.willShowPopover(popover, options);
            if (options && !options.multi) {
                this.hidePopovers();
            }
            if (this._popovers.indexOf(popover) < 0) {
                this._popovers.push(popover);
            }
            var popoverView = popover.popoverView;
            if (popoverView && !popoverView.isMounted()) {
                this.insertPopoverView(popoverView);
            }
            this.onShowPopover(popover, options);
            popover.showPopover(true);
            this.didShowPopover(popover, options);
        };
        HtmlAppView.prototype.insertPopoverView = function (popoverView) {
            this.appendChildView(popoverView);
        };
        HtmlAppView.prototype.willShowPopover = function (popover, options) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillShowPopover) {
                    viewObserver.viewWillShowPopover(popover, options, this);
                }
            });
        };
        HtmlAppView.prototype.onShowPopover = function (popover, options) {
        };
        HtmlAppView.prototype.didShowPopover = function (popover, options) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidShowPopover) {
                    viewObserver.viewDidShowPopover(popover, options, this);
                }
            });
        };
        HtmlAppView.prototype.hidePopover = function (popover) {
            var popovers = this._popovers;
            var index = popovers.indexOf(popover);
            if (index >= 0) {
                this.willHidePopover(popover);
                popovers.splice(index, 1);
                this.onHidePopover(popover);
                popover.hidePopover(true);
                this.didHidePopover(popover);
            }
        };
        HtmlAppView.prototype.willHidePopover = function (popover) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.viewWillHidePopover) {
                    viewObserver.viewWillHidePopover(popover, this);
                }
            });
        };
        HtmlAppView.prototype.onHidePopover = function (popover) {
        };
        HtmlAppView.prototype.didHidePopover = function (popover) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidHidePopover) {
                    viewObserver.viewDidHidePopover(popover, this);
                }
            });
        };
        HtmlAppView.prototype.hidePopovers = function () {
            var popovers = this._popovers;
            while (popovers.length) {
                var popover = popovers[0];
                this.willHidePopover(popover);
                popovers.shift();
                this.onHidePopover(popover);
                popover.hidePopover(true);
                this.didHidePopover(popover);
            }
        };
        Object.defineProperty(HtmlAppView.prototype, "viewport", {
            get: function () {
                var viewport = this._viewport;
                if (viewport === void 0) {
                    var insetTop = 0;
                    var insetRight = 0;
                    var insetBottom = 0;
                    var insetLeft = 0;
                    var div = document.createElement("div");
                    div.style.setProperty("position", "fixed");
                    div.style.setProperty("top", "0");
                    div.style.setProperty("right", "0");
                    div.style.setProperty("width", "100vw");
                    div.style.setProperty("height", "100vh");
                    div.style.setProperty("box-sizing", "border-box");
                    div.style.setProperty("padding-top", "env(safe-area-inset-top)");
                    div.style.setProperty("padding-right", "env(safe-area-inset-right)");
                    div.style.setProperty("padding-bottom", "env(safe-area-inset-bottom)");
                    div.style.setProperty("padding-left", "env(safe-area-inset-left)");
                    div.style.setProperty("overflow", "hidden");
                    div.style.setProperty("visibility", "hidden");
                    document.body.appendChild(div);
                    var style = window.getComputedStyle(div);
                    var width = parseFloat(style.getPropertyValue("width"));
                    var height = parseFloat(style.getPropertyValue("height"));
                    if (typeof CSS !== "undefined" && typeof CSS.supports === "function"
                        && CSS.supports("padding-top: env(safe-area-inset-top)")) {
                        insetTop = parseFloat(style.getPropertyValue("padding-top"));
                        insetRight = parseFloat(style.getPropertyValue("padding-right"));
                        insetBottom = parseFloat(style.getPropertyValue("padding-bottom"));
                        insetLeft = parseFloat(style.getPropertyValue("padding-left"));
                    }
                    document.body.removeChild(div);
                    var orientation_1 = screen.msOrientation ||
                        screen.mozOrientation ||
                        (screen.orientation || {}).type;
                    if (!orientation_1) {
                        switch (window.orientation) {
                            case 0:
                                orientation_1 = "portrait-primary";
                                break;
                            case 180:
                                orientation_1 = "portrait-secondary";
                                break;
                            case -90:
                                orientation_1 = "landscape-primary";
                                break;
                            case 90:
                                orientation_1 = "landscape-secondary";
                                break;
                            default: orientation_1 = "landscape-primary";
                        }
                    }
                    var safeArea = { insetTop: insetTop, insetRight: insetRight, insetBottom: insetBottom, insetLeft: insetLeft };
                    viewport = { width: width, height: height, orientation: orientation_1, safeArea: safeArea };
                    this._viewport = viewport;
                }
                return viewport;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HtmlAppView.prototype, "solver", {
            get: function () {
                return this._solver || null;
            },
            enumerable: true,
            configurable: true
        });
        HtmlAppView.prototype.activateVariable = function (variable) {
            if (this._solver === void 0) {
                this._solver = new LayoutSolver(this);
            }
            this._solver.addVariable(variable);
        };
        HtmlAppView.prototype.deactivateVariable = function (variable) {
            if (this._solver !== void 0) {
                this._solver.removeVariable(variable);
            }
        };
        HtmlAppView.prototype.setVariableState = function (variable, state) {
            if (this._solver !== void 0) {
                this._solver.setVariableState(variable, state);
            }
        };
        HtmlAppView.prototype.activateConstraint = function (constraint) {
            if (this._solver === void 0) {
                this._solver = new LayoutSolver(this);
            }
            this._solver.addConstraint(constraint);
        };
        HtmlAppView.prototype.deactivateConstraint = function (constraint) {
            if (this._solver !== void 0) {
                this._solver.removeConstraint(constraint);
            }
        };
        HtmlAppView.prototype.updateLayoutStates = function () {
            _super.prototype.updateLayoutStates.call(this);
            var viewport = this.viewport;
            var safeAreaInsetTop = this.hasOwnProperty("safeAreaInsetTop") ? this.safeAreaInsetTop : void 0;
            var safeAreaInsetRight = this.hasOwnProperty("safeAreaInsetRight") ? this.safeAreaInsetRight : void 0;
            var safeAreaInsetBottom = this.hasOwnProperty("safeAreaInsetBottom") ? this.safeAreaInsetBottom : void 0;
            var safeAreaInsetLeft = this.hasOwnProperty("safeAreaInsetLeft") ? this.safeAreaInsetLeft : void 0;
            if (safeAreaInsetTop && !safeAreaInsetTop.enabled()) {
                safeAreaInsetTop.setState(viewport.safeArea.insetTop);
            }
            if (safeAreaInsetRight && !safeAreaInsetRight.enabled()) {
                safeAreaInsetRight.setState(viewport.safeArea.insetRight);
            }
            if (safeAreaInsetBottom && !safeAreaInsetBottom.enabled()) {
                safeAreaInsetBottom.setState(viewport.safeArea.insetBottom);
            }
            if (safeAreaInsetLeft && !safeAreaInsetLeft.enabled()) {
                safeAreaInsetLeft.setState(viewport.safeArea.insetLeft);
            }
        };
        HtmlAppView.prototype.throttleLayout = function () {
            if (!this._layoutTimer) {
                this._layoutTimer = setTimeout(this.doResize, 0);
            }
        };
        HtmlAppView.prototype.doLayout = function () {
            if (this._layoutTimer) {
                clearTimeout(this._layoutTimer);
                this._layoutTimer = 0;
            }
            if (this._solver !== void 0) {
                this._solver.updateVariables();
                this.cascadeLayout();
            }
        };
        HtmlAppView.prototype.throttleResize = function () {
            if (!this._resizeTimer) {
                this._resizeTimer = setTimeout(this.doResize, 0);
            }
        };
        HtmlAppView.prototype.doResize = function () {
            this._resizeTimer = 0;
            this._viewport = void 0;
            this.cascadeResize();
            this.doLayout();
        };
        HtmlAppView.prototype.throttleScroll = function () {
            if (!this._scrollTimer) {
                this._scrollTimer = setTimeout(this.doScroll, 0);
            }
        };
        HtmlAppView.prototype.doScroll = function () {
            this._scrollTimer = 0;
            this.cascadeScroll();
        };
        HtmlAppView.prototype.onUnmount = function () {
            if (this._layoutTimer) {
                clearTimeout(this._layoutTimer);
                this._layoutTimer = 0;
            }
            if (this._resizeTimer) {
                clearTimeout(this._resizeTimer);
                this._resizeTimer = 0;
            }
            if (this._scrollTimer) {
                clearTimeout(this._scrollTimer);
                this._scrollTimer = 0;
            }
            _super.prototype.onUnmount.call(this);
        };
        HtmlAppView.prototype.onClick = function (event) {
            this.onFallthroughClick(event);
        };
        HtmlAppView.prototype.onFallthroughClick = function (event) {
            this.hidePopovers();
        };
        __decorate([
            LayoutAnchor("strong")
        ], HtmlAppView.prototype, "safeAreaInsetTop", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlAppView.prototype, "safeAreaInsetRight", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlAppView.prototype, "safeAreaInsetBottom", void 0);
        __decorate([
            LayoutAnchor("strong")
        ], HtmlAppView.prototype, "safeAreaInsetLeft", void 0);
        return HtmlAppView;
    }(HtmlView));

    var HtmlAppViewController = (function (_super) {
        __extends(HtmlAppViewController, _super);
        function HtmlAppViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(HtmlAppViewController.prototype, "popovers", {
            get: function () {
                var view = this._view;
                return view ? view.popovers : [];
            },
            enumerable: true,
            configurable: true
        });
        HtmlAppViewController.prototype.viewWillShowPopover = function (popover, options, view) {
        };
        HtmlAppViewController.prototype.viewDidShowPopover = function (popover, options, view) {
        };
        HtmlAppViewController.prototype.viewWillHidePopover = function (popover, view) {
        };
        HtmlAppViewController.prototype.viewDidHidePopover = function (popover, view) {
        };
        return HtmlAppViewController;
    }(HtmlViewController));

    var Popover = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var popover = object;
                return popover.popoverState !== void 0
                    && popover.popoverView !== void 0
                    && typeof popover.showPopover === "function"
                    && typeof popover.hidePopover === "function";
            }
            return false;
        },
    };

    var PopoverView = (function (_super) {
        __extends(PopoverView, _super);
        function PopoverView(node, key) {
            if (node === void 0) { node = document.createElement("div"); }
            if (key === void 0) { key = null; }
            var _this = _super.call(this, node, key) || this;
            _this.arrowWidth.setState(Length.fromAny(10));
            _this.arrowHeight.setState(Length.fromAny(8));
            _this._source = null;
            _this._sourceBounds = null;
            _this._popoverState = "shown";
            _this._placement = ["top", "bottom", "right", "left"];
            _this._placementBounds = null;
            _this._popoverTransition = Transition.duration(250, Ease.cubicOut);
            var arrow = _this.createArrow();
            if (arrow) {
                var arrowView = View.fromNode(arrow).key("arrow");
                _this.prependChildView(arrowView);
            }
            return _this;
        }
        PopoverView.prototype.createArrow = function () {
            var arrow = document.createElement("div");
            arrow.setAttribute("class", "popover-arrow");
            arrow.style.setProperty("display", "none");
            arrow.style.setProperty("position", "absolute");
            arrow.style.setProperty("width", "0");
            arrow.style.setProperty("height", "0");
            return arrow;
        };
        Object.defineProperty(PopoverView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverView.prototype, "source", {
            get: function () {
                return this._source;
            },
            enumerable: true,
            configurable: true
        });
        PopoverView.prototype.setSource = function (source) {
            if (this._source !== source) {
                this.willSetSource(source);
                if (this._source !== null && this.isMounted()) {
                    this._source.removeViewObserver(this);
                }
                this._source = source;
                this.onSetSource(source);
                if (this._source !== null && this.isMounted()) {
                    this._source.addViewObserver(this);
                }
                this.didSetSource(source);
            }
        };
        PopoverView.prototype.willSetSource = function (source) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.popoverWillSetSource) {
                    viewObserver.popoverWillSetSource(source, this);
                }
            });
        };
        PopoverView.prototype.onSetSource = function (source) {
        };
        PopoverView.prototype.didSetSource = function (source) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.popoverDidSetSource) {
                    viewObserver.popoverDidSetSource(source, this);
                }
            });
        };
        Object.defineProperty(PopoverView.prototype, "popoverState", {
            get: function () {
                return this._popoverState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverView.prototype, "popoverView", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        PopoverView.prototype.togglePopover = function (tween) {
            if (this._popoverState === "hidden" || this._popoverState === "hiding") {
                this.showPopover(tween);
            }
            else if (this._popoverState === "shown" || this._popoverState === "showing") {
                this.hidePopover(tween);
            }
        };
        PopoverView.prototype.showPopover = function (tween) {
            if (this._popoverState === "hidden" || this._popoverState === "hiding") {
                if (tween === void 0 || tween === true) {
                    tween = this._popoverTransition || void 0;
                }
                else if (tween) {
                    tween = Transition.fromAny(tween);
                }
                this.willShow();
                var placement = this.place();
                if (tween) {
                    tween = tween.onEnd(this.didShow.bind(this));
                    if (placement === "above") {
                        this.opacity.setState(void 0);
                        if (this.marginTop.value === void 0) {
                            this.marginTop(-this._node.offsetHeight);
                        }
                        this.marginTop(0, tween);
                    }
                    else if (placement === "below") {
                        this.opacity.setState(void 0);
                        if (this.marginTop.value === void 0) {
                            this.marginTop(this._node.offsetHeight);
                        }
                        this.marginTop(0, tween);
                    }
                    else {
                        this.marginTop.setState(void 0);
                        if (this.opacity.value === void 0) {
                            this.opacity(0);
                        }
                        this.opacity(1, tween);
                    }
                }
                else {
                    this.didShow();
                }
            }
        };
        PopoverView.prototype.willShow = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.popoverWillShow) {
                    viewObserver.popoverWillShow(this);
                }
            });
            this.visibility("visible");
            this._popoverState = "showing";
        };
        PopoverView.prototype.didShow = function () {
            this._popoverState = "shown";
            this.pointerEvents("auto");
            this.marginTop.setState(void 0);
            this.opacity.setState(void 0);
            this.didObserve(function (viewObserver) {
                if (viewObserver.popoverDidShow) {
                    viewObserver.popoverDidShow(this);
                }
            });
        };
        PopoverView.prototype.hidePopover = function (tween) {
            if (this._popoverState === "shown" || this._popoverState === "showing") {
                if (tween === void 0 || tween === true) {
                    tween = this._popoverTransition || void 0;
                }
                else if (tween) {
                    tween = Transition.fromAny(tween);
                }
                this.willHide();
                var placement = this.place();
                if (tween) {
                    tween = tween.onEnd(this.didHide.bind(this));
                    if (placement === "above") {
                        this.opacity.setState(void 0);
                        if (this.marginTop.value === void 0) {
                            this.marginTop(0);
                        }
                        this.marginTop(-this._node.offsetHeight, tween);
                    }
                    else if (placement === "below") {
                        this.opacity.setState(void 0);
                        if (this.marginTop.value === void 0) {
                            this.marginTop(0);
                        }
                        this.marginTop(this._node.offsetHeight, tween);
                    }
                    else {
                        this.marginTop.setState(void 0);
                        if (this.opacity.value === void 0) {
                            this.opacity(1);
                        }
                        this.opacity(0, tween);
                    }
                }
                else {
                    this.didHide();
                }
            }
        };
        PopoverView.prototype.willHide = function () {
            this.willObserve(function (viewObserver) {
                if (viewObserver.popoverWillHide) {
                    viewObserver.popoverWillHide(this);
                }
            });
            this.pointerEvents("none");
            this._popoverState = "hiding";
        };
        PopoverView.prototype.didHide = function () {
            this._popoverState = "hidden";
            this.visibility("hidden");
            this.marginTop.setState(void 0);
            this.opacity.setState(void 0);
            this.didObserve(function (viewObserver) {
                if (viewObserver.popoverDidHide) {
                    viewObserver.popoverDidHide(this);
                }
            });
        };
        PopoverView.prototype.placement = function (placement) {
            if (placement === void 0) {
                return this._placement;
            }
            else {
                this._placement.length = 0;
                for (var i = 0, n = placement.length; i < n; i += 1) {
                    this._placement.push(placement[i]);
                }
                this.setDirty(true);
                return this;
            }
        };
        PopoverView.prototype.placementBounds = function (placementBounds) {
            if (placementBounds === void 0) {
                return this._placementBounds;
            }
            else {
                if (!Objects.equal(this._placementBounds, placementBounds)) {
                    this._placementBounds = placementBounds;
                    this.setDirty(true);
                }
                return this;
            }
        };
        PopoverView.prototype.popoverTransition = function (popoverTransition) {
            if (popoverTransition === void 0) {
                return this._popoverTransition;
            }
            else {
                this._popoverTransition = popoverTransition !== null ? Transition.fromAny(popoverTransition) : null;
                return this;
            }
        };
        PopoverView.prototype.onMount = function () {
            if (this._source) {
                this._source.addViewObserver(this);
            }
        };
        PopoverView.prototype.onUnmount = function () {
            if (this._source) {
                this._source.removeViewObserver(this);
            }
        };
        PopoverView.prototype.onResize = function () {
            this.place();
        };
        PopoverView.prototype.onLayout = function () {
            this.place();
        };
        PopoverView.prototype.onScroll = function () {
            this.place();
        };
        PopoverView.prototype.onAnimate = function (t) {
            this.arrowWidth.onFrame(t);
            this.arrowHeight.onFrame(t);
            this.place();
        };
        PopoverView.prototype.place = function () {
            var source = this._source;
            var oldSourceBounds = this._sourceBounds;
            var newSourceBounds = source ? source.popoverBounds : null;
            if (newSourceBounds && this._placement.length
                && (this._dirty || !newSourceBounds.equals(oldSourceBounds))) {
                var placement = this.placePopover(source, newSourceBounds);
                var arrow = this.getChildView("arrow");
                if (arrow instanceof HtmlView) {
                    this.placeArrow(source, newSourceBounds, arrow, placement);
                }
                return placement;
            }
            else {
                return "none";
            }
        };
        PopoverView.prototype.placePopover = function (source, sourceBounds) {
            var node = this._node;
            var parent = node.offsetParent;
            if (!parent) {
                return "none";
            }
            var popoverWidth = Length.fromAny(node.style.getPropertyValue("width") || node.offsetWidth).pxValue();
            var popoverHeight = Length.fromAny(node.style.getPropertyValue("height") || node.offsetHeight).pxValue();
            var parentBounds = parent.getBoundingClientRect();
            var parentLeft = parentBounds.left;
            var parentTop = parentBounds.top;
            var sourceLeft = sourceBounds.left - window.pageXOffset - parentLeft;
            var sourceRight = sourceBounds.right - window.pageXOffset - parentLeft;
            var sourceTop = sourceBounds.top - window.pageYOffset - parentTop;
            var sourceBottom = sourceBounds.bottom - window.pageYOffset - parentTop;
            var sourceWidth = sourceBounds.width;
            var sourceHeight = sourceBounds.height;
            var sourceX = sourceLeft + sourceWidth / 2;
            var sourceY = sourceTop + sourceHeight / 2;
            var placementBounds = this._placementBounds;
            var placementLeft = (placementBounds ? placementBounds.left : 0) - parentLeft;
            var placementRight = (placementBounds ? placementBounds.right : window.innerWidth) - parentLeft;
            var placementTop = (placementBounds ? placementBounds.top : 0) - parentTop;
            var placementBottom = (placementBounds ? placementBounds.bottom : window.innerHeight) - parentTop;
            var marginLeft = sourceLeft - placementLeft;
            var marginRight = placementRight - sourceLeft - sourceWidth;
            var marginTop = sourceTop - placementTop;
            var marginBottom = placementBottom - sourceTop - sourceHeight;
            var arrowHeight = this.arrowHeight.value.pxValue();
            var placement;
            for (var i = 0; i < this._placement.length; i += 1) {
                var p = this._placement[i];
                if (p === "above" || p === "below" || p === "over") {
                    placement = p;
                    break;
                }
                else if (p === "top" && popoverHeight + arrowHeight <= marginTop) {
                    placement = p;
                    break;
                }
                else if (p === "bottom" && popoverHeight + arrowHeight <= marginBottom) {
                    placement = p;
                    break;
                }
                else if (p === "left" && popoverWidth + arrowHeight <= marginLeft) {
                    placement = p;
                    break;
                }
                else if (p === "right" && popoverWidth + arrowHeight <= marginRight) {
                    placement = p;
                    break;
                }
            }
            if (placement === void 0) {
                placement = "none";
                for (var i = 0, n = this._placement.length; i < n; i += 1) {
                    var p = this._placement[i];
                    if (p === "top" && marginTop >= marginBottom) {
                        placement = p;
                        break;
                    }
                    else if (p === "bottom" && marginBottom >= marginTop) {
                        placement = p;
                        break;
                    }
                    else if (p === "left" && marginLeft >= marginRight) {
                        placement = p;
                        break;
                    }
                    else if (p === "right" && marginRight >= marginLeft) {
                        placement = p;
                        break;
                    }
                }
            }
            var oldMaxWidth = Length.fromAny(node.style.getPropertyValue("max-width") || 0).pxValue();
            var oldMaxHeight = Length.fromAny(node.style.getPropertyValue("max-height") || 0).pxValue();
            var maxWidth = oldMaxWidth;
            var maxHeight = oldMaxHeight;
            var left = node.offsetLeft;
            var top = node.offsetTop;
            var right;
            var bottom;
            if (placement === "above") {
                left = placementLeft;
                top = placementTop;
                right = (placementBounds ? placementBounds.width : window.innerWidth) - placementRight;
                maxWidth = Math.max(0, placementRight - placementLeft);
                maxHeight = Math.max(0, placementBottom - placementTop);
            }
            else if (placement === "below") {
                left = placementLeft;
                top = placementBottom - popoverHeight;
                right = placementRight - (placementBounds ? placementBounds.width : window.innerWidth);
                maxWidth = Math.max(0, placementRight - placementLeft);
                maxHeight = Math.max(0, placementBottom - placementTop);
            }
            else if (placement === "over") {
                left = placementLeft;
                top = placementTop;
                right = placementRight - (placementBounds ? placementBounds.width : window.innerWidth);
                bottom = placementBottom - (placementBounds ? placementBounds.height : window.innerHeight);
                maxWidth = Math.max(0, placementRight - placementLeft);
                maxHeight = Math.max(0, placementBottom - placementTop);
            }
            else if (placement === "top") {
                if (sourceX - popoverWidth / 2 <= placementLeft) {
                    left = placementLeft;
                }
                else if (sourceX + popoverWidth / 2 >= placementRight) {
                    left = placementRight - popoverWidth;
                }
                else {
                    left = sourceX - popoverWidth / 2;
                }
                top = Math.max(placementTop, sourceTop - (popoverHeight + arrowHeight));
                maxWidth = Math.max(0, placementRight - placementLeft);
                maxHeight = Math.max(0, sourceBottom - placementTop);
            }
            else if (placement === "bottom") {
                if (sourceX - popoverWidth / 2 <= placementLeft) {
                    left = placementLeft;
                }
                else if (sourceX + popoverWidth / 2 >= placementRight) {
                    left = placementRight - popoverWidth;
                }
                else {
                    left = sourceX - popoverWidth / 2;
                }
                top = Math.max(placementTop, sourceBottom + arrowHeight);
                maxWidth = Math.max(0, placementRight - placementLeft);
                maxHeight = Math.max(0, placementBottom - sourceTop);
            }
            else if (placement === "left") {
                left = Math.max(placementLeft, sourceLeft - (popoverWidth + arrowHeight));
                if (sourceY - popoverHeight / 2 <= placementTop) {
                    top = placementTop;
                }
                else if (sourceY + popoverHeight / 2 >= placementBottom) {
                    top = placementBottom - popoverHeight;
                }
                else {
                    top = sourceY - popoverHeight / 2;
                }
                maxWidth = Math.max(0, sourceRight - placementLeft);
                maxHeight = Math.max(0, placementBottom - placementTop);
            }
            else if (placement === "right") {
                left = Math.max(placementLeft, sourceRight + arrowHeight);
                if (sourceY - popoverHeight / 2 <= placementTop) {
                    top = placementTop;
                }
                else if (sourceY + popoverHeight / 2 >= placementBottom) {
                    top = placementBottom - popoverHeight;
                }
                else {
                    top = sourceY - popoverHeight / 2;
                }
                maxWidth = Math.max(0, placementRight - sourceLeft);
                maxHeight = Math.max(0, placementBottom - placementTop);
            }
            if (placement !== "none" && (left !== node.offsetLeft || top !== node.offsetTop
                || maxWidth !== oldMaxWidth || maxHeight !== oldMaxHeight)) {
                this.willPlacePopover(placement);
                node.style.setProperty("position", "absolute");
                node.style.setProperty("left", left + "px");
                if (right !== void 0) {
                    node.style.setProperty("right", right + "px");
                }
                else {
                    node.style.removeProperty("right");
                }
                node.style.setProperty("top", top + "px");
                if (bottom !== void 0) {
                    node.style.setProperty("bottom", bottom + "px");
                }
                else {
                    node.style.removeProperty("bottom");
                }
                node.style.setProperty("max-width", maxWidth + "px");
                node.style.setProperty("max-height", maxHeight + "px");
                this.onPlacePopover(placement);
                this.didPlacePopover(placement);
            }
            return placement;
        };
        PopoverView.prototype.willPlacePopover = function (placement) {
            this.willObserve(function (viewObserver) {
                if (viewObserver.popoverWillPlace) {
                    viewObserver.popoverWillPlace(placement, this);
                }
            });
        };
        PopoverView.prototype.onPlacePopover = function (placement) {
        };
        PopoverView.prototype.didPlacePopover = function (placement) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.popoverDidPlace) {
                    viewObserver.popoverDidPlace(placement, this);
                }
            });
        };
        PopoverView.prototype.placeArrow = function (source, sourceBounds, arrow, placement) {
            var node = this._node;
            var parent = node.offsetParent;
            if (!parent) {
                return;
            }
            var arrowNode = arrow._node;
            var parentBounds = parent.getBoundingClientRect();
            var parentLeft = parentBounds.left;
            var parentTop = parentBounds.top;
            var sourceLeft = sourceBounds.left - window.pageXOffset - parentLeft;
            var sourceTop = sourceBounds.top - window.pageYOffset - parentTop;
            var sourceWidth = sourceBounds.width;
            var sourceHeight = sourceBounds.height;
            var sourceX = sourceLeft + sourceWidth / 2;
            var sourceY = sourceTop + sourceHeight / 2;
            var offsetLeft = node.offsetLeft;
            var offsetRight = offsetLeft + node.offsetWidth;
            var offsetTop = node.offsetTop;
            var offsetBottom = offsetTop + node.offsetHeight;
            var backgroundColor = this.backgroundColor() || Color.transparent();
            var borderRadius = this.borderRadius();
            var radius = borderRadius instanceof Length ? borderRadius.pxValue() : 0;
            var arrowWidth = this.arrowWidth.value.pxValue();
            var arrowHeight = this.arrowHeight.value.pxValue();
            var arrowXMin = offsetLeft + radius + arrowWidth / 2;
            var arrowXMax = offsetRight - radius - arrowWidth / 2;
            var arrowYMin = offsetTop + radius + arrowWidth / 2;
            var arrowYMax = offsetBottom - radius - arrowWidth / 2;
            arrowNode.style.removeProperty("top");
            arrowNode.style.removeProperty("right");
            arrowNode.style.removeProperty("bottom");
            arrowNode.style.removeProperty("left");
            arrowNode.style.removeProperty("border-left-width");
            arrowNode.style.removeProperty("border-left-style");
            arrowNode.style.removeProperty("border-left-color");
            arrowNode.style.removeProperty("border-right-width");
            arrowNode.style.removeProperty("border-right-style");
            arrowNode.style.removeProperty("border-right-color");
            arrowNode.style.removeProperty("border-top-width");
            arrowNode.style.removeProperty("border-top-style");
            arrowNode.style.removeProperty("border-top-color");
            arrowNode.style.removeProperty("border-bottom-width");
            arrowNode.style.removeProperty("border-bottom-style");
            arrowNode.style.removeProperty("border-bottom-color");
            if (placement === "none" || placement === "above" || placement === "below" || placement === "over") {
                arrowNode.style.setProperty("display", "none");
            }
            else if (offsetTop - arrowHeight >= sourceY
                && arrowXMin <= sourceX && sourceX <= arrowXMax) {
                arrowNode.style.setProperty("display", "block");
                arrowNode.style.setProperty("top", (-arrowHeight) + "px");
                arrowNode.style.setProperty("left", (sourceX - offsetLeft - arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-left-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-left-style", "solid");
                arrowNode.style.setProperty("border-left-color", "transparent");
                arrowNode.style.setProperty("border-right-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-right-style", "solid");
                arrowNode.style.setProperty("border-right-color", "transparent");
                arrowNode.style.setProperty("border-bottom-width", arrowHeight + "px");
                arrowNode.style.setProperty("border-bottom-style", "solid");
                arrowNode.style.setProperty("border-bottom-color", backgroundColor.toString());
            }
            else if (offsetBottom + arrowHeight <= sourceY
                && arrowXMin <= sourceX && sourceX <= arrowXMax) {
                arrowNode.style.setProperty("display", "block");
                arrowNode.style.setProperty("bottom", (-arrowHeight) + "px");
                arrowNode.style.setProperty("left", (sourceX - offsetLeft - arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-left-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-left-style", "solid");
                arrowNode.style.setProperty("border-left-color", "transparent");
                arrowNode.style.setProperty("border-right-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-right-style", "solid");
                arrowNode.style.setProperty("border-right-color", "transparent");
                arrowNode.style.setProperty("border-top-width", arrowHeight + "px");
                arrowNode.style.setProperty("border-top-style", "solid");
                arrowNode.style.setProperty("border-top-color", backgroundColor.toString());
            }
            else if (offsetLeft - arrowHeight >= sourceX
                && arrowYMin <= sourceY && sourceY <= arrowYMax) {
                arrowNode.style.setProperty("display", "block");
                arrowNode.style.setProperty("left", (-arrowHeight) + "px");
                arrowNode.style.setProperty("top", (sourceY - offsetTop - arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-top-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-top-style", "solid");
                arrowNode.style.setProperty("border-top-color", "transparent");
                arrowNode.style.setProperty("border-bottom-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-bottom-style", "solid");
                arrowNode.style.setProperty("border-bottom-color", "transparent");
                arrowNode.style.setProperty("border-right-width", arrowHeight + "px");
                arrowNode.style.setProperty("border-right-style", "solid");
                arrowNode.style.setProperty("border-right-color", backgroundColor.toString());
            }
            else if (offsetRight + arrowHeight <= sourceX
                && arrowYMin <= sourceY && sourceY <= arrowYMax) {
                arrowNode.style.setProperty("display", "block");
                arrowNode.style.setProperty("right", (-arrowHeight) + "px");
                arrowNode.style.setProperty("top", (sourceY - offsetTop - arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-top-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-top-style", "solid");
                arrowNode.style.setProperty("border-top-color", "transparent");
                arrowNode.style.setProperty("border-bottom-width", (arrowWidth / 2) + "px");
                arrowNode.style.setProperty("border-bottom-style", "solid");
                arrowNode.style.setProperty("border-bottom-color", "transparent");
                arrowNode.style.setProperty("border-left-width", arrowHeight + "px");
                arrowNode.style.setProperty("border-left-style", "solid");
                arrowNode.style.setProperty("border-left-color", backgroundColor.toString());
            }
            else {
                arrowNode.style.setProperty("display", "none");
            }
        };
        PopoverView.prototype.viewDidMount = function (view) {
            this.place();
        };
        PopoverView.prototype.viewDidUnmount = function (view) {
            this.place();
        };
        PopoverView.prototype.viewDidResize = function (view) {
            this.place();
        };
        PopoverView.prototype.viewDidScroll = function (view) {
            this.place();
        };
        PopoverView.prototype.viewWillSetAttribute = function (name, value, view) {
            this.place();
        };
        PopoverView.prototype.viewDidSetAttribute = function (name, value, view) {
            this.place();
        };
        PopoverView.prototype.viewWillSetStyle = function (name, value, priority, view) {
            this.place();
        };
        PopoverView.prototype.viewDidSetStyle = function (name, value, priority, view) {
            this.place();
        };
        PopoverView.prototype.viewDidSetAnchor = function (newAnchor, oldAnchor, view) {
            this.place();
        };
        __decorate([
            MemberAnimator(Length)
        ], PopoverView.prototype, "arrowWidth", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PopoverView.prototype, "arrowHeight", void 0);
        return PopoverView;
    }(HtmlView));

    var PopoverViewController = (function (_super) {
        __extends(PopoverViewController, _super);
        function PopoverViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PopoverViewController.prototype, "source", {
            get: function () {
                var view = this._view;
                return view ? view.source : null;
            },
            enumerable: true,
            configurable: true
        });
        PopoverViewController.prototype.popoverWillSetSource = function (source, view) {
        };
        PopoverViewController.prototype.popoverDidSetSource = function (source, view) {
        };
        PopoverViewController.prototype.popoverWillPlace = function (placement, view) {
        };
        PopoverViewController.prototype.popoverDidPlace = function (placement, view) {
        };
        PopoverViewController.prototype.popoverWillShow = function (view) {
        };
        PopoverViewController.prototype.popoverDidShow = function (view) {
        };
        PopoverViewController.prototype.popoverWillHide = function (view) {
        };
        PopoverViewController.prototype.popoverDidHide = function (view) {
        };
        return PopoverViewController;
    }(HtmlViewController));

    var Rect = (function () {
        function Rect(x, y, width, height) {
            this._x = x;
            this._y = y;
            this._width = width;
            this._height = height;
        }
        Rect.prototype.x = function (x) {
            if (x === void 0) {
                return this._x;
            }
            else {
                x = Length.fromAny(x);
                if (this._x.equals(x)) {
                    return this;
                }
                else {
                    return this.copy(x, this._y, this._width, this._height);
                }
            }
        };
        Rect.prototype.y = function (y) {
            if (y === void 0) {
                return this._y;
            }
            else {
                y = Length.fromAny(y);
                if (this._y.equals(y)) {
                    return this;
                }
                else {
                    return this.copy(this._x, y, this._width, this._height);
                }
            }
        };
        Rect.prototype.width = function (width) {
            if (width === void 0) {
                return this._width;
            }
            else {
                width = Length.fromAny(width);
                if (this._width.equals(width)) {
                    return this;
                }
                else {
                    return this.copy(this._x, this._y, width, this._height);
                }
            }
        };
        Rect.prototype.height = function (height) {
            if (height === void 0) {
                return this._height;
            }
            else {
                height = Length.fromAny(height);
                if (this._height.equals(height)) {
                    return this;
                }
                else {
                    return this.copy(this._x, this._y, this._width, height);
                }
            }
        };
        Rect.prototype.render = function (context) {
            var ctx = context || new PathContext();
            ctx.rect(this._x.pxValue(), this._y.pxValue(), this._width.pxValue(), this._height.pxValue());
            if (!context) {
                return ctx.toString();
            }
        };
        Rect.prototype.copy = function (x, y, width, height) {
            return new Rect(x, y, width, height);
        };
        Rect.prototype.toAny = function () {
            return {
                x: this._x,
                y: this._y,
                width: this._width,
                height: this._height,
            };
        };
        Rect.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Rect) {
                return this._x.equals(that._x) && this._y.equals(that._y)
                    && this._width.equals(that._width) && this._height.equals(that._height);
            }
            return false;
        };
        Rect.prototype.debug = function (output) {
            output = output.write("Rect").write(46).write("from").write(40)
                .debug(this._x).write(", ").debug(this._y).write(", ")
                .debug(this._width).write(", ").debug(this._height).write(41);
        };
        Rect.prototype.toString = function () {
            return Format.debug(this);
        };
        Rect.from = function (x, y, width, height) {
            x = Length.fromAny(x);
            y = Length.fromAny(y);
            width = Length.fromAny(width);
            height = Length.fromAny(height);
            return new Rect(x, y, width, height);
        };
        Rect.fromAny = function (rect) {
            if (rect instanceof Rect) {
                return rect;
            }
            else if (typeof rect === "object" && rect) {
                return Rect.from(rect.x, rect.y, rect.width, rect.height);
            }
            throw new TypeError("" + rect);
        };
        return Rect;
    }());

    var RectView = (function (_super) {
        __extends(RectView, _super);
        function RectView(x, y, width, height) {
            if (x === void 0) { x = Length.zero(); }
            if (y === void 0) { y = Length.zero(); }
            if (width === void 0) { width = Length.zero(); }
            if (height === void 0) { height = Length.zero(); }
            var _this = _super.call(this) || this;
            _this.x.setState(x);
            _this.y.setState(y);
            _this.width.setState(width);
            _this.height.setState(height);
            return _this;
        }
        Object.defineProperty(RectView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectView.prototype, "value", {
            get: function () {
                return new Rect(this.x.value, this.y.value, this.width.value, this.height.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectView.prototype, "state", {
            get: function () {
                return new Rect(this.x.state, this.y.state, this.width.state, this.height.state);
            },
            enumerable: true,
            configurable: true
        });
        RectView.prototype.setState = function (rect, tween) {
            if (rect instanceof Rect) {
                rect = rect.toAny();
            }
            if (rect.key !== void 0) {
                this.key(rect.key);
            }
            if (rect.x !== void 0) {
                this.x(rect.x, tween);
            }
            if (rect.y !== void 0) {
                this.y(rect.y, tween);
            }
            if (rect.width !== void 0) {
                this.width(rect.width, tween);
            }
            if (rect.height !== void 0) {
                this.height(rect.height, tween);
            }
            if (rect.fill !== void 0) {
                this.fill(rect.fill, tween);
            }
            if (rect.stroke !== void 0) {
                this.stroke(rect.stroke, tween);
            }
            if (rect.strokeWidth !== void 0) {
                this.strokeWidth(rect.strokeWidth, tween);
            }
        };
        RectView.prototype.onAnimate = function (t) {
            this.x.onFrame(t);
            this.y.onFrame(t);
            this.width.onFrame(t);
            this.height.onFrame(t);
            this.fill.onFrame(t);
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
        };
        RectView.prototype.onRender = function (context) {
            context.save();
            context.beginPath();
            context.rect(this.x.value.pxValue(), this.y.value.pxValue(), this.width.value.pxValue(), this.height.value.pxValue());
            var fill = this.fill.value;
            if (fill) {
                context.fillStyle = fill.toString();
                context.fill();
            }
            var stroke = this.stroke.value;
            if (stroke) {
                var strokeWidth = this.strokeWidth.value;
                if (strokeWidth) {
                    var bounds = this._bounds;
                    var size = Math.min(bounds.width, bounds.height);
                    context.lineWidth = strokeWidth.pxValue(size);
                }
                context.strokeStyle = stroke.toString();
                context.stroke();
            }
            context.restore();
        };
        RectView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                context.beginPath();
                context.rect(this.x.value.pxValue(), this.y.value.pxValue(), this.width.value.pxValue(), this.height.value.pxValue());
                if (this.fill.value && context.isPointInPath(x, y)) {
                    hit = this;
                }
                else if (this.stroke.value) {
                    var strokeWidth = this.strokeWidth.value;
                    if (strokeWidth) {
                        var bounds = this._bounds;
                        var size = Math.min(bounds.width, bounds.height);
                        context.lineWidth = strokeWidth.pxValue(size);
                        if (context.isPointInStroke(x, y)) {
                            hit = this;
                        }
                    }
                }
                context.restore();
            }
            return hit;
        };
        RectView.fromAny = function (rect) {
            if (rect instanceof RectView) {
                return rect;
            }
            else if (rect instanceof Rect) {
                return new RectView(rect.x(), rect.y(), rect.width(), rect.height());
            }
            else if (typeof rect === "object" && rect) {
                var view = new RectView();
                view.setState(rect);
                return view;
            }
            throw new TypeError("" + rect);
        };
        __decorate([
            MemberAnimator(Length)
        ], RectView.prototype, "x", void 0);
        __decorate([
            MemberAnimator(Length)
        ], RectView.prototype, "y", void 0);
        __decorate([
            MemberAnimator(Length)
        ], RectView.prototype, "width", void 0);
        __decorate([
            MemberAnimator(Length)
        ], RectView.prototype, "height", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], RectView.prototype, "fill", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], RectView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], RectView.prototype, "strokeWidth", void 0);
        return RectView;
    }(GraphicView));

    var PI$1 = Math.PI;
    var TAU$1 = 2 * PI$1;
    var EPSILON$2 = 1e-12;
    var Arc = (function () {
        function Arc(innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius) {
            this._innerRadius = innerRadius;
            this._outerRadius = outerRadius;
            this._startAngle = startAngle;
            this._deltaAngle = sweepAngle;
            this._padAngle = padAngle;
            this._padRadius = padRadius;
            this._cornerRadius = cornerRadius;
        }
        Arc.prototype.innerRadius = function (innerRadius) {
            if (innerRadius === void 0) {
                return this._innerRadius;
            }
            else {
                innerRadius = Length.fromAny(innerRadius);
                if (this._innerRadius.equals(innerRadius)) {
                    return this;
                }
                else {
                    return this.copy(innerRadius, this._outerRadius, this._startAngle, this._deltaAngle, this._padAngle, this._padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.outerRadius = function (outerRadius) {
            if (outerRadius === void 0) {
                return this._outerRadius;
            }
            else {
                outerRadius = Length.fromAny(outerRadius);
                if (this._outerRadius.equals(outerRadius)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, outerRadius, this._startAngle, this._deltaAngle, this._padAngle, this._padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.startAngle = function (startAngle) {
            if (startAngle === void 0) {
                return this._startAngle;
            }
            else {
                startAngle = Angle.fromAny(startAngle);
                if (this._startAngle.equals(startAngle)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, this._outerRadius, startAngle, this._deltaAngle, this._padAngle, this._padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.sweepAngle = function (sweepAngle) {
            if (sweepAngle === void 0) {
                return this._deltaAngle;
            }
            else {
                sweepAngle = Angle.fromAny(sweepAngle);
                if (this._deltaAngle.equals(sweepAngle)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, this._outerRadius, this._startAngle, sweepAngle, this._padAngle, this._padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.padAngle = function (padAngle) {
            if (padAngle === void 0) {
                return this._padAngle;
            }
            else {
                padAngle = Angle.fromAny(padAngle);
                if (this._padAngle.equals(padAngle)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, this._outerRadius, this._startAngle, this._deltaAngle, padAngle, this._padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.padRadius = function (padRadius) {
            if (padRadius === void 0) {
                return this._padRadius;
            }
            else {
                padRadius = padRadius !== null ? Length.fromAny(padRadius) : null;
                if (Objects.equal(this._padRadius, padRadius)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, this._outerRadius, this._startAngle, this._deltaAngle, this._padAngle, padRadius, this._cornerRadius);
                }
            }
        };
        Arc.prototype.cornerRadius = function (cornerRadius) {
            if (cornerRadius === void 0) {
                return this._cornerRadius;
            }
            else {
                cornerRadius = Length.fromAny(cornerRadius);
                if (this._cornerRadius.equals(cornerRadius)) {
                    return this;
                }
                else {
                    return this.copy(this._innerRadius, this._outerRadius, this._startAngle, this._deltaAngle, this._padAngle, this._padRadius, cornerRadius);
                }
            }
        };
        Arc.prototype.render = function (context, bounds, anchor) {
            var ctx = context || new PathContext();
            var cx;
            var cy;
            if (anchor) {
                cx = anchor.x;
                cy = anchor.y;
            }
            else {
                cx = 0;
                cy = 0;
            }
            var size;
            if (bounds) {
                size = Math.min(bounds.width, bounds.height);
            }
            var r0 = this._innerRadius.pxValue(size);
            var r1 = this._outerRadius.pxValue(size);
            var a0 = this._startAngle.radValue();
            var da = this._deltaAngle.radValue();
            var a1 = a0 + da;
            var cw = da >= 0;
            if (r1 < r0) {
                var r = r1;
                r1 = r0;
                r0 = r;
            }
            if (!(r1 > EPSILON$2)) {
                ctx.moveTo(cx, cy);
            }
            else if (da > TAU$1 - EPSILON$2) {
                ctx.moveTo(cx + r1 * Math.cos(a0), cy + r1 * Math.sin(a0));
                ctx.arc(cx, cy, r1, a0, a1, !cw);
                if (r0 > EPSILON$2) {
                    ctx.moveTo(cx + r0 * Math.cos(a1), cy + r0 * Math.sin(a1));
                    ctx.arc(cx, cy, r0, a1, a0, cw);
                }
            }
            else {
                var a01 = a0;
                var a11 = a1;
                var a00 = a0;
                var a10 = a1;
                var da0 = da;
                var da1 = da;
                var ap = (this._padAngle.radValue()) / 2;
                var rp = +(ap > EPSILON$2) && (this._padRadius !== null ? this._padRadius.pxValue(size) : Math.sqrt(r0 * r0 + r1 * r1));
                var rc = Math.min(Math.abs(r1 - r0) / 2, this._cornerRadius.pxValue(size));
                var rc0 = rc;
                var rc1 = rc;
                if (rp > EPSILON$2) {
                    var p0 = Math.asin(rp / r0 * Math.sin(ap));
                    var p1 = Math.asin(rp / r1 * Math.sin(ap));
                    if ((da0 -= p0 * 2) > EPSILON$2) {
                        p0 *= cw ? 1 : -1;
                        a00 += p0;
                        a10 -= p0;
                    }
                    else {
                        da0 = 0;
                        a00 = a10 = (a0 + a1) / 2;
                    }
                    if ((da1 -= p1 * 2) > EPSILON$2) {
                        p1 *= cw ? 1 : -1;
                        a01 += p1;
                        a11 -= p1;
                    }
                    else {
                        da1 = 0;
                        a01 = a11 = (a0 + a1) / 2;
                    }
                }
                var x00 = void 0;
                var y00 = void 0;
                var x01 = r1 * Math.cos(a01);
                var y01 = r1 * Math.sin(a01);
                var x10 = r0 * Math.cos(a10);
                var y10 = r0 * Math.sin(a10);
                var x11 = void 0;
                var y11 = void 0;
                if (rc > EPSILON$2) {
                    x11 = r1 * Math.cos(a11);
                    y11 = r1 * Math.sin(a11);
                    x00 = r0 * Math.cos(a00);
                    y00 = r0 * Math.sin(a00);
                    if (da < PI$1) {
                        var oc = da0 > EPSILON$2 ? Arc.intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10];
                        var ax = x01 - oc[0];
                        var ay = y01 - oc[1];
                        var bx = x11 - oc[0];
                        var by = y11 - oc[1];
                        var kc = 1 / Math.sin(0.5 * Math.acos((ax * bx + ay * by) /
                            (Math.sqrt(ax * ax + ay * ay) *
                                Math.sqrt(bx * bx + by * by))));
                        var lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                        rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                        rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                    }
                }
                if (!(da1 > EPSILON$2)) {
                    ctx.moveTo(cx + x01, cy + y01);
                }
                else if (rc1 > EPSILON$2) {
                    var t0 = Arc.cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                    var t1 = Arc.cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                    ctx.moveTo(cx + t0.cx + t0.x01, cy + t0.cy + t0.y01);
                    if (rc1 < rc) {
                        ctx.arc(cx + t0.cx, cy + t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                    else {
                        ctx.arc(cx + t0.cx, cy + t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                        ctx.arc(cx, cy, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                        ctx.arc(cx + t1.cx, cy + t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                }
                else {
                    ctx.moveTo(cx + x01, cy + y01);
                    ctx.arc(cx, cy, r1, a01, a11, !cw);
                }
                if (!(r0 > EPSILON$2) || !(da0 > EPSILON$2)) {
                    ctx.lineTo(cx + x10, cy + y10);
                }
                else if (rc0 > EPSILON$2) {
                    var t0 = Arc.cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                    var t1 = Arc.cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                    ctx.lineTo(cx + t0.cx + t0.x01, cy + t0.cy + t0.y01);
                    if (rc0 < rc) {
                        ctx.arc(cx + t0.cx, cy + t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                    else {
                        ctx.arc(cx + t0.cx, cy + t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                        ctx.arc(cx, cy, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                        ctx.arc(cx + t1.cx, cy + t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                }
                else {
                    ctx.arc(cx, cy, r0, a10, a00, cw);
                }
            }
            ctx.closePath();
            if (!context) {
                return ctx.toString();
            }
        };
        Arc.prototype.copy = function (innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius) {
            return new Arc(innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius);
        };
        Arc.prototype.toAny = function () {
            return {
                innerRadius: this._innerRadius,
                outerRadius: this._outerRadius,
                startAngle: this._startAngle,
                sweepAngle: this._deltaAngle,
                padAngle: this._padAngle,
                padRadius: this._padRadius,
                cornerRadius: this._cornerRadius,
            };
        };
        Arc.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Arc) {
                return this._innerRadius.equals(that._innerRadius)
                    && this._outerRadius.equals(that._outerRadius)
                    && this._startAngle.equals(that._startAngle)
                    && this._deltaAngle.equals(that._deltaAngle)
                    && this._padAngle.equals(that._padAngle)
                    && Objects.equal(this._padRadius, that._padRadius)
                    && this._cornerRadius.equals(that._cornerRadius);
            }
            return false;
        };
        Arc.prototype.debug = function (output) {
            output = output.write("Arc").write(46).write("from").write(40).write(41);
            if (this._innerRadius.isDefined()) {
                output = output.write(46).write("innerRadius").write(40).debug(this._innerRadius).write(41);
            }
            if (this._outerRadius.isDefined()) {
                output = output.write(46).write("outerRadius").write(40).debug(this._outerRadius).write(41);
            }
            if (this._startAngle.isDefined()) {
                output = output.write(46).write("startAngle").write(40).debug(this._startAngle).write(41);
            }
            if (this._deltaAngle.isDefined()) {
                output = output.write(46).write("sweepAngle").write(40).debug(this._deltaAngle).write(41);
            }
            if (this._padAngle.isDefined()) {
                output = output.write(46).write("padAngle").write(40).debug(this._padAngle).write(41);
            }
            if (this._padRadius !== null) {
                output = output.write(46).write("padRadius").write(40).debug(this._padRadius).write(41);
            }
            if (this._cornerRadius.isDefined()) {
                output = output.write(46).write("cornerRadius").write(40).debug(this._cornerRadius).write(41);
            }
        };
        Arc.prototype.toString = function () {
            return Format.debug(this);
        };
        Arc.from = function (innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius) {
            if (innerRadius === void 0) { innerRadius = Length.zero(); }
            if (outerRadius === void 0) { outerRadius = Length.zero(); }
            if (startAngle === void 0) { startAngle = Angle.zero(); }
            if (sweepAngle === void 0) { sweepAngle = Angle.zero(); }
            if (padAngle === void 0) { padAngle = Angle.zero(); }
            if (padRadius === void 0) { padRadius = null; }
            if (cornerRadius === void 0) { cornerRadius = Length.zero(); }
            innerRadius = Length.fromAny(innerRadius);
            outerRadius = Length.fromAny(outerRadius);
            startAngle = Angle.fromAny(startAngle);
            sweepAngle = Angle.fromAny(sweepAngle);
            padAngle = Angle.fromAny(padAngle);
            padRadius = padRadius !== null ? Length.fromAny(padRadius) : null;
            cornerRadius = Length.fromAny(cornerRadius);
            return new Arc(innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius);
        };
        Arc.fromAny = function (arc) {
            if (arc instanceof Arc) {
                return arc;
            }
            else if (typeof arc === "object" && arc) {
                return Arc.from(arc.innerRadius, arc.outerRadius, arc.startAngle, arc.sweepAngle, arc.padAngle, arc.padRadius, arc.cornerRadius);
            }
            throw new TypeError("" + arc);
        };
        Arc.intersect = function (x0, y0, x1, y1, x2, y2, x3, y3) {
            var x10 = x1 - x0;
            var y10 = y1 - y0;
            var x32 = x3 - x2;
            var y32 = y3 - y2;
            var t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
            return [x0 + t * x10, y0 + t * y10];
        };
        Arc.cornerTangents = function (x0, y0, x1, y1, r1, rc, cw) {
            var x01 = x0 - x1;
            var y01 = y0 - y1;
            var lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01);
            var ox = lo * y01;
            var oy = -lo * x01;
            var x11 = x0 + ox;
            var y11 = y0 + oy;
            var x10 = x1 + ox;
            var y10 = y1 + oy;
            var x00 = (x11 + x10) / 2;
            var y00 = (y11 + y10) / 2;
            var dx = x10 - x11;
            var dy = y10 - y11;
            var d2 = dx * dx + dy * dy;
            var r = r1 - rc;
            var D = x11 * y10 - x10 * y11;
            var d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D));
            var cx0 = (D * dy - dx * d) / d2;
            var cy0 = (-D * dx - dy * d) / d2;
            var cx1 = (D * dy + dx * d) / d2;
            var cy1 = (-D * dx + dy * d) / d2;
            var dx0 = cx0 - x00;
            var dy0 = cy0 - y00;
            var dx1 = cx1 - x00;
            var dy1 = cy1 - y00;
            if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) {
                cx0 = cx1;
                cy0 = cy1;
            }
            return {
                cx: cx0,
                cy: cy0,
                x01: -ox,
                y01: -oy,
                x11: cx0 * (r1 / r - 1),
                y11: cy0 * (r1 / r - 1),
            };
        };
        return Arc;
    }());

    var ArcView = (function (_super) {
        __extends(ArcView, _super);
        function ArcView(innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius) {
            if (innerRadius === void 0) { innerRadius = Length.zero(); }
            if (outerRadius === void 0) { outerRadius = Length.zero(); }
            if (startAngle === void 0) { startAngle = Angle.zero(); }
            if (sweepAngle === void 0) { sweepAngle = Angle.zero(); }
            if (padAngle === void 0) { padAngle = Angle.zero(); }
            if (padRadius === void 0) { padRadius = null; }
            if (cornerRadius === void 0) { cornerRadius = Length.zero(); }
            var _this = _super.call(this) || this;
            _this.innerRadius.setState(innerRadius);
            _this.outerRadius.setState(outerRadius);
            _this.startAngle.setState(startAngle);
            _this.sweepAngle.setState(sweepAngle);
            _this.padAngle.setState(padAngle);
            _this.padRadius.setState(padRadius);
            _this.cornerRadius.setState(cornerRadius);
            return _this;
        }
        Object.defineProperty(ArcView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ArcView.prototype, "value", {
            get: function () {
                return new Arc(this.innerRadius.value, this.outerRadius.value, this.startAngle.value, this.sweepAngle.value, this.padAngle.value, this.padRadius.value, this.cornerRadius.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ArcView.prototype, "state", {
            get: function () {
                return new Arc(this.innerRadius.state, this.outerRadius.state, this.startAngle.state, this.sweepAngle.state, this.padAngle.state, this.padRadius.state, this.cornerRadius.state);
            },
            enumerable: true,
            configurable: true
        });
        ArcView.prototype.setState = function (arc, tween) {
            if (arc instanceof Arc) {
                arc = arc.toAny();
            }
            if (arc.key !== void 0) {
                this.key(arc.key);
            }
            if (arc.innerRadius !== void 0) {
                this.innerRadius(arc.innerRadius, tween);
            }
            if (arc.outerRadius !== void 0) {
                this.outerRadius(arc.outerRadius, tween);
            }
            if (arc.startAngle !== void 0) {
                this.startAngle(arc.startAngle, tween);
            }
            if (arc.sweepAngle !== void 0) {
                this.sweepAngle(arc.sweepAngle, tween);
            }
            if (arc.padAngle !== void 0) {
                this.padAngle(arc.padAngle, tween);
            }
            if (arc.padRadius !== void 0) {
                this.padRadius(arc.padRadius, tween);
            }
            if (arc.cornerRadius !== void 0) {
                this.cornerRadius(arc.cornerRadius, tween);
            }
            if (arc.fill !== void 0) {
                this.fill(arc.fill, tween);
            }
            if (arc.stroke !== void 0) {
                this.stroke(arc.stroke, tween);
            }
            if (arc.strokeWidth !== void 0) {
                this.strokeWidth(arc.strokeWidth, tween);
            }
        };
        ArcView.prototype.onAnimate = function (t) {
            this.innerRadius.onFrame(t);
            this.outerRadius.onFrame(t);
            this.startAngle.onFrame(t);
            this.sweepAngle.onFrame(t);
            this.padAngle.onFrame(t);
            this.padRadius.onFrame(t);
            this.cornerRadius.onFrame(t);
            this.fill.onFrame(t);
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
        };
        ArcView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var arc = this.value;
            arc.render(context, bounds, this._anchor);
            var fill = this.fill.value;
            if (fill) {
                context.fillStyle = fill.toString();
                context.fill();
            }
            var stroke = this.stroke.value;
            if (stroke) {
                var strokeWidth = this.strokeWidth.value;
                if (strokeWidth) {
                    var size = Math.min(bounds.width, bounds.height);
                    context.lineWidth = strokeWidth.pxValue(size);
                }
                context.strokeStyle = stroke.toString();
                context.stroke();
            }
            context.restore();
        };
        ArcView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                context.beginPath();
                var bounds = this._bounds;
                var arc = this.value;
                arc.render(context, bounds, this._anchor);
                if (this.fill.value && context.isPointInPath(x, y)) {
                    hit = this;
                }
                else if (this.stroke.value) {
                    var strokeWidth = this.strokeWidth.value;
                    if (strokeWidth) {
                        var size = Math.min(bounds.width, bounds.height);
                        context.lineWidth = strokeWidth.pxValue(size);
                        if (context.isPointInStroke(x, y)) {
                            hit = this;
                        }
                    }
                }
                context.restore();
            }
            return hit;
        };
        ArcView.from = function (innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius, fill, stroke, strokeWidth) {
            if (innerRadius === void 0) { innerRadius = Length.zero(); }
            if (outerRadius === void 0) { outerRadius = Length.zero(); }
            if (startAngle === void 0) { startAngle = Angle.zero(); }
            if (sweepAngle === void 0) { sweepAngle = Angle.zero(); }
            if (padAngle === void 0) { padAngle = Angle.zero(); }
            if (padRadius === void 0) { padRadius = null; }
            if (cornerRadius === void 0) { cornerRadius = Length.zero(); }
            innerRadius = Length.fromAny(innerRadius);
            outerRadius = Length.fromAny(outerRadius);
            startAngle = Angle.fromAny(startAngle);
            sweepAngle = Angle.fromAny(sweepAngle);
            padAngle = Angle.fromAny(padAngle);
            padRadius = padRadius !== null ? Length.fromAny(padRadius) : null;
            cornerRadius = Length.fromAny(cornerRadius);
            var view = new ArcView(innerRadius, outerRadius, startAngle, sweepAngle, padAngle, padRadius, cornerRadius);
            if (fill !== void 0) {
                view.fill(fill);
            }
            if (stroke !== void 0) {
                view.stroke(stroke);
            }
            if (strokeWidth !== void 0) {
                view.strokeWidth(strokeWidth);
            }
            return view;
        };
        ArcView.fromAny = function (arc) {
            if (arc instanceof ArcView) {
                return arc;
            }
            else if (arc instanceof Arc) {
                return new ArcView(arc.innerRadius(), arc.outerRadius(), arc.startAngle(), arc.sweepAngle(), arc.padAngle(), arc.padRadius(), arc.cornerRadius());
            }
            else if (typeof arc === "object" && arc) {
                var view = new ArcView();
                view.setState(arc);
                return view;
            }
            throw new TypeError("" + arc);
        };
        __decorate([
            MemberAnimator(Length)
        ], ArcView.prototype, "innerRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ArcView.prototype, "outerRadius", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], ArcView.prototype, "startAngle", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], ArcView.prototype, "sweepAngle", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], ArcView.prototype, "padAngle", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ArcView.prototype, "padRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ArcView.prototype, "cornerRadius", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], ArcView.prototype, "fill", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], ArcView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], ArcView.prototype, "strokeWidth", void 0);
        return ArcView;
    }(GraphicView));

    var TextRun = (function () {
        function TextRun(text, font, textAlign, textBaseline, textColor) {
            this._text = text;
            this._font = font;
            this._textAlign = textAlign;
            this._textBaseline = textBaseline;
            this._textColor = textColor;
        }
        TextRun.prototype.text = function (text) {
            if (text === void 0) {
                return this._text;
            }
            else {
                if (this._text === text) {
                    return this;
                }
                else {
                    return this.copy(text, this._font, this._textAlign, this._textBaseline, this._textColor);
                }
            }
        };
        TextRun.prototype.font = function (font) {
            if (font === void 0) {
                return this._font;
            }
            else {
                font = font !== null ? Font.fromAny(font) : null;
                if (this._font === font) {
                    return this;
                }
                else {
                    return this.copy(this._text, font, this._textAlign, this._textBaseline, this._textColor);
                }
            }
        };
        TextRun.prototype.textAlign = function (textAlign) {
            if (textAlign === void 0) {
                return this._textAlign;
            }
            else {
                if (this._textAlign === textAlign) {
                    return this;
                }
                else {
                    return this.copy(this._text, this._font, textAlign, this._textBaseline, this._textColor);
                }
            }
        };
        TextRun.prototype.textBaseline = function (textBaseline) {
            if (textBaseline === void 0) {
                return this._textBaseline;
            }
            else {
                if (this._textBaseline === textBaseline) {
                    return this;
                }
                else {
                    return this.copy(this._text, this._font, this._textAlign, textBaseline, this._textColor);
                }
            }
        };
        TextRun.prototype.textColor = function (textColor) {
            if (textColor === void 0) {
                return this._textColor;
            }
            else {
                textColor = textColor !== null ? Color.fromAny(textColor) : null;
                if (this._textColor === textColor) {
                    return this;
                }
                else {
                    return this.copy(this._text, this._font, this._textAlign, this._textBaseline, textColor);
                }
            }
        };
        TextRun.prototype.render = function (context, bounds, anchor) {
            context.save();
            if (this._font !== null) {
                context.font = this._font.toString();
            }
            if (this._textAlign !== null) {
                context.textAlign = this._textAlign;
            }
            if (this._textBaseline !== null) {
                context.textBaseline = this._textBaseline;
            }
            if (this._textColor !== null) {
                context.fillStyle = this._textColor.toString();
            }
            context.fillText(this._text, anchor.x, anchor.y);
            context.restore();
        };
        TextRun.prototype.copy = function (text, font, textAlign, textBaseline, textColor) {
            return new TextRun(text, font, textAlign, textBaseline, textColor);
        };
        TextRun.prototype.toAny = function () {
            var init = { text: this._text };
            if (this._font !== null) {
                init.font = this._font;
            }
            if (this._font !== null) {
                init.font = this._font;
            }
            if (this._textAlign !== null) {
                init.textAlign = this._textAlign;
            }
            if (this._textBaseline !== null) {
                init.textBaseline = this._textBaseline;
            }
            if (this._textColor !== null) {
                init.textColor = this._textColor;
            }
            return init;
        };
        TextRun.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TextRun) {
                return this._text === that._text && Objects.equal(this._font, that._font)
                    && this._textAlign === that._textAlign && this._textBaseline === that._textBaseline
                    && Objects.equal(this._textColor, that._textColor);
            }
            return false;
        };
        TextRun.prototype.debug = function (output) {
            output = output.write("TextRun").write(46).write("from").write(40)
                .debug(this._text).write(41);
            if (this._font !== null) {
                output = output.write(46).write("font").write(40).debug(this._font).write(41);
            }
            if (this._textAlign !== null) {
                output = output.write(46).write("textAlign").write(40).debug(this._textAlign).write(41);
            }
            if (this._textBaseline !== null) {
                output = output.write(46).write("textBaseline").write(40).debug(this._textBaseline).write(41);
            }
            if (this._textColor !== null) {
                output = output.write(46).write("textColor").write(40).debug(this._textColor).write(41);
            }
        };
        TextRun.prototype.toString = function () {
            return Format.debug(this);
        };
        TextRun.from = function (text, font, textAlign, textBaseline, textColor) {
            if (font === void 0) { font = null; }
            if (textAlign === void 0) { textAlign = null; }
            if (textBaseline === void 0) { textBaseline = null; }
            if (textColor === void 0) { textColor = null; }
            font = font !== null ? Font.fromAny(font) : null;
            textColor = textColor !== null ? Color.fromAny(textColor) : null;
            return new TextRun(text, font, textAlign, textBaseline, textColor);
        };
        TextRun.fromAny = function (run) {
            if (run instanceof TextRun) {
                return run;
            }
            else if (typeof run === "object" && run) {
                return TextRun.from(run.text, run.font, run.textAlign, run.textBaseline, run.textColor);
            }
            else if (typeof run === "string") {
                return TextRun.from(run);
            }
            throw new TypeError("" + run);
        };
        return TextRun;
    }());

    var TextRunView = (function (_super) {
        __extends(TextRunView, _super);
        function TextRunView(text) {
            if (text === void 0) { text = ""; }
            var _this = _super.call(this) || this;
            _this.text.setState(text);
            return _this;
        }
        Object.defineProperty(TextRunView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextRunView.prototype, "value", {
            get: function () {
                return new TextRun(this.text.value, this.font.value, this.textAlign.value, this.textBaseline.value, this.textColor.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextRunView.prototype, "state", {
            get: function () {
                return new TextRun(this.text.state, this.font.state, this.textAlign.state, this.textBaseline.state, this.textColor.state);
            },
            enumerable: true,
            configurable: true
        });
        TextRunView.prototype.setState = function (run, tween) {
            if (typeof run === "string") {
                this.text(run, tween);
            }
            else {
                if (run instanceof TextRun) {
                    run = run.toAny();
                }
                if (run.key !== void 0) {
                    this.key(run.key);
                }
                if (run.text !== void 0) {
                    this.text(run.text, tween);
                }
                if (run.font !== void 0) {
                    this.font(run.font, tween);
                }
                if (run.textAlign !== void 0) {
                    this.textAlign(run.textAlign, tween);
                }
                if (run.textBaseline !== void 0) {
                    this.textBaseline(run.textBaseline, tween);
                }
                if (run.textColor !== void 0) {
                    this.textColor(run.textColor, tween);
                }
            }
        };
        TextRunView.prototype.onAnimate = function (t) {
            this.text.onFrame(t);
            this.font.onFrame(t);
            this.textAlign.onFrame(t);
            this.textBaseline.onFrame(t);
            this.textColor.onFrame(t);
        };
        TextRunView.prototype.onRender = function (context) {
            context.save();
            var anchor = this._anchor;
            var font = this.font.value;
            if (font) {
                context.font = font.toString();
            }
            var textAlign = this.textAlign.value;
            if (textAlign) {
                context.textAlign = textAlign;
            }
            var textBaseline = this.textBaseline.value;
            if (textBaseline) {
                context.textBaseline = textBaseline;
            }
            var textColor = this.textColor.value;
            if (textColor) {
                context.fillStyle = textColor.toString();
            }
            context.fillText(this.text.value, anchor.x, anchor.y);
            context.restore();
        };
        TextRunView.fromAny = function (run) {
            if (run instanceof TextRunView) {
                return run;
            }
            else if (typeof run === "object" && run) {
                var view = new TextRunView();
                view.setState(run);
                return view;
            }
            else if (typeof run === "string") {
                return new TextRunView(run);
            }
            throw new TypeError("" + run);
        };
        __decorate([
            MemberAnimator(String)
        ], TextRunView.prototype, "text", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], TextRunView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(String, "inherit")
        ], TextRunView.prototype, "textAlign", void 0);
        __decorate([
            MemberAnimator(String, "inherit")
        ], TextRunView.prototype, "textBaseline", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], TextRunView.prototype, "textColor", void 0);
        return TextRunView;
    }(GraphicView));

    var COS_PI_4 = Math.cos(Math.PI / 4);
    var SIN_PI_4 = Math.sin(Math.PI / 4);
    var MultitouchEvent = (function (_super) {
        __extends(MultitouchEvent, _super);
        function MultitouchEvent(type, init) {
            var _this = _super.call(this, type, init) || this;
            _this.points = init.points;
            return _this;
        }
        return MultitouchEvent;
    }(CustomEventConstructor));
    var MultitouchTrack = (function () {
        function MultitouchTrack(multitouch, identifier) {
            this.multitouch = multitouch;
            this.identifier = identifier;
            this.path = [];
            this.t = NaN;
            this.cx = NaN;
            this.cy = NaN;
            this.vx = NaN;
            this.vy = NaN;
            this.ax = NaN;
            this.ay = NaN;
            this.dx = NaN;
            this.dy = NaN;
        }
        Object.defineProperty(MultitouchTrack.prototype, "ghost", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        MultitouchTrack.prototype.moveTo = function (t, cx, cy) {
            this.path.push({ t: t, cx: cx, cy: cy });
            while (this.path.length > 1) {
                if (t - this.path[0].t > this.multitouch._hysteresis) {
                    this.path.splice(0, 1);
                }
                else {
                    break;
                }
            }
            this.update();
        };
        MultitouchTrack.prototype.update = function () {
            var p0 = this.path[0];
            var p1 = this.path[this.path.length - 1];
            if (p1 && p1 !== p0) {
                var dt = p1.t - p0.t;
                var vx = void 0;
                var vy = void 0;
                if (dt) {
                    vx = (p1.cx - p0.cx) / dt;
                    vy = (p1.cy - p0.cy) / dt;
                    var v2 = vx * vx + vy * vy;
                    var vMax = this.multitouch._velocityMax;
                    var vMax2 = vMax * vMax;
                    if (vMax2 < v2) {
                        var v = Math.sqrt(v2);
                        vx = vx * vMax / v;
                        vy = vy * vMax / v;
                    }
                }
                else {
                    vx = 0;
                    vy = 0;
                }
                this.t = p1.t;
                this.dx = p1.cx - this.cx;
                this.dy = p1.cy - this.cy;
                this.cx = p1.cx;
                this.cy = p1.cy;
                this.vx = vx;
                this.vy = vy;
            }
            else if (p0) {
                this.t = p0.t;
                this.dx = p0.cx - this.cx;
                this.dy = p0.cy - this.cy;
                this.cx = p0.cx;
                this.cy = p0.cy;
                this.vx = 0;
                this.vy = 0;
            }
        };
        return MultitouchTrack;
    }());
    var MultitouchGhost = (function () {
        function MultitouchGhost(multitouch, identifier, t, cx, cy, vx, vy, ax, ay) {
            this.multitouch = multitouch;
            this.identifier = identifier;
            this.t = t;
            this.cx = cx;
            this.cy = cy;
            this.vx = vx;
            this.vy = vy;
            this.ax = ax;
            this.ay = ay;
            this.dx = 0;
            this.dy = 0;
        }
        Object.defineProperty(MultitouchGhost.prototype, "ghost", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        MultitouchGhost.prototype.translate = function (dx, dy) {
            this.cx += dx;
            this.cy += dy;
        };
        MultitouchGhost.prototype.update = function (t) {
            var dt = t - this.t;
            if (dt) {
                var vx = this.vx + this.ax * dt;
                var cx = void 0;
                if (vx < 0 === this.vx < 0) {
                    cx = this.cx + this.vx * dt + 0.5 * (this.ax * dt * dt);
                }
                else {
                    cx = this.cx - (this.vx * this.vx) / (2 * this.ax);
                    vx = 0;
                    this.ax = 0;
                }
                var vy = this.vy + this.ay * dt;
                var cy = void 0;
                if (vy < 0 === this.vy < 0) {
                    cy = this.cy + this.vy * dt + 0.5 * (this.ay * dt * dt);
                }
                else {
                    cy = this.cy - (this.vy * this.vy) / (2 * this.ay);
                    vy = 0;
                    this.ay = 0;
                }
                this.dx = cx - this.cx;
                this.dy = cy - this.cy;
                this.cx = cx;
                this.cy = cy;
                this.vx = vx;
                this.vy = vy;
                this.t = t;
            }
        };
        return MultitouchGhost;
    }());
    var Multitouch = (function () {
        function Multitouch() {
            this._surface = null;
            this._tracks = {};
            this._trackCount = 0;
            this._ghosts = {};
            this._ghostCount = 0;
            this._ghostFrame = 0;
            this._hysteresis = 67;
            this._acceleration = 0.00175;
            this._velocityMax = 1.75;
            this._distanceMin = 10;
            this.onGhostFrame = this.onGhostFrame.bind(this);
        }
        Multitouch.prototype.surface = function (surface) {
            if (surface === void 0) {
                return this._surface;
            }
            else {
                if (this._surface) {
                    this.detach(this._surface);
                }
                this._surface = surface;
                return this;
            }
        };
        Multitouch.prototype.target = function () {
            var view = this._surface;
            while (view) {
                if (view instanceof ElementView) {
                    return view;
                }
                view = view.parentView;
            }
            return null;
        };
        Multitouch.prototype.hysteresis = function (hysteresis) {
            if (hysteresis === void 0) {
                return this._hysteresis;
            }
            else {
                this._hysteresis = hysteresis;
                return this;
            }
        };
        Multitouch.prototype.acceleration = function (acceleration) {
            if (acceleration === void 0) {
                return this._acceleration;
            }
            else {
                this._acceleration = acceleration;
                return this;
            }
        };
        Multitouch.prototype.velocityMax = function (velocityMax) {
            if (velocityMax === void 0) {
                return this._velocityMax;
            }
            else {
                this._velocityMax = velocityMax;
                return this;
            }
        };
        Multitouch.prototype.distanceMin = function (distanceMin) {
            if (distanceMin === void 0) {
                return this._distanceMin;
            }
            else {
                this._distanceMin = distanceMin;
                return this;
            }
        };
        Multitouch.prototype.wheel = function (wheel) {
            if (wheel === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        Multitouch.prototype.points = function () {
            var points = [];
            for (var identifier in this._tracks) {
                points.push(this._tracks[identifier]);
            }
            for (var identifier in this._ghosts) {
                points.push(this._ghosts[identifier]);
            }
            return points;
        };
        Multitouch.prototype.interrupt = function () {
            if (this._ghostFrame) {
                cancelAnimationFrame(this._ghostFrame);
                this._ghostFrame = 0;
            }
            if (this._ghostCount) {
                this._ghosts = {};
                this._ghostCount = 0;
                if (this._trackCount) {
                    this.multitouchChange();
                }
                else {
                    this.multitouchEnd();
                }
            }
        };
        Multitouch.prototype.zoom = function (cx, cy, dz) {
            if (!dz) {
                return;
            }
            var t = Date.now();
            var a = this._acceleration;
            var ax = a * COS_PI_4;
            var ay = a * SIN_PI_4;
            var vMax = this._velocityMax;
            var vx = 0.5 * vMax * COS_PI_4;
            var vy = 0.5 * vMax * SIN_PI_4;
            var dx = (4 * vx * vx) / ax;
            var dy = (4 * vy * vy) / ay;
            var zoom0 = this._ghosts.zoom0;
            var zoom1 = this._ghosts.zoom1;
            if (zoom0 && zoom1) {
                var dcx = Math.abs(zoom1.cx - zoom0.cx) / 2;
                var dcy = Math.abs(zoom1.cy - zoom0.cy) / 2;
                var dt = t - zoom0.t;
                dz = Math.min(Math.max(-vMax * dt, dz), vMax * dt);
                var zx = (dz * dcx * COS_PI_4) / dx;
                var zy = (dz * dcy * SIN_PI_4) / dy;
                ax = (ax * dcx) / dx;
                ay = (ay * dcy) / dy;
                if (dt > 0) {
                    zoom0.t = t;
                    zoom0.cx += zx;
                    zoom0.cy += zy;
                    zoom0.vx = zx / dt;
                    zoom0.vy = zy / dt;
                    zoom0.ax = zoom0.vx < 0 ? ax : zoom0.vx > 0 ? -ax : 0;
                    zoom0.ay = zoom0.vy < 0 ? ay : zoom0.vy > 0 ? -ay : 0;
                    zoom0.dx = zx;
                    zoom0.dy = zy;
                    zoom1.t = t;
                    zoom1.cx -= zx;
                    zoom1.cy -= zy;
                    zoom1.vx = -zx / dt;
                    zoom1.vy = -zy / dt;
                    zoom1.ax = zoom1.vx < 0 ? ax : zoom1.vx > 0 ? -ax : 0;
                    zoom1.ay = zoom1.vy < 0 ? ay : zoom1.vy > 0 ? -ay : 0;
                    zoom1.dx = -zx;
                    zoom1.dy = -zy;
                }
            }
            else {
                this.interrupt();
                this.multitouchStart();
                if (dz < 0) {
                    zoom0 = new MultitouchGhost(this, "zoom0", t, cx - dx, cy - dy, -vx, -vy, ax, ay);
                    zoom1 = new MultitouchGhost(this, "zoom1", t, cx + dx, cy + dy, vx, vy, -ax, -ay);
                }
                else {
                    zoom0 = new MultitouchGhost(this, "zoom0", t, cx - dx, cy - dy, vx, vy, -ax, -ay);
                    zoom1 = new MultitouchGhost(this, "zoom1", t, cx + dx, cy + dy, -vx, -vy, ax, ay);
                }
                this._ghosts.zoom0 = zoom0;
                this._ghostCount += 1;
                this._ghosts.zoom1 = zoom1;
                this._ghostCount += 1;
            }
            this.multitouchChange();
            if (this._ghostFrame) {
                cancelAnimationFrame(this._ghostFrame);
            }
            this._ghostFrame = requestAnimationFrame(this.onGhostFrame);
        };
        Multitouch.prototype.updateVelocity = function (t, points) {
            var p0 = points[0];
            var p1 = points[1];
            var i = 0;
            if (p0 && p1) {
                i = 2;
                var dx0 = Math.abs(p1.cx - p0.cx);
                var dy0 = Math.abs(p1.cy - p0.cy);
                if (p0 instanceof MultitouchGhost) {
                    p0.update(t);
                }
                if (p1 instanceof MultitouchGhost) {
                    p1.update(t);
                }
                var dx1 = Math.abs(p1.cx - p0.cx);
                var dy1 = Math.abs(p1.cy - p0.cy);
                var sx = dx1 / dx0;
                var sy = dy1 / dy0;
                p0.vx *= sx;
                p0.vy *= sy;
                p0.ax *= sx;
                p0.ay *= sy;
                p1.vx *= sx;
                p1.vy *= sy;
                p1.ax *= sx;
                p1.ay *= sy;
            }
            while (i < points.length) {
                var p = points[i];
                if (p instanceof MultitouchGhost) {
                    p.update(t);
                }
                i += 1;
            }
        };
        Multitouch.prototype.spreadVelocity = function (track) {
            for (var identifier in this._ghosts) {
                var ghost = this._ghosts[identifier];
                if (track.vx < 0 === ghost.vx < 0) {
                    track.vx = (track.vx + ghost.vx) / 2;
                    ghost.vx = (track.vx + ghost.vx) / 2;
                }
                else {
                    track.vx = (track.vx - ghost.vx) / 2;
                    ghost.vx = (ghost.vx - track.vx) / 2;
                }
                if (track.vy < 0 === ghost.vy < 0) {
                    track.vy = (track.vy + ghost.vy) / 2;
                    ghost.vy = (track.vy + ghost.vy) / 2;
                }
                else {
                    track.vy = (track.vy - ghost.vy) / 2;
                    ghost.vy = (ghost.vy - track.vy) / 2;
                }
            }
        };
        Multitouch.prototype.coast = function (track) {
            if (track.vx || track.vy) {
                this.spreadVelocity(track);
                var alpha = Math.atan2(Math.abs(track.vy), Math.abs(track.vx));
                var a = this._acceleration;
                var ax = (track.vx < 0 ? a : track.vx > 0 ? -a : 0) * Math.cos(alpha);
                var ay = (track.vy < 0 ? a : track.vy > 0 ? -a : 0) * Math.sin(alpha);
                if (ax || ay) {
                    var ghost = new MultitouchGhost(this, track.identifier, track.t, track.cx, track.cy, track.vx, track.vy, ax, ay);
                    this._ghosts[ghost.identifier] = ghost;
                    this._ghostCount += 1;
                    if (!this._ghostFrame) {
                        this._ghostFrame = requestAnimationFrame(this.onGhostFrame);
                    }
                }
            }
        };
        Multitouch.prototype.translate = function (dx, dy) {
            dx = dx || 0;
            dy = dy || 0;
            for (var identifier in this._ghosts) {
                this._ghosts[identifier].translate(dx, dy);
            }
        };
        Multitouch.prototype.interpolate = function (t) {
            for (var identifier in this._tracks) {
                this._tracks[identifier].update();
            }
            this.updateVelocity(t, this.points());
            this.multitouchChange();
            for (var identifier in this._ghosts) {
                var ghost = this._ghosts[identifier];
                if (!ghost.ax && !ghost.ay) {
                    delete this._ghosts[identifier];
                    this._ghostCount -= 1;
                }
            }
            if (!this._trackCount && !this._ghostCount) {
                this.multitouchEnd();
            }
            else if (this._ghostCount && !this._ghostFrame) {
                this._ghostFrame = requestAnimationFrame(this.onGhostFrame);
            }
        };
        Multitouch.prototype.onGhostFrame = function (t) {
            this._ghostFrame = 0;
            this.interpolate(Date.now());
        };
        Multitouch.prototype.multitouchStart = function () {
            var event = new MultitouchEvent("multitouchstart", {
                bubbles: true,
                cancelable: true,
                composed: true,
                points: this.points(),
            });
            this._surface.dispatchEvent(event);
        };
        Multitouch.prototype.multitouchChange = function () {
            var event = new MultitouchEvent("multitouchchange", {
                bubbles: true,
                cancelable: true,
                composed: true,
                points: this.points(),
            });
            this._surface.dispatchEvent(event);
        };
        Multitouch.prototype.multitouchEnd = function () {
            var event = new MultitouchEvent("multitouchend", {
                bubbles: true,
                cancelable: true,
                composed: true,
                points: this.points(),
            });
            this._surface.dispatchEvent(event);
        };
        Multitouch.prototype.trackStart = function (identifier, clientX, clientY, event) {
            this.interrupt();
            var track = new MultitouchTrack(this, identifier);
            this._tracks[identifier] = track;
            track.moveTo(Date.now(), clientX, clientY);
            this._trackCount += 1;
            if (this._trackCount === 1) {
                var target = this.target();
                if (target) {
                    this.startTracking(target);
                }
            }
            this.trackDidStart(track, this._surface, event);
        };
        Multitouch.prototype.trackMove = function (identifier, clientX, clientY, event) {
            var track = this._tracks[identifier];
            if (track) {
                track.moveTo(Date.now(), clientX, clientY);
                this.trackDidMove(track, this._surface, event);
            }
        };
        Multitouch.prototype.trackCancel = function (identifier, clientX, clientY, event) {
            var track = this._tracks[identifier];
            if (track) {
                delete this._tracks[identifier];
                this._trackCount -= 1;
                track.update();
                this.trackDidCancel(track, this._surface, event);
                if (this._trackCount === 0) {
                    var target = this.target();
                    if (target) {
                        this.endTracking(target);
                    }
                }
            }
        };
        Multitouch.prototype.trackEnd = function (identifier, clientX, clientY, event) {
            var track = this._tracks[identifier];
            if (track) {
                delete this._tracks[identifier];
                this._trackCount -= 1;
                track.update();
                this.trackDidEnd(track, this._surface, event);
                if (this._trackCount === 0) {
                    var target = this.target();
                    if (target) {
                        this.endTracking(target);
                    }
                }
            }
        };
        Multitouch.prototype.trackDidStart = function (track, surface, event) {
            if (this._trackCount === 1) {
                this.multitouchStart();
            }
        };
        Multitouch.prototype.trackDidMove = function (track, surface, event) {
            this.translate(track.dx, track.dy);
            this.interpolate(Date.now());
        };
        Multitouch.prototype.trackDidCancel = function (track, surface, event) {
            if (!this._trackCount && !this._ghostCount) {
                this.multitouchEnd();
            }
        };
        Multitouch.prototype.trackDidEnd = function (track, surface, event) {
            this.coast(track);
            if (!this._trackCount && !this._ghostCount) {
                this.multitouchEnd();
            }
        };
        Multitouch.create = function () {
            if (typeof PointerEvent !== "undefined") {
                return new MultitouchPointer();
            }
            else if (typeof TouchEvent !== "undefined") {
                return new MultitouchTouch();
            }
            else {
                return new MultitouchMouse();
            }
        };
        return Multitouch;
    }());
    var MultitouchPointer = (function (_super) {
        __extends(MultitouchPointer, _super);
        function MultitouchPointer() {
            var _this = _super.call(this) || this;
            _this.onPointerDown = _this.onPointerDown.bind(_this);
            _this.onPointerMove = _this.onPointerMove.bind(_this);
            _this.onPointerUp = _this.onPointerUp.bind(_this);
            _this.onWheel = _this.onWheel.bind(_this);
            _this._wheel = true;
            return _this;
        }
        MultitouchPointer.prototype.wheel = function (wheel) {
            if (wheel === void 0) {
                return this._wheel;
            }
            else {
                if (this._wheel !== wheel) {
                    this._wheel = wheel;
                    var target = this.target();
                    if (target) {
                        if (wheel) {
                            target.on("wheel", this.onWheel);
                        }
                        else {
                            target.off("wheel", this.onWheel);
                        }
                    }
                }
                return this;
            }
        };
        MultitouchPointer.prototype.attach = function (surface) {
            var target = this.target();
            if (target) {
                target.on("pointerdown", this.onPointerDown);
                if (this._wheel) {
                    target.on("wheel", this.onWheel);
                }
            }
        };
        MultitouchPointer.prototype.detach = function (surface) {
            var target = this.target();
            if (target) {
                target.off("pointerdown", this.onPointerDown);
                target.off("wheel", this.onWheel);
            }
        };
        MultitouchPointer.prototype.startTracking = function (surface) {
            var target = this.target();
            if (target) {
                target.on("pointermove", this.onPointerMove);
                target.on("pointerup", this.onPointerUp);
            }
        };
        MultitouchPointer.prototype.endTracking = function (surface) {
            var target = this.target();
            if (target) {
                target.off("pointermove", this.onPointerMove);
                target.off("pointerup", this.onPointerUp);
            }
        };
        MultitouchPointer.prototype.trackDidStart = function (track, surface, event) {
            _super.prototype.trackDidStart.call(this, track, surface, event);
            var target = this.target();
            if (target && target.node.setPointerCapture) {
                target.node.setPointerCapture(+track.identifier);
            }
        };
        MultitouchPointer.prototype.trackDidEnd = function (track, surface, event) {
            _super.prototype.trackDidEnd.call(this, track, surface, event);
            var target = this.target();
            if (target && target.node.releasePointerCapture) {
                target.node.releasePointerCapture(+track.identifier);
            }
        };
        MultitouchPointer.prototype.onPointerDown = function (event) {
            this.trackStart("" + event.pointerId, event.clientX, event.clientY, event);
        };
        MultitouchPointer.prototype.onPointerMove = function (event) {
            this.trackMove("" + event.pointerId, event.clientX, event.clientY, event);
        };
        MultitouchPointer.prototype.onPointerUp = function (event) {
            this.trackEnd("" + event.pointerId, event.clientX, event.clientY, event);
        };
        MultitouchPointer.prototype.onWheel = function (event) {
            event.preventDefault();
            this.zoom(event.clientX, event.clientY, event.deltaY);
        };
        return MultitouchPointer;
    }(Multitouch));
    var MultitouchTouch = (function (_super) {
        __extends(MultitouchTouch, _super);
        function MultitouchTouch() {
            var _this = _super.call(this) || this;
            _this.onTouchStart = _this.onTouchStart.bind(_this);
            _this.onTouchMove = _this.onTouchMove.bind(_this);
            _this.onTouchCancel = _this.onTouchCancel.bind(_this);
            _this.onTouchEnd = _this.onTouchEnd.bind(_this);
            return _this;
        }
        MultitouchTouch.prototype.attach = function (surface) {
            var target = this.target();
            if (target) {
                target.on("touchstart", this.onTouchStart);
            }
        };
        MultitouchTouch.prototype.detach = function (surface) {
            var target = this.target();
            if (target) {
                target.off("touchstart", this.onTouchStart);
            }
        };
        MultitouchTouch.prototype.startTracking = function (surface) {
            var target = this.target();
            if (target) {
                target.on("touchmove", this.onTouchMove);
                target.on("touchcancel", this.onTouchCancel);
                target.on("touchend", this.onTouchEnd);
            }
        };
        MultitouchTouch.prototype.endTracking = function (surface) {
            var target = this.target();
            if (target) {
                target.off("touchmove", this.onTouchMove);
                target.off("touchcancel", this.onTouchCancel);
                target.off("touchend", this.onTouchEnd);
            }
        };
        MultitouchTouch.prototype.onTouchStart = function (event) {
            for (var i = 0; i < event.changedTouches.length; i += 1) {
                var touch = event.changedTouches[i];
                this.trackStart("" + touch.identifier, touch.clientX, touch.clientY, event);
            }
            if (event.changedTouches.length > 1 || this._trackCount > 1) {
                event.preventDefault();
            }
        };
        MultitouchTouch.prototype.onTouchMove = function (event) {
            for (var i = 0; i < event.changedTouches.length; i += 1) {
                var touch = event.changedTouches[i];
                this.trackMove("" + touch.identifier, touch.clientX, touch.clientY, event);
            }
        };
        MultitouchTouch.prototype.onTouchCancel = function (event) {
            for (var i = 0; i < event.changedTouches.length; i += 1) {
                var touch = event.changedTouches[i];
                this.trackCancel("" + touch.identifier, touch.clientX, touch.clientY, event);
            }
        };
        MultitouchTouch.prototype.onTouchEnd = function (event) {
            for (var i = 0; i < event.changedTouches.length; i += 1) {
                var touch = event.changedTouches[i];
                this.trackEnd("" + touch.identifier, touch.clientX, touch.clientY, event);
            }
        };
        return MultitouchTouch;
    }(Multitouch));
    var MultitouchMouse = (function (_super) {
        __extends(MultitouchMouse, _super);
        function MultitouchMouse() {
            var _this = _super.call(this) || this;
            _this.onMouseDown = _this.onMouseDown.bind(_this);
            _this.onMouseMove = _this.onMouseMove.bind(_this);
            _this.onMouseUp = _this.onMouseUp.bind(_this);
            _this.onWheel = _this.onWheel.bind(_this);
            _this._wheel = true;
            return _this;
        }
        MultitouchMouse.prototype.wheel = function (wheel) {
            if (wheel === void 0) {
                return this._wheel;
            }
            else {
                if (this._wheel !== wheel) {
                    this._wheel = wheel;
                    var target = this.target();
                    if (target) {
                        if (wheel) {
                            target.on("wheel", this.onWheel);
                        }
                        else {
                            target.off("wheel", this.onWheel);
                        }
                    }
                }
                return this;
            }
        };
        MultitouchMouse.prototype.attach = function (surface) {
            var target = this.target();
            if (target) {
                target.on("mousedown", this.onMouseDown);
                if (this._wheel) {
                    target.on("wheel", this.onWheel);
                }
            }
        };
        MultitouchMouse.prototype.detach = function (surface) {
            var target = this.target();
            if (target) {
                target.off("mousedown", this.onMouseDown);
                target.off("wheel", this.onWheel);
            }
        };
        MultitouchMouse.prototype.startTracking = function (surface) {
            document.body.addEventListener("mousemove", this.onMouseMove);
            document.body.addEventListener("mouseup", this.onMouseUp);
        };
        MultitouchMouse.prototype.endTracking = function (surface) {
            document.body.removeEventListener("mousemove", this.onMouseMove);
            document.body.removeEventListener("mouseup", this.onMouseUp);
        };
        MultitouchMouse.prototype.onMouseDown = function (event) {
            this.trackStart("mouse", event.clientX, event.clientY, event);
        };
        MultitouchMouse.prototype.onMouseMove = function (event) {
            this.trackMove("mouse", event.clientX, event.clientY, event);
        };
        MultitouchMouse.prototype.onMouseUp = function (event) {
            this.trackEnd("mouse", event.clientX, event.clientY, event);
        };
        MultitouchMouse.prototype.onWheel = function (event) {
            event.preventDefault();
            this.zoom(event.clientX, event.clientY, event.deltaY);
        };
        return MultitouchMouse;
    }(Multitouch));

    var ScaleGestureEvent = (function (_super) {
        __extends(ScaleGestureEvent, _super);
        function ScaleGestureEvent(type, init) {
            var _this = _super.call(this, type, init) || this;
            _this.gesture = init.gesture;
            _this.multitouch = init.multitouch;
            _this.ruler = init.ruler;
            _this.scale = init.scale;
            return _this;
        }
        return ScaleGestureEvent;
    }(CustomEventConstructor));
    var ScaleGesture = (function () {
        function ScaleGesture() {
            this._multitouch = null;
            this._ruler = null;
            this._scale = null;
            this._xMin = null;
            this._xMax = null;
            this._zMin = null;
            this._zMax = null;
            this._points = [];
            this.onMultitouchStart = this.onMultitouchStart.bind(this);
            this.onMultitouchChange = this.onMultitouchChange.bind(this);
            this.onMultitouchEnd = this.onMultitouchEnd.bind(this);
        }
        ScaleGesture.prototype.multitouch = function (multitouch) {
            if (multitouch === void 0) {
                return this._multitouch;
            }
            else {
                if (this._multitouch) {
                    this.detach(this._multitouch);
                }
                this._multitouch = multitouch;
                return this;
            }
        };
        ScaleGesture.prototype.hysteresis = function (hysteresis) {
            if (hysteresis === void 0) {
                return this._multitouch.hysteresis();
            }
            else {
                this._multitouch.hysteresis(hysteresis);
                return this;
            }
        };
        ScaleGesture.prototype.acceleration = function (acceleration) {
            if (acceleration === void 0) {
                return this._multitouch.acceleration();
            }
            else {
                this._multitouch.acceleration(acceleration);
                return this;
            }
        };
        ScaleGesture.prototype.velocityMax = function (velocityMax) {
            if (velocityMax === void 0) {
                return this._multitouch.velocityMax();
            }
            else {
                this._multitouch.velocityMax(velocityMax);
                return this;
            }
        };
        ScaleGesture.prototype.distanceMin = function (distanceMin) {
            if (distanceMin === void 0) {
                return this._multitouch.distanceMin();
            }
            else {
                this._multitouch.distanceMin(distanceMin);
                return this;
            }
        };
        ScaleGesture.prototype.wheel = function (wheel) {
            if (wheel === void 0) {
                return this._multitouch.wheel();
            }
            else {
                this._multitouch.wheel(wheel);
                return this;
            }
        };
        ScaleGesture.prototype.ruler = function (ruler) {
            if (ruler === void 0) {
                return this._ruler;
            }
            else {
                this._ruler = ruler;
                return this;
            }
        };
        ScaleGesture.prototype.scale = function (scale) {
            if (scale === void 0) {
                return this._scale;
            }
            else {
                var oldScale = this._scale;
                this._scale = scale;
                if (oldScale === null) {
                    this.zoomBounds(true);
                }
                return this;
            }
        };
        ScaleGesture.prototype.domainMin = function (xMin) {
            if (xMin === void 0) {
                return this._xMin;
            }
            else {
                this._xMin = xMin;
                return this;
            }
        };
        ScaleGesture.prototype.domainMax = function (xMax) {
            if (xMax === void 0) {
                return this._xMax;
            }
            else {
                this._xMax = xMax;
                return this;
            }
        };
        ScaleGesture.prototype.domainBounds = function (xMin, xMax) {
            if (xMin === void 0) {
                return [this._xMin, this._xMax];
            }
            else if (xMax === void 0) {
                xMin = xMin;
                this._xMin = xMin[0];
                this._xMax = xMin[1];
                return this;
            }
            else {
                this._xMin = xMin;
                this._xMax = xMax;
                return this;
            }
        };
        ScaleGesture.prototype.zoomMin = function (zMin) {
            if (zMin === void 0) {
                return this._zMin;
            }
            else {
                this._zMin = zMin;
                return this;
            }
        };
        ScaleGesture.prototype.zoomMax = function (zMax) {
            if (zMax === void 0) {
                return this._zMax;
            }
            else {
                this._zMax = zMax;
                return this;
            }
        };
        ScaleGesture.prototype.zoomBounds = function (zMin, zMax) {
            if (zMin === void 0) {
                return [this._zMin, this._zMax];
            }
            else if (zMax === void 0) {
                if (typeof zMin === "boolean") {
                    if (this._scale instanceof LinearScale) {
                        this._zMin = 1000000;
                        this._zMax = 0.001;
                    }
                    else if (this._scale instanceof TimeScale) {
                        this._zMin = 86400000;
                        this._zMax = 1;
                    }
                }
                else {
                    zMin = zMin;
                    this._zMin = zMin[0];
                    this._zMax = zMin[1];
                }
                return this;
            }
            else {
                this._zMin = zMin;
                this._zMax = zMax;
                return this;
            }
        };
        ScaleGesture.prototype.attach = function (multitouch) {
            var surface = this._multitouch && this._multitouch.surface();
            if (surface) {
                surface.on("multitouchstart", this.onMultitouchStart);
                surface.on("multitouchchange", this.onMultitouchChange);
                surface.on("multitouchend", this.onMultitouchEnd);
            }
        };
        ScaleGesture.prototype.detach = function (multitouch) {
            var surface = this._multitouch && this._multitouch.surface();
            if (surface) {
                surface.off("multitouchstart", this.onMultitouchStart);
                surface.off("multitouchchange", this.onMultitouchChange);
                surface.off("multitouchend", this.onMultitouchEnd);
            }
        };
        ScaleGesture.prototype.createPoint = function (gesturePoint) {
            var coords = this.coords(gesturePoint.cx, gesturePoint.cy);
            return {
                identifier: gesturePoint.identifier,
                domainCoord: coords.domainCoord,
                rangeCoord: coords.rangeCoord,
            };
        };
        ScaleGesture.prototype.updatePoint = function (gesturePoint, scalePoint) {
            scalePoint.rangeCoord = this.rangeCoord(gesturePoint.cx, gesturePoint.cy);
        };
        ScaleGesture.prototype.updatePoints = function (gesturePoints) {
            var scalePoints = this._points;
            outer: for (var i = 0; i < gesturePoints.length; i += 1) {
                var gesturePoint = gesturePoints[i];
                for (var j_1 = 0; j_1 < scalePoints.length; j_1 += 1) {
                    var scalePoint_1 = scalePoints[j_1];
                    if (Objects.equal(gesturePoint.identifier, scalePoint_1.identifier)) {
                        this.updatePoint(gesturePoint, scalePoint_1);
                        continue outer;
                    }
                }
                var scalePoint = this.createPoint(gesturePoint);
                scalePoints.push(scalePoint);
            }
            var j = 0;
            outer: while (j < scalePoints.length) {
                var scalePoint = scalePoints[j];
                for (var i = 0; i < gesturePoints.length; i += 1) {
                    var gesturePoint = gesturePoints[i];
                    if (Objects.equal(scalePoint.identifier, gesturePoint.identifier)) {
                        j += 1;
                        continue outer;
                    }
                }
                scalePoints.splice(j, 1);
            }
        };
        ScaleGesture.prototype.clampScale = function () {
            var _xMin = this._xMin !== null ? this._xMin : void 0;
            var _xMax = this._xMax !== null ? this._xMax : void 0;
            var _zMin = this._zMin !== null ? this._zMin : void 0;
            var _zMax = this._zMax !== null ? this._zMax : void 0;
            var scale = this._scale;
            this._scale = scale.clampDomain(_xMin, _xMax, _zMin, _zMax);
            if (this._scale !== scale) {
                for (var i = 0; i < this._points.length; i += 1) {
                    var scalePoint = this._points[i];
                    scalePoint.domainCoord = this._scale.unscale(scalePoint.rangeCoord);
                }
                return true;
            }
            else {
                return false;
            }
        };
        ScaleGesture.prototype.rescale = function () {
            var p0 = this._points[0];
            var p1 = this._points[1];
            var oldScale = this._scale;
            if (p0 && p1) {
                var x0 = p0.domainCoord;
                var y0 = p0.rangeCoord;
                var x1 = p1.domainCoord;
                var y1 = p1.rangeCoord;
                this._scale = oldScale.solveDomain(x0, y0, x1, y1);
                this.clampScale();
            }
            else if (p0) {
                var x0 = p0.domainCoord;
                var y0 = p0.rangeCoord;
                this._scale = oldScale.solveDomain(x0, y0);
                this.clampScale();
            }
            return !oldScale.equals(this._scale);
        };
        ScaleGesture.prototype.onMultitouchStart = function (event) {
            this.scaleStart();
        };
        ScaleGesture.prototype.onMultitouchChange = function (event) {
            this.updatePoints(event.points);
            var changed = this.rescale();
            if (changed) {
                this.scaleChange();
            }
        };
        ScaleGesture.prototype.onMultitouchEnd = function (event) {
            this.scaleEnd();
        };
        ScaleGesture.prototype.scaleStart = function () {
            var event = new ScaleGestureEvent("scalestart", {
                bubbles: true,
                cancelable: true,
                composed: true,
                gesture: this,
                multitouch: this._multitouch,
                ruler: this._ruler,
                scale: this._scale,
            });
            this._ruler.dispatchEvent(event);
        };
        ScaleGesture.prototype.scaleChange = function () {
            var event = new ScaleGestureEvent("scalechange", {
                bubbles: true,
                cancelable: true,
                composed: true,
                gesture: this,
                multitouch: this._multitouch,
                ruler: this._ruler,
                scale: this._scale,
            });
            this._ruler.dispatchEvent(event);
        };
        ScaleGesture.prototype.scaleEnd = function () {
            var event = new ScaleGestureEvent("scaleend", {
                bubbles: true,
                cancelable: true,
                composed: true,
                gesture: this,
                multitouch: this._multitouch,
                ruler: this._ruler,
                scale: this._scale,
            });
            this._ruler.dispatchEvent(event);
            this._points.length = 0;
        };
        ScaleGesture.horizontal = function () {
            return new HorizontalScaleGesture();
        };
        ScaleGesture.vertical = function () {
            return new VerticalScaleGesture();
        };
        return ScaleGesture;
    }());
    var HorizontalScaleGesture = (function (_super) {
        __extends(HorizontalScaleGesture, _super);
        function HorizontalScaleGesture() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HorizontalScaleGesture.prototype.coords = function (clientX, clientY) {
            var ruler = this._ruler;
            var dx = RenderView.is(ruler) ? ruler.bounds.x : 0;
            do {
                if (ruler instanceof ElementView) {
                    var bounds = ruler.node.getBoundingClientRect();
                    var rangeCoord = clientX - bounds.left - dx;
                    var domainCoord = this._scale.unscale(rangeCoord);
                    return { domainCoord: domainCoord, rangeCoord: rangeCoord };
                }
                else if (ruler) {
                    ruler = ruler.parentView;
                }
                else {
                    break;
                }
            } while (true);
            throw new Error("" + this._ruler);
        };
        HorizontalScaleGesture.prototype.rangeCoord = function (clientX, clientY) {
            var ruler = this._ruler;
            var dx = RenderView.is(ruler) ? ruler.bounds.x : 0;
            do {
                if (ruler instanceof ElementView) {
                    var bounds = ruler.node.getBoundingClientRect();
                    var rangeCoord = clientX - bounds.left - dx;
                    return rangeCoord;
                }
                else if (ruler) {
                    ruler = ruler.parentView;
                }
                else {
                    break;
                }
            } while (true);
            throw new Error("" + this._ruler);
        };
        HorizontalScaleGesture.prototype.isParallel = function (x0, y0, x1, y1) {
            return Math.abs(x1 - x0) >= Math.abs(y1 - y0);
        };
        return HorizontalScaleGesture;
    }(ScaleGesture));
    var VerticalScaleGesture = (function (_super) {
        __extends(VerticalScaleGesture, _super);
        function VerticalScaleGesture() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VerticalScaleGesture.prototype.coords = function (clientX, clientY) {
            var ruler = this._ruler;
            var dy = RenderView.is(ruler) ? ruler.bounds.y : 0;
            do {
                if (ruler instanceof ElementView) {
                    var bounds = ruler.node.getBoundingClientRect();
                    var rangeCoord = clientY - bounds.top - dy;
                    var domainCoord = this._scale.unscale(rangeCoord);
                    return { domainCoord: domainCoord, rangeCoord: rangeCoord };
                }
                else if (ruler) {
                    ruler = ruler.parentView;
                }
                else {
                    break;
                }
            } while (true);
            throw new Error("" + this._ruler);
        };
        VerticalScaleGesture.prototype.rangeCoord = function (clientX, clientY) {
            var ruler = this._ruler;
            var dy = RenderView.is(ruler) ? ruler.bounds.y : 0;
            do {
                if (ruler instanceof ElementView) {
                    var bounds = ruler.node.getBoundingClientRect();
                    var rangeCoord = clientY - bounds.top - dy;
                    return rangeCoord;
                }
                else if (ruler) {
                    ruler = ruler.parentView;
                }
                else {
                    break;
                }
            } while (true);
            throw new Error("" + this._ruler);
        };
        VerticalScaleGesture.prototype.isParallel = function (x0, y0, x1, y1) {
            return Math.abs(y1 - y0) >= Math.abs(x1 - x0);
        };
        return VerticalScaleGesture;
    }(ScaleGesture));

    var DialView = (function (_super) {
        __extends(DialView, _super);
        function DialView() {
            var _this = _super.call(this) || this;
            _this.value.setState(0);
            _this.total.setState(1);
            _this._arrangement = "auto";
            return _this;
        }
        Object.defineProperty(DialView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        DialView.prototype.label = function (label) {
            if (label === void 0) {
                return this.getChildView("label");
            }
            else {
                if (label !== null && !(label instanceof View)) {
                    label = TextRunView.fromAny(label);
                }
                this.setChildView("label", label);
                return this;
            }
        };
        DialView.prototype.legend = function (legend) {
            if (legend === void 0) {
                return this.getChildView("legend");
            }
            else {
                if (legend !== null && !(legend instanceof View)) {
                    legend = TextRunView.fromAny(legend);
                }
                this.setChildView("legend", legend);
                return this;
            }
        };
        DialView.prototype.arrangement = function (arrangement) {
            if (arrangement === void 0) {
                return this._arrangement;
            }
            else {
                this._arrangement = arrangement;
                return this;
            }
        };
        DialView.prototype.onAnimate = function (t) {
            this.value.onFrame(t);
            this.total.onFrame(t);
            this.innerRadius.onFrame(t);
            this.outerRadius.onFrame(t);
            this.startAngle.onFrame(t);
            this.sweepAngle.onFrame(t);
            this.cornerRadius.onFrame(t);
            this.dialColor.onFrame(t);
            this.meterColor.onFrame(t);
            this.labelPadding.onFrame(t);
            this.tickAlign.onFrame(t);
            this.tickRadius.onFrame(t);
            this.tickLength.onFrame(t);
            this.tickWidth.onFrame(t);
            this.tickPadding.onFrame(t);
            this.tickColor.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
        };
        DialView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderDial(context, bounds, anchor);
            context.restore();
            this.renderTick(context, bounds, anchor);
        };
        DialView.prototype.renderDial = function (context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var r0 = this.innerRadius.value.pxValue(size);
            var r1 = this.outerRadius.value.pxValue(size);
            var a0 = this.startAngle.value.radValue();
            var da = this.sweepAngle.value.radValue();
            var rc = this.cornerRadius.value.pxValue(r1 - r0);
            var dial = new Arc(Length.px(r0), Length.px(r1), Angle.rad(a0), Angle.rad(da), Angle.zero(), null, Length.px(rc));
            var meter = dial.sweepAngle(da * this.value.value / (this.total.value || 1));
            context.beginPath();
            var dialColor = this.dialColor.value;
            context.fillStyle = dialColor.toString();
            dial.render(context, bounds, anchor);
            context.fill();
            context.clip();
            context.beginPath();
            var meterColor = this.meterColor.value;
            context.fillStyle = meterColor.toString();
            meter.render(context, bounds, anchor);
            context.fill();
            var label = this.label();
            if (RenderView.is(label)) {
                var r = (r0 + r1) / 2;
                var rx = r * Math.cos(a0 + 1e-12);
                var ry = r * Math.sin(a0 + 1e-12);
                var textAlign = void 0;
                if (rx >= 0) {
                    if (ry >= 0) {
                        textAlign = "start";
                    }
                    else {
                        textAlign = "end";
                    }
                }
                else {
                    if (ry < 0) {
                        textAlign = "end";
                    }
                    else {
                        textAlign = "start";
                    }
                }
                var padAngle = a0 - Math.PI / 2;
                var labelPadding = this.labelPadding.value.pxValue(r1 - r0);
                var dx = labelPadding * Math.cos(padAngle);
                var dy = labelPadding * Math.sin(padAngle);
                var labelAnchor = new PointR2(anchor.x + rx + dx, anchor.y + ry + dy);
                label.setAnchor(labelAnchor);
                if (TypesetView.is(label)) {
                    label.textAlign(textAlign);
                    label.textBaseline("middle");
                }
            }
        };
        DialView.prototype.renderTick = function (context, bounds, anchor) {
            var legend = this.legend();
            if (RenderView.is(legend) && !legend.hidden) {
                var width = bounds.width;
                var height = bounds.height;
                var size = Math.min(width, height);
                var cx = anchor.x;
                var cy = anchor.y;
                var a0 = this.startAngle.value.radValue();
                var da = this.sweepAngle.value.radValue() * this.value.value / (this.total.value || 1);
                var a = a0 + da * this.tickAlign.value;
                var r1 = this.outerRadius.value.pxValue(size);
                var r2 = this.tickRadius.value.pxValue(size);
                var r3 = this.tickLength.value.pxValue(width);
                var r1x = r1 * Math.cos(a + 1e-12);
                var r1y = r1 * Math.sin(a + 1e-12);
                var r2x = r2 * Math.cos(a + 1e-12);
                var r2y = r2 * Math.sin(a + 1e-12);
                var l = 0;
                context.beginPath();
                var tickColor = this.tickColor.value;
                context.strokeStyle = tickColor.toString();
                context.lineWidth = this.tickWidth.value.pxValue(size);
                context.moveTo(cx + r1x, cy + r1y);
                context.lineTo(cx + r2x, cy + r2y);
                if (r3) {
                    if (r2x >= 0) {
                        context.lineTo(cx + r3, cy + r2y);
                        l = r3 - r2x;
                    }
                    else if (r2x < 0) {
                        context.lineTo(cx - r3, cy + r2y);
                        l = r3 + r2x;
                    }
                }
                context.stroke();
                var dx = void 0;
                var textAlign = void 0;
                if (r2x >= 0) {
                    dx = l;
                    if (r2y >= 0) {
                        textAlign = "end";
                    }
                    else {
                        textAlign = "end";
                    }
                }
                else {
                    dx = -l;
                    if (r2y < 0) {
                        textAlign = "start";
                    }
                    else {
                        textAlign = "start";
                    }
                }
                var legendAnchor = new PointR2(cx + r2x + dx, cy + r2y - this.tickPadding.value.pxValue(size));
                legend.setAnchor(legendAnchor);
                if (TypesetView.is(legend)) {
                    if (FillView.is(legend)) {
                        legend.fill(tickColor);
                    }
                    legend.textAlign(textAlign);
                    legend.textBaseline("alphabetic");
                }
            }
        };
        DialView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestDial(x, y, context, bounds, anchor);
                context.restore();
            }
            return hit;
        };
        DialView.prototype.hitTestDial = function (x, y, context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var r0 = this.innerRadius.value.pxValue(size);
            var r1 = this.outerRadius.value.pxValue(size);
            var a0 = this.startAngle.value.radValue();
            var da = this.sweepAngle.value.radValue();
            var rc = this.cornerRadius.value.pxValue(r1 - r0);
            var dial = new Arc(Length.px(r0), Length.px(r1), Angle.rad(a0), Angle.rad(da), Angle.zero(), null, Length.px(rc));
            context.beginPath();
            dial.render(context, bounds, anchor);
            if (context.isPointInPath(x, y)) {
                return this;
            }
            return null;
        };
        DialView.fromAny = function (dial) {
            if (dial instanceof DialView) {
                return dial;
            }
            else if (typeof dial === "object" && dial) {
                var view = new DialView();
                if (dial.key !== void 0) {
                    view.key(dial.key);
                }
                if (dial.value !== void 0) {
                    view.value(dial.value);
                }
                if (dial.total !== void 0) {
                    view.total(dial.total);
                }
                if (dial.innerRadius !== void 0) {
                    view.innerRadius(dial.innerRadius);
                }
                if (dial.outerRadius !== void 0) {
                    view.outerRadius(dial.outerRadius);
                }
                if (dial.startAngle !== void 0) {
                    view.startAngle(dial.startAngle);
                }
                if (dial.sweepAngle !== void 0) {
                    view.sweepAngle(dial.sweepAngle);
                }
                if (dial.cornerRadius !== void 0) {
                    view.cornerRadius(dial.cornerRadius);
                }
                if (dial.dialColor !== void 0) {
                    view.dialColor(dial.dialColor);
                }
                if (dial.meterColor !== void 0) {
                    view.meterColor(dial.meterColor);
                }
                if (dial.labelPadding !== void 0) {
                    view.labelPadding(dial.labelPadding);
                }
                if (dial.tickAlign !== void 0) {
                    view.tickAlign(dial.tickAlign);
                }
                if (dial.tickRadius !== void 0) {
                    view.tickRadius(dial.tickRadius);
                }
                if (dial.tickLength !== void 0) {
                    view.tickLength(dial.tickLength);
                }
                if (dial.tickWidth !== void 0) {
                    view.tickWidth(dial.tickWidth);
                }
                if (dial.tickPadding !== void 0) {
                    view.tickPadding(dial.tickPadding);
                }
                if (dial.tickColor !== void 0) {
                    view.tickColor(dial.tickColor);
                }
                if (dial.font !== void 0) {
                    view.font(dial.font);
                }
                if (dial.textColor !== void 0) {
                    view.textColor(dial.textColor);
                }
                if (dial.arrangement !== void 0) {
                    view.arrangement(dial.arrangement);
                }
                if (dial.label !== void 0) {
                    view.label(dial.label);
                }
                if (dial.legend !== void 0) {
                    view.legend(dial.legend);
                }
                return view;
            }
            throw new TypeError("" + dial);
        };
        __decorate([
            MemberAnimator(Number)
        ], DialView.prototype, "value", void 0);
        __decorate([
            MemberAnimator(Number)
        ], DialView.prototype, "total", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "innerRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "outerRadius", void 0);
        __decorate([
            MemberAnimator(Angle, "inherit")
        ], DialView.prototype, "startAngle", void 0);
        __decorate([
            MemberAnimator(Angle, "inherit")
        ], DialView.prototype, "sweepAngle", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "cornerRadius", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], DialView.prototype, "dialColor", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], DialView.prototype, "meterColor", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "labelPadding", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], DialView.prototype, "tickAlign", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "tickRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "tickLength", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "tickWidth", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], DialView.prototype, "tickPadding", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], DialView.prototype, "tickColor", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], DialView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], DialView.prototype, "textColor", void 0);
        return DialView;
    }(GraphicView));

    var GaugeView = (function (_super) {
        __extends(GaugeView, _super);
        function GaugeView() {
            var _this = _super.call(this) || this;
            _this.limit.setState(0);
            _this.innerRadius.setState(Length.pct(30));
            _this.outerRadius.setState(Length.pct(40));
            _this.startAngle.setState(Angle.rad(-Math.PI / 2));
            _this.sweepAngle.setState(Angle.rad(2 * Math.PI));
            _this.cornerRadius.setState(Length.pct(50));
            _this.dialSpacing.setState(Length.px(1));
            _this.dialColor.setState(Color.transparent());
            _this.meterColor.setState(Color.black());
            _this.labelPadding.setState(Length.pct(25));
            _this.tickAlign.setState(0.5);
            _this.tickRadius.setState(Length.pct(45));
            _this.tickLength.setState(Length.pct(50));
            _this.tickWidth.setState(Length.px(1));
            _this.tickPadding.setState(Length.px(1));
            _this.tickColor.setState(Color.black());
            return _this;
        }
        Object.defineProperty(GaugeView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        GaugeView.prototype.title = function (title) {
            if (title === void 0) {
                return this.getChildView("title");
            }
            else {
                if (title !== null && !(title instanceof View)) {
                    title = TextRunView.fromAny(title);
                }
                this.setChildView("title", title);
                return this;
            }
        };
        GaugeView.prototype.addDial = function (dial) {
            dial = DialView.fromAny(dial);
            this.appendChildView(dial);
        };
        GaugeView.prototype.onAnimate = function (t) {
            this.limit.onFrame(t);
            this.innerRadius.onFrame(t);
            this.outerRadius.onFrame(t);
            this.startAngle.onFrame(t);
            this.sweepAngle.onFrame(t);
            this.cornerRadius.onFrame(t);
            this.dialSpacing.onFrame(t);
            this.dialColor.onFrame(t);
            this.meterColor.onFrame(t);
            this.labelPadding.onFrame(t);
            this.tickAlign.onFrame(t);
            this.tickRadius.onFrame(t);
            this.tickLength.onFrame(t);
            this.tickWidth.onFrame(t);
            this.tickPadding.onFrame(t);
            this.tickColor.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
        };
        GaugeView.prototype.didAnimate = function (t) {
            this.layoutGauge();
            _super.prototype.didAnimate.call(this, t);
        };
        GaugeView.prototype.layoutGauge = function () {
            var bounds = this._bounds;
            var size = Math.min(bounds.width, bounds.height);
            var childViews = this._childViews;
            var childCount = childViews.length;
            var limit = this.limit.value;
            var innerRadius = this.innerRadius.value;
            var outerRadius = this.outerRadius.value;
            var startAngle = this.startAngle.value;
            var sweepAngle = this.sweepAngle.value;
            var dialSpacing = this.dialSpacing.value;
            var r0;
            var r1;
            var rs;
            var dr;
            if (innerRadius && outerRadius) {
                var dialCount = 0;
                for (var i = 0; i < childCount; i += 1) {
                    var childView = childViews[i];
                    if (childView instanceof DialView && childView._arrangement === "auto") {
                        dialCount += 1;
                    }
                }
                r0 = innerRadius.pxValue(size);
                r1 = outerRadius.pxValue(size);
                rs = dialSpacing ? dialSpacing.pxValue(size) : 0;
                dr = dialCount > 1 ? (r1 - r0 - rs * (dialCount - 1)) / dialCount : r1 - r0;
            }
            for (var i = 0; i < childCount; i += 1) {
                var childView = childViews[i];
                if (childView instanceof DialView && childView._arrangement === "auto") {
                    if (limit && isFinite(limit)) {
                        var total = childView.total();
                        if (total) {
                            childView.total(Math.max(total, limit));
                        }
                    }
                    if (innerRadius && outerRadius) {
                        childView.innerRadius(Length.px(r0))
                            .outerRadius(Length.px(r0 + dr));
                        r0 = r0 + dr + rs;
                    }
                    if (startAngle) {
                        childView.startAngle(startAngle);
                    }
                    if (sweepAngle) {
                        childView.sweepAngle(sweepAngle);
                    }
                }
            }
            var title = this.title();
            if (TypesetView.is(title)) {
                title.textAlign("center");
                title.textBaseline("middle");
            }
        };
        GaugeView.fromAny = function (gauge) {
            if (gauge instanceof GaugeView) {
                return gauge;
            }
            else if (typeof gauge === "object" && gauge) {
                var view = new GaugeView();
                if (gauge.key !== void 0) {
                    view.key(gauge.key);
                }
                if (gauge.limit !== void 0) {
                    view.limit(gauge.limit);
                }
                if (gauge.innerRadius !== void 0) {
                    view.innerRadius(gauge.innerRadius);
                }
                if (gauge.outerRadius !== void 0) {
                    view.outerRadius(gauge.outerRadius);
                }
                if (gauge.startAngle !== void 0) {
                    view.startAngle(gauge.startAngle);
                }
                if (gauge.sweepAngle !== void 0) {
                    view.sweepAngle(gauge.sweepAngle);
                }
                if (gauge.cornerRadius !== void 0) {
                    view.cornerRadius(gauge.cornerRadius);
                }
                if (gauge.dialSpacing !== void 0) {
                    view.dialSpacing(gauge.dialSpacing);
                }
                if (gauge.dialColor !== void 0) {
                    view.dialColor(gauge.dialColor);
                }
                if (gauge.meterColor !== void 0) {
                    view.meterColor(gauge.meterColor);
                }
                if (gauge.labelPadding !== void 0) {
                    view.labelPadding(gauge.labelPadding);
                }
                if (gauge.tickAlign !== void 0) {
                    view.tickAlign(gauge.tickAlign);
                }
                if (gauge.tickRadius !== void 0) {
                    view.tickRadius(gauge.tickRadius);
                }
                if (gauge.tickLength !== void 0) {
                    view.tickLength(gauge.tickLength);
                }
                if (gauge.tickWidth !== void 0) {
                    view.tickWidth(gauge.tickWidth);
                }
                if (gauge.tickPadding !== void 0) {
                    view.tickPadding(gauge.tickPadding);
                }
                if (gauge.tickColor !== void 0) {
                    view.tickColor(gauge.tickColor);
                }
                if (gauge.font !== void 0) {
                    view.font(gauge.font);
                }
                if (gauge.textColor !== void 0) {
                    view.textColor(gauge.textColor);
                }
                if (gauge.title !== void 0) {
                    view.title(gauge.title);
                }
                var dials = gauge.dials;
                if (dials) {
                    for (var i = 0, n = dials.length; i < n; i += 1) {
                        view.addDial(dials[i]);
                    }
                }
                return view;
            }
            throw new TypeError("" + gauge);
        };
        __decorate([
            MemberAnimator(Number)
        ], GaugeView.prototype, "limit", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "innerRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "outerRadius", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], GaugeView.prototype, "startAngle", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], GaugeView.prototype, "sweepAngle", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "cornerRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "dialSpacing", void 0);
        __decorate([
            MemberAnimator(Color)
        ], GaugeView.prototype, "dialColor", void 0);
        __decorate([
            MemberAnimator(Color)
        ], GaugeView.prototype, "meterColor", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "labelPadding", void 0);
        __decorate([
            MemberAnimator(Number)
        ], GaugeView.prototype, "tickAlign", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "tickRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "tickLength", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "tickWidth", void 0);
        __decorate([
            MemberAnimator(Length)
        ], GaugeView.prototype, "tickPadding", void 0);
        __decorate([
            MemberAnimator(Color)
        ], GaugeView.prototype, "tickColor", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], GaugeView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], GaugeView.prototype, "textColor", void 0);
        return GaugeView;
    }(GraphicView));

    var SliceView = (function (_super) {
        __extends(SliceView, _super);
        function SliceView() {
            var _this = _super.call(this) || this;
            _this.value.setState(0);
            _this._total = 1;
            _this.phaseAngle.setState(Angle.zero());
            return _this;
        }
        Object.defineProperty(SliceView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        SliceView.prototype.total = function (value) {
            if (value === void 0) {
                return this._total;
            }
            else {
                this._total = value;
                return this;
            }
        };
        SliceView.prototype.label = function (label) {
            if (label === void 0) {
                return this.getChildView("label");
            }
            else {
                if (label !== null && !(label instanceof View)) {
                    label = TextRunView.fromAny(label);
                }
                this.setChildView("label", label);
                return this;
            }
        };
        SliceView.prototype.legend = function (legend) {
            if (legend === void 0) {
                return this.getChildView("legend");
            }
            else {
                if (legend !== null && !(legend instanceof View)) {
                    legend = TextRunView.fromAny(legend);
                }
                this.setChildView("legend", legend);
                return this;
            }
        };
        SliceView.prototype.onAnimate = function (t) {
            this.value.onFrame(t);
            this.innerRadius.onFrame(t);
            this.outerRadius.onFrame(t);
            this.phaseAngle.onFrame(t);
            this.padAngle.onFrame(t);
            this.padRadius.onFrame(t);
            this.cornerRadius.onFrame(t);
            this.labelRadius.onFrame(t);
            this.sliceColor.onFrame(t);
            this.tickAlign.onFrame(t);
            this.tickRadius.onFrame(t);
            this.tickLength.onFrame(t);
            this.tickWidth.onFrame(t);
            this.tickPadding.onFrame(t);
            this.tickColor.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
        };
        SliceView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderSlice(context, bounds, anchor);
            this.renderTick(context, bounds, anchor);
            context.restore();
        };
        SliceView.prototype.renderSlice = function (context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var r0 = this.innerRadius.value.pxValue(size);
            var r1 = this.outerRadius.value.pxValue(size);
            var a0 = this.phaseAngle.value.radValue();
            var da = 2 * Math.PI * this.value.value / (this._total || 1);
            var ap = this.padAngle.value;
            var rp = this.padRadius.value || null;
            var rc = this.cornerRadius.value.pxValue(r1 - r0);
            var arc = new Arc(Length.px(r0), Length.px(r1), Angle.rad(a0), Angle.rad(da), ap, rp, Length.px(rc));
            context.beginPath();
            var sliceColor = this.sliceColor.value;
            context.fillStyle = sliceColor.toString();
            arc.render(context, bounds, anchor);
            context.fill();
            var label = this.label();
            if (RenderView.is(label)) {
                var a = a0 + da / 2;
                var r = r0 + this.labelRadius.value.pxValue(r1 - r0);
                var rx = r * Math.cos(a);
                var ry = r * Math.sin(a);
                var labelAnchor = new PointR2(anchor.x + rx, anchor.y + ry);
                label.setAnchor(labelAnchor);
                if (TypesetView.is(label)) {
                    label.textAlign("center");
                    label.textBaseline("middle");
                }
            }
        };
        SliceView.prototype.renderTick = function (context, bounds, anchor) {
            var legend = this.legend();
            if (RenderView.is(legend) && !legend.hidden) {
                var width = bounds.width;
                var height = bounds.height;
                var size = Math.min(width, height);
                var cx = anchor.x;
                var cy = anchor.y;
                var a0 = this.phaseAngle.value.radValue();
                var da = Math.min(2 * Math.PI * this.value.value / (this._total || 1), 2 * Math.PI);
                var a = a0 + da * this.tickAlign.value;
                var r1 = this.outerRadius.value.pxValue(size);
                var r2 = this.tickRadius.value.pxValue(size);
                var r3 = this.tickLength.value.pxValue(width);
                var r1x = r1 * Math.cos(a + 1e-12);
                var r1y = r1 * Math.sin(a + 1e-12);
                var r2x = r2 * Math.cos(a + 1e-12);
                var r2y = r2 * Math.sin(a + 1e-12);
                var l = 0;
                context.beginPath();
                var tickColor = this.tickColor.value;
                context.strokeStyle = tickColor.toString();
                context.lineWidth = this.tickWidth.value.pxValue(size);
                context.moveTo(cx + r1x, cy + r1y);
                context.lineTo(cx + r2x, cy + r2y);
                if (r3) {
                    if (r2x >= 0) {
                        context.lineTo(cx + r3, cy + r2y);
                        l = r3 - r2x;
                    }
                    else if (r2x < 0) {
                        context.lineTo(cx - r3, cy + r2y);
                        l = r3 + r2x;
                    }
                }
                context.stroke();
                var dx = void 0;
                var textAlign = void 0;
                if (r2x >= 0) {
                    dx = l;
                    if (r2y >= 0) {
                        textAlign = "end";
                    }
                    else {
                        textAlign = "end";
                    }
                }
                else {
                    dx = -l;
                    if (r2y < 0) {
                        textAlign = "start";
                    }
                    else {
                        textAlign = "start";
                    }
                }
                var legendAnchor = new PointR2(cx + r2x + dx, cy + r2y - this.tickPadding.value.pxValue(size));
                legend.setAnchor(legendAnchor);
                if (TypesetView.is(legend)) {
                    if (FillView.is(legend)) {
                        legend.fill(tickColor);
                    }
                    legend.textAlign(textAlign);
                    legend.textBaseline("alphabetic");
                }
            }
        };
        SliceView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestSlice(x, y, context, bounds, anchor);
                context.restore();
            }
            return hit;
        };
        SliceView.prototype.hitTestSlice = function (x, y, context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var r0 = this.innerRadius.value.pxValue(size);
            var r1 = this.outerRadius.value.pxValue(size);
            var a0 = this.phaseAngle.value.radValue();
            var da = 2 * Math.PI * this.value.value / (this._total || 1);
            var ap = this.padAngle.value;
            var rp = this.padRadius.value || null;
            var rc = this.cornerRadius.value.pxValue(r1 - r0);
            var arc = new Arc(Length.px(r0), Length.px(r1), Angle.rad(a0), Angle.rad(da), ap, rp, Length.px(rc));
            context.beginPath();
            arc.render(context, bounds, anchor);
            if (context.isPointInPath(x, y)) {
                return this;
            }
            return null;
        };
        SliceView.fromAny = function (slice) {
            if (slice instanceof SliceView) {
                return slice;
            }
            else if (typeof slice === "object" && slice) {
                var view = new SliceView();
                if (slice.key !== void 0) {
                    view.key(slice.key);
                }
                if (slice.value !== void 0) {
                    view.value(slice.value);
                }
                if (slice.total !== void 0) {
                    view.total(slice.total);
                }
                if (slice.innerRadius !== void 0) {
                    view.innerRadius(slice.innerRadius);
                }
                if (slice.outerRadius !== void 0) {
                    view.outerRadius(slice.outerRadius);
                }
                if (slice.phaseAngle !== void 0) {
                    view.phaseAngle(slice.phaseAngle);
                }
                if (slice.padAngle !== void 0) {
                    view.padAngle(slice.padAngle);
                }
                if (slice.padRadius !== void 0) {
                    view.padRadius(slice.padRadius);
                }
                if (slice.cornerRadius !== void 0) {
                    view.cornerRadius(slice.cornerRadius);
                }
                if (slice.labelRadius !== void 0) {
                    view.labelRadius(slice.labelRadius);
                }
                if (slice.sliceColor !== void 0) {
                    view.sliceColor(slice.sliceColor);
                }
                if (slice.tickAlign !== void 0) {
                    view.tickAlign(slice.tickAlign);
                }
                if (slice.tickRadius !== void 0) {
                    view.tickRadius(slice.tickRadius);
                }
                if (slice.tickLength !== void 0) {
                    view.tickLength(slice.tickLength);
                }
                if (slice.tickWidth !== void 0) {
                    view.tickWidth(slice.tickWidth);
                }
                if (slice.tickPadding !== void 0) {
                    view.tickPadding(slice.tickPadding);
                }
                if (slice.tickColor !== void 0) {
                    view.tickColor(slice.tickColor);
                }
                if (slice.font !== void 0) {
                    view.font(slice.font);
                }
                if (slice.textColor !== void 0) {
                    view.textColor(slice.textColor);
                }
                if (slice.label !== void 0) {
                    view.label(slice.label);
                }
                if (slice.legend !== void 0) {
                    view.legend(slice.legend);
                }
                return view;
            }
            throw new TypeError("" + slice);
        };
        __decorate([
            MemberAnimator(Number)
        ], SliceView.prototype, "value", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "innerRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "outerRadius", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], SliceView.prototype, "phaseAngle", void 0);
        __decorate([
            MemberAnimator(Angle, "inherit")
        ], SliceView.prototype, "padAngle", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "padRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "cornerRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "labelRadius", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], SliceView.prototype, "sliceColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], SliceView.prototype, "tickAlign", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "tickRadius", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "tickLength", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "tickWidth", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], SliceView.prototype, "tickPadding", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], SliceView.prototype, "tickColor", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], SliceView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], SliceView.prototype, "textColor", void 0);
        return SliceView;
    }(GraphicView));

    var PieView = (function (_super) {
        __extends(PieView, _super);
        function PieView() {
            var _this = _super.call(this) || this;
            _this.limit.setState(0);
            _this.baseAngle.setState(Angle.rad(-Math.PI / 2));
            _this.innerRadius.setState(Length.pct(3));
            _this.outerRadius.setState(Length.pct(25));
            _this.padAngle.setState(Angle.deg(2));
            _this.padRadius.setState(null);
            _this.cornerRadius.setState(Length.zero());
            _this.labelRadius.setState(Length.pct(50));
            _this.sliceColor.setState(Color.black());
            _this.tickAlign.setState(0.5);
            _this.tickRadius.setState(Length.pct(30));
            _this.tickLength.setState(Length.pct(50));
            _this.tickWidth.setState(Length.px(1));
            _this.tickPadding.setState(Length.px(1));
            _this.tickColor.setState(Color.black());
            return _this;
        }
        Object.defineProperty(PieView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        PieView.prototype.title = function (title) {
            if (title === void 0) {
                return this.getChildView("title");
            }
            else {
                if (title !== null && !(title instanceof View)) {
                    title = TextRunView.fromAny(title);
                }
                this.setChildView("title", title);
                return this;
            }
        };
        PieView.prototype.addSlice = function (slice) {
            slice = SliceView.fromAny(slice);
            this.appendChildView(slice);
        };
        PieView.prototype.onAnimate = function (t) {
            this.limit.onFrame(t);
            this.baseAngle.onFrame(t);
            this.innerRadius.onFrame(t);
            this.outerRadius.onFrame(t);
            this.padAngle.onFrame(t);
            this.padRadius.onFrame(t);
            this.cornerRadius.onFrame(t);
            this.labelRadius.onFrame(t);
            this.sliceColor.onFrame(t);
            this.tickAlign.onFrame(t);
            this.tickRadius.onFrame(t);
            this.tickLength.onFrame(t);
            this.tickWidth.onFrame(t);
            this.tickPadding.onFrame(t);
            this.tickColor.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
        };
        PieView.prototype.didAnimate = function (t) {
            this.layoutPie();
            _super.prototype.didAnimate.call(this, t);
        };
        PieView.prototype.layoutPie = function () {
            var childViews = this._childViews;
            var childCount = childViews.length;
            var total = 0;
            for (var i = 0; i < childCount; i += 1) {
                var childView = childViews[i];
                if (childView instanceof SliceView) {
                    var value = childView.value.value;
                    if (isFinite(value)) {
                        total += value;
                    }
                }
            }
            total = Math.max(total, this.limit.value);
            var baseAngle = this.baseAngle.value;
            for (var i = 0; i < childCount; i += 1) {
                var childView = childViews[i];
                if (childView instanceof SliceView) {
                    childView.total(total).phaseAngle(baseAngle);
                    var value = childView.value.value;
                    if (isFinite(value)) {
                        baseAngle = baseAngle.plus(Angle.rad(2 * Math.PI * value / (total || 1)));
                    }
                }
            }
            var title = this.title();
            if (TypesetView.is(title)) {
                title.textAlign("center");
                title.textBaseline("middle");
            }
        };
        PieView.fromAny = function (pie) {
            if (pie instanceof PieView) {
                return pie;
            }
            else if (typeof pie === "object" && pie) {
                var view = new PieView();
                if (pie.key !== void 0) {
                    view.key(pie.key);
                }
                if (pie.limit !== void 0) {
                    view.limit(pie.limit);
                }
                if (pie.baseAngle !== void 0) {
                    view.baseAngle(pie.baseAngle);
                }
                if (pie.innerRadius !== void 0) {
                    view.innerRadius(pie.innerRadius);
                }
                if (pie.outerRadius !== void 0) {
                    view.outerRadius(pie.outerRadius);
                }
                if (pie.padAngle !== void 0) {
                    view.padAngle(pie.padAngle);
                }
                if (pie.padRadius !== void 0) {
                    view.padRadius(pie.padRadius);
                }
                if (pie.cornerRadius !== void 0) {
                    view.cornerRadius(pie.cornerRadius);
                }
                if (pie.labelRadius !== void 0) {
                    view.labelRadius(pie.labelRadius);
                }
                if (pie.sliceColor !== void 0) {
                    view.sliceColor(pie.sliceColor);
                }
                if (pie.tickAlign !== void 0) {
                    view.tickAlign(pie.tickAlign);
                }
                if (pie.tickRadius !== void 0) {
                    view.tickRadius(pie.tickRadius);
                }
                if (pie.tickLength !== void 0) {
                    view.tickLength(pie.tickLength);
                }
                if (pie.tickWidth !== void 0) {
                    view.tickWidth(pie.tickWidth);
                }
                if (pie.tickPadding !== void 0) {
                    view.tickPadding(pie.tickPadding);
                }
                if (pie.tickColor !== void 0) {
                    view.tickColor(pie.tickColor);
                }
                if (pie.font !== void 0) {
                    view.font(pie.font);
                }
                if (pie.textColor !== void 0) {
                    view.textColor(pie.textColor);
                }
                if (pie.title !== void 0) {
                    view.title(pie.title);
                }
                var slices = pie.slices;
                if (slices) {
                    for (var i = 0, n = slices.length; i < n; i += 1) {
                        view.addSlice(slices[i]);
                    }
                }
                return view;
            }
            throw new TypeError("" + pie);
        };
        __decorate([
            MemberAnimator(Number)
        ], PieView.prototype, "limit", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], PieView.prototype, "baseAngle", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "innerRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "outerRadius", void 0);
        __decorate([
            MemberAnimator(Angle)
        ], PieView.prototype, "padAngle", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "padRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "cornerRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "labelRadius", void 0);
        __decorate([
            MemberAnimator(Color)
        ], PieView.prototype, "sliceColor", void 0);
        __decorate([
            MemberAnimator(Number)
        ], PieView.prototype, "tickAlign", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "tickRadius", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "tickLength", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "tickWidth", void 0);
        __decorate([
            MemberAnimator(Length)
        ], PieView.prototype, "tickPadding", void 0);
        __decorate([
            MemberAnimator(Color)
        ], PieView.prototype, "tickColor", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], PieView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], PieView.prototype, "textColor", void 0);
        return PieView;
    }(GraphicView));

    (function (TickState) {
        TickState[TickState["Excluded"] = 0] = "Excluded";
        TickState[TickState["Entering"] = 1] = "Entering";
        TickState[TickState["Included"] = 2] = "Included";
        TickState[TickState["Leaving"] = 3] = "Leaving";
    })(exports.TickState || (exports.TickState = {}));
    var TickView = (function (_super) {
        __extends(TickView, _super);
        function TickView(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._coord = 0;
            _this._coord0 = NaN;
            _this._state = 0;
            _this._preserve = true;
            _this.opacity.setState(1);
            _this.opacity.interpolate = TickView.interpolateOpacity;
            return _this;
        }
        Object.defineProperty(TickView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TickView.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TickView.prototype, "coord", {
            get: function () {
                return this._coord;
            },
            enumerable: true,
            configurable: true
        });
        TickView.prototype.setCoord = function (coord) {
            this._coord = coord;
        };
        TickView.prototype.tickLabel = function (tickLabel) {
            if (tickLabel === void 0) {
                return this.getChildView("tickLabel");
            }
            else {
                if (tickLabel !== null && !(tickLabel instanceof View)) {
                    tickLabel = TextRunView.fromAny(tickLabel);
                }
                this.setChildView("tickLabel", tickLabel);
                return this;
            }
        };
        TickView.prototype.preserve = function (preserve) {
            if (preserve === void 0) {
                return this._preserve;
            }
            else {
                this._preserve = preserve;
                return this;
            }
        };
        TickView.prototype.fadeIn = function (transition) {
            if (this._state === 0 || this._state === 3) {
                this.opacity.setState(1, transition);
                this._state = 1;
            }
        };
        TickView.prototype.fadeOut = function (transition) {
            if (this._state === 1 || this._state === 2) {
                this.opacity.setState(0, transition);
                this._state = 3;
            }
        };
        TickView.prototype.onAnimate = function (t) {
            this.opacity.onFrame(t);
            this.tickMarkColor.onFrame(t);
            this.tickMarkWidth.onFrame(t);
            this.tickMarkLength.onFrame(t);
            this.tickLabelPadding.onFrame(t);
            this.gridLineColor.onFrame(t);
            this.gridLineWidth.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
            var tickLabel = this.tickLabel();
            if (RenderView.is(tickLabel)) {
                this.layoutTickLabel(tickLabel, this._bounds, this._anchor);
            }
        };
        TickView.prototype.willRender = function (context) {
            _super.prototype.willRender.call(this, context);
            context.save();
            context.globalAlpha = this.opacity.value;
        };
        TickView.prototype.onRender = function (context) {
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderTick(context, bounds, anchor);
        };
        TickView.prototype.didRender = function (context) {
            context.restore();
            _super.prototype.didRender.call(this, context);
        };
        TickView.prototype.setChildViewBounds = function (childView, bounds) {
            if (childView.key() === "tickLabel") {
                this.layoutTickLabel(childView, bounds, this._anchor);
            }
            else {
                _super.prototype.setChildViewBounds.call(this, childView, bounds);
            }
        };
        TickView.prototype.setChildViewAnchor = function (childView, anchor) {
            if (childView.key() === "tickLabel") {
                this.layoutTickLabel(childView, this._bounds, anchor);
            }
            else {
                _super.prototype.setChildViewAnchor.call(this, childView, anchor);
            }
        };
        TickView.top = function (value) {
            return new TickView.Top(value);
        };
        TickView.right = function (value) {
            return new TickView.Right(value);
        };
        TickView.bottom = function (value) {
            return new TickView.Bottom(value);
        };
        TickView.left = function (value) {
            return new TickView.Left(value);
        };
        TickView.from = function (orientation, value) {
            if (orientation === "top") {
                return TickView.top(value);
            }
            else if (orientation === "right") {
                return TickView.right(value);
            }
            else if (orientation === "bottom") {
                return TickView.bottom(value);
            }
            else if (orientation === "left") {
                return TickView.left(value);
            }
            else {
                throw new TypeError(orientation);
            }
        };
        TickView.fromAny = function (tick, orientation) {
            if (tick instanceof TickView) {
                return tick;
            }
            else if (tick && typeof tick === "object") {
                if (tick.orientation) {
                    orientation = tick.orientation;
                }
                if (!orientation) {
                    throw new TypeError();
                }
                var view = TickView.from(orientation, tick.value);
                if (tick.key !== void 0) {
                    view.key(tick.key);
                }
                if (tick.tickMarkColor !== void 0) {
                    view.tickMarkColor(tick.tickMarkColor);
                }
                if (tick.tickMarkWidth !== void 0) {
                    view.tickMarkWidth(tick.tickMarkWidth);
                }
                if (tick.tickMarkLength !== void 0) {
                    view.tickMarkLength(tick.tickMarkLength);
                }
                if (tick.tickLabelPadding !== void 0) {
                    view.tickLabelPadding(tick.tickLabelPadding);
                }
                if (tick.gridLineColor !== void 0) {
                    view.gridLineColor(tick.gridLineColor);
                }
                if (tick.gridLineWidth !== void 0) {
                    view.gridLineWidth(tick.gridLineWidth);
                }
                if (tick.font !== void 0) {
                    view.font(tick.font);
                }
                if (tick.textColor !== void 0) {
                    view.textColor(tick.textColor);
                }
                if (tick.tickLabel !== void 0) {
                    view.tickLabel(tick.tickLabel);
                }
                return view;
            }
            throw new TypeError("" + tick);
        };
        TickView.interpolateOpacity = function (u) {
            var view = this._view;
            var coord = view._coord;
            if (isNaN(view._coord0)) {
                view._coord0 = coord;
            }
            var axisView = view._parentView;
            var tickSpacing = axisView._tickSpacing / 2;
            var v = Math.min(Math.abs(coord - view._coord0) / tickSpacing, 1);
            var opacity = this._interpolator.interpolate(Math.max(u, v));
            if (u === 1 || v === 1) {
                this._tweenState = 3;
            }
            if (opacity === 0 && view._state === 3) {
                view._state = 0;
                view._coord0 = NaN;
                view.remove();
            }
            else if (opacity === 1 && view._state === 1) {
                view._state = 2;
                view._coord0 = NaN;
            }
            return opacity;
        };
        __decorate([
            MemberAnimator(Number)
        ], TickView.prototype, "opacity", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], TickView.prototype, "tickMarkColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], TickView.prototype, "tickMarkWidth", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], TickView.prototype, "tickMarkLength", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], TickView.prototype, "tickLabelPadding", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], TickView.prototype, "gridLineColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], TickView.prototype, "gridLineWidth", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], TickView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], TickView.prototype, "textColor", void 0);
        return TickView;
    }(GraphicView));

    var TopTickView = (function (_super) {
        __extends(TopTickView, _super);
        function TopTickView(value) {
            return _super.call(this, value) || this;
        }
        Object.defineProperty(TopTickView.prototype, "orientation", {
            get: function () {
                return "top";
            },
            enumerable: true,
            configurable: true
        });
        TopTickView.prototype.layoutTickLabel = function (tickLabel, bounds, anchor) {
            var x = Math.round(anchor.x);
            var y0 = Math.round(anchor.y);
            var y1 = y0 - this.tickMarkLength.value;
            var y2 = y1 - this.tickLabelPadding.value;
            var tickLabelAnchor = new PointR2(x, y2);
            tickLabel.setAnchor(tickLabelAnchor);
            if (TypesetView.is(tickLabel)) {
                tickLabel.textAlign("center");
                tickLabel.textBaseline("bottom");
            }
        };
        TopTickView.prototype.renderTick = function (context, bounds, anchor) {
            var x = Math.round(anchor.x);
            var y0 = Math.round(anchor.y);
            var y1 = y0 - this.tickMarkLength.value;
            context.beginPath();
            context.strokeStyle = this.tickMarkColor.value.toString();
            context.lineWidth = this.tickMarkWidth.value;
            context.moveTo(x, y0);
            context.lineTo(x, y1);
            context.stroke();
            var gridLineWidth = this.gridLineWidth.value;
            if (gridLineWidth && bounds.xMin < x && x < bounds.xMax) {
                context.beginPath();
                context.strokeStyle = this.gridLineColor.value.toString();
                context.lineWidth = gridLineWidth;
                context.moveTo(x, y0);
                context.lineTo(x, bounds.yMax);
                context.stroke();
            }
        };
        return TopTickView;
    }(TickView));
    TickView.Top = TopTickView;

    var RightTickView = (function (_super) {
        __extends(RightTickView, _super);
        function RightTickView(value) {
            return _super.call(this, value) || this;
        }
        Object.defineProperty(RightTickView.prototype, "orientation", {
            get: function () {
                return "right";
            },
            enumerable: true,
            configurable: true
        });
        RightTickView.prototype.layoutTickLabel = function (tickLabel, bounds, anchor) {
            var x0 = Math.round(anchor.x);
            var y = Math.round(anchor.y);
            var x1 = x0 + this.tickMarkLength.value;
            var x2 = x1 + this.tickLabelPadding.value;
            var tickLabelAnchor = new PointR2(x2, y);
            tickLabel.setAnchor(tickLabelAnchor);
            if (TypesetView.is(tickLabel)) {
                tickLabel.textAlign("left");
                tickLabel.textBaseline("middle");
            }
        };
        RightTickView.prototype.renderTick = function (context, bounds, anchor) {
            var x0 = Math.round(anchor.x);
            var y = Math.round(anchor.y);
            var x1 = x0 + this.tickMarkLength.value;
            context.beginPath();
            context.strokeStyle = this.tickMarkColor.value.toString();
            context.lineWidth = this.tickMarkWidth.value;
            context.moveTo(x0, y);
            context.lineTo(x1, y);
            context.stroke();
            var gridLineWidth = this.gridLineWidth.value;
            if (gridLineWidth && bounds.yMin < y && y < bounds.yMax) {
                context.beginPath();
                context.strokeStyle = this.gridLineColor.value.toString();
                context.lineWidth = gridLineWidth;
                context.moveTo(x0, y);
                context.lineTo(bounds.xMin, y);
                context.stroke();
            }
        };
        return RightTickView;
    }(TickView));
    TickView.Right = RightTickView;

    var BottomTickView = (function (_super) {
        __extends(BottomTickView, _super);
        function BottomTickView(value) {
            return _super.call(this, value) || this;
        }
        Object.defineProperty(BottomTickView.prototype, "orientation", {
            get: function () {
                return "bottom";
            },
            enumerable: true,
            configurable: true
        });
        BottomTickView.prototype.layoutTickLabel = function (tickLabel, bounds, anchor) {
            var x = Math.round(anchor.x);
            var y0 = Math.round(anchor.y);
            var y1 = y0 + this.tickMarkLength.value;
            var y2 = y1 + this.tickLabelPadding.value;
            var tickLabelAnchor = new PointR2(x, y2);
            tickLabel.setAnchor(tickLabelAnchor);
            if (TypesetView.is(tickLabel)) {
                tickLabel.textAlign("center");
                tickLabel.textBaseline("top");
            }
        };
        BottomTickView.prototype.renderTick = function (context, bounds, anchor) {
            var x = Math.round(anchor.x);
            var y0 = Math.round(anchor.y);
            var y1 = y0 + this.tickMarkLength.value;
            context.beginPath();
            context.strokeStyle = this.tickMarkColor.value.toString();
            context.lineWidth = this.tickMarkWidth.value;
            context.moveTo(x, y0);
            context.lineTo(x, y1);
            context.stroke();
            var gridLineWidth = this.gridLineWidth.value;
            if (gridLineWidth && bounds.xMin < x && x < bounds.xMax) {
                context.beginPath();
                context.strokeStyle = this.gridLineColor.value.toString();
                context.lineWidth = gridLineWidth;
                context.moveTo(x, y0);
                context.lineTo(x, bounds.yMin);
                context.stroke();
            }
        };
        return BottomTickView;
    }(TickView));
    TickView.Bottom = BottomTickView;

    var LeftTickView = (function (_super) {
        __extends(LeftTickView, _super);
        function LeftTickView(value) {
            return _super.call(this, value) || this;
        }
        Object.defineProperty(LeftTickView.prototype, "orientation", {
            get: function () {
                return "left";
            },
            enumerable: true,
            configurable: true
        });
        LeftTickView.prototype.layoutTickLabel = function (tickLabel, bounds, anchor) {
            var x0 = Math.round(anchor.x);
            var y = Math.round(anchor.y);
            var x1 = x0 - this.tickMarkLength.value;
            var x2 = x1 - this.tickLabelPadding.value;
            var tickLabelAnchor = new PointR2(x2, y);
            tickLabel.setAnchor(tickLabelAnchor);
            if (TypesetView.is(tickLabel)) {
                tickLabel.textAlign("right");
                tickLabel.textBaseline("middle");
            }
        };
        LeftTickView.prototype.renderTick = function (context, bounds, anchor) {
            var x0 = Math.round(anchor.x);
            var y = Math.round(anchor.y);
            var x1 = x0 - this.tickMarkLength.value;
            context.beginPath();
            context.strokeStyle = this.tickMarkColor.value.toString();
            context.lineWidth = this.tickMarkWidth.value;
            context.moveTo(x0, y);
            context.lineTo(x1, y);
            context.stroke();
            var gridLineWidth = this.gridLineWidth.value;
            if (gridLineWidth && bounds.yMin < y && y < bounds.yMax) {
                context.beginPath();
                context.strokeStyle = this.gridLineColor.value.toString();
                context.lineWidth = gridLineWidth;
                context.moveTo(x0, y);
                context.lineTo(bounds.xMax, y);
                context.stroke();
            }
        };
        return LeftTickView;
    }(TickView));
    TickView.Left = LeftTickView;

    var ERROR_10 = Math.sqrt(50);
    var ERROR_5 = Math.sqrt(10);
    var ERROR_2 = Math.sqrt(2);
    var SECOND = 1000;
    var MINUTE = 60 * SECOND;
    var HOUR = 60 * MINUTE;
    var DAY = 24 * HOUR;
    var WEEK = 7 * DAY;
    var MONTH = 30 * DAY;
    var YEAR = 365 * DAY;
    var TIME_TICK_INTERVALS = new BTree()
        .set(SECOND, TimeInterval.second())
        .set(5 * SECOND, TimeInterval.second(5))
        .set(15 * SECOND, TimeInterval.second(15))
        .set(30 * SECOND, TimeInterval.second(30))
        .set(MINUTE, TimeInterval.minute(1))
        .set(5 * MINUTE, TimeInterval.minute(5))
        .set(15 * MINUTE, TimeInterval.minute(15))
        .set(30 * MINUTE, TimeInterval.minute(30))
        .set(HOUR, TimeInterval.hour())
        .set(3 * HOUR, TimeInterval.hour(3))
        .set(6 * HOUR, TimeInterval.hour(6))
        .set(12 * HOUR, TimeInterval.hour(12))
        .set(DAY, TimeInterval.day())
        .set(2 * DAY, TimeInterval.day(2))
        .set(WEEK, TimeInterval.week())
        .set(MONTH, TimeInterval.month())
        .set(3 * MONTH, TimeInterval.month(3))
        .set(YEAR, TimeInterval.year());
    var MILLISECOND_FORMAT = DateTimeFormat.pattern(".%L");
    var SECOND_FORMAT = DateTimeFormat.pattern(":%S");
    var MINUTE_FORMAT = DateTimeFormat.pattern("%I:%M");
    var HOUR_FORMAT = DateTimeFormat.pattern("%I %p");
    var WEEKDAY_FORMAT = DateTimeFormat.pattern("%a %d");
    var MONTHDAY_FORMAT = DateTimeFormat.pattern("%b %d");
    var MONTH_FORMAT = DateTimeFormat.pattern("%B");
    var YEAR_FORMAT = DateTimeFormat.pattern("%Y");
    var TickGenerator = (function () {
        function TickGenerator() {
        }
        TickGenerator.prototype.format = function (tickValue) {
            return "" + tickValue;
        };
        TickGenerator.fromScale = function (scale, n) {
            if (n === void 0) {
                n = 10;
            }
            if (scale instanceof TimeScale) {
                var domain = scale.domain();
                return new TimeTickGenerator(domain[0], domain[1], n);
            }
            else {
                var domain = scale.domain();
                return new NumberTickGenerator(domain[0], domain[1], n);
            }
        };
        TickGenerator.step = function (dx, n) {
            var step0 = Math.abs(dx) / n;
            var step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));
            var error = step0 / step1;
            if (error >= ERROR_10) {
                step1 *= 10;
            }
            else if (error >= ERROR_5) {
                step1 *= 5;
            }
            else if (error >= ERROR_2) {
                step1 *= 2;
            }
            return dx < 0 ? -step1 : step1;
        };
        return TickGenerator;
    }());
    var NumberTickGenerator = (function (_super) {
        __extends(NumberTickGenerator, _super);
        function NumberTickGenerator(x0, x1, n) {
            var _this = _super.call(this) || this;
            _this.x0 = x0;
            _this.dx = x1 - _this.x0;
            _this.n = Math.max(0, n);
            return _this;
        }
        NumberTickGenerator.prototype.count = function (n) {
            if (n === void 0) {
                return this.n;
            }
            else {
                this.n = Math.max(0, n);
                return this;
            }
        };
        NumberTickGenerator.prototype.domain = function (x0, x1) {
            if (x0 === void 0) {
                return [this.x0, this.x0 + this.dx];
            }
            else if (x1 === void 0) {
                this.x0 = x0[0];
                this.dx = x0[1] - this.x0;
                return this;
            }
            else {
                this.x0 = x0;
                this.dx = x1 - this.x0;
                return this;
            }
        };
        NumberTickGenerator.prototype.generate = function () {
            var x0;
            var x1;
            if (this.dx < 0) {
                x1 = this.x0;
                x0 = x1 + this.dx;
            }
            else {
                x0 = this.x0;
                x1 = x0 + this.dx;
            }
            var step = NumberTickGenerator.interval(x1 - x0, this.n);
            if (step === 0 || !isFinite(step)) {
                return [];
            }
            var ticks;
            if (step > 0) {
                x0 = Math.ceil(x0 / step);
                x1 = Math.floor(x1 / step);
                var n = Math.ceil(x1 - x0 + 1);
                ticks = new Array(n);
                for (var i = 0; i < n; i += 1) {
                    ticks[i] = (x0 + i) * step;
                }
            }
            else {
                x0 = Math.floor(x0 * step);
                x1 = Math.ceil(x1 * step);
                var n = Math.ceil(x0 - x1 + 1);
                ticks = new Array(n);
                for (var i = 0; i < n; i += 1) {
                    ticks[i] = (x0 - i) / step;
                }
            }
            if (this.dx < 0) {
                ticks.reverse();
            }
            return ticks;
        };
        NumberTickGenerator.interval = function (dx, n) {
            if (n === void 0) { n = 10; }
            var step = dx / n;
            var power = Math.floor(Math.log(step) / Math.LN10);
            var power10 = Math.pow(10, power);
            var error = step / power10;
            var base = error >= ERROR_10 ? 10 : error >= ERROR_5 ? 5 : error >= ERROR_2 ? 2 : 1;
            return power >= 0 ? power10 * base : -Math.pow(10, -power) / base;
        };
        return NumberTickGenerator;
    }(TickGenerator));
    var TimeTickGenerator = (function (_super) {
        __extends(TimeTickGenerator, _super);
        function TimeTickGenerator(d0, d1, n, zone) {
            var _this = _super.call(this) || this;
            d0 = DateTime.fromAny(d0);
            d1 = DateTime.fromAny(d1);
            _this.t0 = d0.time();
            _this.dt = d1.time() - _this.t0;
            _this.zone = zone || d0.zone();
            _this.n = Math.max(0, n);
            return _this;
        }
        TimeTickGenerator.prototype.count = function (n) {
            if (n === void 0) {
                return this.n;
            }
            else {
                this.n = Math.max(0, n);
                return this;
            }
        };
        TimeTickGenerator.prototype.domain = function (d0, d1) {
            if (d0 === void 0) {
                return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
            }
            else {
                if (d1 === void 0) {
                    d1 = d0[1];
                    d0 = d0[0];
                }
                else {
                    d0 = d0;
                }
                d0 = DateTime.fromAny(d0);
                d1 = DateTime.fromAny(d1);
                this.t0 = d0.time();
                this.dt = d1.time() - this.t0;
                return this;
            }
        };
        TimeTickGenerator.prototype.generate = function (interval) {
            var t0;
            var t1;
            if (this.dt < 0) {
                t1 = this.t0;
                t0 = t1 + this.dt;
            }
            else {
                t0 = this.t0;
                t1 = t0 + this.dt;
            }
            if (interval === void 0) {
                interval = this.n;
            }
            interval = TimeTickGenerator.interval(t1 - t0, interval);
            var ticks = interval.range(new DateTime(t0, this.zone), new DateTime(t1 + 1, this.zone));
            if (this.dt < 0) {
                ticks.reverse();
            }
            return ticks;
        };
        TimeTickGenerator.prototype.format = function (tickValue) {
            if (TimeInterval.second().floor(tickValue) < tickValue) {
                return MILLISECOND_FORMAT.format(tickValue);
            }
            else if (TimeInterval.minute().floor(tickValue) < tickValue) {
                return SECOND_FORMAT.format(tickValue);
            }
            else if (TimeInterval.hour().floor(tickValue) < tickValue) {
                return MINUTE_FORMAT.format(tickValue);
            }
            else if (TimeInterval.day().floor(tickValue) < tickValue) {
                return HOUR_FORMAT.format(tickValue);
            }
            else if (TimeInterval.month().floor(tickValue) < tickValue) {
                if (TimeInterval.week().floor(tickValue) < tickValue) {
                    return WEEKDAY_FORMAT.format(tickValue);
                }
                else {
                    return MONTHDAY_FORMAT.format(tickValue);
                }
            }
            else if (TimeInterval.year().floor(tickValue) < tickValue) {
                return MONTH_FORMAT.format(tickValue);
            }
            else {
                return YEAR_FORMAT.format(tickValue);
            }
        };
        TimeTickGenerator.interval = function (dt, interval) {
            if (interval === void 0) { interval = 10; }
            if (typeof interval === "number") {
                var t = Math.abs(dt) / interval;
                var duration = TIME_TICK_INTERVALS.nextKey(t);
                if (duration === void 0) {
                    var k = TickGenerator.step(dt / YEAR, interval);
                    interval = TimeInterval.year(k);
                }
                else if (duration > SECOND) {
                    if (t / TIME_TICK_INTERVALS.previousKey(t) < duration / t) {
                        interval = TIME_TICK_INTERVALS.previousValue(t);
                    }
                    else {
                        interval = TIME_TICK_INTERVALS.nextValue(t);
                    }
                }
                else {
                    var k = Math.max(1, TickGenerator.step(dt, interval));
                    interval = TimeInterval.millisecond(k);
                }
            }
            return interval;
        };
        return TimeTickGenerator;
    }(TickGenerator));

    var AxisView = (function (_super) {
        __extends(AxisView, _super);
        function AxisView(scale) {
            var _this = _super.call(this) || this;
            _this._ticks = new BTree();
            _this._tickGenerator = TickGenerator.fromScale(scale);
            _this._tickSpacing = 80;
            _this._tickTransition = Transition.duration(200);
            _this.scale.setState(scale);
            return _this;
        }
        Object.defineProperty(AxisView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        AxisView.prototype.getTick = function (value) {
            return this._ticks.get(value);
        };
        AxisView.prototype.insertTick = function (tick) {
            tick = TickView.fromAny(tick, this.orientation);
            this.insertChildView(tick, this._ticks.nextValue(tick.value) || null);
        };
        AxisView.prototype.removeTick = function (value) {
            var tick = this._ticks.get(value);
            if (tick) {
                tick.remove();
                this._ticks.delete(value);
            }
        };
        AxisView.prototype.domain = function (x0, x1, tween) {
            var scale = this.scale.value;
            if (x0 === void 0) {
                return scale.domain();
            }
            else {
                scale = scale.domain(x0, x1);
                if (!scale.equals(this.scale.state)) {
                    this.scale.setState(scale, tween);
                }
                return this;
            }
        };
        AxisView.prototype.range = function (y0, y1, tween) {
            var scale = this.scale.value;
            if (y0 === void 0) {
                return scale.range();
            }
            else {
                scale = scale.range(y0, y1);
                if (!scale.equals(this.scale.state)) {
                    this.scale.setState(scale, tween);
                }
                return this;
            }
        };
        AxisView.prototype.tickGenerator = function (tickGenerator) {
            if (tickGenerator === void 0) {
                return this._tickGenerator;
            }
            else {
                this._tickGenerator = tickGenerator;
                return this;
            }
        };
        AxisView.prototype.tickSpacing = function (tickSpacing) {
            if (tickSpacing === void 0) {
                return this._tickSpacing;
            }
            else {
                this._tickSpacing = tickSpacing;
                return this;
            }
        };
        AxisView.prototype.tickTransition = function (tickTransition) {
            if (tickTransition === void 0) {
                return this._tickTransition;
            }
            else {
                tickTransition = tickTransition !== null ? Transition.fromAny(tickTransition) : null;
                this._tickTransition = tickTransition;
                return this;
            }
        };
        AxisView.prototype.onAnimate = function (t) {
            this.scale.onFrame(t);
            this.domainColor.onFrame(t);
            this.domainWidth.onFrame(t);
            this.domainSerif.onFrame(t);
            this.tickMarkColor.onFrame(t);
            this.tickMarkWidth.onFrame(t);
            this.tickMarkLength.onFrame(t);
            this.tickLabelPadding.onFrame(t);
            this.gridLineColor.onFrame(t);
            this.gridLineWidth.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
            if (this._tickGenerator) {
                this.generateTicks(this._tickGenerator);
                this.layoutTicks(this._bounds, this._anchor);
            }
        };
        AxisView.prototype.generateTicks = function (tickGenerator) {
            var scale = this.scale.value;
            if (this._tickSpacing) {
                var _a = scale.range(), y0 = _a[0], y1 = _a[1];
                var dy = Math.abs(y1 - y0);
                var n = Math.max(1, Math.floor(dy / this._tickSpacing));
                tickGenerator.count(n);
            }
            tickGenerator.domain(scale.domain());
            var oldTicks = this._ticks.clone();
            var tickValues = tickGenerator.generate();
            for (var i = 0, n = tickValues.length; i < n; i += 1) {
                var tickValue = tickValues[i];
                var oldTick = oldTicks.get(tickValue);
                if (oldTick) {
                    oldTicks.delete(tickValue);
                    oldTick.fadeIn(this._tickTransition || void 0);
                }
                else {
                    var newTick = this.createTickView(tickValue);
                    if (newTick) {
                        this.insertTick(newTick);
                        newTick.opacity._value = 0;
                        newTick.opacity._state = 0;
                        newTick.fadeIn(this._tickTransition || void 0);
                    }
                }
            }
            oldTicks.forEach(function (value, oldTick) {
                if (!oldTick._preserve) {
                    oldTick.fadeOut(this._tickTransition || void 0);
                }
            }, this);
        };
        AxisView.prototype.createTickView = function (tickValue) {
            var tickView;
            var viewController = this._viewController;
            if (viewController) {
                tickView = viewController.createTickView(tickValue);
            }
            if (tickView === void 0) {
                tickView = TickView.from(this.orientation, tickValue);
            }
            if (tickView) {
                var tickLabel = this.createTickLabel(tickValue, tickView);
                if (tickLabel !== null) {
                    tickView.tickLabel(tickLabel);
                    tickView._preserve = false;
                }
            }
            return tickView;
        };
        AxisView.prototype.createTickLabel = function (tickValue, tickView) {
            var tickLabel;
            var viewController = this._viewController;
            if (viewController) {
                tickLabel = viewController.createTickLabel(tickValue, tickView);
            }
            if (tickLabel === void 0) {
                if (this._tickGenerator) {
                    tickLabel = this._tickGenerator.format(tickValue);
                }
                else {
                    tickLabel = "" + tickValue;
                }
            }
            if (typeof tickLabel === "string") {
                tickLabel = this.formatTickLabel(tickLabel, tickView);
            }
            return tickLabel;
        };
        AxisView.prototype.formatTickLabel = function (tickLabel, tickView) {
            var viewController = this._viewController;
            if (viewController) {
                return viewController.formatTickLabel(tickLabel, tickView);
            }
            else {
                return tickLabel;
            }
        };
        AxisView.prototype.didRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderDomain(context, bounds, anchor);
            context.restore();
        };
        AxisView.prototype.layoutTicks = function (bounds, anchor) {
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof TickView) {
                    this.layoutTick(childView, bounds, anchor);
                }
            }
        };
        AxisView.prototype.onInsertChildView = function (childView) {
            if (childView instanceof TickView) {
                this._ticks.set(childView.value, childView);
            }
        };
        AxisView.prototype.onRemoveChildView = function (childView) {
            if (childView instanceof TickView) {
                this._ticks.delete(childView.value);
            }
        };
        AxisView.prototype.setChildViewBounds = function (childView, bounds) {
            if (childView instanceof TickView) {
                this.layoutTick(childView, bounds, this._anchor);
            }
            else {
                _super.prototype.setChildViewBounds.call(this, childView, bounds);
            }
        };
        AxisView.prototype.setChildViewAnchor = function (childView, anchor) {
            if (childView instanceof TickView) {
                this.layoutTick(childView, this._bounds, anchor);
            }
            else {
                _super.prototype.setChildViewAnchor.call(this, childView, anchor);
            }
        };
        AxisView.top = function (scale) {
            scale = AxisView.scale(scale);
            return new AxisView.Top(scale);
        };
        AxisView.right = function (scale) {
            scale = AxisView.scale(scale);
            return new AxisView.Right(scale);
        };
        AxisView.bottom = function (scale) {
            scale = AxisView.scale(scale);
            return new AxisView.Bottom(scale);
        };
        AxisView.left = function (scale) {
            scale = AxisView.scale(scale);
            return new AxisView.Left(scale);
        };
        AxisView.from = function (orientation, scale) {
            if (orientation === "top") {
                return AxisView.top(scale);
            }
            else if (orientation === "right") {
                return AxisView.right(scale);
            }
            else if (orientation === "bottom") {
                return AxisView.bottom(scale);
            }
            else if (orientation === "left") {
                return AxisView.left(scale);
            }
            else {
                throw new TypeError(orientation);
            }
        };
        AxisView.fromAny = function (axis) {
            if (axis instanceof AxisView) {
                return axis;
            }
            else if (typeof axis === "object" && axis) {
                var view = AxisView.from(axis.orientation, axis.scale);
                if (axis.key !== void 0) {
                    view.key(axis.key);
                }
                var ticks = axis.ticks;
                var tickGenerator = axis.tickGenerator ? axis.tickGenerator : (ticks ? null : void 0);
                if (tickGenerator !== void 0) {
                    view.tickGenerator(tickGenerator);
                }
                if (ticks) {
                    for (var i = 0, n = ticks.length; i < n; i += 1) {
                        view.insertTick(ticks[i]);
                    }
                }
                if (axis.tickSpacing !== void 0) {
                    view.tickSpacing(axis.tickSpacing);
                }
                if (axis.tickTransition !== void 0) {
                    view.tickTransition(axis.tickTransition);
                }
                if (axis.domainColor !== void 0) {
                    view.domainColor(axis.domainColor);
                }
                if (axis.domainWidth !== void 0) {
                    view.domainWidth(axis.domainWidth);
                }
                if (axis.domainSerif !== void 0) {
                    view.domainSerif(axis.domainSerif);
                }
                if (axis.tickMarkColor !== void 0) {
                    view.tickMarkColor(axis.tickMarkColor);
                }
                if (axis.tickMarkWidth !== void 0) {
                    view.tickMarkWidth(axis.tickMarkWidth);
                }
                if (axis.tickMarkLength !== void 0) {
                    view.tickMarkLength(axis.tickMarkLength);
                }
                if (axis.tickLabelPadding !== void 0) {
                    view.tickLabelPadding(axis.tickLabelPadding);
                }
                if (axis.gridLineColor !== void 0) {
                    view.gridLineColor(axis.gridLineColor);
                }
                if (axis.gridLineWidth !== void 0) {
                    view.gridLineWidth(axis.gridLineWidth);
                }
                if (axis.font !== void 0) {
                    view.font(axis.font);
                }
                if (axis.textColor !== void 0) {
                    view.textColor(axis.textColor);
                }
                return view;
            }
            throw new TypeError("" + axis);
        };
        AxisView.scale = function (value) {
            if (value instanceof ContinuousScale) {
                return value;
            }
            else if (typeof value === "string") {
                if (value === "linear") {
                    return new LinearScale(0, 1, new NumberInterpolator(0, 0));
                }
                else if (value === "time") {
                    var d1 = DateTime.current();
                    var d0 = d1.day(d1.day() - 1);
                    return new TimeScale(d0, d1, new NumberInterpolator(0, 0));
                }
                else {
                    var domain = value.split("...");
                    var x0 = StyleValue.parse(domain[0]);
                    var x1 = StyleValue.parse(domain[1]);
                    if (typeof x0 === "number" && typeof x1 === "number") {
                        return new LinearScale(x0, x1, new NumberInterpolator(0, 0));
                    }
                    else if (x0 instanceof DateTime && x1 instanceof DateTime) {
                        return new TimeScale(x0, x1, new NumberInterpolator(0, 0));
                    }
                }
            }
            throw new TypeError(value);
        };
        __decorate([
            MemberAnimator(Object)
        ], AxisView.prototype, "scale", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], AxisView.prototype, "domainColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "domainWidth", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "domainSerif", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], AxisView.prototype, "tickMarkColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "tickMarkWidth", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "tickMarkLength", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "tickLabelPadding", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], AxisView.prototype, "gridLineColor", void 0);
        __decorate([
            MemberAnimator(Number, "inherit")
        ], AxisView.prototype, "gridLineWidth", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], AxisView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], AxisView.prototype, "textColor", void 0);
        return AxisView;
    }(GraphicView));

    var AxisViewController = (function (_super) {
        __extends(AxisViewController, _super);
        function AxisViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AxisViewController.prototype, "orientation", {
            get: function () {
                var view = this._view;
                return view ? view.orientation : void 0;
            },
            enumerable: true,
            configurable: true
        });
        AxisViewController.prototype.createTickView = function (tickValue) {
            return void 0;
        };
        AxisViewController.prototype.createTickLabel = function (tickValue, tickView) {
            return void 0;
        };
        AxisViewController.prototype.formatTickLabel = function (tickLabel, tickView) {
            return tickLabel;
        };
        return AxisViewController;
    }(GraphicViewController));

    var TopAxisView = (function (_super) {
        __extends(TopAxisView, _super);
        function TopAxisView(scale) {
            return _super.call(this, scale) || this;
        }
        Object.defineProperty(TopAxisView.prototype, "orientation", {
            get: function () {
                return "top";
            },
            enumerable: true,
            configurable: true
        });
        TopAxisView.prototype.renderDomain = function (context, bounds, anchor) {
            var ax = anchor.x;
            var ay = anchor.y;
            var _a = this.scale.value.range(), x0 = _a[0], x1 = _a[1];
            var dy = this.domainSerif.value;
            context.beginPath();
            context.strokeStyle = this.domainColor.value.toString();
            context.lineWidth = this.domainWidth.value;
            if (dy) {
                context.moveTo(ax + x0, ay - dy);
                context.lineTo(ax + x0, ay);
                context.lineTo(ax + x1, ay);
                context.lineTo(ax + x1, ay - dy);
            }
            else {
                context.moveTo(ax + x0, ay);
                context.lineTo(ax + x1, ay);
            }
            context.stroke();
        };
        TopAxisView.prototype.layoutTick = function (tick, bounds, anchor) {
            var dx = this.scale.value.scale(tick.value);
            var ax = anchor.x + dx;
            var ay = anchor.y;
            var tickAnchor = new PointR2(ax, ay);
            tick.setBounds(bounds);
            tick.setAnchor(tickAnchor);
            tick.setCoord(dx);
        };
        return TopAxisView;
    }(AxisView));
    AxisView.Top = TopAxisView;

    var RightAxisView = (function (_super) {
        __extends(RightAxisView, _super);
        function RightAxisView(scale) {
            return _super.call(this, scale) || this;
        }
        Object.defineProperty(RightAxisView.prototype, "orientation", {
            get: function () {
                return "right";
            },
            enumerable: true,
            configurable: true
        });
        RightAxisView.prototype.renderDomain = function (context, bounds, anchor) {
            var ax = anchor.x;
            var ay = anchor.y;
            var _a = this.scale.value.range(), y0 = _a[0], y1 = _a[1];
            var dx = this.domainSerif.value;
            context.beginPath();
            context.strokeStyle = this.domainColor.value.toString();
            context.lineWidth = this.domainWidth.value;
            if (dx) {
                context.moveTo(ax + dx, ay + y0);
                context.lineTo(ax, ay + y0);
                context.lineTo(ax, ay + y1);
                context.lineTo(ax + dx, ay + y1);
            }
            else {
                context.moveTo(ax, ay + y0);
                context.lineTo(ax, ay + y1);
            }
            context.stroke();
        };
        RightAxisView.prototype.layoutTick = function (tick, bounds, anchor) {
            var dy = this.scale.value.scale(tick.value);
            var ax = anchor.x;
            var ay = anchor.y + dy;
            var tickAnchor = new PointR2(ax, ay);
            tick.setBounds(bounds);
            tick.setAnchor(tickAnchor);
            tick.setCoord(dy);
        };
        return RightAxisView;
    }(AxisView));
    AxisView.Right = RightAxisView;

    var BottomAxisView = (function (_super) {
        __extends(BottomAxisView, _super);
        function BottomAxisView(scale) {
            return _super.call(this, scale) || this;
        }
        Object.defineProperty(BottomAxisView.prototype, "orientation", {
            get: function () {
                return "bottom";
            },
            enumerable: true,
            configurable: true
        });
        BottomAxisView.prototype.renderDomain = function (context, bounds, anchor) {
            var ax = anchor.x;
            var ay = anchor.y;
            var _a = this.scale.value.range(), x0 = _a[0], x1 = _a[1];
            var dy = this.domainSerif.value;
            context.beginPath();
            context.strokeStyle = this.domainColor.value.toString();
            context.lineWidth = this.domainWidth.value;
            if (dy) {
                context.moveTo(ax + x0, ay + dy);
                context.lineTo(ax + x0, ay);
                context.lineTo(ax + x1, ay);
                context.lineTo(ax + x1, ay + dy);
            }
            else {
                context.moveTo(ax + x0, ay);
                context.lineTo(ax + x1, ay);
            }
            context.stroke();
        };
        BottomAxisView.prototype.layoutTick = function (tick, bounds, anchor) {
            var dx = this.scale.value.scale(tick.value);
            var ax = anchor.x + dx;
            var ay = anchor.y;
            var tickAnchor = new PointR2(ax, ay);
            tick.setBounds(bounds);
            tick.setAnchor(tickAnchor);
            tick.setCoord(dx);
        };
        return BottomAxisView;
    }(AxisView));
    AxisView.Bottom = BottomAxisView;

    var LeftAxisView = (function (_super) {
        __extends(LeftAxisView, _super);
        function LeftAxisView(scale) {
            return _super.call(this, scale) || this;
        }
        Object.defineProperty(LeftAxisView.prototype, "orientation", {
            get: function () {
                return "left";
            },
            enumerable: true,
            configurable: true
        });
        LeftAxisView.prototype.renderDomain = function (context, bounds, anchor) {
            var ax = anchor.x;
            var ay = anchor.y;
            var _a = this.scale.value.range(), y0 = _a[0], y1 = _a[1];
            var dx = this.domainSerif.value;
            context.beginPath();
            context.strokeStyle = this.domainColor.value.toString();
            context.lineWidth = this.domainWidth.value;
            if (dx) {
                context.moveTo(ax - dx, ay + y0);
                context.lineTo(ax, ay + y0);
                context.lineTo(ax, ay + y1);
                context.lineTo(ax - dx, ay + y1);
            }
            else {
                context.moveTo(ax, ay + y0);
                context.lineTo(ax, ay + y1);
            }
            context.stroke();
        };
        LeftAxisView.prototype.layoutTick = function (tick, bounds, anchor) {
            var dy = this.scale.value.scale(tick.value);
            var ax = anchor.x;
            var ay = anchor.y + dy;
            var tickAnchor = new PointR2(ax, ay);
            tick.setBounds(bounds);
            tick.setAnchor(tickAnchor);
            tick.setCoord(dy);
        };
        return LeftAxisView;
    }(AxisView));
    AxisView.Left = LeftAxisView;

    var DatumView = (function (_super) {
        __extends(DatumView, _super);
        function DatumView(x, y, key) {
            var _this = _super.call(this, key) || this;
            _this.x.setState(x);
            _this.y.setState(y);
            _this._y2Coord = null;
            _this._hitRadius = 5;
            _this._category = null;
            _this._labelPlacement = "auto";
            return _this;
        }
        Object.defineProperty(DatumView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatumView.prototype, "xCoord", {
            get: function () {
                return this._anchor.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatumView.prototype, "yCoord", {
            get: function () {
                return this._anchor.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatumView.prototype, "y2Coord", {
            get: function () {
                return this._y2Coord;
            },
            enumerable: true,
            configurable: true
        });
        DatumView.prototype.hitRadius = function (hitRadius) {
            if (hitRadius === void 0) {
                return this._hitRadius;
            }
            else {
                this._hitRadius = hitRadius;
                return this;
            }
        };
        DatumView.prototype.category = function (category) {
            if (category === void 0) {
                return this._category;
            }
            else {
                this._category = category;
                return this;
            }
        };
        DatumView.prototype.label = function (label) {
            if (label === void 0) {
                return this.getChildView("label");
            }
            else {
                if (label !== null && !(label instanceof View)) {
                    label = TextRunView.fromAny(label);
                }
                this.setChildView("label", label);
                return this;
            }
        };
        DatumView.prototype.labelPlacement = function (labelPlacement) {
            if (labelPlacement === void 0) {
                return this._labelPlacement;
            }
            else {
                this._labelPlacement = labelPlacement;
                return this;
            }
        };
        DatumView.prototype.isGradientStop = function () {
            return !!this.color.value || typeof this.opacity.value === "number";
        };
        DatumView.prototype.onAnimate = function (t) {
            this.x.onFrame(t);
            this.y.onFrame(t);
            this.y2.onFrame(t);
            this.r.onFrame(t);
            this.color.onFrame(t);
            this.opacity.onFrame(t);
            this.labelPadding.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
            var label = this.label();
            if (RenderView.is(label)) {
                this.layoutLabel(label, this._bounds, this._anchor);
            }
        };
        DatumView.prototype.layoutLabel = function (label, bounds, anchor) {
            var placement = this._labelPlacement;
            if (placement !== "above" && placement !== "below") {
                var category = this._category;
                if (category === "increasing" || category === "maxima") {
                    placement = "above";
                }
                else if (category === "decreasing" || category === "minima") {
                    placement = "below";
                }
                else {
                    placement = "above";
                }
            }
            var padding = this.labelPadding.value.pxValue(Math.min(bounds.width, bounds.height));
            var x = anchor.x;
            var y0 = anchor.y;
            var y1 = y0;
            if (placement === "above") {
                y1 -= padding;
            }
            else if (placement === "below") {
                y1 += padding;
            }
            var labelAnchor = new PointR2(x, y1);
            label.setAnchor(labelAnchor);
            if (TypesetView.is(label)) {
                label.textAlign("center");
                label.textBaseline("bottom");
            }
        };
        DatumView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestDatum(x, y, context, bounds, anchor);
            }
            return hit;
        };
        DatumView.prototype.hitTestDatum = function (x, y, context, bounds, anchor) {
            var hitRadius = this._hitRadius;
            var radius = this.r.value;
            if (radius) {
                var bounds_1 = this.bounds;
                var size = Math.min(bounds_1.width, bounds_1.height);
                hitRadius = Math.max(hitRadius, radius.pxValue(size));
            }
            var dx = anchor.x - x;
            var dy = anchor.y - y;
            if (dx * dx + dy * dy < hitRadius * hitRadius) {
                return this;
            }
            return null;
        };
        DatumView.fromAny = function (datum) {
            if (datum instanceof DatumView) {
                return datum;
            }
            else if (typeof datum === "object" && datum) {
                var view = new DatumView(datum.x, datum.y, datum.key);
                if (datum.y2 !== void 0) {
                    view.y2(datum.y2);
                }
                if (datum.r !== void 0) {
                    view.r(datum.r);
                }
                if (datum.hitRadius !== void 0) {
                    view.hitRadius(datum.hitRadius);
                }
                if (datum.category !== void 0) {
                    view.category(datum.category);
                }
                if (datum.color !== void 0) {
                    view.color(datum.color);
                }
                if (datum.opacity !== void 0) {
                    view.opacity(datum.opacity);
                }
                if (datum.labelPadding !== void 0) {
                    view.labelPadding(datum.labelPadding);
                }
                if (datum.labelPlacement !== void 0) {
                    view.labelPlacement(datum.labelPlacement);
                }
                if (datum.font !== void 0) {
                    view.font(datum.font);
                }
                if (datum.textColor !== void 0) {
                    view.textColor(datum.textColor);
                }
                if (datum.label !== void 0) {
                    view.label(datum.label);
                }
                return view;
            }
            throw new TypeError("" + datum);
        };
        __decorate([
            MemberAnimator(Object)
        ], DatumView.prototype, "x", void 0);
        __decorate([
            MemberAnimator(Object)
        ], DatumView.prototype, "y", void 0);
        __decorate([
            MemberAnimator(Object)
        ], DatumView.prototype, "y2", void 0);
        __decorate([
            MemberAnimator(Length)
        ], DatumView.prototype, "r", void 0);
        __decorate([
            MemberAnimator(Color)
        ], DatumView.prototype, "color", void 0);
        __decorate([
            MemberAnimator(Number)
        ], DatumView.prototype, "opacity", void 0);
        __decorate([
            MemberAnimator(Length)
        ], DatumView.prototype, "labelPadding", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], DatumView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], DatumView.prototype, "textColor", void 0);
        return DatumView;
    }(GraphicView));

    var PlotView = (function (_super) {
        __extends(PlotView, _super);
        function PlotView() {
            var _this = _super.call(this) || this;
            _this._xAxis = null;
            _this._yAxis = null;
            _this._xDomain = [null, null];
            _this._xRange = [Infinity, -Infinity];
            _this._yDomain = [null, null];
            _this._yRange = [Infinity, -Infinity];
            return _this;
        }
        Object.defineProperty(PlotView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        PlotView.prototype.xAxis = function (xAxis) {
            if (xAxis === void 0) {
                return this._xAxis;
            }
            else {
                this._xAxis = xAxis;
                return this;
            }
        };
        PlotView.prototype.yAxis = function (yAxis) {
            if (yAxis === void 0) {
                return this._yAxis;
            }
            else {
                this._yAxis = yAxis;
                return this;
            }
        };
        PlotView.prototype.xDomain = function () {
            return this._xDomain;
        };
        PlotView.prototype.xRange = function () {
            return this._xRange;
        };
        PlotView.prototype.yDomain = function () {
            return this._yDomain;
        };
        PlotView.prototype.yRange = function () {
            return this._yRange;
        };
        PlotView.prototype.onAnimate = function (t) {
            this.font.onFrame(t);
            this.textColor.onFrame(t);
        };
        PlotView.prototype.didAnimate = function (t) {
            if (this._xAxis && this._yAxis) {
                this.layoutData(this._xAxis.scale.value, this._yAxis.scale.value, this._bounds, this._anchor);
            }
            _super.prototype.didAnimate.call(this, t);
        };
        PlotView.prototype.layoutData = function (xScale, yScale, bounds, anchor) {
            var datum0;
            var xDomainMin;
            var xDomainMax;
            var xRangeMin;
            var xRangeMax;
            var yDomainMin;
            var yDomainMax;
            var yRangeMin;
            var yRangeMax;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var datum1 = childViews[i];
                if (datum1 instanceof DatumView) {
                    var x1 = datum1.x.value;
                    var y1 = datum1.y.value;
                    var ax1 = xScale.scale(x1);
                    var ay1 = yScale.scale(y1);
                    var datumAnchor = new PointR2(anchor.x + ax1, anchor.y + ay1);
                    datum1.setAnchor(datumAnchor);
                    if (datum0) {
                        if (Objects.compare(x1, xDomainMin) < 0) {
                            xDomainMin = x1;
                        }
                        else if (Objects.compare(x1, xDomainMax) > 0) {
                            xDomainMax = x1;
                        }
                        if (ax1 < xRangeMin) {
                            xRangeMin = ax1;
                        }
                        else if (ax1 > xRangeMax) {
                            xRangeMax = ax1;
                        }
                        if (Objects.compare(y1, yDomainMin) < 0) {
                            yDomainMin = y1;
                        }
                        else if (Objects.compare(y1, yDomainMax) > 0) {
                            yDomainMax = y1;
                        }
                        if (ay1 < yRangeMin) {
                            yRangeMin = ay1;
                        }
                        else if (ay1 > yRangeMax) {
                            yRangeMax = ay1;
                        }
                    }
                    else {
                        xDomainMin = x1;
                        xDomainMax = x1;
                        xRangeMin = ax1;
                        xRangeMax = ax1;
                        yDomainMin = y1;
                        yDomainMax = y1;
                        yRangeMin = ay1;
                        yRangeMax = ay1;
                    }
                    datum0 = datum1;
                }
            }
            if (datum0) {
                var rebound = false;
                if (this._xDomain[0] !== xDomainMin) {
                    this._xDomain[0] = xDomainMin;
                    rebound = true;
                }
                if (this._xDomain[1] !== xDomainMax) {
                    this._xDomain[1] = xDomainMax;
                    rebound = true;
                }
                if (this._xRange[0] !== xRangeMin) {
                    this._xRange[0] = xRangeMin;
                    rebound = true;
                }
                if (this._xRange[1] !== xRangeMax) {
                    this._xRange[1] = xRangeMax;
                    rebound = true;
                }
                if (this._yDomain[0] !== yDomainMin) {
                    this._yDomain[0] = yDomainMin;
                    rebound = true;
                }
                if (this._yDomain[1] !== yDomainMax) {
                    this._yDomain[1] = yDomainMax;
                    rebound = true;
                }
                if (this._yRange[0] !== yRangeMin) {
                    this._yRange[0] = yRangeMin;
                    rebound = true;
                }
                if (this._yRange[1] !== yRangeMax) {
                    this._yRange[1] = yRangeMax;
                    rebound = true;
                }
                if (rebound) {
                    this.animate();
                }
            }
        };
        PlotView.prototype.willRender = function (context) {
            _super.prototype.willRender.call(this, context);
            context.save();
            this.clipPlot(context, this._bounds);
        };
        PlotView.prototype.onRender = function (context) {
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderPlot(context, bounds, anchor);
        };
        PlotView.prototype.didRender = function (context) {
            context.restore();
            _super.prototype.didRender.call(this, context);
        };
        PlotView.prototype.clipPlot = function (context, bounds) {
            context.beginPath();
            context.rect(bounds.x, bounds.y, bounds.width, bounds.height);
            context.clip();
        };
        PlotView.fromAny = function (plot) {
            if (plot instanceof PlotView) {
                return plot;
            }
            else if (typeof plot === "string") {
                if (plot === "bubble") {
                    return new PlotView.Bubble();
                }
                else if (plot === "line") {
                    return new PlotView.Line();
                }
                else if (plot === "area") {
                    return new PlotView.Area();
                }
            }
            else if (typeof plot === "object" && plot) {
                var type = plot.type;
                if (type === "bubble") {
                    return PlotView.Bubble.fromAny(plot);
                }
                else if (type === "line") {
                    return PlotView.Line.fromAny(plot);
                }
                else if (type === "area") {
                    return PlotView.Area.fromAny(plot);
                }
            }
            throw new TypeError("" + plot);
        };
        __decorate([
            MemberAnimator(Font, "inherit")
        ], PlotView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], PlotView.prototype, "textColor", void 0);
        return PlotView;
    }(GraphicView));

    var PlotViewController = (function (_super) {
        __extends(PlotViewController, _super);
        function PlotViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PlotViewController.prototype, "type", {
            get: function () {
                var view = this._view;
                return view ? view.type : void 0;
            },
            enumerable: true,
            configurable: true
        });
        PlotViewController.prototype.xAxis = function () {
            var view = this._view;
            return view ? view.xAxis() : null;
        };
        PlotViewController.prototype.yAxis = function () {
            var view = this._view;
            return view ? view.yAxis() : null;
        };
        return PlotViewController;
    }(GraphicViewController));

    var BubblePlotView = (function (_super) {
        __extends(BubblePlotView, _super);
        function BubblePlotView() {
            var _this = _super.call(this) || this;
            _this.radius.setState(Length.px(5));
            _this.fill.setState(Color.black());
            return _this;
        }
        Object.defineProperty(BubblePlotView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BubblePlotView.prototype, "type", {
            get: function () {
                return "bubble";
            },
            enumerable: true,
            configurable: true
        });
        BubblePlotView.prototype.getDatum = function (key) {
            var datum = this.getChildView(key);
            return datum instanceof DatumView ? datum : void 0;
        };
        BubblePlotView.prototype.insertDatum = function (datum) {
            datum = DatumView.fromAny(datum);
            this.appendChildView(datum);
            return datum;
        };
        BubblePlotView.prototype.insertData = function () {
            var data = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                data[_i] = arguments[_i];
            }
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                this.insertDatum(arguments[i]);
            }
        };
        BubblePlotView.prototype.removeDatum = function (key) {
            var datum = this.getChildView(key);
            if (datum instanceof DatumView) {
                datum.remove();
                return datum;
            }
            else {
                return null;
            }
        };
        BubblePlotView.prototype.onAnimate = function (t) {
            this.radius.onFrame(t);
            this.fill.onFrame(t);
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
            _super.prototype.onAnimate.call(this, t);
        };
        BubblePlotView.prototype.renderPlot = function (context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var radius = this.radius.value;
            var fill = this.fill.value;
            var stroke = this.stroke.value;
            var strokeWidth = this.strokeWidth.value;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var p = childViews[i];
                if (p instanceof DatumView) {
                    context.beginPath();
                    var r = p.r.value || radius;
                    context.arc(p.xCoord, p.yCoord, r.pxValue(size), 0, 2 * Math.PI);
                    var fillStyle = p.color.value || fill;
                    if (fillStyle) {
                        var opacity = p.opacity.value;
                        if (typeof opacity === "number") {
                            fillStyle = fillStyle.alpha(opacity);
                        }
                        context.fillStyle = fillStyle.toString();
                        context.fill();
                    }
                    if (stroke) {
                        if (strokeWidth) {
                            context.lineWidth = strokeWidth.pxValue(size);
                        }
                        context.strokeStyle = stroke.toString();
                        context.stroke();
                    }
                }
            }
        };
        BubblePlotView.fromAny = function (plot) {
            if (plot instanceof BubblePlotView) {
                return plot;
            }
            else if (plot instanceof PlotView) ;
            else if (typeof plot === "object" && plot) {
                plot = plot;
                var view = new BubblePlotView();
                if (plot.key !== void 0) {
                    view.key(plot.key);
                }
                if (plot.xAxis !== void 0) {
                    view.xAxis(plot.xAxis);
                }
                if (plot.yAxis !== void 0) {
                    view.yAxis(plot.yAxis);
                }
                var data = plot.data;
                if (data) {
                    for (var i = 0, n = data.length; i < n; i += 1) {
                        view.insertDatum(data[i]);
                    }
                }
                if (plot.radius !== void 0) {
                    view.radius(plot.radius);
                }
                if (plot.fill !== void 0) {
                    view.fill(plot.fill);
                }
                if (plot.stroke !== void 0) {
                    view.stroke(plot.stroke);
                }
                if (plot.strokeWidth !== void 0) {
                    view.strokeWidth(plot.strokeWidth);
                }
                if (plot.font !== void 0) {
                    view.font(plot.font);
                }
                if (plot.textColor !== void 0) {
                    view.textColor(plot.textColor);
                }
                return view;
            }
            throw new TypeError("" + plot);
        };
        __decorate([
            MemberAnimator(Length)
        ], BubblePlotView.prototype, "radius", void 0);
        __decorate([
            MemberAnimator(Color)
        ], BubblePlotView.prototype, "fill", void 0);
        __decorate([
            MemberAnimator(Color)
        ], BubblePlotView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length)
        ], BubblePlotView.prototype, "strokeWidth", void 0);
        return BubblePlotView;
    }(PlotView));
    PlotView.Bubble = BubblePlotView;

    var GraphView = (function (_super) {
        __extends(GraphView, _super);
        function GraphView() {
            var _this = _super.call(this) || this;
            _this._data = new BTree();
            _this._gradientStops = 0;
            return _this;
        }
        Object.defineProperty(GraphView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        GraphView.prototype.getDatum = function (x) {
            return this._data.get(x);
        };
        GraphView.prototype.insertDatum = function (datum) {
            datum = DatumView.fromAny(datum);
            this.insertChildView(datum, this._data.nextValue(datum.x.state) || null);
            return datum;
        };
        GraphView.prototype.insertData = function () {
            var data = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                data[_i] = arguments[_i];
            }
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                this.insertDatum(arguments[i]);
            }
        };
        GraphView.prototype.removeDatum = function (x) {
            var datum = this._data.get(x);
            if (datum) {
                datum.remove();
                this._data.delete(x);
                return datum;
            }
            else {
                return null;
            }
        };
        GraphView.prototype.layoutData = function (xScale, yScale, bounds, anchor) {
            var datum0;
            var datum1;
            var y0;
            var y1;
            var xDomainMin;
            var xDomainMax;
            var xRangeMin;
            var xRangeMax;
            var yDomainMin;
            var yDomainMax;
            var yRangeMin;
            var yRangeMax;
            var gradientStops = 0;
            this._data.forEach(function (x2, datum2) {
                var y2 = datum2.y.value;
                var ax2 = xScale.scale(x2);
                var ay2 = yScale.scale(y2);
                var datumAnchor = new PointR2(anchor.x + ax2, anchor.y + ay2);
                datum2.setAnchor(datumAnchor);
                var dy2 = datum2.y2.value;
                var ady2 = dy2 !== null && dy2 !== void 0 ? yScale.scale(dy2) : null;
                datum2._y2Coord = ady2 !== null ? anchor.y + ady2 : null;
                if (datum2.isGradientStop()) {
                    gradientStops += 1;
                }
                if (datum1) {
                    var category = void 0;
                    if (datum0) {
                        if (Objects.compare(y0, y1) < 0 && Objects.compare(y1, y2) > 0) {
                            category = "maxima";
                        }
                        else if (Objects.compare(y0, y1) > 0 && Objects.compare(y1, y2) < 0) {
                            category = "minima";
                        }
                        else if (Objects.compare(y0, y1) < 0 && Objects.compare(y1, y2) < 0) {
                            category = "increasing";
                        }
                        else if (Objects.compare(y0, y1) > 0 && Objects.compare(y1, y2) > 0) {
                            category = "decreasing";
                        }
                        else {
                            category = "flat";
                        }
                    }
                    else {
                        if (Objects.compare(y1, y2) < 0) {
                            category = "increasing";
                        }
                        else if (Objects.compare(y1, y2) > 0) {
                            category = "decreasing";
                        }
                        else {
                            category = "flat";
                        }
                    }
                    datum1.category(category);
                    if (Objects.compare(y2, yDomainMin) < 0) {
                        yDomainMin = y2;
                    }
                    else if (Objects.compare(y2, yDomainMax) > 0) {
                        yDomainMax = y2;
                    }
                    if (dy2 !== null && dy2 !== void 0) {
                        if (Objects.compare(dy2, yDomainMin) < 0) {
                            yDomainMin = dy2;
                        }
                        else if (Objects.compare(dy2, yDomainMax) > 0) {
                            yDomainMax = dy2;
                        }
                    }
                    if (ay2 < yRangeMin) {
                        yRangeMin = ay2;
                    }
                    else if (ay2 > yRangeMax) {
                        yRangeMax = ay2;
                    }
                }
                else {
                    xDomainMin = x2;
                    xRangeMin = ax2;
                    yDomainMin = y2;
                    yDomainMax = y2;
                    yRangeMin = ay2;
                    yRangeMax = ay2;
                }
                datum0 = datum1;
                datum1 = datum2;
                y0 = y1;
                y1 = y2;
                xDomainMax = x2;
                xRangeMax = ax2;
            }, this);
            if (datum1) {
                var category = void 0;
                if (datum0) {
                    if (Objects.compare(y0, y1) < 0) {
                        category = "increasing";
                    }
                    else if (Objects.compare(y0, y1) > 0) {
                        category = "decreasing";
                    }
                    else {
                        category = "flat";
                    }
                }
                else {
                    category = "flat";
                }
                datum1.category(category);
                var rebound = false;
                if (this._xDomain[0] !== xDomainMin) {
                    this._xDomain[0] = xDomainMin;
                    rebound = true;
                }
                if (this._xDomain[1] !== xDomainMax) {
                    this._xDomain[1] = xDomainMax;
                    rebound = true;
                }
                if (this._xRange[0] !== xRangeMin) {
                    this._xRange[0] = xRangeMin;
                    rebound = true;
                }
                if (this._xRange[1] !== xRangeMax) {
                    this._xRange[1] = xRangeMax;
                    rebound = true;
                }
                if (this._yDomain[0] !== yDomainMin) {
                    this._yDomain[0] = yDomainMin;
                    rebound = true;
                }
                if (this._yDomain[1] !== yDomainMax) {
                    this._yDomain[1] = yDomainMax;
                    rebound = true;
                }
                if (this._yRange[0] !== yRangeMin) {
                    this._yRange[0] = yRangeMin;
                    rebound = true;
                }
                if (this._yRange[1] !== yRangeMax) {
                    this._yRange[1] = yRangeMax;
                    rebound = true;
                }
                if (rebound) {
                    this.animate();
                }
            }
            this._gradientStops = gradientStops;
        };
        GraphView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestGraph(x, y, context, bounds, anchor);
                context.restore();
            }
            return hit;
        };
        GraphView.prototype.onInsertChildView = function (childView, targetView) {
            _super.prototype.onInsertChildView.call(this, childView, targetView);
            if (childView instanceof DatumView) {
                this._data.set(childView.x.state, childView);
            }
        };
        GraphView.prototype.onRemoveChildView = function (childView) {
            if (childView instanceof DatumView) {
                this._data.delete(childView.x.state);
            }
            _super.prototype.onRemoveChildView.call(this, childView);
        };
        GraphView.fromAny = function (plot) {
            return PlotView.fromAny(plot);
        };
        return GraphView;
    }(PlotView));

    var GraphViewController = (function (_super) {
        __extends(GraphViewController, _super);
        function GraphViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(GraphViewController.prototype, "type", {
            get: function () {
                var view = this._view;
                return view ? view.type : void 0;
            },
            enumerable: true,
            configurable: true
        });
        return GraphViewController;
    }(PlotViewController));

    var LineGraphView = (function (_super) {
        __extends(LineGraphView, _super);
        function LineGraphView() {
            var _this = _super.call(this) || this;
            _this.stroke.setState(Color.black());
            _this.strokeWidth.setState(Length.px(1));
            _this._hitWidth = 5;
            return _this;
        }
        Object.defineProperty(LineGraphView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineGraphView.prototype, "type", {
            get: function () {
                return "line";
            },
            enumerable: true,
            configurable: true
        });
        LineGraphView.prototype.hitWidth = function (hitWidth) {
            if (hitWidth === void 0) {
                return this._hitWidth;
            }
            else {
                this._hitWidth = hitWidth;
                return this;
            }
        };
        LineGraphView.prototype.onAnimate = function (t) {
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
            _super.prototype.onAnimate.call(this, t);
        };
        LineGraphView.prototype.renderPlot = function (context, bounds, anchor) {
            var data = this._data;
            var n = data.size;
            var stroke = this.stroke.value;
            var strokeWidth = this.strokeWidth.value.pxValue(Math.min(bounds.width, bounds.height));
            var gradientStops = this._gradientStops;
            var gradient;
            var x0;
            var x1;
            var dx;
            if (n > 0) {
                var p0 = data.firstValue();
                var p1 = data.lastValue();
                x0 = p0.xCoord;
                x1 = p1.xCoord;
                dx = x1 - x0;
                if (gradientStops) {
                    gradient = context.createLinearGradient(x0, 0, x1, 0);
                }
            }
            else {
                x0 = NaN;
                x1 = NaN;
                dx = NaN;
            }
            context.beginPath();
            var i = 0;
            data.forEach(function (x, p) {
                var xCoord = p.xCoord;
                var yCoord = p.yCoord;
                if (i === 0) {
                    context.moveTo(xCoord, yCoord);
                }
                else {
                    context.lineTo(xCoord, yCoord);
                }
                if (p.isGradientStop()) {
                    var color = p.color.value || stroke;
                    var opacity = p.opacity.value;
                    if (typeof opacity === "number") {
                        color = color.alpha(opacity);
                    }
                    var offset = (p.xCoord - x0) / (dx || 1);
                    gradient.addColorStop(offset, color.toString());
                }
                i += 1;
            }, this);
            context.strokeStyle = gradient ? gradient : stroke.toString();
            context.lineWidth = strokeWidth;
            context.stroke();
        };
        LineGraphView.prototype.hitTestGraph = function (x, y, context, bounds, anchor) {
            var hitWidth = this._hitWidth;
            var strokeWidth = this.strokeWidth.value;
            if (strokeWidth) {
                var bounds_1 = this.bounds;
                var size = Math.min(bounds_1.width, bounds_1.height);
                hitWidth = Math.max(hitWidth, strokeWidth.pxValue(size));
            }
            context.beginPath();
            var i = 0;
            this._data.forEach(function (x, p) {
                var xCoord = p.xCoord;
                var yCoord = p.yCoord;
                if (i === 0) {
                    context.moveTo(xCoord, yCoord);
                }
                else {
                    context.lineTo(xCoord, yCoord);
                }
                i += 1;
            }, this);
            context.lineWidth = hitWidth;
            if (context.isPointInStroke(x, y)) {
                return this;
            }
            return null;
        };
        LineGraphView.fromAny = function (graph) {
            if (graph instanceof LineGraphView) {
                return graph;
            }
            else if (graph instanceof GraphView) ;
            else if (typeof graph === "object" && graph) {
                graph = graph;
                var view = new LineGraphView();
                if (graph.key !== void 0) {
                    view.key(graph.key);
                }
                if (graph.xAxis !== void 0) {
                    view.xAxis(graph.xAxis);
                }
                if (graph.yAxis !== void 0) {
                    view.yAxis(graph.yAxis);
                }
                var data = graph.data;
                if (data) {
                    for (var i = 0, n = data.length; i < n; i += 1) {
                        view.insertDatum(data[i]);
                    }
                }
                if (graph.stroke !== void 0) {
                    view.stroke(graph.stroke);
                }
                if (graph.strokeWidth !== void 0) {
                    view.strokeWidth(graph.strokeWidth);
                }
                if (graph.hitWidth !== void 0) {
                    view.hitWidth(graph.hitWidth);
                }
                if (graph.font !== void 0) {
                    view.font(graph.font);
                }
                if (graph.textColor !== void 0) {
                    view.textColor(graph.textColor);
                }
                return view;
            }
            throw new TypeError("" + graph);
        };
        __decorate([
            MemberAnimator(Color)
        ], LineGraphView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length)
        ], LineGraphView.prototype, "strokeWidth", void 0);
        return LineGraphView;
    }(GraphView));
    PlotView.Line = LineGraphView;

    var AreaGraphView = (function (_super) {
        __extends(AreaGraphView, _super);
        function AreaGraphView() {
            var _this = _super.call(this) || this;
            _this.fill.setState(Color.black());
            return _this;
        }
        Object.defineProperty(AreaGraphView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AreaGraphView.prototype, "type", {
            get: function () {
                return "area";
            },
            enumerable: true,
            configurable: true
        });
        AreaGraphView.prototype.onAnimate = function (t) {
            this.fill.onFrame(t);
            _super.prototype.onAnimate.call(this, t);
        };
        AreaGraphView.prototype.renderPlot = function (context, bounds, anchor) {
            var data = this._data;
            var n = data.size;
            var fill = this.fill.value;
            var gradientStops = this._gradientStops;
            var gradient;
            context.beginPath();
            var x0;
            var x1;
            var dx;
            if (n > 0) {
                var p0 = data.firstValue();
                var p1 = data.lastValue();
                x0 = p0.xCoord;
                x1 = p1.xCoord;
                dx = x1 - x0;
                context.moveTo(p0.xCoord, p0.yCoord);
                if (gradientStops) {
                    gradient = context.createLinearGradient(x0, 0, x1, 0);
                    if (p0.isGradientStop()) {
                        var color = p0.color.value || fill;
                        var opacity = p0.opacity.value;
                        if (typeof opacity === "number") {
                            color = color.alpha(opacity);
                        }
                        gradient.addColorStop(0, color.toString());
                    }
                }
            }
            else {
                x0 = NaN;
                x1 = NaN;
                dx = NaN;
            }
            var cursor = data.values();
            cursor.next();
            while (cursor.hasNext()) {
                var p = cursor.next().value;
                context.lineTo(p.xCoord, p.yCoord);
                if (p.isGradientStop()) {
                    var color = p.color.value || fill;
                    var opacity = p.opacity.value;
                    if (typeof opacity === "number") {
                        color = color.alpha(opacity);
                    }
                    var offset = (p.xCoord - x0) / (dx || 1);
                    gradient.addColorStop(offset, color.toString());
                }
            }
            while (cursor.hasPrevious()) {
                var p = cursor.previous().value;
                context.lineTo(p.xCoord, p.y2Coord);
            }
            if (n > 0) {
                context.closePath();
            }
            context.fillStyle = gradient ? gradient : fill.toString();
            context.fill();
        };
        AreaGraphView.prototype.hitTestGraph = function (x, y, context, bounds, anchor) {
            var data = this._data;
            var n = data.size;
            context.beginPath();
            var cursor = data.values();
            if (cursor.hasNext()) {
                var p = cursor.next().value;
                context.moveTo(p.xCoord, p.yCoord);
            }
            while (cursor.hasNext()) {
                var p = cursor.next().value;
                context.lineTo(p.xCoord, p.yCoord);
            }
            while (cursor.hasPrevious()) {
                var p = cursor.previous().value;
                context.lineTo(p.xCoord, p.y2Coord);
            }
            if (n > 0) {
                context.closePath();
            }
            if (context.isPointInPath(x, y)) {
                return this;
            }
            return null;
        };
        AreaGraphView.fromAny = function (graph) {
            if (graph instanceof AreaGraphView) {
                return graph;
            }
            else if (graph instanceof GraphView) ;
            else if (typeof graph === "object" && graph) {
                graph = graph;
                var view = new AreaGraphView();
                if (graph.key !== void 0) {
                    view.key(graph.key);
                }
                if (graph.xAxis !== void 0) {
                    view.xAxis(graph.xAxis);
                }
                if (graph.yAxis !== void 0) {
                    view.yAxis(graph.yAxis);
                }
                var data = graph.data;
                if (data) {
                    for (var i = 0, n = data.length; i < n; i += 1) {
                        view.insertDatum(data[i]);
                    }
                }
                if (graph.fill !== void 0) {
                    view.fill(graph.fill);
                }
                if (graph.font !== void 0) {
                    view.font(graph.font);
                }
                if (graph.textColor !== void 0) {
                    view.textColor(graph.textColor);
                }
                return view;
            }
            throw new TypeError("" + graph);
        };
        __decorate([
            MemberAnimator(Color)
        ], AreaGraphView.prototype, "fill", void 0);
        return AreaGraphView;
    }(GraphView));
    PlotView.Area = AreaGraphView;

    var ChartView = (function (_super) {
        __extends(ChartView, _super);
        function ChartView() {
            var _this = _super.call(this) || this;
            _this.onScaleStart = _this.onScaleStart.bind(_this);
            _this.onScaleChange = _this.onScaleChange.bind(_this);
            _this.onScaleEnd = _this.onScaleEnd.bind(_this);
            _this._fitTopDomain = true;
            _this._fitRightDomain = true;
            _this._fitBottomDomain = true;
            _this._fitLeftDomain = true;
            _this._trackTopDomain = true;
            _this._trackRightDomain = true;
            _this._trackBottomDomain = true;
            _this._trackLeftDomain = true;
            _this._topDomainBounds = [true, true];
            _this._rightDomainBounds = [true, true];
            _this._bottomDomainBounds = [true, true];
            _this._leftDomainBounds = [true, true];
            _this._topDomainPadding = [null, null];
            _this._rightDomainPadding = [null, null];
            _this._bottomDomainPadding = [null, null];
            _this._leftDomainPadding = [null, null];
            _this._multitouch = null;
            _this._topGesture = null;
            _this._rightGesture = null;
            _this._bottomGesture = null;
            _this._leftGesture = null;
            _this._rescaleTransition = null;
            _this.topGutter.setState(Length.px(20));
            _this.rightGutter.setState(Length.px(40));
            _this.bottomGutter.setState(Length.px(20));
            _this.leftGutter.setState(Length.px(40));
            _this.domainColor.setState(Color.black());
            _this.domainWidth.setState(1);
            _this.domainSerif.setState(6);
            _this.tickMarkColor.setState(Color.black());
            _this.tickMarkWidth.setState(1);
            _this.tickMarkLength.setState(6);
            _this.tickLabelPadding.setState(2);
            _this.gridLineColor.setState(Color.transparent());
            _this.gridLineWidth.setState(0);
            _this.setChildView("surface", new GraphicView());
            return _this;
        }
        Object.defineProperty(ChartView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        ChartView.prototype.surface = function (surface) {
            if (surface === void 0) {
                var childView = this.getChildView("surface");
                return RenderView.is(childView) ? childView : null;
            }
            else {
                this.setChildView("surface", surface);
                return this;
            }
        };
        ChartView.prototype.topAxis = function (topAxis) {
            if (topAxis === void 0) {
                var childView = this.getChildView("topAxis");
                return childView instanceof AxisView ? childView : null;
            }
            else {
                if (typeof topAxis === "string") {
                    topAxis = AxisView.top(topAxis);
                }
                else if (topAxis !== null) {
                    topAxis = AxisView.fromAny(topAxis);
                }
                this.setChildView("topAxis", topAxis);
                return this;
            }
        };
        ChartView.prototype.rightAxis = function (rightAxis) {
            if (rightAxis === void 0) {
                var childView = this.getChildView("rightAxis");
                return childView instanceof AxisView ? childView : null;
            }
            else {
                if (typeof rightAxis === "string") {
                    rightAxis = AxisView.right(rightAxis);
                }
                else if (rightAxis !== null) {
                    rightAxis = AxisView.fromAny(rightAxis);
                }
                this.setChildView("rightAxis", rightAxis);
                return this;
            }
        };
        ChartView.prototype.bottomAxis = function (bottomAxis) {
            if (bottomAxis === void 0) {
                var childView = this.getChildView("bottomAxis");
                return childView instanceof AxisView ? childView : null;
            }
            else {
                if (typeof bottomAxis === "string") {
                    bottomAxis = AxisView.bottom(bottomAxis);
                }
                else if (bottomAxis !== null) {
                    bottomAxis = AxisView.fromAny(bottomAxis);
                }
                this.setChildView("bottomAxis", bottomAxis);
                return this;
            }
        };
        ChartView.prototype.leftAxis = function (leftAxis) {
            if (leftAxis === void 0) {
                var childView = this.getChildView("leftAxis");
                return childView instanceof AxisView ? childView : null;
            }
            else {
                if (typeof leftAxis === "string") {
                    leftAxis = AxisView.left(leftAxis);
                }
                else if (leftAxis !== null) {
                    leftAxis = AxisView.fromAny(leftAxis);
                }
                this.setChildView("leftAxis", leftAxis);
                return this;
            }
        };
        ChartView.prototype.addPlot = function (plot) {
            plot = PlotView.fromAny(plot);
            this.appendChildView(plot);
        };
        ChartView.prototype.multitouch = function (multitouch) {
            if (multitouch === void 0) {
                return this._multitouch;
            }
            else {
                if (multitouch === true) {
                    multitouch = Multitouch.create();
                }
                else if (multitouch === false) {
                    multitouch = null;
                }
                if (this._multitouch) {
                    this._multitouch.surface(null);
                }
                this._multitouch = multitouch;
                if (this._multitouch) {
                    this._multitouch.surface(this.surface());
                }
                return this;
            }
        };
        ChartView.prototype.topGesture = function (topGesture) {
            if (topGesture === void 0) {
                return this._topGesture;
            }
            else {
                if (topGesture === true) {
                    topGesture = ScaleGesture.horizontal();
                }
                else if (topGesture === false) {
                    topGesture = null;
                }
                if (this._topGesture) {
                    this._topGesture.multitouch(null).ruler(null).scale(null);
                }
                this._topGesture = topGesture;
                if (this._topGesture) {
                    if (!this._multitouch) {
                        this.multitouch(true);
                    }
                    this._topGesture.multitouch(this._multitouch)
                        .ruler(this.surface())
                        .scale(this.topAxis().scale.value);
                    if (this._multitouch && this.isMounted()) {
                        this._topGesture.attach(this._multitouch);
                    }
                    this.reboundTop();
                }
                return this;
            }
        };
        ChartView.prototype.rightGesture = function (rightGesture) {
            if (rightGesture === void 0) {
                return this._rightGesture;
            }
            else {
                if (rightGesture === true) {
                    rightGesture = ScaleGesture.vertical();
                }
                else if (rightGesture === false) {
                    rightGesture = null;
                }
                if (this._rightGesture) {
                    this._rightGesture.multitouch(null).ruler(null).scale(null);
                }
                this._rightGesture = rightGesture;
                if (this._rightGesture) {
                    if (!this._multitouch) {
                        this.multitouch(true);
                    }
                    this._rightGesture.multitouch(this._multitouch)
                        .ruler(this.surface())
                        .scale(this.rightAxis().scale.value);
                    if (this._multitouch && this.isMounted()) {
                        this._rightGesture.attach(this._multitouch);
                    }
                    this.reboundRight();
                }
                return this;
            }
        };
        ChartView.prototype.bottomGesture = function (bottomGesture) {
            if (bottomGesture === void 0) {
                return this._bottomGesture;
            }
            else {
                if (bottomGesture === true) {
                    bottomGesture = ScaleGesture.horizontal();
                }
                else if (bottomGesture === false) {
                    bottomGesture = null;
                }
                if (this._bottomGesture) {
                    this._bottomGesture.multitouch(null).ruler(null).scale(null);
                }
                this._bottomGesture = bottomGesture;
                if (this._bottomGesture) {
                    if (!this._multitouch) {
                        this.multitouch(true);
                    }
                    this._bottomGesture.multitouch(this._multitouch)
                        .ruler(this.surface())
                        .scale(this.bottomAxis().scale.value);
                    if (this._multitouch && this.isMounted()) {
                        this._bottomGesture.attach(this._multitouch);
                    }
                    this.reboundBottom();
                }
                return this;
            }
        };
        ChartView.prototype.leftGesture = function (leftGesture) {
            if (leftGesture === void 0) {
                return this._leftGesture;
            }
            else {
                if (leftGesture === true) {
                    leftGesture = ScaleGesture.vertical();
                }
                else if (leftGesture === false) {
                    leftGesture = null;
                }
                if (this._leftGesture) {
                    this._leftGesture.multitouch(null).ruler(null).scale(null);
                }
                this._leftGesture = leftGesture;
                if (this._leftGesture) {
                    if (!this._multitouch) {
                        this.multitouch(true);
                    }
                    this._leftGesture.multitouch(this._multitouch)
                        .ruler(this.surface())
                        .scale(this.leftAxis().scale.value);
                    if (this._multitouch && this.isMounted()) {
                        this._leftGesture.attach(this._multitouch);
                    }
                    this.reboundLeft();
                }
                return this;
            }
        };
        ChartView.prototype.rescaleTransition = function (rescaleTransition) {
            if (rescaleTransition === void 0) {
                return this._rescaleTransition;
            }
            else {
                rescaleTransition = rescaleTransition !== null ? Transition.fromAny(rescaleTransition) : null;
                this._rescaleTransition = rescaleTransition;
                return this;
            }
        };
        ChartView.prototype.fitTopDomain = function (fitTopDomain) {
            if (fitTopDomain === void 0) {
                return this._fitTopDomain;
            }
            else {
                if (!this._fitTopDomain && fitTopDomain) {
                    this.setDirty(true);
                }
                this._fitTopDomain = fitTopDomain;
                return this;
            }
        };
        ChartView.prototype.fitRightDomain = function (fitRightDomain) {
            if (fitRightDomain === void 0) {
                return this._fitRightDomain;
            }
            else {
                if (!this._fitRightDomain && fitRightDomain) {
                    this.setDirty(true);
                }
                this._fitRightDomain = fitRightDomain;
                return this;
            }
        };
        ChartView.prototype.fitBottomDomain = function (fitBottomDomain) {
            if (fitBottomDomain === void 0) {
                return this._fitBottomDomain;
            }
            else {
                if (!this._fitBottomDomain && fitBottomDomain) {
                    this.setDirty(true);
                }
                this._fitBottomDomain = fitBottomDomain;
                return this;
            }
        };
        ChartView.prototype.fitLeftDomain = function (fitLeftDomain) {
            if (fitLeftDomain === void 0) {
                return this._fitLeftDomain;
            }
            else {
                if (!this._fitLeftDomain && fitLeftDomain) {
                    this.setDirty(true);
                }
                this._fitLeftDomain = fitLeftDomain;
                return this;
            }
        };
        ChartView.prototype.topDomainBounds = function (topDomainBounds) {
            if (topDomainBounds === void 0) {
                return this._topDomainBounds;
            }
            else {
                this._topDomainBounds[0] = topDomainBounds[0];
                this._topDomainBounds[1] = topDomainBounds[1];
                this.reboundTop();
                return this;
            }
        };
        ChartView.prototype.rightDomainBounds = function (rightDomainBounds) {
            if (rightDomainBounds === void 0) {
                return this._rightDomainBounds;
            }
            else {
                this._rightDomainBounds[0] = rightDomainBounds[0];
                this._rightDomainBounds[1] = rightDomainBounds[1];
                this.reboundRight();
                return this;
            }
        };
        ChartView.prototype.bottomDomainBounds = function (bottomDomainBounds) {
            if (bottomDomainBounds === void 0) {
                return this._bottomDomainBounds;
            }
            else {
                this._bottomDomainBounds[0] = bottomDomainBounds[0];
                this._bottomDomainBounds[1] = bottomDomainBounds[1];
                this.reboundBottom();
                return this;
            }
        };
        ChartView.prototype.leftDomainBounds = function (leftDomainBounds) {
            if (leftDomainBounds === void 0) {
                return this._leftDomainBounds;
            }
            else {
                this._leftDomainBounds[0] = leftDomainBounds[0];
                this._leftDomainBounds[1] = leftDomainBounds[1];
                this.reboundLeft();
                return this;
            }
        };
        ChartView.prototype.topDomainPadding = function (topDomainPadding) {
            if (topDomainPadding === void 0) {
                return this._topDomainPadding;
            }
            else {
                this._topDomainPadding[0] = topDomainPadding[0];
                this._topDomainPadding[1] = topDomainPadding[1];
                this.setDirty(true);
                return this;
            }
        };
        ChartView.prototype.rightDomainPadding = function (rightDomainPadding) {
            if (rightDomainPadding === void 0) {
                return this._rightDomainPadding;
            }
            else {
                this._rightDomainPadding[0] = rightDomainPadding[0];
                this._rightDomainPadding[1] = rightDomainPadding[1];
                this.setDirty(true);
                return this;
            }
        };
        ChartView.prototype.bottomDomainPadding = function (bottomDomainPadding) {
            if (bottomDomainPadding === void 0) {
                return this._bottomDomainPadding;
            }
            else {
                this._bottomDomainPadding[0] = bottomDomainPadding[0];
                this._bottomDomainPadding[1] = bottomDomainPadding[1];
                this.setDirty(true);
                return this;
            }
        };
        ChartView.prototype.leftDomainPadding = function (leftDomainPadding) {
            if (leftDomainPadding === void 0) {
                return this._leftDomainPadding;
            }
            else {
                this._leftDomainPadding[0] = leftDomainPadding[0];
                this._leftDomainPadding[1] = leftDomainPadding[1];
                this.setDirty(true);
                return this;
            }
        };
        ChartView.prototype.topDomain = function () {
            var topDomain = [null, null];
            var topAxis = this.topAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.xAxis() === topAxis) {
                    var xDomain = childView.xDomain();
                    if (topDomain[0] === null || xDomain[0] !== null && Objects.compare(topDomain[0], xDomain[0]) > 0) {
                        topDomain[0] = xDomain[0];
                    }
                    if (topDomain[1] === null || xDomain[1] !== null && Objects.compare(topDomain[1], xDomain[1]) < 0) {
                        topDomain[1] = xDomain[1];
                    }
                }
            }
            return topDomain;
        };
        ChartView.prototype.rightDomain = function () {
            var rightDomain = [null, null];
            var rightAxis = this.rightAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.yAxis() === rightAxis) {
                    var yDomain = childView.yDomain();
                    if (rightDomain[0] === null || yDomain[0] !== null && Objects.compare(rightDomain[0], yDomain[0]) > 0) {
                        rightDomain[0] = yDomain[0];
                    }
                    if (rightDomain[1] === null || yDomain[1] !== null && Objects.compare(rightDomain[1], yDomain[1]) < 0) {
                        rightDomain[1] = yDomain[1];
                    }
                }
            }
            return rightDomain;
        };
        ChartView.prototype.bottomDomain = function () {
            var bottomDomain = [null, null];
            var bottomAxis = this.bottomAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.xAxis() === bottomAxis) {
                    var xDomain = childView.xDomain();
                    if (bottomDomain[0] === null || xDomain[0] !== null && Objects.compare(bottomDomain[0], xDomain[0]) > 0) {
                        bottomDomain[0] = xDomain[0];
                    }
                    if (bottomDomain[1] === null || xDomain[1] !== null && Objects.compare(bottomDomain[1], xDomain[1]) < 0) {
                        bottomDomain[1] = xDomain[1];
                    }
                }
            }
            return bottomDomain;
        };
        ChartView.prototype.leftDomain = function () {
            var leftDomain = [null, null];
            var leftAxis = this.leftAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.yAxis() === leftAxis) {
                    var yDomain = childView.yDomain();
                    if (leftDomain[0] === null || yDomain[0] !== null && Objects.compare(leftDomain[0], yDomain[0]) > 0) {
                        leftDomain[0] = yDomain[0];
                    }
                    if (leftDomain[1] === null || yDomain[1] !== null && Objects.compare(leftDomain[1], yDomain[1]) < 0) {
                        leftDomain[1] = yDomain[1];
                    }
                }
            }
            return leftDomain;
        };
        ChartView.prototype.topDomainPadded = function () {
            var _a = this.topDomain(), xMin = _a[0], xMax = _a[1];
            var _b = this._topDomainPadding, padMin = _b[0], padMax = _b[1];
            if (xMin !== null && padMin !== null) {
                xMin = (+xMin - +padMin);
            }
            if (xMax !== null && padMax !== null) {
                xMax = (+xMax + +padMax);
            }
            return [xMin, xMax];
        };
        ChartView.prototype.rightDomainPadded = function () {
            var _a = this.rightDomain(), yMin = _a[0], yMax = _a[1];
            var _b = this._topDomainPadding, padMin = _b[0], padMax = _b[1];
            if (yMin !== null && padMin !== null) {
                yMin = (+yMin - +padMin);
            }
            if (yMax !== null && padMax !== null) {
                yMax = (+yMax + +padMax);
            }
            return [yMin, yMax];
        };
        ChartView.prototype.bottomDomainPadded = function () {
            var _a = this.bottomDomain(), xMin = _a[0], xMax = _a[1];
            var _b = this._bottomDomainPadding, padMin = _b[0], padMax = _b[1];
            if (xMin !== null && padMin !== null) {
                xMin = (+xMin - +padMin);
            }
            if (xMax !== null && padMax !== null) {
                xMax = (+xMax + +padMax);
            }
            return [xMin, xMax];
        };
        ChartView.prototype.leftDomainPadded = function () {
            var _a = this.leftDomain(), yMin = _a[0], yMax = _a[1];
            var _b = this._leftDomainPadding, padMin = _b[0], padMax = _b[1];
            if (yMin !== null && padMin !== null) {
                yMin = (+yMin - +padMin);
            }
            if (yMax !== null && padMax !== null) {
                yMax = (+yMax + +padMax);
            }
            return [yMin, yMax];
        };
        ChartView.prototype.topRange = function () {
            var topRange = [Infinity, -Infinity];
            var topAxis = this.topAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.xAxis() === topAxis) {
                    var xRange = childView.xRange();
                    topRange[0] = Math.min(topRange[0], xRange[0]);
                    topRange[1] = Math.max(topRange[1], xRange[1]);
                }
            }
            return topRange;
        };
        ChartView.prototype.rightRange = function () {
            var rightRange = [Infinity, -Infinity];
            var rightAxis = this.rightAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.yAxis() === rightAxis) {
                    var yRange = childView.yRange();
                    rightRange[0] = Math.min(rightRange[0], yRange[0]);
                    rightRange[1] = Math.max(rightRange[1], yRange[1]);
                }
            }
            return rightRange;
        };
        ChartView.prototype.bottomRange = function () {
            var bottomRange = [Infinity, -Infinity];
            var bottomAxis = this.bottomAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.xAxis() === bottomAxis) {
                    var xRange = childView.xRange();
                    bottomRange[0] = Math.min(bottomRange[0], xRange[0]);
                    bottomRange[1] = Math.max(bottomRange[1], xRange[1]);
                }
            }
            return bottomRange;
        };
        ChartView.prototype.leftRange = function () {
            var leftRange = [Infinity, -Infinity];
            var leftAxis = this.leftAxis();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof PlotView && childView.yAxis() === leftAxis) {
                    var yRange = childView.yRange();
                    leftRange[0] = Math.min(leftRange[0], yRange[0]);
                    leftRange[1] = Math.max(leftRange[1], yRange[1]);
                }
            }
            return leftRange;
        };
        ChartView.prototype.onMount = function () {
            if (this._multitouch) {
                this._multitouch.attach(this);
                if (this._topGesture) {
                    this._topGesture.attach(this._multitouch);
                }
                if (this._rightGesture) {
                    this._rightGesture.attach(this._multitouch);
                }
                if (this._bottomGesture) {
                    this._bottomGesture.attach(this._multitouch);
                }
                if (this._leftGesture) {
                    this._leftGesture.attach(this._multitouch);
                }
            }
            this.on("scalestart", this.onScaleStart);
            this.on("scalechange", this.onScaleChange);
            this.on("scaleend", this.onScaleEnd);
        };
        ChartView.prototype.onUnmount = function () {
            this.off("scalestart", this.onScaleStart);
            this.off("scalechange", this.onScaleChange);
            this.off("scaleend", this.onScaleEnd);
            if (this._multitouch) {
                if (this._topGesture) {
                    this._topGesture.detach(this._multitouch);
                }
                if (this._rightGesture) {
                    this._rightGesture.detach(this._multitouch);
                }
                if (this._bottomGesture) {
                    this._bottomGesture.detach(this._multitouch);
                }
                if (this._leftGesture) {
                    this._leftGesture.detach(this._multitouch);
                }
                this._multitouch.detach(this);
            }
        };
        ChartView.prototype.willAnimate = function (t) {
            _super.prototype.willAnimate.call(this, t);
            this.autoscale();
            this.rebound();
        };
        ChartView.prototype.onAnimate = function (t) {
            this.topGutter.onFrame(t);
            this.rightGutter.onFrame(t);
            this.bottomGutter.onFrame(t);
            this.leftGutter.onFrame(t);
            this.domainColor.onFrame(t);
            this.domainWidth.onFrame(t);
            this.domainSerif.onFrame(t);
            this.tickMarkColor.onFrame(t);
            this.tickMarkWidth.onFrame(t);
            this.tickMarkLength.onFrame(t);
            this.tickLabelPadding.onFrame(t);
            this.gridLineColor.onFrame(t);
            this.gridLineWidth.onFrame(t);
            this.font.onFrame(t);
            this.textColor.onFrame(t);
            if (this._topGesture) {
                this._topGesture.scale(this.topAxis().scale.value);
            }
            if (this._rightGesture) {
                this._rightGesture.scale(this.rightAxis().scale.value);
            }
            if (this._bottomGesture) {
                this._bottomGesture.scale(this.bottomAxis().scale.value);
            }
            if (this._leftGesture) {
                this._leftGesture.scale(this.leftAxis().scale.value);
            }
        };
        ChartView.prototype.layoutSurface = function (surface, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var xMin = bounds.xMin + leftGutter;
            var yMin = bounds.yMin + topGutter;
            var xMax = bounds.xMax - rightGutter;
            var yMax = bounds.yMax - bottomGutter;
            var xMid = (xMin + xMax) / 2;
            var yMid = (yMin + yMax) / 2;
            surface.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            surface.setAnchor(new PointR2(xMid, yMid));
        };
        ChartView.prototype.layoutAxes = function (bounds) {
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (childView instanceof AxisView) {
                    var childKey = childView.key();
                    if (childKey === "topAxis") {
                        this.layoutTopAxis(childView, bounds);
                    }
                    else if (childKey === "rightAxis") {
                        this.layoutRightAxis(childView, bounds);
                    }
                    else if (childKey === "bottomAxis") {
                        this.layoutBottomAxis(childView, bounds);
                    }
                    else if (childKey === "leftAxis") {
                        this.layoutLeftAxis(childView, bounds);
                    }
                }
            }
        };
        ChartView.prototype.layoutTopAxis = function (axis, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var anchorX = bounds.xMin + leftGutter;
            var anchorY = bounds.yMin + topGutter;
            var xMin = anchorX;
            var yMin = bounds.yMin;
            var xMax = bounds.xMax - rightGutter;
            var yMax = bounds.yMax - bottomGutter;
            axis.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            axis.setAnchor(new PointR2(anchorX, anchorY));
            axis.range(0, xMax - xMin);
        };
        ChartView.prototype.layoutRightAxis = function (axis, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var anchorX = Math.max(bounds.xMin + leftGutter, bounds.xMax - rightGutter);
            var anchorY = bounds.yMin + topGutter;
            var xMin = bounds.xMin + leftGutter;
            var yMin = anchorY;
            var xMax = bounds.xMax;
            var yMax = bounds.yMax - bottomGutter;
            axis.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            axis.setAnchor(new PointR2(anchorX, anchorY));
            axis.range(yMax - yMin, 0);
        };
        ChartView.prototype.layoutBottomAxis = function (axis, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var anchorX = bounds.xMin + leftGutter;
            var anchorY = Math.max(bounds.yMin + topGutter, bounds.yMax - bottomGutter);
            var xMin = anchorX;
            var yMin = bounds.yMin + topGutter;
            var xMax = bounds.xMax - rightGutter;
            var yMax = bounds.yMax;
            axis.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            axis.setAnchor(new PointR2(anchorX, anchorY));
            axis.range(0, xMax - xMin);
        };
        ChartView.prototype.layoutLeftAxis = function (axis, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var anchorX = bounds.xMin + leftGutter;
            var anchorY = bounds.yMin + topGutter;
            var xMin = bounds.xMin;
            var yMin = anchorY;
            var xMax = bounds.xMax - rightGutter;
            var yMax = bounds.yMax - bottomGutter;
            axis.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            axis.setAnchor(new PointR2(anchorX, anchorY));
            axis.range(yMax - yMin, 0);
        };
        ChartView.prototype.layoutPlot = function (plot, bounds) {
            var topGutter = this.topGutter.value.pxValue(bounds.height);
            var rightGutter = this.rightGutter.value.pxValue(bounds.width);
            var bottomGutter = this.bottomGutter.value.pxValue(bounds.height);
            var leftGutter = this.leftGutter.value.pxValue(bounds.width);
            var xMin = bounds.xMin + leftGutter;
            var yMin = bounds.yMin + topGutter;
            var xMax = bounds.xMax - rightGutter;
            var yMax = bounds.yMax - bottomGutter;
            var anchorX = xMin;
            var anchorY = yMin;
            plot.setBounds(new BoxR2(xMin, yMin, xMax, yMax));
            plot.setAnchor(new PointR2(anchorX, anchorY));
        };
        ChartView.prototype.onInsertPlot = function (plot) {
            if (!plot.xAxis() || !plot.yAxis()) {
                var childViews = this._childViews;
                for (var i = 0, n = childViews.length; i < n; i += 1) {
                    var childView = childViews[i];
                    if (childView instanceof AxisView) {
                        var childKey = childView.key();
                        if (childKey === "topAxis" && !plot.xAxis()) {
                            plot.xAxis(childView);
                        }
                        else if (childKey === "rightAxis" && !plot.yAxis()) {
                            plot.yAxis(childView);
                        }
                        else if (childKey === "bottomAxis" && !plot.xAxis()) {
                            plot.xAxis(childView);
                        }
                        else if (childKey === "leftAxis" && !plot.yAxis()) {
                            plot.yAxis(childView);
                        }
                    }
                }
            }
        };
        ChartView.prototype.onRemovePlot = function (plot) {
        };
        ChartView.prototype.onInsertChildView = function (childView) {
            var childKey = childView.key();
            if (childKey === "surface" && RenderView.is(childView)) {
                this.layoutSurface(childView, this._bounds);
                return;
            }
            else if (childView instanceof AxisView) {
                if (childKey === "topAxis") {
                    this.layoutTopAxis(childView, this._bounds);
                    return;
                }
                else if (childKey === "rightAxis") {
                    this.layoutRightAxis(childView, this._bounds);
                    return;
                }
                else if (childKey === "bottomAxis") {
                    this.layoutBottomAxis(childView, this._bounds);
                    return;
                }
                else if (childKey === "leftAxis") {
                    this.layoutLeftAxis(childView, this._bounds);
                    return;
                }
            }
            else if (childView instanceof PlotView) {
                this.onInsertPlot(childView);
                this.layoutPlot(childView, this._bounds);
            }
        };
        ChartView.prototype.onRemoveChildView = function (childView) {
            if (childView instanceof PlotView) {
                this.onRemovePlot(childView);
            }
        };
        ChartView.prototype.setChildViewBounds = function (childView, bounds) {
            var childKey = childView.key();
            if (childKey === "surface" && RenderView.is(childView)) {
                this.layoutSurface(childView, bounds);
                return;
            }
            else if (childView instanceof AxisView) {
                if (childKey === "topAxis") {
                    this.layoutTopAxis(childView, bounds);
                    return;
                }
                else if (childKey === "rightAxis") {
                    this.layoutRightAxis(childView, bounds);
                    return;
                }
                else if (childKey === "bottomAxis") {
                    this.layoutBottomAxis(childView, bounds);
                    return;
                }
                else if (childKey === "leftAxis") {
                    this.layoutLeftAxis(childView, bounds);
                    return;
                }
            }
            else if (childView instanceof PlotView) {
                this.layoutPlot(childView, bounds);
                return;
            }
            _super.prototype.setChildViewBounds.call(this, childView, bounds);
        };
        ChartView.prototype.setChildViewAnchor = function (childView, anchor) {
            var childKey = childView.key();
            if (childKey === "surface" && RenderView.is(childView)) {
                return;
            }
            else if (childView instanceof AxisView) {
                return;
            }
            else if (childView instanceof PlotView) {
                return;
            }
            _super.prototype.setChildViewAnchor.call(this, childView, anchor);
        };
        ChartView.prototype.autoscale = function (tween) {
            if (tween === void 0) {
                tween = this._rescaleTransition || void 0;
            }
            this.autoscaleTop(tween);
            this.autoscaleRight(tween);
            this.autoscaleBottom(tween);
            this.autoscaleLeft(tween);
        };
        ChartView.prototype.autoscaleTop = function (tween) {
            if (this._trackTopDomain) {
                var topAxis = this.topAxis();
                if (topAxis) {
                    if (tween === void 0) {
                        tween = this._rescaleTransition || void 0;
                    }
                    var _a = this.topDomainPadded(), xMin = _a[0], xMax = _a[1];
                    if (xMin !== null && xMax !== null) {
                        topAxis.domain(xMin, xMax, tween);
                    }
                }
            }
        };
        ChartView.prototype.autoscaleRight = function (tween) {
            if (this._trackRightDomain) {
                var rightAxis = this.rightAxis();
                if (rightAxis) {
                    if (tween === void 0) {
                        tween = this._rescaleTransition || void 0;
                    }
                    var _a = this.rightDomainPadded(), yMin = _a[0], yMax = _a[1];
                    if (yMin !== null && yMax !== null) {
                        rightAxis.domain(yMin, yMax, tween);
                    }
                }
            }
        };
        ChartView.prototype.autoscaleBottom = function (tween) {
            if (this._trackBottomDomain) {
                var bottomAxis = this.bottomAxis();
                if (bottomAxis) {
                    if (tween === void 0) {
                        tween = this._rescaleTransition || void 0;
                    }
                    var _a = this.bottomDomainPadded(), xMin = _a[0], xMax = _a[1];
                    if (xMin !== null && xMax !== null) {
                        bottomAxis.domain(xMin, xMax, tween);
                    }
                }
            }
        };
        ChartView.prototype.autoscaleLeft = function (tween) {
            if (this._trackLeftDomain) {
                var leftAxis = this.leftAxis();
                if (leftAxis) {
                    if (tween === void 0) {
                        tween = this._rescaleTransition || void 0;
                    }
                    var _a = this.leftDomainPadded(), yMin = _a[0], yMax = _a[1];
                    if (yMin !== null && yMax !== null) {
                        leftAxis.domain(yMin, yMax, tween);
                    }
                }
            }
        };
        ChartView.prototype.rebound = function () {
            this.reboundTop();
            this.reboundRight();
            this.reboundBottom();
            this.reboundLeft();
        };
        ChartView.prototype.reboundTop = function () {
            var topGesture = this._topGesture;
            if (topGesture) {
                var _a = this.topDomainPadded(), xMin = _a[0], xMax = _a[1];
                if (xMin !== null && xMax !== null) {
                    var _b = this._topDomainBounds, boundMin = _b[0], boundMax = _b[1];
                    if (typeof boundMin !== "boolean") {
                        xMin = (+xMin - +boundMin);
                    }
                    if (typeof boundMax !== "boolean") {
                        xMax = (+xMax + +boundMax);
                    }
                    topGesture.domainBounds(typeof boundMin !== "boolean" || boundMin ? xMin : null, typeof boundMax !== "boolean" || boundMax ? xMax : null);
                }
            }
        };
        ChartView.prototype.reboundRight = function () {
            var rightGesture = this._rightGesture;
            if (rightGesture) {
                var _a = this.rightDomainPadded(), yMin = _a[0], yMax = _a[1];
                if (yMin !== null && yMax !== null) {
                    var _b = this._rightDomainBounds, boundMin = _b[0], boundMax = _b[1];
                    if (typeof boundMin !== "boolean") {
                        yMin = (+yMin - +boundMin);
                    }
                    if (typeof boundMax !== "boolean") {
                        yMax = (+yMax + +boundMax);
                    }
                    rightGesture.domainBounds(typeof boundMin !== "boolean" || boundMin ? yMin : null, typeof boundMax !== "boolean" || boundMax ? yMax : null);
                }
            }
        };
        ChartView.prototype.reboundBottom = function () {
            var bottomGesture = this._bottomGesture;
            if (bottomGesture) {
                var _a = this.bottomDomainPadded(), xMin = _a[0], xMax = _a[1];
                if (xMin !== null && xMax !== null) {
                    var _b = this._bottomDomainBounds, boundMin = _b[0], boundMax = _b[1];
                    if (typeof boundMin !== "boolean") {
                        xMin = (+xMin - +boundMin);
                    }
                    if (typeof boundMax !== "boolean") {
                        xMax = (+xMax + +boundMax);
                    }
                    bottomGesture.domainBounds(typeof boundMin !== "boolean" || boundMin ? xMin : null, typeof boundMax !== "boolean" || boundMax ? xMax : null);
                }
            }
        };
        ChartView.prototype.reboundLeft = function () {
            var leftGesture = this._leftGesture;
            if (leftGesture) {
                var _a = this.leftDomainPadded(), yMin = _a[0], yMax = _a[1];
                if (yMin !== null && yMax !== null) {
                    var _b = this._leftDomainBounds, boundMin = _b[0], boundMax = _b[1];
                    if (typeof boundMin !== "boolean") {
                        yMin = (+yMin - +boundMin);
                    }
                    if (typeof boundMax !== "boolean") {
                        yMax = (+yMax + +boundMax);
                    }
                    leftGesture.domainBounds(typeof boundMin !== "boolean" || boundMin ? yMin : null, typeof boundMax !== "boolean" || boundMax ? yMax : null);
                }
            }
        };
        ChartView.prototype.retrackTop = function () {
            var topGesture = this._topGesture;
            if (topGesture) {
                var _a = topGesture.scale().domain(), xMin = _a[0], xMax = _a[1];
                var boundMin = topGesture.domainMin();
                var boundMax = topGesture.domainMax();
                if (xMin !== null && xMax !== null && boundMin != null && boundMax !== null) {
                    var order = Objects.compare(xMin, xMax);
                    if (order < 0 && Objects.compare(xMin, boundMin) <= 0 && Objects.compare(xMax, boundMax) >= 0
                        || order > 0 && Objects.compare(xMax, boundMin) <= 0 && Objects.compare(xMin, boundMax) >= 0) {
                        this._trackTopDomain = true;
                    }
                }
            }
        };
        ChartView.prototype.retrackRight = function () {
            var rightGesture = this._rightGesture;
            if (rightGesture) {
                var _a = rightGesture.scale().domain(), yMin = _a[0], yMax = _a[1];
                var boundMin = rightGesture.domainMin();
                var boundMax = rightGesture.domainMax();
                if (yMin !== null && yMax !== null && boundMin != null && boundMax !== null) {
                    var order = Objects.compare(yMin, yMax);
                    if (order < 0 && Objects.compare(yMin, boundMin) <= 0 && Objects.compare(yMax, boundMax) >= 0
                        || order > 0 && Objects.compare(yMax, boundMin) <= 0 && Objects.compare(yMin, boundMax) >= 0) {
                        this._trackRightDomain = true;
                    }
                }
            }
        };
        ChartView.prototype.retrackBottom = function () {
            var bottomGesture = this._bottomGesture;
            if (bottomGesture) {
                var _a = bottomGesture.scale().domain(), xMin = _a[0], xMax = _a[1];
                var boundMin = bottomGesture.domainMin();
                var boundMax = bottomGesture.domainMax();
                if (xMin !== null && xMax !== null && boundMin != null && boundMax !== null) {
                    var order = Objects.compare(xMin, xMax);
                    if (order < 0 && Objects.compare(xMin, boundMin) <= 0 && Objects.compare(xMax, boundMax) >= 0
                        || order > 0 && Objects.compare(xMax, boundMin) <= 0 && Objects.compare(xMin, boundMax) >= 0) {
                        this._trackBottomDomain = true;
                    }
                }
            }
        };
        ChartView.prototype.retrackLeft = function () {
            var leftGesture = this._leftGesture;
            if (leftGesture) {
                var _a = leftGesture.scale().domain(), yMin = _a[0], yMax = _a[1];
                var boundMin = leftGesture.domainMin();
                var boundMax = leftGesture.domainMax();
                if (yMin !== null && yMax !== null && boundMin != null && boundMax !== null) {
                    var order = Objects.compare(yMin, yMax);
                    if (order < 0 && Objects.compare(yMin, boundMin) <= 0 && Objects.compare(yMax, boundMax) >= 0
                        || order > 0 && Objects.compare(yMax, boundMin) <= 0 && Objects.compare(yMin, boundMax) >= 0) {
                        this._trackLeftDomain = true;
                    }
                }
            }
        };
        ChartView.prototype.onScaleStart = function (event) {
            if (event.gesture === this._topGesture) {
                var topAxis = this.topAxis();
                if (topAxis) {
                    topAxis.domain(event.scale.domain());
                }
                this._trackTopDomain = false;
            }
            else if (event.gesture === this._rightGesture) {
                var rightAxis = this.rightAxis();
                if (rightAxis) {
                    rightAxis.domain(event.scale.domain());
                }
                this._trackRightDomain = false;
            }
            else if (event.gesture === this._bottomGesture) {
                var bottomAxis = this.bottomAxis();
                if (bottomAxis) {
                    bottomAxis.domain(event.scale.domain());
                }
                this._trackBottomDomain = false;
            }
            else if (event.gesture === this._leftGesture) {
                var leftAxis = this.leftAxis();
                if (leftAxis) {
                    leftAxis.domain(event.scale.domain());
                }
                this._trackLeftDomain = false;
            }
        };
        ChartView.prototype.onScaleChange = function (event) {
            if (event.gesture === this._topGesture) {
                var topAxis = this.topAxis();
                if (topAxis) {
                    topAxis.domain(event.scale.domain());
                }
            }
            else if (event.gesture === this._rightGesture) {
                var rightAxis = this.rightAxis();
                if (rightAxis) {
                    rightAxis.domain(event.scale.domain());
                }
            }
            else if (event.gesture === this._bottomGesture) {
                var bottomAxis = this.bottomAxis();
                if (bottomAxis) {
                    bottomAxis.domain(event.scale.domain());
                }
            }
            else if (event.gesture === this._leftGesture) {
                var leftAxis = this.leftAxis();
                if (leftAxis) {
                    leftAxis.domain(event.scale.domain());
                }
            }
        };
        ChartView.prototype.onScaleEnd = function (event) {
            if (event.gesture === this._topGesture) {
                var topAxis = this.topAxis();
                if (topAxis) {
                    topAxis.domain(event.scale.domain());
                }
                this.retrackTop();
            }
            else if (event.gesture === this._rightGesture) {
                var rightAxis = this.rightAxis();
                if (rightAxis) {
                    rightAxis.domain(event.scale.domain());
                }
                this.retrackRight();
            }
            else if (event.gesture === this._bottomGesture) {
                var bottomAxis = this.bottomAxis();
                if (bottomAxis) {
                    bottomAxis.domain(event.scale.domain());
                }
                this.retrackBottom();
            }
            else if (event.gesture === this._leftGesture) {
                var leftAxis = this.leftAxis();
                if (leftAxis) {
                    leftAxis.domain(event.scale.domain());
                }
                this.retrackLeft();
            }
        };
        ChartView.fromAny = function (chart) {
            if (chart instanceof ChartView) {
                return chart;
            }
            else if (typeof chart === "object" && chart) {
                var view = new ChartView();
                if (chart.key !== void 0) {
                    view.key(chart.key);
                }
                if (chart.bottomAxis !== void 0) {
                    view.bottomAxis(chart.bottomAxis);
                }
                if (chart.leftAxis !== void 0) {
                    view.leftAxis(chart.leftAxis);
                }
                if (chart.topAxis !== void 0) {
                    view.topAxis(chart.topAxis);
                }
                if (chart.rightAxis !== void 0) {
                    view.rightAxis(chart.rightAxis);
                }
                var plots = chart.plots;
                if (plots) {
                    for (var i = 0, n = plots.length; i < n; i += 1) {
                        view.addPlot(plots[i]);
                    }
                }
                if (chart.fitTopDomain !== void 0) {
                    view.fitTopDomain(chart.fitTopDomain);
                }
                if (chart.fitRightDomain !== void 0) {
                    view.fitRightDomain(chart.fitRightDomain);
                }
                if (chart.fitBottomDomain !== void 0) {
                    view.fitBottomDomain(chart.fitBottomDomain);
                }
                if (chart.fitLeftDomain !== void 0) {
                    view.fitLeftDomain(chart.fitLeftDomain);
                }
                if (chart.topDomainBounds !== void 0) {
                    view.topDomainBounds(chart.topDomainBounds);
                }
                if (chart.rightDomainBounds !== void 0) {
                    view.rightDomainBounds(chart.rightDomainBounds);
                }
                if (chart.bottomDomainBounds !== void 0) {
                    view.bottomDomainBounds(chart.bottomDomainBounds);
                }
                if (chart.leftDomainBounds !== void 0) {
                    view.leftDomainBounds(chart.leftDomainBounds);
                }
                if (chart.topDomainPadding !== void 0) {
                    view.topDomainPadding(chart.topDomainPadding);
                }
                if (chart.rightDomainPadding !== void 0) {
                    view.rightDomainPadding(chart.rightDomainPadding);
                }
                if (chart.bottomDomainPadding !== void 0) {
                    view.bottomDomainPadding(chart.bottomDomainPadding);
                }
                if (chart.leftDomainPadding !== void 0) {
                    view.leftDomainPadding(chart.leftDomainPadding);
                }
                if (chart.multitouch !== void 0) {
                    view.multitouch(chart.multitouch);
                }
                if (chart.topGesture !== void 0) {
                    view.topGesture(chart.topGesture);
                }
                if (chart.rightGesture !== void 0) {
                    view.rightGesture(chart.rightGesture);
                }
                if (chart.bottomGesture !== void 0) {
                    view.bottomGesture(chart.bottomGesture);
                }
                if (chart.leftGesture !== void 0) {
                    view.leftGesture(chart.leftGesture);
                }
                if (chart.rescaleTransition !== void 0) {
                    view.rescaleTransition(chart.rescaleTransition);
                }
                if (chart.topGutter !== void 0) {
                    view.topGutter(chart.topGutter);
                }
                if (chart.rightGutter !== void 0) {
                    view.rightGutter(chart.rightGutter);
                }
                if (chart.bottomGutter !== void 0) {
                    view.bottomGutter(chart.bottomGutter);
                }
                if (chart.leftGutter !== void 0) {
                    view.leftGutter(chart.leftGutter);
                }
                if (chart.domainColor !== void 0) {
                    view.domainColor(chart.domainColor);
                }
                if (chart.domainWidth !== void 0) {
                    view.domainWidth(chart.domainWidth);
                }
                if (chart.domainSerif !== void 0) {
                    view.domainSerif(chart.domainSerif);
                }
                if (chart.tickMarkColor !== void 0) {
                    view.tickMarkColor(chart.tickMarkColor);
                }
                if (chart.tickMarkWidth !== void 0) {
                    view.tickMarkWidth(chart.tickMarkWidth);
                }
                if (chart.tickMarkLength !== void 0) {
                    view.tickMarkLength(chart.tickMarkLength);
                }
                if (chart.tickLabelPadding !== void 0) {
                    view.tickLabelPadding(chart.tickLabelPadding);
                }
                if (chart.gridLineColor !== void 0) {
                    view.gridLineColor(chart.gridLineColor);
                }
                if (chart.gridLineWidth !== void 0) {
                    view.gridLineWidth(chart.gridLineWidth);
                }
                if (chart.font !== void 0) {
                    view.font(chart.font);
                }
                if (chart.textColor !== void 0) {
                    view.textColor(chart.textColor);
                }
                return view;
            }
            throw new TypeError("" + chart);
        };
        __decorate([
            MemberAnimator(Length)
        ], ChartView.prototype, "topGutter", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ChartView.prototype, "rightGutter", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ChartView.prototype, "bottomGutter", void 0);
        __decorate([
            MemberAnimator(Length)
        ], ChartView.prototype, "leftGutter", void 0);
        __decorate([
            MemberAnimator(Color)
        ], ChartView.prototype, "domainColor", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "domainWidth", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "domainSerif", void 0);
        __decorate([
            MemberAnimator(Color)
        ], ChartView.prototype, "tickMarkColor", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "tickMarkWidth", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "tickMarkLength", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "tickLabelPadding", void 0);
        __decorate([
            MemberAnimator(Color)
        ], ChartView.prototype, "gridLineColor", void 0);
        __decorate([
            MemberAnimator(Number)
        ], ChartView.prototype, "gridLineWidth", void 0);
        __decorate([
            MemberAnimator(Font, "inherit")
        ], ChartView.prototype, "font", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], ChartView.prototype, "textColor", void 0);
        return ChartView;
    }(GraphicView));

    var ChartViewController = (function (_super) {
        __extends(ChartViewController, _super);
        function ChartViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ChartViewController.prototype.topAxis = function () {
            var view = this._view;
            return view ? view.topAxis() : null;
        };
        ChartViewController.prototype.rightAxis = function () {
            var view = this._view;
            return view ? view.rightAxis() : null;
        };
        ChartViewController.prototype.bottomAxis = function () {
            var view = this._view;
            return view ? view.bottomAxis() : null;
        };
        ChartViewController.prototype.leftAxis = function () {
            var view = this._view;
            return view ? view.leftAxis() : null;
        };
        return ChartViewController;
    }(GraphicViewController));

    var LngLat = (function () {
        function LngLat(lng, lat) {
            this._lng = lng;
            this._lat = lat;
        }
        Object.defineProperty(LngLat.prototype, "lng", {
            get: function () {
                return this._lng;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LngLat.prototype, "lat", {
            get: function () {
                return this._lat;
            },
            enumerable: true,
            configurable: true
        });
        LngLat.prototype.toAny = function () {
            return {
                lng: this._lng,
                lat: this._lat,
            };
        };
        LngLat.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LngLat) {
                return this._lng === that._lng && this._lat === that._lat;
            }
            return false;
        };
        LngLat.prototype.debug = function (output) {
            output = output.write("LngLat").write(46).write("from").write(40)
                .debug(this._lng).write(", ").debug(this._lat).write(41);
        };
        LngLat.prototype.toString = function () {
            return Format.debug(this);
        };
        LngLat.origin = function () {
            if (!LngLat._origin) {
                LngLat._origin = new LngLat(0, 0);
            }
            return LngLat._origin;
        };
        LngLat.from = function (lng, lat) {
            return new LngLat(lng, lat);
        };
        LngLat.fromAny = function (value) {
            if (value instanceof LngLat) {
                return value;
            }
            else if (value && typeof value === "object") {
                var lng = void 0;
                var lat = void 0;
                if (Array.isArray(value)) {
                    lng = value[0];
                    lat = value[1];
                }
                else {
                    lng = value.lng;
                    lat = value.lat;
                }
                return LngLat.from(lng, lat);
            }
            throw new TypeError("" + value);
        };
        return LngLat;
    }());

    var LngLatInterpolator = (function (_super) {
        __extends(LngLatInterpolator, _super);
        function LngLatInterpolator(c0, c1) {
            var _this = _super.call(this) || this;
            if (c0 !== void 0) {
                c0 = LngLat.fromAny(c0);
            }
            if (c1 !== void 0) {
                c1 = LngLat.fromAny(c1);
            }
            if (!c0 && !c1) {
                c1 = c0 = LngLat.origin();
            }
            else if (!c1) {
                c1 = c0;
            }
            else if (!c0) {
                c0 = c1;
            }
            _this.x0 = c0.lng;
            _this.dx = c1.lng - _this.x0;
            _this.y0 = c0.lat;
            _this.dy = c1.lat - _this.y0;
            return _this;
        }
        LngLatInterpolator.prototype.interpolate = function (u) {
            var lng = this.x0 + this.dx * u;
            var lat = this.y0 + this.dy * u;
            return new LngLat(lng, lat);
        };
        LngLatInterpolator.prototype.deinterpolate = function (c) {
            c = LngLat.fromAny(c);
            var cx = c.lng - this.x0;
            var cy = c.lat - this.y0;
            var dc = cx * this.dx + cy * this.dy;
            var lc = Math.sqrt(cx * cx + cy * cy);
            return lc ? dc / lc : lc;
        };
        LngLatInterpolator.prototype.range = function (c0, c1) {
            if (c0 === void 0) {
                return [this.interpolate(0), this.interpolate(1)];
            }
            else if (c1 === void 0) {
                c0 = c0;
                return new LngLatInterpolator(c0[0], c0[1]);
            }
            else {
                return new LngLatInterpolator(c0, c1);
            }
        };
        LngLatInterpolator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LngLatInterpolator) {
                return this.x0 === that.x0 && this.dx === that.dx
                    && this.y0 === that.y0 && this.dy === that.dy;
            }
            return false;
        };
        LngLatInterpolator.lngLat = function (c0, c1) {
            return new LngLatInterpolator(c0, c1);
        };
        return LngLatInterpolator;
    }(Interpolator));
    Interpolator.lngLat = LngLatInterpolator.lngLat;
    var InterpolatorFrom$1 = Interpolator.from;
    Interpolator.from = function (a, b) {
        if (a instanceof LngLat || b instanceof LngLat) {
            return Interpolator.lngLat(a, b);
        }
        else {
            return InterpolatorFrom$1(a, b);
        }
    };

    var MapProjection = {
        _identity: void 0,
        identity: function () {
            if (!MapProjection._identity) {
                MapProjection._identity = new IdentityMapProjection();
            }
            return MapProjection._identity;
        },
        is: function (object) {
            if (typeof object === "object" && object) {
                var projection = object;
                return typeof projection.project === "function"
                    && typeof projection.unproject === "function";
            }
            return false;
        },
    };
    var IdentityMapProjection = (function () {
        function IdentityMapProjection() {
        }
        Object.defineProperty(IdentityMapProjection.prototype, "bounds", {
            get: function () {
                return [LngLat.origin(), LngLat.origin()];
            },
            enumerable: true,
            configurable: true
        });
        IdentityMapProjection.prototype.project = function (lng, lat) {
            var x;
            var y;
            if (typeof lng === "number") {
                x = lng;
                y = lat;
            }
            else {
                var coord = LngLat.fromAny(lng);
                x = coord.lng;
                y = coord.lat;
            }
            return new PointR2(x, y);
        };
        IdentityMapProjection.prototype.unproject = function (x, y) {
            var lng;
            var lat;
            if (typeof x === "number") {
                lng = x;
                lat = y;
            }
            else {
                var point = PointR2.fromAny(x);
                lng = point.x;
                lat = point.y;
            }
            return new LngLat(lng, lat);
        };
        return IdentityMapProjection;
    }());

    var MapView = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var view = object;
                return view instanceof View
                    && typeof view.setProjection === "function"
                    && typeof view.setZoom === "function";
            }
            return false;
        },
    };

    var MapGraphicView = (function (_super) {
        __extends(MapGraphicView, _super);
        function MapGraphicView(key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, key) || this;
            _this._projection = MapProjection.identity();
            _this._hitBounds = null;
            _this._dirtyProjection = true;
            return _this;
        }
        Object.defineProperty(MapGraphicView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        MapGraphicView.prototype.onInsertChildView = function (childView, targetView) {
            if (RenderView.is(childView)) {
                this.setChildViewBounds(childView, this._bounds);
                if (MapView.is(childView)) {
                    this.setChildViewProjection(childView, this._projection);
                    this.setChildViewZoom(childView, this._zoom);
                }
                if (this._culled) {
                    childView.setCulled(true);
                }
            }
        };
        MapGraphicView.prototype.project = function (lng, lat) {
            return this.projection.project.apply(this.projection, arguments);
        };
        MapGraphicView.prototype.unproject = function (x, y) {
            return this.projection.unproject.apply(this.projection, arguments);
        };
        Object.defineProperty(MapGraphicView.prototype, "projection", {
            get: function () {
                return this._projection;
            },
            enumerable: true,
            configurable: true
        });
        MapGraphicView.prototype.setProjection = function (projection) {
            var newProjection = this.willSetProjection(projection);
            if (newProjection !== void 0) {
                projection = newProjection;
            }
            this._projection = projection;
            this._dirtyProjection = true;
            this.onSetProjection(projection);
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (MapView.is(childView)) {
                    this.setChildViewProjection(childView, projection);
                }
            }
            this.didSetProjection(projection);
        };
        MapGraphicView.prototype.willSetProjection = function (projection) {
            var viewController = this._viewController;
            if (viewController) {
                var newProjection = viewController.viewWillSetProjection(projection, this);
                if (newProjection !== void 0) {
                    projection = newProjection;
                }
            }
            var viewObservers = this._viewObservers;
            for (var i = 0, n = viewObservers.length; i < n; i += 1) {
                var viewObserver = viewObservers[i];
                if (viewObserver.viewWillSetProjection) {
                    viewObserver.viewWillSetProjection(projection, this);
                }
            }
        };
        MapGraphicView.prototype.onSetProjection = function (projection) {
        };
        MapGraphicView.prototype.didSetProjection = function (projection) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetProjection) {
                    viewObserver.viewDidSetProjection(projection, this);
                }
            });
        };
        MapGraphicView.prototype.setChildViewProjection = function (childView, projection) {
            childView.setProjection(projection);
        };
        Object.defineProperty(MapGraphicView.prototype, "zoom", {
            get: function () {
                return this._zoom;
            },
            enumerable: true,
            configurable: true
        });
        MapGraphicView.prototype.setZoom = function (zoom) {
            this.willSetZoom(zoom);
            var oldZoom = this._zoom;
            this._zoom = zoom;
            this.onSetZoom(zoom, oldZoom);
            var childViews = this.childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (MapView.is(childView)) {
                    this.setChildViewZoom(childView, zoom);
                }
            }
            this.didSetZoom(zoom, oldZoom);
        };
        MapGraphicView.prototype.willSetZoom = function (zoom) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewWillSetZoom) {
                    viewObserver.viewWillSetZoom(zoom, this);
                }
            });
        };
        MapGraphicView.prototype.onSetZoom = function (newZoom, oldZoom) {
            if (newZoom !== oldZoom) {
                this.setDirty(true);
            }
        };
        MapGraphicView.prototype.didSetZoom = function (newZoom, oldZoom) {
            this.didObserve(function (viewObserver) {
                if (viewObserver.viewDidSetZoom) {
                    viewObserver.viewDidSetZoom(newZoom, oldZoom, this);
                }
            });
        };
        MapGraphicView.prototype.setChildViewZoom = function (childView, zoom) {
            childView.setZoom(zoom);
        };
        MapGraphicView.prototype.onAnimate = function (t) {
            this.projectGeometry();
        };
        MapGraphicView.prototype.didAnimate = function (t) {
            _super.prototype.didAnimate.call(this, t);
            this._dirtyProjection = false;
        };
        MapGraphicView.prototype.onCull = function () {
            var hitBounds = this._hitBounds;
            if (hitBounds !== null) {
                var culled = !this._bounds.intersects(hitBounds);
                this.setCulled(culled);
            }
        };
        MapGraphicView.prototype.projectGeometry = function () {
            var hitBounds = null;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                var childView = childViews[i];
                if (RenderView.is(childView)) {
                    var childHitBounds = childView.hitBounds;
                    if (childHitBounds) {
                        hitBounds = hitBounds ? hitBounds.union(childHitBounds) : childHitBounds;
                    }
                }
            }
            this._hitBounds = hitBounds;
        };
        Object.defineProperty(MapGraphicView.prototype, "hitBounds", {
            get: function () {
                return this._hitBounds;
            },
            enumerable: true,
            configurable: true
        });
        return MapGraphicView;
    }(GraphicView));

    var MapGraphicViewController = (function (_super) {
        __extends(MapGraphicViewController, _super);
        function MapGraphicViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MapGraphicViewController.prototype.project = function (lng, lat) {
            return this.projection.project.apply(this.projection, arguments);
        };
        MapGraphicViewController.prototype.unproject = function (x, y) {
            return this.projection.unproject.apply(this.projection, arguments);
        };
        Object.defineProperty(MapGraphicViewController.prototype, "projection", {
            get: function () {
                var view = this._view;
                return view ? view.projection : MapProjection.identity();
            },
            enumerable: true,
            configurable: true
        });
        MapGraphicViewController.prototype.viewWillSetProjection = function (projection, view) {
        };
        MapGraphicViewController.prototype.viewDidSetProjection = function (projection, view) {
        };
        Object.defineProperty(MapGraphicViewController.prototype, "zoom", {
            get: function () {
                var view = this._view;
                return view ? view.zoom : 0;
            },
            enumerable: true,
            configurable: true
        });
        MapGraphicViewController.prototype.viewWillSetZoom = function (zoom, view) {
        };
        MapGraphicViewController.prototype.viewDidSetZoom = function (newZoom, oldZoom, view) {
        };
        return MapGraphicViewController;
    }(GraphicViewController));

    var MapLayerView = (function (_super) {
        __extends(MapLayerView, _super);
        function MapLayerView(key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, key) || this;
            _this._canvas = _this.createCanvas();
            return _this;
        }
        Object.defineProperty(MapLayerView.prototype, "canvas", {
            get: function () {
                return this._canvas;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MapLayerView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        MapLayerView.prototype.cascadeRender = function (context) {
            var layerContext = this.getContext();
            this.willRender(context, layerContext);
            if (this._dirty) {
                this.onRender(context, layerContext);
                var childViews = this.childViews;
                for (var i = 0, n = childViews.length; i < n; i += 1) {
                    var childView = childViews[i];
                    if (RenderView.is(childView)) {
                        childView.cascadeRender(layerContext);
                    }
                }
            }
            this.didRender(context, layerContext);
        };
        MapLayerView.prototype.willRender = function (context, layerContext) {
            _super.prototype.willRender.call(this, context);
        };
        MapLayerView.prototype.onRender = function (context, layerContext) {
            var bounds = this._bounds;
            layerContext.clearRect(0, 0, bounds.width, bounds.height);
            _super.prototype.onRender.call(this, context);
        };
        MapLayerView.prototype.didRender = function (context, layerContext) {
            this.copyLayerImage(context, layerContext);
            _super.prototype.didRender.call(this, context);
        };
        MapLayerView.prototype.copyLayerImage = function (context, layerContext) {
            var bounds = this._bounds;
            var pixelRatio = this.pixelRatio;
            var imageData = layerContext.getImageData(0, 0, bounds.width * pixelRatio, bounds.height * pixelRatio);
            context.putImageData(imageData, bounds.x * pixelRatio, bounds.y * pixelRatio);
        };
        MapLayerView.prototype.onCull = function () {
        };
        Object.defineProperty(MapLayerView.prototype, "parentTransform", {
            get: function () {
                return Transform.identity();
            },
            enumerable: true,
            configurable: true
        });
        MapLayerView.prototype.willSetBounds = function (bounds) {
            var newBounds = _super.prototype.willSetBounds.call(this, bounds);
            if (newBounds instanceof BoxR2) {
                bounds = newBounds;
            }
            var xMin = Math.round(bounds.xMin);
            var yMin = Math.round(bounds.yMin);
            var xMax = Math.round(bounds.xMax);
            var yMax = Math.round(bounds.yMax);
            return new BoxR2(xMin, yMin, xMax, yMax);
        };
        MapLayerView.prototype.onSetBounds = function (newBounds, oldBounds) {
            if (!newBounds.equals(oldBounds)) {
                this.resizeCanvas(this._canvas, newBounds);
                this.setDirty(true);
            }
        };
        MapLayerView.prototype.setChildViewBounds = function (childView, bounds) {
            if (bounds.x !== 0 || bounds.y !== 0) {
                var width = bounds.width;
                var height = bounds.height;
                bounds = new BoxR2(0, 0, width, height);
            }
            childView.setBounds(bounds);
        };
        MapLayerView.prototype.setChildViewAnchor = function (childView, anchor) {
            var bounds = this._bounds;
            var x = bounds.x;
            var y = bounds.y;
            if (x !== 0 || y !== 0) {
                anchor = new PointR2(anchor.x - x, anchor.y - y);
            }
            childView.setAnchor(anchor);
        };
        MapLayerView.prototype.hitTest = function (x, y, context) {
            var layerContext = this.getContext();
            var bounds = this._bounds;
            x -= bounds.x;
            y -= bounds.y;
            var hit = null;
            var childViews = this._childViews;
            for (var i = childViews.length - 1; i >= 0; i -= 1) {
                var childView = childViews[i];
                if (RenderView.is(childView) && childView.bounds.contains(x, y)) {
                    hit = childView.hitTest(x, y, layerContext);
                    if (hit !== null) {
                        break;
                    }
                }
            }
            return hit;
        };
        MapLayerView.prototype.getContext = function () {
            return this._canvas.getContext("2d");
        };
        MapLayerView.prototype.createCanvas = function () {
            return document.createElement("canvas");
        };
        MapLayerView.prototype.resizeCanvas = function (node, bounds) {
            var width = Math.floor(bounds.width);
            var height = Math.floor(bounds.height);
            var pixelRatio = this.pixelRatio;
            node.width = width * pixelRatio;
            node.height = height * pixelRatio;
            node.style.width = width + "px";
            node.style.height = height + "px";
            var context = this.getContext();
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        };
        return MapLayerView;
    }(MapGraphicView));

    var MapLayerViewController = (function (_super) {
        __extends(MapLayerViewController, _super);
        function MapLayerViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MapLayerViewController;
    }(MapGraphicViewController));

    var MapLineView = (function (_super) {
        __extends(MapLineView, _super);
        function MapLineView(start, end) {
            if (start === void 0) { start = LngLat.origin(); }
            if (end === void 0) { end = LngLat.origin(); }
            var _this = _super.call(this) || this;
            _this.start.setState(start);
            _this.end.setState(end);
            _this._startPoint = PointR2.origin();
            _this._endPoint = PointR2.origin();
            _this._hitWidth = 0;
            return _this;
        }
        Object.defineProperty(MapLineView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        MapLineView.prototype.hitWidth = function (hitWidth) {
            if (hitWidth === void 0) {
                return this._hitWidth;
            }
            else {
                this._hitWidth = hitWidth;
                return this;
            }
        };
        MapLineView.prototype.onAnimate = function (t) {
            var oldStart = this.start.value;
            this.start.onFrame(t);
            var newStart = this.start.value;
            var oldEnd = this.end.value;
            this.end.onFrame(t);
            var newEnd = this.end.value;
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
            if (this._dirtyProjection || oldStart !== newStart || oldEnd !== newEnd) {
                this.projectGeometry();
            }
        };
        MapLineView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderLine(context, bounds, anchor);
            context.restore();
        };
        MapLineView.prototype.renderLine = function (context, bounds, anchor) {
            var stroke = this.stroke.value;
            if (stroke) {
                var strokeWidth = this.strokeWidth.value;
                if (strokeWidth) {
                    var start = this._startPoint;
                    var end = this._endPoint;
                    context.beginPath();
                    context.moveTo(start.x, start.y);
                    context.lineTo(end.x, end.y);
                    var size = Math.min(bounds.width, bounds.height);
                    context.lineWidth = strokeWidth.pxValue(size);
                    context.strokeStyle = stroke.toString();
                    context.stroke();
                }
            }
        };
        MapLineView.prototype.onCull = function () {
            var bounds = this._bounds;
            var start = this._startPoint;
            var end = this._endPoint;
            var invalid = !isFinite(start.x) || isFinite(start.y)
                || !isFinite(end.x) || !isFinite(end.y);
            var culled = invalid || !bounds.intersectsSegment(new SegmentR2(start.x, start.y, end.x, end.y));
            this.setCulled(culled);
        };
        MapLineView.prototype.projectGeometry = function () {
            var start = this.project(this.start.value);
            var end = this.project(this.end.value);
            var anchor = new PointR2((start.x + end.x) / 2, (start.y + end.y) / 2);
            this._startPoint = start;
            this._endPoint = end;
            this._hitBounds = new BoxR2(Math.min(start.x, end.x), Math.min(start.y, end.y), Math.max(start.x, end.x), Math.max(start.y, end.y));
            this.setAnchor(anchor);
        };
        MapLineView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestLine(x, y, context, bounds, anchor);
                context.restore();
            }
            return hit;
        };
        MapLineView.prototype.hitTestLine = function (x, y, context, bounds, anchor) {
            var start = this._startPoint;
            var end = this._endPoint;
            var hitWidth = this._hitWidth;
            var strokeWidth = this.strokeWidth.value;
            if (strokeWidth) {
                var size = Math.min(bounds.width, bounds.height);
                hitWidth = Math.max(hitWidth, strokeWidth.pxValue(size));
            }
            context.beginPath();
            context.moveTo(start.x, start.y);
            context.lineTo(end.x, end.y);
            context.lineWidth = hitWidth;
            if (context.isPointInStroke(x, y)) {
                return this;
            }
            return null;
        };
        MapLineView.fromAny = function (line) {
            if (line instanceof MapLineView) {
                return line;
            }
            else if (typeof line === "object" && line) {
                var view = new MapLineView();
                if (line.key !== void 0) {
                    view.key(line.key);
                }
                if (line.start !== void 0) {
                    view.start(line.start);
                }
                if (line.end !== void 0) {
                    view.end(line.end);
                }
                if (line.stroke !== void 0) {
                    view.stroke(line.stroke);
                }
                if (line.strokeWidth !== void 0) {
                    view.strokeWidth(line.strokeWidth);
                }
                if (line.hitWidth !== void 0) {
                    view.hitWidth(line.hitWidth);
                }
                return view;
            }
            throw new TypeError("" + line);
        };
        __decorate([
            MemberAnimator(LngLat)
        ], MapLineView.prototype, "start", void 0);
        __decorate([
            MemberAnimator(LngLat)
        ], MapLineView.prototype, "end", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], MapLineView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], MapLineView.prototype, "strokeWidth", void 0);
        return MapLineView;
    }(MapGraphicView));

    var MapCircleView = (function (_super) {
        __extends(MapCircleView, _super);
        function MapCircleView(center, radius) {
            if (center === void 0) { center = LngLat.origin(); }
            if (radius === void 0) { radius = Length.zero(); }
            var _this = _super.call(this) || this;
            _this.center.setState(center);
            _this.radius.setState(radius);
            _this._hitRadius = 0;
            return _this;
        }
        Object.defineProperty(MapCircleView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        MapCircleView.prototype.hitRadius = function (hitRadius) {
            if (hitRadius === void 0) {
                return this._hitRadius;
            }
            else {
                this._hitRadius = hitRadius;
                return this;
            }
        };
        MapCircleView.prototype.onAnimate = function (t) {
            var oldCenter = this.center.value;
            this.center.onFrame(t);
            var newCenter = this.center.value;
            this.radius.onFrame(t);
            this.fill.onFrame(t);
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
            if (this._dirtyProjection || oldCenter !== newCenter) {
                this.projectGeometry();
            }
        };
        MapCircleView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderCircle(context, bounds, anchor);
            context.restore();
        };
        MapCircleView.prototype.renderCircle = function (context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            context.beginPath();
            var radius = this.radius.value.pxValue(size);
            context.arc(anchor.x, anchor.y, radius, 0, 2 * Math.PI);
            var fill = this.fill.value;
            if (fill) {
                context.fillStyle = fill.toString();
                context.fill();
            }
            var stroke = this.stroke.value;
            if (stroke) {
                var strokeWidth = this.strokeWidth.value;
                if (strokeWidth) {
                    context.lineWidth = strokeWidth.pxValue(size);
                }
                context.strokeStyle = stroke.toString();
                context.stroke();
            }
        };
        MapCircleView.prototype.onCull = function () {
            var bounds = this._bounds;
            var anchor = this._anchor;
            var size = Math.min(bounds.width, bounds.height);
            var radius = this.radius.value.pxValue(size);
            var invalid = !isFinite(anchor.x) || !isFinite(anchor.y) || !isFinite(radius);
            var culled = invalid || !bounds.intersectsCircle(new CircleR2(anchor.x, anchor.y, radius));
            this.setCulled(culled);
        };
        Object.defineProperty(MapCircleView.prototype, "popoverBounds", {
            get: function () {
                var inversePageTransform = this.pageTransform.inverse();
                var hitBounds = this._hitBounds;
                if (hitBounds !== null) {
                    return hitBounds.transform(inversePageTransform);
                }
                else {
                    var pageAnchor = this.anchor.transform(inversePageTransform);
                    var pageX = Math.round(pageAnchor.x);
                    var pageY = Math.round(pageAnchor.y);
                    return new BoxR2(pageX, pageY, pageX, pageY);
                }
            },
            enumerable: true,
            configurable: true
        });
        MapCircleView.prototype.projectGeometry = function () {
            var bounds = this._bounds;
            var anchor = this.project(this.center.value);
            var size = Math.min(bounds.width, bounds.height);
            var radius = this.radius.value.pxValue(size);
            var hitRadius = Math.max(this._hitRadius, radius);
            this._hitBounds = new BoxR2(anchor.x - hitRadius, anchor.y - hitRadius, anchor.x + hitRadius, anchor.y + hitRadius);
            this.setAnchor(anchor);
        };
        MapCircleView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestCircle(x, y, context, bounds, anchor);
            }
            return hit;
        };
        MapCircleView.prototype.hitTestCircle = function (x, y, context, bounds, anchor) {
            var size = Math.min(bounds.width, bounds.height);
            var radius = this.radius.value.pxValue(size);
            if (this.fill.value) {
                var hitRadius = Math.max(this._hitRadius, radius);
                var dx = anchor.x - x;
                var dy = anchor.y - y;
                if (dx * dx + dy * dy < hitRadius * hitRadius) {
                    return this;
                }
            }
            var strokeWidth = this.strokeWidth.value;
            if (this.stroke.value && strokeWidth) {
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                context.save();
                context.beginPath();
                context.arc(anchor.x, anchor.y, radius, 0, 2 * Math.PI);
                context.lineWidth = strokeWidth.pxValue(size);
                if (context.isPointInStroke(x, y)) {
                    context.restore();
                    return this;
                }
                else {
                    context.restore();
                }
            }
            return null;
        };
        MapCircleView.fromAny = function (circle) {
            if (circle instanceof MapCircleView) {
                return circle;
            }
            else if (typeof circle === "object" && circle) {
                var view = new MapCircleView();
                if (circle.key !== void 0) {
                    view.key(circle.key);
                }
                if (circle.center !== void 0) {
                    view.center(circle.center);
                }
                if (circle.radius !== void 0) {
                    view.radius(circle.radius);
                }
                if (circle.hitRadius !== void 0) {
                    view.hitRadius(circle.hitRadius);
                }
                if (circle.fill !== void 0) {
                    view.fill(circle.fill);
                }
                if (circle.stroke !== void 0) {
                    view.stroke(circle.stroke);
                }
                if (circle.strokeWidth !== void 0) {
                    view.strokeWidth(circle.strokeWidth);
                }
                return view;
            }
            throw new TypeError("" + circle);
        };
        __decorate([
            MemberAnimator(LngLat)
        ], MapCircleView.prototype, "center", void 0);
        __decorate([
            MemberAnimator(Length)
        ], MapCircleView.prototype, "radius", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], MapCircleView.prototype, "fill", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], MapCircleView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], MapCircleView.prototype, "strokeWidth", void 0);
        return MapCircleView;
    }(MapGraphicView));

    var MapPolygonView = (function (_super) {
        __extends(MapPolygonView, _super);
        function MapPolygonView() {
            var _this = _super.call(this) || this;
            _this._coords = [];
            _this._points = [];
            return _this;
        }
        Object.defineProperty(MapPolygonView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MapPolygonView.prototype, "coords", {
            get: function () {
                return this._coords;
            },
            enumerable: true,
            configurable: true
        });
        MapPolygonView.prototype.setCoords = function (coords, tween) {
            var i = 0;
            for (var n = Math.min(this._coords.length, coords.length); i < n; i += 1) {
                var coord = LngLat.fromAny(coords[i]);
                this._coords[i].setState(coord, tween);
            }
            for (var n = coords.length; i < n; i += 1) {
                var coord = LngLat.fromAny(coords[i]);
                this._coords.push(new AnyMemberAnimator(LngLat, this, coord));
                this._points.push(PointR2.origin());
                this.setDirty(true);
            }
            this._coords.length = coords.length;
        };
        Object.defineProperty(MapPolygonView.prototype, "points", {
            get: function () {
                return this._points;
            },
            enumerable: true,
            configurable: true
        });
        MapPolygonView.prototype.appendCoord = function (coord) {
            coord = LngLat.fromAny(coord);
            this._coords.push(new AnyMemberAnimator(LngLat, this, coord));
            this._points.push(PointR2.origin());
            this.setDirty(true);
        };
        MapPolygonView.prototype.insertCoord = function (index, coord) {
            coord = LngLat.fromAny(coord);
            this._coords.splice(index, 0, new AnyMemberAnimator(LngLat, this, coord));
            this._points.splice(index, 0, PointR2.origin());
            this.setDirty(true);
        };
        MapPolygonView.prototype.removeCoord = function (index) {
            this._coords.splice(index, 1);
            this._points.splice(index, 1);
        };
        MapPolygonView.prototype.onAnimate = function (t) {
            var moved = false;
            var coords = this._coords;
            for (var i = 0, n = coords.length; i < n; i += 1) {
                var point = coords[i];
                var oldPoint = point.value;
                point.onFrame(t);
                var newPoint = point.value;
                if (oldPoint !== newPoint) {
                    moved = true;
                }
            }
            this.fill.onFrame(t);
            this.stroke.onFrame(t);
            this.strokeWidth.onFrame(t);
            if (this._dirtyProjection || moved) {
                this.projectGeometry();
            }
        };
        MapPolygonView.prototype.onRender = function (context) {
            context.save();
            var bounds = this._bounds;
            var anchor = this._anchor;
            this.renderPolygon(context, bounds, anchor);
            context.restore();
        };
        MapPolygonView.prototype.renderPolygon = function (context, bounds, anchor) {
            var points = this._points;
            var n = points.length;
            if (n > 0) {
                context.beginPath();
                var start = points[0];
                context.moveTo(start.x, start.y);
                for (var i = 1; i < n; i += 1) {
                    var point = points[i];
                    context.lineTo(point.x, point.y);
                }
                context.closePath();
                var fill = this.fill.value;
                if (fill) {
                    context.fillStyle = fill.toString();
                    context.fill();
                }
                var stroke = this.stroke.value;
                if (stroke) {
                    var strokeWidth = this.strokeWidth.value;
                    if (strokeWidth) {
                        var size = Math.min(bounds.width, bounds.height);
                        context.lineWidth = strokeWidth.pxValue(size);
                        context.strokeStyle = stroke.toString();
                        context.stroke();
                    }
                }
            }
        };
        MapPolygonView.prototype.onCull = function () {
            var hitBounds = this._hitBounds;
            if (hitBounds !== null) {
                var bounds = this._bounds;
                var contained = bounds.xMin - bounds.width <= hitBounds.xMin
                    && hitBounds.xMax <= bounds.xMax + bounds.width
                    && bounds.yMin - bounds.height <= hitBounds.yMin
                    && hitBounds.yMax <= bounds.yMax + bounds.height;
                var culled = !contained || !bounds.intersects(hitBounds);
                this.setCulled(culled);
            }
            else {
                this.setCulled(true);
            }
        };
        MapPolygonView.prototype.projectGeometry = function () {
            var coords = this._coords;
            var points = this._points;
            var n = coords.length;
            var cx = 0;
            var cy = 0;
            var hitBounds = null;
            if (n > 0) {
                var invalid = false;
                var xMin = Infinity;
                var yMin = Infinity;
                var xMax = -Infinity;
                var yMax = -Infinity;
                for (var i = 0; i < n; i += 1) {
                    var coord = coords[i].value;
                    var point = this.project(coord);
                    points[i] = point;
                    cx += point.x;
                    cy += point.y;
                    invalid = invalid || !isFinite(point.x) || !isFinite(point.y);
                    xMin = Math.min(xMin, point.x);
                    yMin = Math.min(yMin, point.y);
                    xMax = Math.max(point.x, xMax);
                    yMax = Math.max(point.y, yMax);
                }
                cx /= n;
                cy /= n;
                if (!invalid) {
                    hitBounds = new BoxR2(xMin, yMin, xMax, yMax);
                }
            }
            this._hitBounds = hitBounds;
            this.setAnchor(new PointR2(cx, cy));
        };
        MapPolygonView.prototype.hitTest = function (x, y, context) {
            var hit = _super.prototype.hitTest.call(this, x, y, context);
            if (hit === null) {
                context.save();
                var pixelRatio = this.pixelRatio;
                x *= pixelRatio;
                y *= pixelRatio;
                var bounds = this._bounds;
                var anchor = this._anchor;
                hit = this.hitTestPolygon(x, y, context, bounds, anchor);
                context.restore();
            }
            return hit;
        };
        MapPolygonView.prototype.hitTestPolygon = function (x, y, context, bounds, anchor) {
            var points = this._points;
            var n = points.length;
            if (n > 0) {
                context.beginPath();
                var start = points[0];
                context.moveTo(start.x, start.y);
                for (var i = 1; i < n; i += 1) {
                    var point = points[i];
                    context.lineTo(point.x, point.y);
                }
                context.closePath();
                if (this.fill.value && context.isPointInPath(x, y)) {
                    return this;
                }
                if (this.stroke.value) {
                    var strokeWidth = this.strokeWidth.value;
                    if (strokeWidth) {
                        var size = Math.min(bounds.width, bounds.height);
                        context.lineWidth = strokeWidth.pxValue(size);
                        if (context.isPointInStroke(x, y)) {
                            return this;
                        }
                    }
                }
            }
            return null;
        };
        MapPolygonView.fromAny = function (polygon) {
            if (polygon instanceof MapPolygonView) {
                return polygon;
            }
            else if (typeof polygon === "object" && polygon) {
                var view = new MapPolygonView();
                if (polygon.key !== void 0) {
                    view.key(polygon.key);
                }
                if (polygon.fill !== void 0) {
                    view.fill(polygon.fill);
                }
                if (polygon.stroke !== void 0) {
                    view.stroke(polygon.stroke);
                }
                if (polygon.strokeWidth !== void 0) {
                    view.strokeWidth(polygon.strokeWidth);
                }
                var coords = polygon.coords;
                if (coords !== void 0) {
                    for (var i = 0, n = coords.length; i < n; i += 1) {
                        view.appendCoord(coords[i]);
                    }
                }
                return view;
            }
            throw new TypeError("" + polygon);
        };
        __decorate([
            MemberAnimator(Color, "inherit")
        ], MapPolygonView.prototype, "fill", void 0);
        __decorate([
            MemberAnimator(Color, "inherit")
        ], MapPolygonView.prototype, "stroke", void 0);
        __decorate([
            MemberAnimator(Length, "inherit")
        ], MapPolygonView.prototype, "strokeWidth", void 0);
        return MapPolygonView;
    }(MapGraphicView));

    var MapboxProjection = (function () {
        function MapboxProjection(map) {
            this._map = map;
        }
        Object.defineProperty(MapboxProjection.prototype, "map", {
            get: function () {
                return this._map;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MapboxProjection.prototype, "bounds", {
            get: function () {
                var mapBounds = this._map.getBounds();
                return [new LngLat(mapBounds.getWest(), mapBounds.getSouth()),
                    new LngLat(mapBounds.getEast(), mapBounds.getNorth())];
            },
            enumerable: true,
            configurable: true
        });
        MapboxProjection.prototype.project = function (lng, lat) {
            var coord;
            if (typeof lng === "number") {
                coord = new mapboxgl.LngLat(lng, lat);
            }
            else {
                coord = lng;
            }
            var _a = this._map.project(coord), x = _a.x, y = _a.y;
            return new PointR2(x, y);
        };
        MapboxProjection.prototype.unproject = function (x, y) {
            var point;
            if (typeof x === "number") {
                point = new mapboxgl.Point(x, y);
            }
            else if (Array.isArray(x)) {
                point = x;
            }
            else {
                point = new mapboxgl.Point(x.x, x.y);
            }
            var _a = this._map.unproject(point), lng = _a.lng, lat = _a.lat;
            return new LngLat(lng, lat);
        };
        return MapboxProjection;
    }());

    var MapboxView = (function (_super) {
        __extends(MapboxView, _super);
        function MapboxView(map, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, key) || this;
            _this.doZoom = _this.doZoom.bind(_this);
            _this.onMapLoad = _this.onMapLoad.bind(_this);
            _this.onMapRender = _this.onMapRender.bind(_this);
            _this.onMapZoom = _this.onMapZoom.bind(_this);
            _this._map = map;
            _this._projection = new MapboxProjection(_this._map);
            _this._zoom = map.getZoom();
            _this._zoomTimer = 0;
            _this.initMap(_this._map);
            return _this;
        }
        Object.defineProperty(MapboxView.prototype, "map", {
            get: function () {
                return this._map;
            },
            enumerable: true,
            configurable: true
        });
        MapboxView.prototype.initMap = function (map) {
            map.on("load", this.onMapLoad);
            map.on("zoom", this.onMapZoom);
            map.on("render", this.onMapRender);
        };
        Object.defineProperty(MapboxView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        MapboxView.prototype.onInsertChildView = function (childView, targetView) {
            _super.prototype.onInsertChildView.call(this, childView, targetView);
            if (RenderView.is(childView)) {
                this.setChildViewBounds(childView, this._bounds);
                if (MapView.is(childView)) {
                    this.setChildViewProjection(childView, this._projection);
                }
                if (this._culled) {
                    childView.setCulled(true);
                }
                else {
                    childView.cascadeCull();
                }
            }
        };
        MapboxView.prototype.throttleZoom = function () {
            if (!this._zoomTimer) {
                this._zoomTimer = setTimeout(this.doZoom, 500);
            }
        };
        MapboxView.prototype.doZoom = function () {
            this._zoomTimer = 0;
            this.setZoom(this._map.getZoom());
        };
        MapboxView.prototype.onMapLoad = function () {
            var map = this._map;
            map.off("load", this.onMapLoad);
        };
        MapboxView.prototype.onMapRender = function () {
            this.setProjection(this._projection);
            var canvasView = this.canvasView;
            if (canvasView) {
                canvasView.animate(true);
            }
        };
        MapboxView.prototype.onMapZoom = function () {
            this.throttleZoom();
        };
        MapboxView.prototype.overlayCanvas = function () {
            if (this._parentView) {
                return this.canvasView;
            }
            else {
                var map = this._map;
                View.fromNode(map.getContainer());
                var canvasContainer = View.fromNode(map.getCanvasContainer());
                var canvas = canvasContainer.append("canvas");
                canvas.append(this);
                return canvas;
            }
        };
        return MapboxView;
    }(MapGraphicView));

    var NavbarView = (function (_super) {
        __extends(NavbarView, _super);
        function NavbarView(node, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, node, key) || this;
            _this.onToggleClick = _this.onToggleClick.bind(_this);
            _this._visibleClass = "navbar-visible";
            return _this;
        }
        Object.defineProperty(NavbarView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavbarView.prototype, "toggleView", {
            get: function () {
                return this.getChildView("toggle");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavbarView.prototype, "menuView", {
            get: function () {
                return this.getChildView("menu");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavbarView.prototype, "visibleClass", {
            get: function () {
                return this._visibleClass;
            },
            set: function (value) {
                this._visibleClass = value;
            },
            enumerable: true,
            configurable: true
        });
        NavbarView.prototype.onInsertChildView = function (childView, targetView) {
            _super.prototype.onInsertChildView.call(this, childView, targetView);
            var childKey = childView.key();
            if (childKey === "toggle") {
                this.onInsertToggleView(childView);
            }
        };
        NavbarView.prototype.onRemoveChildView = function (childView) {
            var childKey = childView.key();
            if (childKey === "toggle") {
                this.onRemoveToggleView(childView);
            }
            _super.prototype.onRemoveChildView.call(this, childView);
        };
        NavbarView.prototype.onInsertToggleView = function (toggleView) {
            toggleView.on("click", this.onToggleClick);
        };
        NavbarView.prototype.onRemoveToggleView = function (toggleView) {
            toggleView.off("click", this.onToggleClick);
        };
        NavbarView.prototype.onToggleClick = function (event) {
            var menuView = this.menuView;
            if (menuView) {
                var classList = menuView.node.classList;
                if (classList.contains(this._visibleClass)) {
                    classList.remove(this._visibleClass);
                }
                else {
                    classList.add(this._visibleClass);
                }
            }
        };
        return NavbarView;
    }(HtmlView));

    var DropdownView = (function (_super) {
        __extends(DropdownView, _super);
        function DropdownView(node, key) {
            if (key === void 0) { key = null; }
            var _this = _super.call(this, node, key) || this;
            _this.onToggleClick = _this.onToggleClick.bind(_this);
            _this._visibleClass = "dropdown-visible";
            return _this;
        }
        Object.defineProperty(DropdownView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropdownView.prototype, "toggleView", {
            get: function () {
                return this.getChildView("toggle");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropdownView.prototype, "menuView", {
            get: function () {
                return this.getChildView("menu");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropdownView.prototype, "visibleClass", {
            get: function () {
                return this._visibleClass;
            },
            set: function (value) {
                this._visibleClass = value;
            },
            enumerable: true,
            configurable: true
        });
        DropdownView.prototype.onInsertChildView = function (childView, targetView) {
            _super.prototype.onInsertChildView.call(this, childView, targetView);
            var childKey = childView.key();
            if (childKey === "toggle") {
                this.onInsertToggleView(childView);
            }
        };
        DropdownView.prototype.onRemoveChildView = function (childView) {
            var childKey = childView.key();
            if (childKey === "toggle") {
                this.onRemoveToggleView(childView);
            }
            _super.prototype.onRemoveChildView.call(this, childView);
        };
        DropdownView.prototype.onInsertToggleView = function (toggleView) {
            toggleView.on("click", this.onToggleClick);
        };
        DropdownView.prototype.onRemoveToggleView = function (toggleView) {
            toggleView.off("click", this.onToggleClick);
        };
        DropdownView.prototype.onToggleClick = function (event) {
            var menuView = this.menuView;
            if (menuView) {
                var classList = menuView.node.classList;
                if (classList.contains(this._visibleClass)) {
                    classList.remove(this._visibleClass);
                }
                else {
                    var appView = this.appView;
                    if (appView) {
                        appView.showPopover(this);
                    }
                }
                event.stopPropagation();
                event.preventDefault();
            }
        };
        Object.defineProperty(DropdownView.prototype, "popoverState", {
            get: function () {
                var menuView = this.menuView;
                if (menuView) {
                    var classList = menuView.node.classList;
                    if (classList.contains(this._visibleClass)) {
                        return "shown";
                    }
                }
                return "hidden";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropdownView.prototype, "popoverView", {
            get: function () {
                return this.menuView;
            },
            enumerable: true,
            configurable: true
        });
        DropdownView.prototype.showPopover = function (tween) {
            var menuView = this.menuView;
            if (menuView) {
                var classList = menuView.node.classList;
                classList.add(this._visibleClass);
            }
        };
        DropdownView.prototype.hidePopover = function (tween) {
            var menuView = this.menuView;
            if (menuView) {
                var classList = menuView.node.classList;
                classList.remove(this._visibleClass);
            }
            var appView = this.appView;
            if (appView) {
                appView.hidePopover(this);
            }
        };
        return DropdownView;
    }(HtmlView));

    var WebAppView = (function (_super) {
        __extends(WebAppView, _super);
        function WebAppView(node, key) {
            if (key === void 0) { key = null; }
            return _super.call(this, node, key) || this;
        }
        Object.defineProperty(WebAppView.prototype, "viewController", {
            get: function () {
                return this._viewController;
            },
            enumerable: true,
            configurable: true
        });
        WebAppView.prototype.materializeTree = function (parentView) {
            if (parentView === void 0) { parentView = this; }
            var childNodes = parentView.node.childNodes;
            for (var i = 0; i < childNodes.length; i += 1) {
                var childNode = childNodes[i];
                var childView = this.materializeNode(parentView, childNode);
                if (childView) {
                    this.materializeTree(childView);
                }
            }
        };
        WebAppView.prototype.materializeNode = function (parentView, childNode) {
            if (childNode.view) {
                return childNode.view;
            }
            else if (childNode instanceof Element) {
                return this.materializeElement(parentView, childNode);
            }
            else if (childNode instanceof Text) {
                return this.materializeText(parentView, childNode);
            }
            else {
                return void 0;
            }
        };
        WebAppView.prototype.materializeElement = function (parentView, childNode) {
            var ViewClass;
            var viewClassName = childNode.getAttribute("swim-view");
            if (viewClassName) {
                var viewClass = WebAppView.eval(viewClassName);
                if (typeof viewClass === "function") {
                    ViewClass = viewClass;
                }
                else {
                    throw new TypeError(viewClassName);
                }
            }
            if (!ViewClass) {
                if (childNode instanceof HTMLElement) {
                    ViewClass = HtmlView;
                }
                else if (childNode instanceof SVGElement) {
                    ViewClass = SvgView;
                }
                else {
                    ViewClass = ElementView;
                }
            }
            var childView = new ViewClass(childNode);
            var key = childNode.getAttribute("slot");
            if (key) {
                childView.key(key);
            }
            WebAppView.bindController(childView);
            parentView.injectChildView(childView, null);
            return childView;
        };
        WebAppView.prototype.materializeText = function (parentView, childNode) {
            return void 0;
        };
        WebAppView.boot = function () {
            var webapps = [];
            if (typeof document !== "undefined") {
                var nodes = document.querySelectorAll("[swim-webapp]");
                for (var i = 0; i < nodes.length; i += 1) {
                    var node = nodes[i];
                    if (node instanceof HTMLElement) {
                        var webapp = WebAppView.bootElement(node);
                        webapps.push(webapp);
                    }
                }
            }
            return webapps;
        };
        WebAppView.bootElement = function (node) {
            var ViewClass;
            var viewClassName = node.getAttribute("swim-webapp");
            if (viewClassName) {
                var viewClass = WebAppView.eval(viewClassName);
                if (typeof viewClass === "function") {
                    ViewClass = viewClass;
                }
                else {
                    throw new TypeError(viewClassName);
                }
            }
            if (!ViewClass) {
                ViewClass = WebAppView;
            }
            var webapp = new ViewClass(node);
            var key = node.getAttribute("slot");
            if (key) {
                webapp.key(key);
            }
            WebAppView.bindController(webapp);
            webapp.cascadeMount();
            webapp.materializeTree();
            return webapp;
        };
        WebAppView.bindController = function (view) {
            var viewControllerName = view.node.getAttribute("swim-controller");
            if (viewControllerName) {
                var viewControllerClass = WebAppView.eval(viewControllerName);
                if (typeof viewControllerClass === "function") {
                    var ViewControllerClass = viewControllerClass;
                    var viewController = new ViewControllerClass();
                    view.setViewController(viewController);
                }
                else {
                    throw new TypeError(viewControllerName);
                }
            }
        };
        WebAppView.eval = function (qname) {
            var value = typeof window !== "undefined" ? window : void 0;
            var idents = qname.split(".");
            for (var i = 0, n = idents.length; value && typeof value === "object" && i < n; i += 1) {
                var ident = idents[i];
                value = value[ident];
            }
            return value;
        };
        return WebAppView;
    }(HtmlAppView));

    var WebAppViewController = (function (_super) {
        __extends(WebAppViewController, _super);
        function WebAppViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return WebAppViewController;
    }(HtmlAppViewController));

    if (typeof document !== "undefined") {
        document.addEventListener("DOMContentLoaded", function (event) {
            WebAppView.boot();
        });
    }

    exports.Absent = Absent;
    exports.AbsentInterpolator = AbsentInterpolator;
    exports.AbstractInlet = AbstractInlet;
    exports.AbstractInoutlet = AbstractInoutlet;
    exports.AbstractMapInlet = AbstractMapInlet;
    exports.AbstractMapInletMapOutlet = AbstractMapInletMapOutlet;
    exports.AbstractMapInletOutlet = AbstractMapInletOutlet;
    exports.AbstractMapInoutlet = AbstractMapInoutlet;
    exports.AbstractMapOutlet = AbstractMapOutlet;
    exports.AbstractOutlet = AbstractOutlet;
    exports.AbstractRecordOutlet = AbstractRecordOutlet;
    exports.AbstractRecordStreamlet = AbstractRecordStreamlet;
    exports.AbstractStreamlet = AbstractStreamlet;
    exports.AffineTransform = AffineTransform;
    exports.AffineTransformInterpolator = AffineTransformInterpolator;
    exports.AffineTransformParser = AffineTransformParser;
    exports.AndOperator = AndOperator;
    exports.AndOutlet = AndOutlet;
    exports.Angle = Angle;
    exports.AngleForm = AngleForm;
    exports.AngleInterpolator = AngleInterpolator;
    exports.AngleMemberAnimator = AngleMemberAnimator;
    exports.AngleParser = AngleParser;
    exports.AnimatedView = AnimatedView;
    exports.Animator = Animator;
    exports.AnyForm = AnyForm;
    exports.AnyMemberAnimator = AnyMemberAnimator;
    exports.AppView = AppView;
    exports.Arc = Arc;
    exports.ArcView = ArcView;
    exports.AreaGraphView = AreaGraphView;
    exports.ArrayInterpolator = ArrayInterpolator;
    exports.AssertException = AssertException;
    exports.Attr = Attr;
    exports.AttrInterpolator = AttrInterpolator;
    exports.AttributeAnimator = AttributeAnimator;
    exports.AttributeString = AttributeString;
    exports.AuthRequest = AuthRequest;
    exports.AuthedResponse = AuthedResponse;
    exports.AxisView = AxisView;
    exports.AxisViewController = AxisViewController;
    exports.BTree = BTree;
    exports.BTreeContext = BTreeContext;
    exports.BTreeLeaf = BTreeLeaf;
    exports.BTreeNode = BTreeNode;
    exports.BTreeNodeCursor = BTreeNodeCursor;
    exports.BTreePage = BTreePage;
    exports.Base10 = Base10;
    exports.Base10IntegerWriter = Base10IntegerWriter;
    exports.Base10NumberParser = Base10NumberParser;
    exports.Base16 = Base16;
    exports.Base16IntegerWriter = Base16IntegerWriter;
    exports.Base16Parser = Base16Parser;
    exports.Base16Writer = Base16Writer;
    exports.Base64 = Base64;
    exports.Base64Parser = Base64Parser;
    exports.Base64Writer = Base64Writer;
    exports.BaseRef = BaseRef;
    exports.Binary = Binary;
    exports.BinaryOperator = BinaryOperator;
    exports.BinaryOperatorInterpolator = BinaryOperatorInterpolator;
    exports.BinaryOutlet = BinaryOutlet;
    exports.BitwiseAndOperator = BitwiseAndOperator;
    exports.BitwiseAndOutlet = BitwiseAndOutlet;
    exports.BitwiseNotOperator = BitwiseNotOperator;
    exports.BitwiseNotOutlet = BitwiseNotOutlet;
    exports.BitwiseOrOperator = BitwiseOrOperator;
    exports.BitwiseOrOutlet = BitwiseOrOutlet;
    exports.BitwiseXorOperator = BitwiseXorOperator;
    exports.BitwiseXorOutlet = BitwiseXorOutlet;
    exports.Bool = Bool;
    exports.BooleanAttributeAnimator = BooleanAttributeAnimator;
    exports.BooleanForm = BooleanForm;
    exports.BooleanMemberAnimator = BooleanMemberAnimator;
    exports.BottomAxisView = BottomAxisView;
    exports.BottomTickView = BottomTickView;
    exports.BoxR2 = BoxR2;
    exports.BoxR2Interpolator = BoxR2Interpolator;
    exports.BoxShadow = BoxShadow;
    exports.BoxShadowForm = BoxShadowForm;
    exports.BoxShadowParser = BoxShadowParser;
    exports.BoxShadowStyleAnimator = BoxShadowStyleAnimator;
    exports.BridgeFunc = BridgeFunc;
    exports.BubblePlotView = BubblePlotView;
    exports.CanvasView = CanvasView;
    exports.CanvasViewController = CanvasViewController;
    exports.ChartView = ChartView;
    exports.ChartViewController = ChartViewController;
    exports.ChildAnimator = ChildAnimator;
    exports.ChildrenSelector = ChildrenSelector;
    exports.CircleR2 = CircleR2;
    exports.CircleR2Interpolator = CircleR2Interpolator;
    exports.Color = Color;
    exports.ColorAttributeAnimator = ColorAttributeAnimator;
    exports.ColorChannel = ColorChannel;
    exports.ColorChannelParser = ColorChannelParser;
    exports.ColorForm = ColorForm;
    exports.ColorInterpolator = ColorInterpolator;
    exports.ColorMemberAnimator = ColorMemberAnimator;
    exports.ColorOrStringAttributeAnimator = ColorOrStringAttributeAnimator;
    exports.ColorOrStringStyleAnimator = ColorOrStringStyleAnimator;
    exports.ColorParser = ColorParser;
    exports.ColorStyleAnimator = ColorStyleAnimator;
    exports.CommandMessage = CommandMessage;
    exports.ConditionalOperator = ConditionalOperator;
    exports.ConditionalOperatorInterpolator = ConditionalOperatorInterpolator;
    exports.ConditionalOutlet = ConditionalOutlet;
    exports.Constrain = Constrain;
    exports.ConstrainBinding = ConstrainBinding;
    exports.ConstrainConstant = ConstrainConstant;
    exports.ConstrainProduct = ConstrainProduct;
    exports.ConstrainSum = ConstrainSum;
    exports.ConstrainTerm = ConstrainTerm;
    exports.ConstrainVariable = ConstrainVariable;
    exports.Constraint = Constraint;
    exports.ConstraintDummy = ConstraintDummy;
    exports.ConstraintError = ConstraintError;
    exports.ConstraintInvalid = ConstraintInvalid;
    exports.ConstraintMap = ConstraintMap;
    exports.ConstraintSlack = ConstraintSlack;
    exports.ConstraintSolver = ConstraintSolver;
    exports.ConstraintStrength = ConstraintStrength;
    exports.ConstraintSymbol = ConstraintSymbol;
    exports.ContinuousScale = ContinuousScale;
    exports.Cursor = Cursor;
    exports.CursorArray = CursorArray;
    exports.CursorEmpty = CursorEmpty;
    exports.CursorUnary = CursorUnary;
    exports.CustomEvent = CustomEventConstructor;
    exports.Data = Data;
    exports.Dataflow = Dataflow;
    exports.DateTime = DateTime;
    exports.DateTimeForm = DateTimeForm;
    exports.DateTimeFormat = DateTimeFormat;
    exports.DateTimeInterpolator = DateTimeInterpolator;
    exports.DateTimeLocale = DateTimeLocale;
    exports.DateTimeParser = DateTimeParser;
    exports.DateTimeSpecifiers = DateTimeSpecifiers;
    exports.DatumView = DatumView;
    exports.DayInterval = DayInterval;
    exports.DayOfMonthFormat = DayOfMonthFormat;
    exports.DayOfMonthParser = DayOfMonthParser;
    exports.DeauthRequest = DeauthRequest;
    exports.DeauthedResponse = DeauthedResponse;
    exports.DegAngle = DegAngle;
    exports.DescendantsSelector = DescendantsSelector;
    exports.Diagnostic = Diagnostic;
    exports.DialView = DialView;
    exports.DivideOperator = DivideOperator;
    exports.DivideOutlet = DivideOutlet;
    exports.Downlink = Downlink;
    exports.DownlinkModel = DownlinkModel;
    exports.DownlinkRecord = DownlinkRecord;
    exports.DownlinkStreamlet = DownlinkStreamlet;
    exports.DownlinkTransmuter = DownlinkTransmuter;
    exports.DropdownView = DropdownView;
    exports.Ease = Ease;
    exports.EaseForm = EaseForm;
    exports.ElementView = ElementView;
    exports.ElementViewController = ElementViewController;
    exports.EmLength = EmLength;
    exports.Envelope = Envelope;
    exports.EqOperator = EqOperator;
    exports.EqOutlet = EqOutlet;
    exports.EventDownlink = EventDownlink;
    exports.EventDownlinkModel = EventDownlinkModel;
    exports.EventMessage = EventMessage;
    exports.Expression = Expression;
    exports.Extant = Extant;
    exports.Field = Field;
    exports.FillView = FillView;
    exports.FilterFieldsCombinator = FilterFieldsCombinator;
    exports.FilterFieldsOperator = FilterFieldsOperator;
    exports.FilterInterval = FilterInterval;
    exports.FilterSelector = FilterSelector;
    exports.Font = Font;
    exports.FontFamily = FontFamily;
    exports.FontFamilyParser = FontFamilyParser;
    exports.FontFamilyStyleAnimator = FontFamilyStyleAnimator;
    exports.FontForm = FontForm;
    exports.FontMemberAnimator = FontMemberAnimator;
    exports.FontParser = FontParser;
    exports.FontSize = FontSize;
    exports.Form = Form;
    exports.FormException = FormException;
    exports.Format = Format;
    exports.FrameAnimator = FrameAnimator;
    exports.FromAny = FromAny;
    exports.Func = Func;
    exports.GaugeView = GaugeView;
    exports.GeOperator = GeOperator;
    exports.GeOutlet = GeOutlet;
    exports.GetAttrSelector = GetAttrSelector;
    exports.GetItemSelector = GetItemSelector;
    exports.GetOutlet = GetOutlet;
    exports.GetSelector = GetSelector;
    exports.GradAngle = GradAngle;
    exports.GraphView = GraphView;
    exports.GraphViewController = GraphViewController;
    exports.GraphicView = GraphicView;
    exports.GraphicViewController = GraphicViewController;
    exports.GtOperator = GtOperator;
    exports.GtOutlet = GtOutlet;
    exports.HashGenCacheMap = HashGenCacheMap;
    exports.HashGenCacheSet = HashGenCacheSet;
    exports.HexColorParser = HexColorParser;
    exports.HorizontalScaleGesture = HorizontalScaleGesture;
    exports.Host = Host;
    exports.HostAddressed = HostAddressed;
    exports.HostRef = HostRef;
    exports.Hour12Format = Hour12Format;
    exports.Hour12Parser = Hour12Parser;
    exports.Hour24Format = Hour24Format;
    exports.Hour24Parser = Hour24Parser;
    exports.HourInterval = HourInterval;
    exports.HslColor = HslColor;
    exports.HslColorInterpolator = HslColorInterpolator;
    exports.HslColorParser = HslColorParser;
    exports.HtmlAppView = HtmlAppView;
    exports.HtmlAppViewController = HtmlAppViewController;
    exports.HtmlView = HtmlView;
    exports.HtmlViewController = HtmlViewController;
    exports.IdentityColorInterpolator = IdentityColorInterpolator;
    exports.IdentitySelector = IdentitySelector;
    exports.IdentityShapeInterpolator = IdentityShapeInterpolator;
    exports.IdentityTransform = IdentityTransform;
    exports.IdentityTransformInterpolator = IdentityTransformInterpolator;
    exports.In = In;
    exports.Inlet = Inlet;
    exports.InletDescriptor = InletDescriptor;
    exports.Inout = Inout;
    exports.Input = Input;
    exports.InputBuffer = InputBuffer;
    exports.InputException = InputException;
    exports.InputSettings = InputSettings;
    exports.Interpolator = Interpolator;
    exports.InterpolatorForm = InterpolatorForm;
    exports.InterpolatorInterpolator = InterpolatorInterpolator;
    exports.InterpolatorMap = InterpolatorMap;
    exports.Interpreter = Interpreter;
    exports.InterpreterException = InterpreterException;
    exports.InterpreterSettings = InterpreterSettings;
    exports.InvokeOperator = InvokeOperator;
    exports.InvokeOperatorInterpolator = InvokeOperatorInterpolator;
    exports.InvokeOutlet = InvokeOutlet;
    exports.Item = Item;
    exports.ItemForm = ItemForm;
    exports.KeyOutlet = KeyOutlet;
    exports.KeysCursor = KeysCursor;
    exports.KeysSelector = KeysSelector;
    exports.LambdaFunc = LambdaFunc;
    exports.LaneAddressed = LaneAddressed;
    exports.LaneRef = LaneRef;
    exports.LayerView = LayerView;
    exports.LayerViewController = LayerViewController;
    exports.LayoutAnchor = LayoutAnchor;
    exports.LayoutManager = LayoutManager;
    exports.LayoutSolver = LayoutSolver;
    exports.LayoutView = LayoutView;
    exports.LeOperator = LeOperator;
    exports.LeOutlet = LeOutlet;
    exports.LeftAxisView = LeftAxisView;
    exports.LeftTickView = LeftTickView;
    exports.Length = Length;
    exports.LengthAttributeAnimator = LengthAttributeAnimator;
    exports.LengthForm = LengthForm;
    exports.LengthInterpolator = LengthInterpolator;
    exports.LengthMemberAnimator = LengthMemberAnimator;
    exports.LengthOrStringAttributeAnimator = LengthOrStringAttributeAnimator;
    exports.LengthOrStringStyleAnimator = LengthOrStringStyleAnimator;
    exports.LengthParser = LengthParser;
    exports.LengthStyleAnimator = LengthStyleAnimator;
    exports.LineGraphView = LineGraphView;
    exports.LineHeight = LineHeight;
    exports.LineHeightStyleAnimator = LineHeightStyleAnimator;
    exports.LinearScale = LinearScale;
    exports.LinearScaleInterpolator = LinearScaleInterpolator;
    exports.LinkAddressed = LinkAddressed;
    exports.LinkRequest = LinkRequest;
    exports.LinkedResponse = LinkedResponse;
    exports.ListDownlink = ListDownlink;
    exports.ListDownlinkModel = ListDownlinkModel;
    exports.ListDownlinkRecord = ListDownlinkRecord;
    exports.LiteralSelector = LiteralSelector;
    exports.LngLat = LngLat;
    exports.LngLatInterpolator = LngLatInterpolator;
    exports.LtOperator = LtOperator;
    exports.LtOutlet = LtOutlet;
    exports.MapCircleView = MapCircleView;
    exports.MapDownlink = MapDownlink;
    exports.MapDownlinkModel = MapDownlinkModel;
    exports.MapDownlinkRecord = MapDownlinkRecord;
    exports.MapFieldValuesCombinator = MapFieldValuesCombinator;
    exports.MapFieldValuesOperator = MapFieldValuesOperator;
    exports.MapGraphicView = MapGraphicView;
    exports.MapGraphicViewController = MapGraphicViewController;
    exports.MapInlet = MapInlet;
    exports.MapInput = MapInput;
    exports.MapLayerView = MapLayerView;
    exports.MapLayerViewController = MapLayerViewController;
    exports.MapLineView = MapLineView;
    exports.MapOutlet = MapOutlet;
    exports.MapOutput = MapOutput;
    exports.MapPolygonView = MapPolygonView;
    exports.MapProjection = MapProjection;
    exports.MapValueCombinator = MapValueCombinator;
    exports.MapValueOperator = MapValueOperator;
    exports.MapView = MapView;
    exports.MapboxProjection = MapboxProjection;
    exports.MapboxView = MapboxView;
    exports.Mark = Mark;
    exports.MathModule = MathModule;
    exports.MemberAnimator = MemberAnimator;
    exports.MemoizeMapCombinator = MemoizeMapCombinator;
    exports.MemoizeValueCombinator = MemoizeValueCombinator;
    exports.MillisecondFormat = MillisecondFormat;
    exports.MillisecondInterval = MillisecondInterval;
    exports.MillisecondParser = MillisecondParser;
    exports.MillisecondsInterval = MillisecondsInterval;
    exports.MinusOperator = MinusOperator;
    exports.MinusOutlet = MinusOutlet;
    exports.MinuteFormat = MinuteFormat;
    exports.MinuteInterval = MinuteInterval;
    exports.MinuteParser = MinuteParser;
    exports.ModuloOperator = ModuloOperator;
    exports.ModuloOutlet = ModuloOutlet;
    exports.MonthFormat = MonthFormat;
    exports.MonthInterval = MonthInterval;
    exports.MonthOfYearFormat = MonthOfYearFormat;
    exports.MonthOfYearParser = MonthOfYearParser;
    exports.MonthParser = MonthParser;
    exports.Multitouch = Multitouch;
    exports.MultitouchEvent = MultitouchEvent;
    exports.MultitouchGhost = MultitouchGhost;
    exports.MultitouchMouse = MultitouchMouse;
    exports.MultitouchPointer = MultitouchPointer;
    exports.MultitouchTouch = MultitouchTouch;
    exports.MultitouchTrack = MultitouchTrack;
    exports.Murmur3 = Murmur3;
    exports.NativeOrder = NativeOrder;
    exports.NavbarView = NavbarView;
    exports.NeOperator = NeOperator;
    exports.NeOutlet = NeOutlet;
    exports.NegativeOperator = NegativeOperator;
    exports.NegativeOutlet = NegativeOutlet;
    exports.NodeCursor = NodeCursor;
    exports.NodeRef = NodeRef;
    exports.NodeView = NodeView;
    exports.NodeViewController = NodeViewController;
    exports.NotOperator = NotOperator;
    exports.NotOutlet = NotOutlet;
    exports.Num = Num;
    exports.NumInterpolator = NumInterpolator;
    exports.NumberAttributeAnimator = NumberAttributeAnimator;
    exports.NumberForm = NumberForm;
    exports.NumberInterpolator = NumberInterpolator;
    exports.NumberMemberAnimator = NumberMemberAnimator;
    exports.NumberOrStringAttributeAnimator = NumberOrStringAttributeAnimator;
    exports.NumberOrStringStyleAnimator = NumberOrStringStyleAnimator;
    exports.NumberStyleAnimator = NumberStyleAnimator;
    exports.NumberTickGenerator = NumberTickGenerator;
    exports.ObjectMemberAnimator = ObjectMemberAnimator;
    exports.Objects = Objects;
    exports.Operator = Operator;
    exports.OrOperator = OrOperator;
    exports.OrOutlet = OrOutlet;
    exports.Out = Out;
    exports.Outlet = Outlet;
    exports.OutletDescriptor = OutletDescriptor;
    exports.OutletInlet = OutletInlet;
    exports.OutletMapInlet = OutletMapInlet;
    exports.Output = Output;
    exports.OutputBuffer = OutputBuffer;
    exports.OutputException = OutputException;
    exports.OutputSettings = OutputSettings;
    exports.OutputStyle = OutputStyle;
    exports.Parser = Parser;
    exports.ParserException = ParserException;
    exports.PathContext = PathContext;
    exports.PatternFormat = PatternFormat;
    exports.PatternParser = PatternParser;
    exports.PctLength = PctLength;
    exports.PeriodFormat = PeriodFormat;
    exports.PeriodParser = PeriodParser;
    exports.PieView = PieView;
    exports.PlotView = PlotView;
    exports.PlotViewController = PlotViewController;
    exports.PlusOperator = PlusOperator;
    exports.PlusOutlet = PlusOutlet;
    exports.PointR2 = PointR2;
    exports.PointR2Interpolator = PointR2Interpolator;
    exports.Popover = Popover;
    exports.PopoverView = PopoverView;
    exports.PopoverViewController = PopoverViewController;
    exports.PositiveOperator = PositiveOperator;
    exports.PositiveOutlet = PositiveOutlet;
    exports.PropertyAnimator = PropertyAnimator;
    exports.PxLength = PxLength;
    exports.R2Shape = R2Shape;
    exports.RadAngle = RadAngle;
    exports.Random = Random;
    exports.Recon = Recon;
    exports.ReconParser = ReconParser;
    exports.ReconStructureParser = ReconStructureParser;
    exports.ReconStructureWriter = ReconStructureWriter;
    exports.ReconWriter = ReconWriter;
    exports.Record = Record;
    exports.RecordFieldUpdater = RecordFieldUpdater;
    exports.RecordInterpolator = RecordInterpolator;
    exports.RecordMap = RecordMap;
    exports.RecordMapView = RecordMapView;
    exports.RecordModel = RecordModel;
    exports.RecordOutlet = RecordOutlet;
    exports.RecordScope = RecordScope;
    exports.RecordStreamlet = RecordStreamlet;
    exports.Rect = Rect;
    exports.RectView = RectView;
    exports.ReduceFieldsCombinator = ReduceFieldsCombinator;
    exports.ReduceFieldsOperator = ReduceFieldsOperator;
    exports.RemLength = RemLength;
    exports.RemoteHost = RemoteHost;
    exports.RenderView = RenderView;
    exports.ResizeObserver = ResizeObserver;
    exports.RgbColor = RgbColor;
    exports.RgbColorInterpolator = RgbColorInterpolator;
    exports.RgbColorParser = RgbColorParser;
    exports.RightAxisView = RightAxisView;
    exports.RightTickView = RightTickView;
    exports.RotateTransform = RotateTransform;
    exports.RotateTransformInterpolator = RotateTransformInterpolator;
    exports.RotateTransformParser = RotateTransformParser;
    exports.STree = STree;
    exports.STreeContext = STreeContext;
    exports.STreeLeaf = STreeLeaf;
    exports.STreeNode = STreeNode;
    exports.STreeNodeCursor = STreeNodeCursor;
    exports.STreePage = STreePage;
    exports.Scale = Scale;
    exports.ScaleForm = ScaleForm;
    exports.ScaleGesture = ScaleGesture;
    exports.ScaleGestureEvent = ScaleGestureEvent;
    exports.ScaleInterpolator = ScaleInterpolator;
    exports.ScaleTransform = ScaleTransform;
    exports.ScaleTransformInterpolator = ScaleTransformInterpolator;
    exports.ScaleTransformParser = ScaleTransformParser;
    exports.SecondFormat = SecondFormat;
    exports.SecondInterval = SecondInterval;
    exports.SecondParser = SecondParser;
    exports.SegmentR2 = SegmentR2;
    exports.SegmentR2Interpolator = SegmentR2Interpolator;
    exports.Selector = Selector;
    exports.Severity = Severity;
    exports.Shape = Shape;
    exports.ShapeInterpolator = ShapeInterpolator;
    exports.ShortMonthFormat = ShortMonthFormat;
    exports.ShortMonthParser = ShortMonthParser;
    exports.ShortWeekdayFormat = ShortWeekdayFormat;
    exports.ShortWeekdayParser = ShortWeekdayParser;
    exports.SkewTransform = SkewTransform;
    exports.SkewTransformInterpolator = SkewTransformInterpolator;
    exports.SkewTransformParser = SkewTransformParser;
    exports.SliceView = SliceView;
    exports.Slot = Slot;
    exports.SlotInterpolator = SlotInterpolator;
    exports.Span = Span;
    exports.StepInterpolator = StepInterpolator;
    exports.Streamlet = Streamlet;
    exports.StreamletException = StreamletException;
    exports.StreamletInlet = StreamletInlet;
    exports.StreamletInoutlet = StreamletInoutlet;
    exports.StreamletOutlet = StreamletOutlet;
    exports.StreamletScope = StreamletScope;
    exports.StringAttributeAnimator = StringAttributeAnimator;
    exports.StringForm = StringForm;
    exports.StringMemberAnimator = StringMemberAnimator;
    exports.StringStyleAnimator = StringStyleAnimator;
    exports.StrokeView = StrokeView;
    exports.StructureInterpolator = StructureInterpolator;
    exports.StyleAnimator = StyleAnimator;
    exports.StyleString = StyleString;
    exports.StyleValue = StyleValue;
    exports.StyleValueForm = StyleValueForm;
    exports.StyleValueParser = StyleValueParser;
    exports.SvgView = SvgView;
    exports.SvgViewController = SvgViewController;
    exports.SyncRequest = SyncRequest;
    exports.SyncedResponse = SyncedResponse;
    exports.Tag = Tag;
    exports.TagForm = TagForm;
    exports.Text = Text$1;
    exports.TextRun = TextRun;
    exports.TextRunView = TextRunView;
    exports.TextView = TextView;
    exports.TextViewController = TextViewController;
    exports.TickGenerator = TickGenerator;
    exports.TickView = TickView;
    exports.TimeInterval = TimeInterval;
    exports.TimeScale = TimeScale;
    exports.TimeScaleInterpolator = TimeScaleInterpolator;
    exports.TimeTickGenerator = TimeTickGenerator;
    exports.TimeZone = TimeZone;
    exports.TimeZoneForm = TimeZoneForm;
    exports.TimesOperator = TimesOperator;
    exports.TimesOutlet = TimesOutlet;
    exports.ToAny = ToAny;
    exports.TopAxisView = TopAxisView;
    exports.TopTickView = TopTickView;
    exports.Transform = Transform;
    exports.TransformAttributeAnimator = TransformAttributeAnimator;
    exports.TransformForm = TransformForm;
    exports.TransformInterpolator = TransformInterpolator;
    exports.TransformList = TransformList;
    exports.TransformListInterpolator = TransformListInterpolator;
    exports.TransformListParser = TransformListParser;
    exports.TransformMemberAnimator = TransformMemberAnimator;
    exports.TransformParser = TransformParser;
    exports.TransformStyleAnimator = TransformStyleAnimator;
    exports.Transition = Transition;
    exports.TransitionForm = TransitionForm;
    exports.TranslateTransform = TranslateTransform;
    exports.TranslateTransformInterpolator = TranslateTransformInterpolator;
    exports.TranslateTransformParser = TranslateTransformParser;
    exports.Transmuter = Transmuter;
    exports.TurnAngle = TurnAngle;
    exports.TweenAnimator = TweenAnimator;
    exports.TweenChildAnimator = TweenChildAnimator;
    exports.TweenFrameAnimator = TweenFrameAnimator;
    exports.TypesetView = TypesetView;
    exports.UnaryOperator = UnaryOperator;
    exports.UnaryOperatorInterpolator = UnaryOperatorInterpolator;
    exports.UnaryOutlet = UnaryOutlet;
    exports.Unicode = Unicode;
    exports.UnitForm = UnitForm;
    exports.UnitTimeInterval = UnitTimeInterval;
    exports.UnitlessLength = UnitlessLength;
    exports.UnlinkRequest = UnlinkRequest;
    exports.UnlinkedResponse = UnlinkedResponse;
    exports.Uri = Uri;
    exports.UriAbsoluteParser = UriAbsoluteParser;
    exports.UriAuthority = UriAuthority;
    exports.UriAuthorityParser = UriAuthorityParser;
    exports.UriCache = UriCache;
    exports.UriException = UriException;
    exports.UriForm = UriForm;
    exports.UriFragment = UriFragment;
    exports.UriFragmentParser = UriFragmentParser;
    exports.UriHost = UriHost;
    exports.UriHostAddressParser = UriHostAddressParser;
    exports.UriHostIPv4 = UriHostIPv4;
    exports.UriHostIPv6 = UriHostIPv6;
    exports.UriHostLiteralParser = UriHostLiteralParser;
    exports.UriHostName = UriHostName;
    exports.UriHostParser = UriHostParser;
    exports.UriHostUndefined = UriHostUndefined;
    exports.UriParser = UriParser;
    exports.UriPath = UriPath;
    exports.UriPathBuilder = UriPathBuilder;
    exports.UriPathEmpty = UriPathEmpty;
    exports.UriPathParser = UriPathParser;
    exports.UriPathSegment = UriPathSegment;
    exports.UriPathSlash = UriPathSlash;
    exports.UriPort = UriPort;
    exports.UriPortParser = UriPortParser;
    exports.UriQuery = UriQuery;
    exports.UriQueryBuilder = UriQueryBuilder;
    exports.UriQueryParam = UriQueryParam;
    exports.UriQueryParser = UriQueryParser;
    exports.UriQueryUndefined = UriQueryUndefined;
    exports.UriScheme = UriScheme;
    exports.UriSchemeParser = UriSchemeParser;
    exports.UriUser = UriUser;
    exports.UriUserParser = UriUserParser;
    exports.Utf8 = Utf8;
    exports.UtfErrorMode = UtfErrorMode;
    exports.Value = Value;
    exports.ValueBuilder = ValueBuilder;
    exports.ValueCursor = ValueCursor;
    exports.ValueDownlink = ValueDownlink;
    exports.ValueDownlinkModel = ValueDownlinkModel;
    exports.ValueDownlinkRecord = ValueDownlinkRecord;
    exports.ValueEntryCursor = ValueEntryCursor;
    exports.ValueForm = ValueForm;
    exports.ValueInput = ValueInput;
    exports.ValueInterpolator = ValueInterpolator;
    exports.ValueOutput = ValueOutput;
    exports.ValuesCursor = ValuesCursor;
    exports.ValuesSelector = ValuesSelector;
    exports.VectorR2 = VectorR2;
    exports.VerticalScaleGesture = VerticalScaleGesture;
    exports.View = View;
    exports.ViewController = ViewController;
    exports.WarpClient = WarpClient;
    exports.WatchFieldsCombinator = WatchFieldsCombinator;
    exports.WatchFieldsOperator = WatchFieldsOperator;
    exports.WatchValueCombinator = WatchValueCombinator;
    exports.WatchValueOperator = WatchValueOperator;
    exports.WebAppView = WebAppView;
    exports.WebAppViewController = WebAppViewController;
    exports.WebSocketHost = WebSocketHost;
    exports.WeekInterval = WeekInterval;
    exports.WeekdayFormat = WeekdayFormat;
    exports.WeekdayParser = WeekdayParser;
    exports.Writer = Writer;
    exports.WriterException = WriterException;
    exports.YearFormat = YearFormat;
    exports.YearInterval = YearInterval;
    exports.YearParser = YearParser;
    exports.YearsInterval = YearsInterval;
    exports.assert = assert;
    exports.authenticate = authenticate;
    exports.client = client;
    exports.command = command;
    exports.downlink = downlink;
    exports.downlinkList = downlinkList;
    exports.downlinkMap = downlinkMap;
    exports.downlinkValue = downlinkValue;
    exports.hostRef = hostRef;
    exports.isOnline = isOnline;
    exports.keepOnline = keepOnline;
    exports.laneRef = laneRef;
    exports.nodeRef = nodeRef;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=swim-system.js.map